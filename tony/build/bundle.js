/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/Tone/build/Tone.js":
/*!*****************************************!*\
  !*** ./node_modules/Tone/build/Tone.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj){if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}(function(root,factory){//UMD
if(true){!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return factory();}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else {}})(this,function(){"use strict";var Tone;//constructs the main Tone object
function Main(func){Tone=func();}//invokes each of the modules with the main Tone object as the argument
function Module(func){func(Tone);}/**
	 *  Tone.js
	 *  @author Yotam Mann
	 *  @license http://opensource.org/licenses/MIT MIT License
	 *  @copyright 2014-2018 Yotam Mann
	 */Main(function(){///////////////////////////////////////////////////////////////////////////
//	TONE
///////////////////////////////////////////////////////////////////////////
/**
		 *  @class  Tone is the base class of all other classes.
		 *  @constructor
		 */var Tone=function Tone(){if(!(this instanceof Tone)){throw new Error('constructor needs to be called with the \'new\' keyword');}};/**
		 *  @memberOf Tone#
		 *  @returns {String} returns the name of the class as a string
		 */Tone.prototype.toString=function(){for(var className in Tone){var isLetter=className[0].match(/^[A-Z]$/);var sameConstructor=Tone[className]===this.constructor;if(Tone.isFunction(Tone[className])&&isLetter&&sameConstructor){return className;}}return'Tone';};/**
		 *  @memberOf Tone#
		 *  disconnect and dispose
		 *  @returns {Tone} this
		 */Tone.prototype.dispose=function(){return this;};///////////////////////////////////////////////////////////////////////////
//	GET/SET
///////////////////////////////////////////////////////////////////////////
/**
		 *  Set the parameters at once. Either pass in an
		 *  object mapping parameters to values, or to set a
		 *  single parameter, by passing in a string and value.
		 *  The last argument is an optional ramp time which
		 *  will ramp any signal values to their destination value
		 *  over the duration of the rampTime.
		 *  @param {Object|String} params
		 *  @param {Number=} value
		 *  @param {Time=} rampTime
		 *  @returns {Tone} this
		 *  @memberOf Tone#
		 *  @example
		 * //set values using an object
		 * filter.set({
		 * 	"frequency" : 300,
		 * 	"type" : highpass
		 * });
		 *  @example
		 * filter.set("type", "highpass");
		 *  @example
		 * //ramp to the value 220 over 3 seconds.
		 * oscillator.set({
		 * 	"frequency" : 220
		 * }, 3);
		 */Tone.prototype.set=function(params,value,rampTime){if(Tone.isObject(params)){rampTime=value;}else if(Tone.isString(params)){var tmpObj={};tmpObj[params]=value;params=tmpObj;}paramLoop:for(var attr in params){value=params[attr];var parent=this;if(attr.indexOf('.')!==-1){var attrSplit=attr.split('.');for(var i=0;i<attrSplit.length-1;i++){parent=parent[attrSplit[i]];if(parent instanceof Tone){attrSplit.splice(0,i+1);var innerParam=attrSplit.join('.');parent.set(innerParam,value);continue paramLoop;}}attr=attrSplit[attrSplit.length-1];}var param=parent[attr];if(Tone.isUndef(param)){continue;}if(Tone.Signal&&param instanceof Tone.Signal||Tone.Param&&param instanceof Tone.Param){if(param.value!==value){if(Tone.isUndef(rampTime)){param.value=value;}else{param.rampTo(value,rampTime);}}}else if(param instanceof AudioParam){if(param.value!==value){param.value=value;}}else if(Tone.TimeBase&&param instanceof Tone.TimeBase){parent[attr]=value;}else if(param instanceof Tone){param.set(value);}else if(param!==value){parent[attr]=value;}}return this;};/**
		 *  Get the object's attributes. Given no arguments get
		 *  will return all available object properties and their corresponding
		 *  values. Pass in a single attribute to retrieve or an array
		 *  of attributes. The attribute strings can also include a "."
		 *  to access deeper properties.
		 *  @memberOf Tone#
		 *  @example
		 * osc.get();
		 * //returns {"type" : "sine", "frequency" : 440, ...etc}
		 *  @example
		 * osc.get("type");
		 * //returns { "type" : "sine"}
		 * @example
		 * //use dot notation to access deep properties
		 * synth.get(["envelope.attack", "envelope.release"]);
		 * //returns {"envelope" : {"attack" : 0.2, "release" : 0.4}}
		 *  @param {Array=|string|undefined} params the parameters to get, otherwise will return
		 *  					                  all available.
		 *  @returns {Object}
		 */Tone.prototype.get=function(params){if(Tone.isUndef(params)){params=this._collectDefaults(this.constructor);}else if(Tone.isString(params)){params=[params];}var ret={};for(var i=0;i<params.length;i++){var attr=params[i];var parent=this;var subRet=ret;if(attr.indexOf('.')!==-1){var attrSplit=attr.split('.');for(var j=0;j<attrSplit.length-1;j++){var subAttr=attrSplit[j];subRet[subAttr]=subRet[subAttr]||{};subRet=subRet[subAttr];parent=parent[subAttr];}attr=attrSplit[attrSplit.length-1];}var param=parent[attr];if(Tone.isObject(params[attr])){subRet[attr]=param.get();}else if(Tone.Signal&&param instanceof Tone.Signal){subRet[attr]=param.value;}else if(Tone.Param&&param instanceof Tone.Param){subRet[attr]=param.value;}else if(param instanceof AudioParam){subRet[attr]=param.value;}else if(param instanceof Tone){subRet[attr]=param.get();}else if(!Tone.isFunction(param)&&Tone.isDefined(param)){subRet[attr]=param;}}return ret;};/**
		 *  collect all of the default attributes in one
		 *  @private
		 *  @param {Function} constr the constructor to find the defaults from
		 *  @return {Array} all of the attributes which belong to the class
		 */Tone.prototype._collectDefaults=function(constr){var ret=[];if(Tone.isDefined(constr.defaults)){ret=Object.keys(constr.defaults);}if(Tone.isDefined(constr._super)){var superDefs=this._collectDefaults(constr._super);//filter out repeats
for(var i=0;i<superDefs.length;i++){if(ret.indexOf(superDefs[i])===-1){ret.push(superDefs[i]);}}}return ret;};///////////////////////////////////////////////////////////////////////////
//	DEFAULTS
///////////////////////////////////////////////////////////////////////////
/**
		 *  @memberOf Tone
		 *  @param  {Array}  values  The arguments array
		 *  @param  {Array}  keys    The names of the arguments
		 *  @param {Function|Object} constr The class constructor
		 *  @return  {Object}  An object composed of the  defaults between the class' defaults
		 *                        and the passed in arguments.
		 */Tone.defaults=function(values,keys,constr){var options={};if(values.length===1&&Tone.isObject(values[0])){options=values[0];}else{for(var i=0;i<keys.length;i++){options[keys[i]]=values[i];}}if(Tone.isDefined(constr.defaults)){return Tone.defaultArg(options,constr.defaults);}else if(Tone.isObject(constr)){return Tone.defaultArg(options,constr);}else{return options;}};/**
		 *  If the `given` parameter is undefined, use the `fallback`.
		 *  If both `given` and `fallback` are object literals, it will
		 *  return a deep copy which includes all of the parameters from both
		 *  objects. If a parameter is undefined in given, it will return
		 *  the fallback property.
		 *  <br><br>
		 *  WARNING: if object is self referential, it will go into an an
		 *  infinite recursive loop.
		 *  @memberOf Tone
		 *  @param  {*} given
		 *  @param  {*} fallback
		 *  @return {*}
		 */Tone.defaultArg=function(given,fallback){if(Tone.isObject(given)&&Tone.isObject(fallback)){var ret={};//make a deep copy of the given object
for(var givenProp in given){ret[givenProp]=Tone.defaultArg(fallback[givenProp],given[givenProp]);}for(var fallbackProp in fallback){ret[fallbackProp]=Tone.defaultArg(given[fallbackProp],fallback[fallbackProp]);}return ret;}else{return Tone.isUndef(given)?fallback:given;}};///////////////////////////////////////////////////////////////////////////
//	CONNECTIONS
///////////////////////////////////////////////////////////////////////////
/**
		 *  connect together all of the arguments in series
		 *  @param {...AudioParam|Tone|AudioNode} nodes
		 *  @returns {Tone}
		 *  @memberOf Tone
		 *  @static
		 */Tone.connectSeries=function(){var currentUnit=arguments[0];for(var i=1;i<arguments.length;i++){var toUnit=arguments[i];currentUnit.connect(toUnit);currentUnit=toUnit;}return Tone;};///////////////////////////////////////////////////////////////////////////
// TYPE CHECKING
///////////////////////////////////////////////////////////////////////////
/**
		 *  Test if the arg is undefined
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is undefined
		 *  @static
		 *  @memberOf Tone
		 */Tone.isUndef=function(val){return typeof val==='undefined';};/**
		 *  Test if the arg is not undefined
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is undefined
		 *  @static
		 *  @memberOf Tone
		 */Tone.isDefined=function(val){return!Tone.isUndef(val);};/**
		 *  Test if the arg is a function
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is a function
		 *  @static
		 *  @memberOf Tone
		 */Tone.isFunction=function(val){return typeof val==='function';};/**
		 *  Test if the argument is a number.
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is a number
		 *  @static
		 *  @memberOf Tone
		 */Tone.isNumber=function(arg){return typeof arg==='number';};/**
		 *  Test if the given argument is an object literal (i.e. `{}`);
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is an object literal.
		 *  @static
		 *  @memberOf Tone
		 */Tone.isObject=function(arg){return Object.prototype.toString.call(arg)==='[object Object]'&&arg.constructor===Object;};/**
		 *  Test if the argument is a boolean.
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is a boolean
		 *  @static
		 *  @memberOf Tone
		 */Tone.isBoolean=function(arg){return typeof arg==='boolean';};/**
		 *  Test if the argument is an Array
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is an array
		 *  @static
		 *  @memberOf Tone
		 */Tone.isArray=function(arg){return Array.isArray(arg);};/**
		 *  Test if the argument is a string.
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is a string
		 *  @static
		 *  @memberOf Tone
		 */Tone.isString=function(arg){return typeof arg==='string';};/**
		 *  Test if the argument is in the form of a note in scientific pitch notation.
		 *  e.g. "C4"
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is a string
		 *  @static
		 *  @memberOf Tone
		 */Tone.isNote=function(arg){return Tone.isString(arg)&&/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);};/**
		 *  An empty function.
		 *  @static
		 */Tone.noOp=function(){};/**
		 *  Make the property not writable. Internal use only.
		 *  @private
		 *  @param  {String}  property  the property to make not writable
		 */Tone.prototype._readOnly=function(property){if(Array.isArray(property)){for(var i=0;i<property.length;i++){this._readOnly(property[i]);}}else{Object.defineProperty(this,property,{writable:false,enumerable:true});}};/**
		 *  Make an attribute writeable. Interal use only.
		 *  @private
		 *  @param  {String}  property  the property to make writable
		 */Tone.prototype._writable=function(property){if(Array.isArray(property)){for(var i=0;i<property.length;i++){this._writable(property[i]);}}else{Object.defineProperty(this,property,{writable:true});}};/**
		 * Possible play states.
		 * @enum {String}
		 */Tone.State={Started:'started',Stopped:'stopped',Paused:'paused'};///////////////////////////////////////////////////////////////////////////
// CONVERSIONS
///////////////////////////////////////////////////////////////////////////
/**
		 *  Equal power gain scale. Good for cross-fading.
		 *  @param  {NormalRange} percent (0-1)
		 *  @return {Number}         output gain (0-1)
		 *  @static
		 *  @memberOf Tone
		 */Tone.equalPowerScale=function(percent){var piFactor=0.5*Math.PI;return Math.sin(percent*piFactor);};/**
		 *  Convert decibels into gain.
		 *  @param  {Decibels} db
		 *  @return {Number}
		 *  @static
		 *  @memberOf Tone
		 */Tone.dbToGain=function(db){return Math.pow(10,db/20);};/**
		 *  Convert gain to decibels.
		 *  @param  {Number} gain (0-1)
		 *  @return {Decibels}
		 *  @static
		 *  @memberOf Tone
		 */Tone.gainToDb=function(gain){return 20*(Math.log(gain)/Math.LN10);};/**
		 *  Convert an interval (in semitones) to a frequency ratio.
		 *  @param  {Interval} interval the number of semitones above the base note
		 *  @return {Number}          the frequency ratio
		 *  @static
		 *  @memberOf Tone
		 *  @example
		 * tone.intervalToFrequencyRatio(0); // 1
		 * tone.intervalToFrequencyRatio(12); // 2
		 * tone.intervalToFrequencyRatio(-12); // 0.5
		 */Tone.intervalToFrequencyRatio=function(interval){return Math.pow(2,interval/12);};///////////////////////////////////////////////////////////////////////////
//	TIMING
///////////////////////////////////////////////////////////////////////////
/**
		 *  Return the current time of the AudioContext clock.
		 *  @return {Number} the currentTime from the AudioContext
		 *  @memberOf Tone#
		 */Tone.prototype.now=function(){return Tone.context.now();};/**
		 *  Return the current time of the AudioContext clock.
		 *  @return {Number} the currentTime from the AudioContext
		 *  @static
		 *  @memberOf Tone
		 */Tone.now=function(){return Tone.context.now();};///////////////////////////////////////////////////////////////////////////
//	INHERITANCE
///////////////////////////////////////////////////////////////////////////
/**
		 *  have a child inherit all of Tone's (or a parent's) prototype
		 *  to inherit the parent's properties, make sure to call
		 *  Parent.call(this) in the child's constructor
		 *
		 *  based on closure library's inherit function
		 *
		 *  @memberOf Tone
		 *  @static
		 *  @param  {Function} 	child
		 *  @param  {Function=} parent (optional) parent to inherit from
		 *                             if no parent is supplied, the child
		 *                             will inherit from Tone
		 */Tone.extend=function(child,parent){if(Tone.isUndef(parent)){parent=Tone;}function TempConstructor(){}TempConstructor.prototype=parent.prototype;child.prototype=new TempConstructor();/** @override */child.prototype.constructor=child;child._super=parent;};///////////////////////////////////////////////////////////////////////////
//	CONTEXT
///////////////////////////////////////////////////////////////////////////
/**
		 *  Private reference to the global AudioContext
		 *  @type {AudioContext}
		 *  @private
		 */var audioContext=null;/**
		 *  A static pointer to the audio context accessible as Tone.context.
		 *  @type {Tone.Context}
		 *  @name context
		 *  @memberOf Tone
		 */Object.defineProperty(Tone,'context',{get:function get(){return audioContext;},set:function set(context){if(Tone.Context&&context instanceof Tone.Context){audioContext=context;}else{audioContext=new Tone.Context(context);}//initialize the new audio context
Tone.Context.emit('init',audioContext);}});/**
		 *  The AudioContext
		 *  @type {Tone.Context}
		 *  @name context
		 *  @memberOf Tone#
		 *  @readOnly
		 */Object.defineProperty(Tone.prototype,'context',{get:function get(){return Tone.context;}});/**
		 *  Tone automatically creates a context on init, but if you are working
		 *  with other libraries which also create an AudioContext, it can be
		 *  useful to set your own. If you are going to set your own context,
		 *  be sure to do it at the start of your code, before creating any objects.
		 *  @static
		 *  @param {AudioContext} ctx The new audio context to set
		 */Tone.setContext=function(ctx){Tone.context=ctx;};///////////////////////////////////////////////////////////////////////////
//	ATTRIBUTES
///////////////////////////////////////////////////////////////////////////
/**
		 *  The number of seconds of 1 processing block (128 samples)
		 *  @type {Number}
		 *  @name blockTime
		 *  @memberOf Tone
		 *  @static
		 *  @readOnly
		 */Object.defineProperty(Tone.prototype,'blockTime',{get:function get(){return 128/this.context.sampleRate;}});/**
		 *  The duration in seconds of one sample.
		 *  @type {Number}
		 *  @name sampleTime
		 *  @memberOf Tone
		 *  @static
		 *  @readOnly
		 */Object.defineProperty(Tone.prototype,'sampleTime',{get:function get(){return 1/this.context.sampleRate;}});/**
		 *  Whether or not all the technologies that Tone.js relies on are supported by the current browser.
		 *  @type {Boolean}
		 *  @name supported
		 *  @memberOf Tone
		 *  @readOnly
		 *  @static
		 */Object.defineProperty(Tone,'supported',{get:function get(){var hasAudioContext=window.hasOwnProperty('AudioContext')||window.hasOwnProperty('webkitAudioContext');var hasPromises=window.hasOwnProperty('Promise');var hasWorkers=window.hasOwnProperty('Worker');return hasAudioContext&&hasPromises&&hasWorkers;}});/**
		 *  Boolean value if the audio context has been initialized.
		 *  @type {Boolean}
		 *  @memberOf Tone
		 *  @static
		 *  @name initialized
		 */Object.defineProperty(Tone,'initialized',{get:function get(){return audioContext!==null;}});/**
		 *  Get the context when it becomes available
		 *  @param  {Function}  resolve  Callback when the context is initialized
		 *  @return  {Tone}
		 */Tone.getContext=function(resolve){if(Tone.initialized){resolve(Tone.context);}else{var resCallback=function resCallback(){resolve(Tone.context);Tone.Context.off('init',resCallback);};Tone.Context.on('init',resCallback);}return Tone;};/**
		 * The version number
		 * @type {String}
		 * @static
		 */Tone.version='r12';return Tone;});Module(function(Tone){/**
		 *  @class Tone.Emitter gives classes which extend it
		 *         the ability to listen for and emit events.
		 *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).
		 *         MIT (c) 2011 Jerome Etienne.
		 *
		 *  @extends {Tone}
		 */Tone.Emitter=function(){Tone.call(this);/**
			 *  Contains all of the events.
			 *  @private
			 *  @type  {Object}
			 */this._events={};};Tone.extend(Tone.Emitter);/**
		 *  Bind a callback to a specific event.
		 *  @param  {String}    event     The name of the event to listen for.
		 *  @param  {Function}  callback  The callback to invoke when the
		 *                                event is emitted
		 *  @return  {Tone.Emitter}    this
		 */Tone.Emitter.prototype.on=function(event,callback){//split the event
var events=event.split(/\W+/);for(var i=0;i<events.length;i++){var eventName=events[i];if(!this._events.hasOwnProperty(eventName)){this._events[eventName]=[];}this._events[eventName].push(callback);}return this;};/**
		 *  Bind a callback which is only invoked once
		 *  @param  {String}    event     The name of the event to listen for.
		 *  @param  {Function}  callback  The callback to invoke when the
		 *                                event is emitted
		 *  @return  {Tone.Emitter}    this
		 */Tone.Emitter.prototype.once=function(event,callback){var boundCallback=function(){//invoke the callback
callback.apply(this,arguments);this.off(event,boundCallback);}.bind(this);this.on(event,boundCallback);return this;};/**
		 *  Remove the event listener.
		 *  @param  {String}    event     The event to stop listening to.
		 *  @param  {Function=}  callback  The callback which was bound to
		 *                                the event with Tone.Emitter.on.
		 *                                If no callback is given, all callbacks
		 *                                events are removed.
		 *  @return  {Tone.Emitter}    this
		 */Tone.Emitter.prototype.off=function(event,callback){var events=event.split(/\W+/);for(var ev=0;ev<events.length;ev++){event=events[ev];if(this._events.hasOwnProperty(event)){if(Tone.isUndef(callback)){this._events[event]=[];}else{var eventList=this._events[event];for(var i=0;i<eventList.length;i++){if(eventList[i]===callback){eventList.splice(i,1);}}}}}return this;};/**
		 *  Invoke all of the callbacks bound to the event
		 *  with any arguments passed in.
		 *  @param  {String}  event  The name of the event.
		 *  @param {*} args... The arguments to pass to the functions listening.
		 *  @return  {Tone.Emitter}  this
		 */Tone.Emitter.prototype.emit=function(event){if(this._events){var args=Array.apply(null,arguments).slice(1);if(this._events.hasOwnProperty(event)){var eventList=this._events[event].slice(0);for(var i=0,len=eventList.length;i<len;i++){eventList[i].apply(this,args);}}}return this;};/**
		 *  Add Emitter functions (on/off/emit) to the object
		 *  @param  {Object|Function}  object  The object or class to extend.
		 *  @returns {Tone.Emitter}
		 */Tone.Emitter.mixin=function(object){var functions=['on','once','off','emit'];object._events={};for(var i=0;i<functions.length;i++){var func=functions[i];var emitterFunc=Tone.Emitter.prototype[func];object[func]=emitterFunc;}return Tone.Emitter;};/**
		 *  Clean up
		 *  @return  {Tone.Emitter}  this
		 */Tone.Emitter.prototype.dispose=function(){Tone.prototype.dispose.call(this);this._events=null;return this;};return Tone.Emitter;});Module(function(Tone){/**
		 *  @class A Timeline class for scheduling and maintaining state
		 *         along a timeline. All events must have a "time" property.
		 *         Internally, events are stored in time order for fast
		 *         retrieval.
		 *  @extends {Tone}
		 *  @param {Positive} [memory=Infinity] The number of previous events that are retained.
		 */Tone.Timeline=function(){var options=Tone.defaults(arguments,['memory'],Tone.Timeline);Tone.call(this);/**
			 *  The array of scheduled timeline events
			 *  @type  {Array}
			 *  @private
			 */this._timeline=[];/**
			 *  The memory of the timeline, i.e.
			 *  how many events in the past it will retain
			 *  @type {Positive}
			 */this.memory=options.memory;};Tone.extend(Tone.Timeline);/**
		 *  the default parameters
		 *  @static
		 *  @const
		 */Tone.Timeline.defaults={'memory':Infinity};/**
		 *  The number of items in the timeline.
		 *  @type {Number}
		 *  @memberOf Tone.Timeline#
		 *  @name length
		 *  @readOnly
		 */Object.defineProperty(Tone.Timeline.prototype,'length',{get:function get(){return this._timeline.length;}});/**
		 *  Insert an event object onto the timeline. Events must have a "time" attribute.
		 *  @param  {Object}  event  The event object to insert into the
		 *                           timeline.
		 *  @returns {Tone.Timeline} this
		 */Tone.Timeline.prototype.add=function(event){//the event needs to have a time attribute
if(Tone.isUndef(event.time)){throw new Error('Tone.Timeline: events must have a time attribute');}event.time=event.time.valueOf();var index=this._search(event.time);this._timeline.splice(index+1,0,event);//if the length is more than the memory, remove the previous ones
if(this.length>this.memory){var diff=this.length-this.memory;this._timeline.splice(0,diff);}return this;};/**
		 *  Remove an event from the timeline.
		 *  @param  {Object}  event  The event object to remove from the list.
		 *  @returns {Tone.Timeline} this
		 */Tone.Timeline.prototype.remove=function(event){var index=this._timeline.indexOf(event);if(index!==-1){this._timeline.splice(index,1);}return this;};/**
		 *  Get the nearest event whose time is less than or equal to the given time.
		 *  @param  {Number}  time  The time to query.
		 *  @param  {String}  comparator Which value in the object to compare
		 *  @returns {Object} The event object set after that time.
		 */Tone.Timeline.prototype.get=function(time,comparator){comparator=Tone.defaultArg(comparator,'time');var index=this._search(time,comparator);if(index!==-1){return this._timeline[index];}else{return null;}};/**
		 *  Return the first event in the timeline without removing it
		 *  @returns {Object} The first event object
		 */Tone.Timeline.prototype.peek=function(){return this._timeline[0];};/**
		 *  Return the first event in the timeline and remove it
		 *  @returns {Object} The first event object
		 */Tone.Timeline.prototype.shift=function(){return this._timeline.shift();};/**
		 *  Get the event which is scheduled after the given time.
		 *  @param  {Number}  time  The time to query.
		 *  @param  {String}  comparator Which value in the object to compare
		 *  @returns {Object} The event object after the given time
		 */Tone.Timeline.prototype.getAfter=function(time,comparator){comparator=Tone.defaultArg(comparator,'time');var index=this._search(time,comparator);if(index+1<this._timeline.length){return this._timeline[index+1];}else{return null;}};/**
		 *  Get the event before the event at the given time.
		 *  @param  {Number}  time  The time to query.
		 *  @param  {String}  comparator Which value in the object to compare
		 *  @returns {Object} The event object before the given time
		 */Tone.Timeline.prototype.getBefore=function(time,comparator){comparator=Tone.defaultArg(comparator,'time');var len=this._timeline.length;//if it's after the last item, return the last item
if(len>0&&this._timeline[len-1][comparator]<time){return this._timeline[len-1];}var index=this._search(time,comparator);if(index-1>=0){return this._timeline[index-1];}else{return null;}};/**
		 *  Cancel events after the given time
		 *  @param  {Number}  time  The time to query.
		 *  @returns {Tone.Timeline} this
		 */Tone.Timeline.prototype.cancel=function(after){if(this._timeline.length>1){var index=this._search(after);if(index>=0){if(this._timeline[index].time===after){//get the first item with that time
for(var i=index;i>=0;i--){if(this._timeline[i].time===after){index=i;}else{break;}}this._timeline=this._timeline.slice(0,index);}else{this._timeline=this._timeline.slice(0,index+1);}}else{this._timeline=[];}}else if(this._timeline.length===1){//the first item's time
if(this._timeline[0].time>=after){this._timeline=[];}}return this;};/**
		 *  Cancel events before or equal to the given time.
		 *  @param  {Number}  time  The time to cancel before.
		 *  @returns {Tone.Timeline} this
		 */Tone.Timeline.prototype.cancelBefore=function(time){var index=this._search(time);if(index>=0){this._timeline=this._timeline.slice(index+1);}return this;};/**
		 * Returns the previous event if there is one. null otherwise
		 * @param  {Object} event The event to find the previous one of
		 * @return {Object}       The event right before the given event
		 */Tone.Timeline.prototype.previousEvent=function(event){var index=this._timeline.indexOf(event);if(index>0){return this._timeline[index-1];}else{return null;}};/**
		 *  Does a binary search on the timeline array and returns the
		 *  nearest event index whose time is after or equal to the given time.
		 *  If a time is searched before the first index in the timeline, -1 is returned.
		 *  If the time is after the end, the index of the last item is returned.
		 *  @param  {Number}  time
		 *  @param  {String}  comparator Which value in the object to compare
		 *  @return  {Number} the index in the timeline array
		 *  @private
		 */Tone.Timeline.prototype._search=function(time,comparator){if(this._timeline.length===0){return-1;}comparator=Tone.defaultArg(comparator,'time');var beginning=0;var len=this._timeline.length;var end=len;if(len>0&&this._timeline[len-1][comparator]<=time){return len-1;}while(beginning<end){// calculate the midpoint for roughly equal partition
var midPoint=Math.floor(beginning+(end-beginning)/2);var event=this._timeline[midPoint];var nextEvent=this._timeline[midPoint+1];if(event[comparator]===time){//choose the last one that has the same time
for(var i=midPoint;i<this._timeline.length;i++){var testEvent=this._timeline[i];if(testEvent[comparator]===time){midPoint=i;}}return midPoint;}else if(event[comparator]<time&&nextEvent[comparator]>time){return midPoint;}else if(event[comparator]>time){//search lower
end=midPoint;}else{//search upper
beginning=midPoint+1;}}return-1;};/**
		 *  Internal iterator. Applies extra safety checks for
		 *  removing items from the array.
		 *  @param  {Function}  callback
		 *  @param  {Number=}    lowerBound
		 *  @param  {Number=}    upperBound
		 *  @private
		 */Tone.Timeline.prototype._iterate=function(callback,lowerBound,upperBound){lowerBound=Tone.defaultArg(lowerBound,0);upperBound=Tone.defaultArg(upperBound,this._timeline.length-1);this._timeline.slice(lowerBound,upperBound+1).forEach(function(event){callback.call(this,event);}.bind(this));};/**
		 *  Iterate over everything in the array
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */Tone.Timeline.prototype.forEach=function(callback){this._iterate(callback);return this;};/**
		 *  Iterate over everything in the array at or before the given time.
		 *  @param  {Number}  time The time to check if items are before
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */Tone.Timeline.prototype.forEachBefore=function(time,callback){//iterate over the items in reverse so that removing an item doesn't break things
var upperBound=this._search(time);if(upperBound!==-1){this._iterate(callback,0,upperBound);}return this;};/**
		 *  Iterate over everything in the array after the given time.
		 *  @param  {Number}  time The time to check if items are before
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */Tone.Timeline.prototype.forEachAfter=function(time,callback){//iterate over the items in reverse so that removing an item doesn't break things
var lowerBound=this._search(time);this._iterate(callback,lowerBound+1);return this;};/**
		 *  Iterate over everything in the array between the startTime and endTime. 
		 *  The timerange is inclusive of the startTime, but exclusive of the endTime. 
		 *  range = [startTime, endTime). 
		 *  @param  {Number}  startTime The time to check if items are before
		 *  @param  {Number}  endTime The end of the test interval. 
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */Tone.Timeline.prototype.forEachBetween=function(startTime,endTime,callback){var lowerBound=this._search(startTime);var upperBound=this._search(endTime);if(lowerBound!==-1&&upperBound!==-1){if(this._timeline[lowerBound].time!==startTime){lowerBound+=1;}//exclusive of the end time
if(this._timeline[upperBound].time===endTime){upperBound-=1;}this._iterate(callback,lowerBound,upperBound);}else if(lowerBound===-1){this._iterate(callback,0,upperBound);}return this;};/**
		 *  Iterate over everything in the array at or after the given time. Similar to
		 *  forEachAfter, but includes the item(s) at the given time.
		 *  @param  {Number}  time The time to check if items are before
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */Tone.Timeline.prototype.forEachFrom=function(time,callback){//iterate over the items in reverse so that removing an item doesn't break things
var lowerBound=this._search(time);//work backwards until the event time is less than time
while(lowerBound>=0&&this._timeline[lowerBound].time>=time){lowerBound--;}this._iterate(callback,lowerBound+1);return this;};/**
		 *  Iterate over everything in the array at the given time
		 *  @param  {Number}  time The time to check if items are before
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */Tone.Timeline.prototype.forEachAtTime=function(time,callback){//iterate over the items in reverse so that removing an item doesn't break things
var upperBound=this._search(time);if(upperBound!==-1){this._iterate(function(event){if(event.time===time){callback.call(this,event);}},0,upperBound);}return this;};/**
		 *  Clean up.
		 *  @return  {Tone.Timeline}  this
		 */Tone.Timeline.prototype.dispose=function(){Tone.prototype.dispose.call(this);this._timeline=null;return this;};return Tone.Timeline;});Module(function(Tone){if(Tone.supported){if(!window.hasOwnProperty('OfflineAudioContext')&&window.hasOwnProperty('webkitOfflineAudioContext')){window.OfflineAudioContext=window.webkitOfflineAudioContext;}//returns promise?
var context=new OfflineAudioContext(1,1,44100);var ret=context.startRendering();if(!(ret instanceof Promise)){OfflineAudioContext.prototype._native_startRendering=OfflineAudioContext.prototype.startRendering;OfflineAudioContext.prototype.startRendering=function(){return new Promise(function(done){this.oncomplete=function(e){done(e.renderedBuffer);};this._native_startRendering();}.bind(this));};}}});Module(function(Tone){if(Tone.supported){if(!window.hasOwnProperty('AudioContext')&&window.hasOwnProperty('webkitAudioContext')){window.AudioContext=window.webkitAudioContext;}//not functionally equivalent, but only an API placeholder
if(!AudioContext.prototype.close){AudioContext.prototype.close=function(){if(Tone.isFunction(this.suspend)){this.suspend();}return Promise.resolve();};}//not functionally equivalent
if(!AudioContext.prototype.resume){AudioContext.prototype.resume=function(){return Promise.resolve();};}//createGain
if(!AudioContext.prototype.createGain&&AudioContext.prototype.createGainNode){AudioContext.prototype.createGain=AudioContext.prototype.createGainNode;}//createDelay
if(!AudioContext.prototype.createDelay&&AudioContext.prototype.createDelayNode){AudioContext.prototype.createDelay=AudioContext.prototype.createDelayNode;}//test decodeAudioData returns a promise
// https://github.com/mohayonao/web-audio-api-shim/blob/master/src/AudioContext.js
// MIT License (c) 2015 @mohayonao
var decodeAudioDataPromise=false;var offlineContext=new OfflineAudioContext(1,1,44100);var audioData=new Uint32Array([1179011410,48,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,8,0,0,0,0]).buffer;try{var ret=offlineContext.decodeAudioData(audioData);if(ret instanceof Promise){decodeAudioDataPromise=true;}}catch(e){decodeAudioDataPromise=false;}if(!decodeAudioDataPromise){AudioContext.prototype._native_decodeAudioData=AudioContext.prototype.decodeAudioData;AudioContext.prototype.decodeAudioData=function(audioData){return new Promise(function(success,error){this._native_decodeAudioData(audioData,success,error);}.bind(this));};}}});Module(function(Tone){/**
		 *  @class Wrapper around the native AudioContext.
		 *  @extends {Tone.Emitter}
		 *  @param {AudioContext=} context optionally pass in a context
		 */Tone.Context=function(){Tone.Emitter.call(this);var options=Tone.defaults(arguments,['context'],Tone.Context);if(!options.context){options.context=new window.AudioContext();if(!options.context){throw new Error('could not create AudioContext. Possibly too many AudioContexts running already.');}}this._context=options.context;// extend all of the methods
for(var prop in this._context){this._defineProperty(this._context,prop);}/**
			 *  The default latency hint
			 *  @type  {String}
			 *  @private
			 */this._latencyHint=options.latencyHint;/**
			 *  An object containing all of the constants AudioBufferSourceNodes
			 *  @type  {Object}
			 *  @private
			 */this._constants={};///////////////////////////////////////////////////////////////////////
// WORKER
///////////////////////////////////////////////////////////////////////
/**
			 *  The amount of time events are scheduled
			 *  into the future
			 *  @type  {Number}
			 */this.lookAhead=options.lookAhead;/**
			 *  A reference to the actual computed update interval
			 *  @type  {Number}
			 *  @private
			 */this._computedUpdateInterval=0;/**
			 *  A reliable callback method
			 *  @private
			 *  @type  {Ticker}
			 */this._ticker=new Ticker(this.emit.bind(this,'tick'),options.clockSource,options.updateInterval);///////////////////////////////////////////////////////////////////////
// TIMEOUTS
///////////////////////////////////////////////////////////////////////
/**
			 *  All of the setTimeout events.
			 *  @type  {Tone.Timeline}
			 *  @private
			 */this._timeouts=new Tone.Timeline();/**
			 *  The timeout id counter
			 *  @private
			 *  @type {Number}
			 */this._timeoutIds=0;this.on('tick',this._timeoutLoop.bind(this));};Tone.extend(Tone.Context,Tone.Emitter);Tone.Emitter.mixin(Tone.Context);/**
		 * defaults
		 * @static
		 * @type {Object}
		 */Tone.Context.defaults={'clockSource':'worker','latencyHint':'interactive','lookAhead':0.1,'updateInterval':0.03};/**
		 *  Define a property on this Tone.Context.
		 *  This is used to extend the native AudioContext
		 *  @param  {AudioContext}  context
		 *  @param  {String}  prop
		 *  @private
		 */Tone.Context.prototype._defineProperty=function(context,prop){if(Tone.isUndef(this[prop])){Object.defineProperty(this,prop,{get:function get(){if(typeof context[prop]==='function'){return context[prop].bind(context);}else{return context[prop];}},set:function set(val){context[prop]=val;}});}};/**
		 *  The current audio context time
		 *  @return  {Number}
		 */Tone.Context.prototype.now=function(){return this._context.currentTime+this.lookAhead;};/**
		 *  Promise which is invoked when the context is running.
		 *  Tries to resume the context if it's not started.
		 *  @return  {Promise}
		 */Tone.Context.prototype.ready=function(){return new Promise(function(done){if(this._context.state==='running'){done();}else{this._context.resume().then(function(){done();});}}.bind(this));};/**
		 *  Promise which is invoked when the context is running.
		 *  Tries to resume the context if it's not started.
		 *  @return  {Promise}
		 */Tone.Context.prototype.close=function(){return this._context.close().then(function(){Tone.Context.emit('close',this);}.bind(this));};/**
		 *  Generate a looped buffer at some constant value.
		 *  @param  {Number}  val
		 *  @return  {BufferSourceNode}
		 */Tone.Context.prototype.getConstant=function(val){if(this._constants[val]){return this._constants[val];}else{var buffer=this._context.createBuffer(1,128,this._context.sampleRate);var arr=buffer.getChannelData(0);for(var i=0;i<arr.length;i++){arr[i]=val;}var constant=this._context.createBufferSource();constant.channelCount=1;constant.channelCountMode='explicit';constant.buffer=buffer;constant.loop=true;constant.start(0);this._constants[val]=constant;return constant;}};/**
		 *  The private loop which keeps track of the context scheduled timeouts
		 *  Is invoked from the clock source
		 *  @private
		 */Tone.Context.prototype._timeoutLoop=function(){var now=this.now();while(this._timeouts&&this._timeouts.length&&this._timeouts.peek().time<=now){this._timeouts.shift().callback();}};/**
		 *  A setTimeout which is gaurenteed by the clock source.
		 *  Also runs in the offline context.
		 *  @param  {Function}  fn       The callback to invoke
		 *  @param  {Seconds}    timeout  The timeout in seconds
		 *  @returns {Number} ID to use when invoking Tone.Context.clearTimeout
		 */Tone.Context.prototype.setTimeout=function(fn,timeout){this._timeoutIds++;var now=this.now();this._timeouts.add({callback:fn,time:now+timeout,id:this._timeoutIds});return this._timeoutIds;};/**
		 *  Clears a previously scheduled timeout with Tone.context.setTimeout
		 *  @param  {Number}  id  The ID returned from setTimeout
		 *  @return  {Tone.Context}  this
		 */Tone.Context.prototype.clearTimeout=function(id){this._timeouts.forEach(function(event){if(event.id===id){this.remove(event);}});return this;};/**
		 *  How often the Web Worker callback is invoked.
		 *  This number corresponds to how responsive the scheduling
		 *  can be. Context.updateInterval + Context.lookAhead gives you the
		 *  total latency between scheduling an event and hearing it.
		 *  @type {Number}
		 *  @memberOf Tone.Context#
		 *  @name updateInterval
		 */Object.defineProperty(Tone.Context.prototype,'updateInterval',{get:function get(){return this._ticker.updateInterval;},set:function set(interval){this._ticker.updateInterval=interval;}});/**
		 *  What the source of the clock is, either "worker" (Web Worker [default]),
		 *  "timeout" (setTimeout), or "offline" (none).
		 *  @type {String}
		 *  @memberOf Tone.Context#
		 *  @name clockSource
		 */Object.defineProperty(Tone.Context.prototype,'clockSource',{get:function get(){return this._ticker.type;},set:function set(type){this._ticker.type=type;}});/**
		 *  The type of playback, which affects tradeoffs between audio
		 *  output latency and responsiveness.
		 *
		 *  In addition to setting the value in seconds, the latencyHint also
		 *  accepts the strings "interactive" (prioritizes low latency),
		 *  "playback" (prioritizes sustained playback), "balanced" (balances
		 *  latency and performance), and "fastest" (lowest latency, might glitch more often).
		 *  @type {String|Seconds}
		 *  @memberOf Tone.Context#
		 *  @name latencyHint
		 *  @example
		 * //set the lookAhead to 0.3 seconds
		 * Tone.context.latencyHint = 0.3;
		 */Object.defineProperty(Tone.Context.prototype,'latencyHint',{get:function get(){return this._latencyHint;},set:function set(hint){var lookAhead=hint;this._latencyHint=hint;if(Tone.isString(hint)){switch(hint){case'interactive':lookAhead=0.1;this._context.latencyHint=hint;break;case'playback':lookAhead=0.8;this._context.latencyHint=hint;break;case'balanced':lookAhead=0.25;this._context.latencyHint=hint;break;case'fastest':this._context.latencyHint='interactive';lookAhead=0.01;break;}}this.lookAhead=lookAhead;this.updateInterval=lookAhead/3;}});/**
		 *  Unlike other dispose methods, this returns a Promise
		 *  which executes when the context is closed and disposed
		 *  @returns {Promise} this
		 */Tone.Context.prototype.dispose=function(){return this.close().then(function(){Tone.Emitter.prototype.dispose.call(this);this._ticker.dispose();this._ticker=null;this._timeouts.dispose();this._timeouts=null;for(var con in this._constants){this._constants[con].disconnect();}this._constants=null;}.bind(this));};/**
		 * @class A class which provides a reliable callback using either
		 *        a Web Worker, or if that isn't supported, falls back to setTimeout.
		 * @private
		 */var Ticker=function Ticker(callback,type,updateInterval){/**
			 * Either "worker" or "timeout"
			 * @type {String}
			 * @private
			 */this._type=type;/**
			 * The update interval of the worker
			 * @private
			 * @type {Number}
			 */this._updateInterval=updateInterval;/**
			 * The callback to invoke at regular intervals
			 * @type {Function}
			 * @private
			 */this._callback=Tone.defaultArg(callback,Tone.noOp);//create the clock source for the first time
this._createClock();};/**
		 * The possible ticker types
		 * @private
		 * @type {Object}
		 */Ticker.Type={Worker:'worker',Timeout:'timeout',Offline:'offline'};/**
		 *  Generate a web worker
		 *  @return  {WebWorker}
		 *  @private
		 */Ticker.prototype._createWorker=function(){//URL Shim
window.URL=window.URL||window.webkitURL;var blob=new Blob([//the initial timeout time
'var timeoutTime = '+(this._updateInterval*1000).toFixed(1)+';'+//onmessage callback
'self.onmessage = function(msg){'+'\ttimeoutTime = parseInt(msg.data);'+'};'+//the tick function which posts a message
//and schedules a new tick
'function tick(){'+'\tsetTimeout(tick, timeoutTime);'+'\tself.postMessage(\'tick\');'+'}'+//call tick initially
'tick();']);var blobUrl=URL.createObjectURL(blob);var worker=new Worker(blobUrl);worker.onmessage=this._callback.bind(this);this._worker=worker;};/**
		 * Create a timeout loop
		 * @private
		 */Ticker.prototype._createTimeout=function(){this._timeout=setTimeout(function(){this._createTimeout();this._callback();}.bind(this),this._updateInterval*1000);};/**
		 * Create the clock source.
		 * @private
		 */Ticker.prototype._createClock=function(){if(this._type===Ticker.Type.Worker){try{this._createWorker();}catch(e){// workers not supported, fallback to timeout
this._type=Ticker.Type.Timeout;this._createClock();}}else if(this._type===Ticker.Type.Timeout){this._createTimeout();}};/**
		 * @memberOf Ticker#
		 * @type {Number}
		 * @name updateInterval
		 * @private
		 */Object.defineProperty(Ticker.prototype,'updateInterval',{get:function get(){return this._updateInterval;},set:function set(interval){this._updateInterval=Math.max(interval,128/44100);if(this._type===Ticker.Type.Worker){this._worker.postMessage(Math.max(interval*1000,1));}}});/**
		 * The type of the ticker, either a worker or a timeout
		 * @memberOf Ticker#
		 * @type {Number}
		 * @name type
		 * @private
		 */Object.defineProperty(Ticker.prototype,'type',{get:function get(){return this._type;},set:function set(type){this._disposeClock();this._type=type;this._createClock();}});/**
		 * Clean up the current clock source
		 * @private
		 */Ticker.prototype._disposeClock=function(){if(this._timeout){clearTimeout(this._timeout);this._timeout=null;}if(this._worker){this._worker.terminate();this._worker.onmessage=null;this._worker=null;}};/**
		 * Clean up
		 * @private
		 */Ticker.prototype.dispose=function(){this._disposeClock();this._callback=null;};/**
		 *  Shim all connect/disconnect and some deprecated methods which are still in
		 *  some older implementations.
		 *  @private
		 */Tone.getContext(function(){var nativeConnect=AudioNode.prototype.connect;var nativeDisconnect=AudioNode.prototype.disconnect;//replace the old connect method
function toneConnect(B,outNum,inNum){if(B.input){inNum=Tone.defaultArg(inNum,0);if(Tone.isArray(B.input)){return this.connect(B.input[inNum]);}else{return this.connect(B.input,outNum,inNum);}}else{try{if(B instanceof AudioNode){nativeConnect.call(this,B,outNum,inNum);return B;}else{nativeConnect.call(this,B,outNum);return B;}}catch(e){throw new Error('error connecting to node: '+B+'\n'+e);}}}//replace the old disconnect method
function toneDisconnect(B,outNum,inNum){if(B&&B.input&&Tone.isArray(B.input)){inNum=Tone.defaultArg(inNum,0);this.disconnect(B.input[inNum],outNum,0);}else if(B&&B.input){this.disconnect(B.input,outNum,inNum);}else{try{nativeDisconnect.apply(this,arguments);}catch(e){throw new Error('error disconnecting node: '+B+'\n'+e);}}}if(AudioNode.prototype.connect!==toneConnect){AudioNode.prototype.connect=toneConnect;AudioNode.prototype.disconnect=toneDisconnect;}});// set the audio context initially, and if one is not already created
if(Tone.supported&&!Tone.initialized){Tone.context=new Tone.Context();// log on first initialization
// allow optional silencing of this log
if(!window.TONE_SILENCE_VERSION_LOGGING){// eslint-disable-next-line no-console
console.log('%c * Tone.js '+Tone.version+' * ','background: #000; color: #fff');}}else if(!Tone.supported){// eslint-disable-next-line no-console
console.warn('This browser does not support Tone.js');}return Tone.Context;});Module(function(Tone){/**
		 *  @class Tone.AudioNode is the base class for classes which process audio.
		 *         AudioNodes have inputs and outputs.
		 *  @param	{AudioContext=} context	The audio context to use with the class
		 *  @extends {Tone}
		 */Tone.AudioNode=function(){Tone.call(this);//use the default context if one is not passed in
var options=Tone.defaults(arguments,['context'],{'context':Tone.context});/**
			 * The AudioContext of this instance
			 * @private
			 * @type {AudioContext}
			 */this._context=options.context;};Tone.extend(Tone.AudioNode);/**
		 * Get the audio context belonging to this instance.
		 * @type {Tone.Context}
		 * @memberOf Tone.AudioNode#
		 * @name context
		 * @readOnly
		 */Object.defineProperty(Tone.AudioNode.prototype,'context',{get:function get(){return this._context;}});/**
		 *  Create input and outputs for this object.
		 *  @param  {Number}  [input=0]   The number of inputs
		 *  @param  {Number}  [outputs=0]  The number of outputs
		 *  @return  {Tone.AudioNode}  this
		 *  @private
		 */Tone.AudioNode.prototype.createInsOuts=function(inputs,outputs){if(inputs===1){this.input=this.context.createGain();}else if(inputs>1){this.input=new Array(inputs);}if(outputs===1){this.output=this.context.createGain();}else if(outputs>1){this.output=new Array(outputs);}};/**
		 *  channelCount is the number of channels used when up-mixing and down-mixing
		 *  connections to any inputs to the node. The default value is 2 except for
		 *  specific nodes where its value is specially determined.
		 *
		 *  @memberof Tone.AudioNode#
		 *  @type {Number}
		 *  @name channelCount
		 *  @readOnly
		 */Object.defineProperty(Tone.AudioNode.prototype,'channelCount',{get:function get(){return this.output.channelCount;},set:function set(c){return this.output.channelCount=c;}});/**
		 *  channelCountMode determines how channels will be counted when up-mixing and
		 *  down-mixing connections to any inputs to the node.
		 *  The default value is "max". This attribute has no effect for nodes with no inputs.
		 *  @memberof Tone.AudioNode#
		 *  @type {String}
		 *  @name channelCountMode
		 *  @readOnly
		 */Object.defineProperty(Tone.AudioNode.prototype,'channelCountMode',{get:function get(){return this.output.channelCountMode;},set:function set(m){return this.output.channelCountMode=m;}});/**
		 *  channelInterpretation determines how individual channels will be treated
		 *  when up-mixing and down-mixing connections to any inputs to the node.
		 *  The default value is "speakers".
		 *  @memberof Tone.AudioNode#
		 *  @type {String}
		 *  @name channelInterpretation
		 *  @readOnly
		 */Object.defineProperty(Tone.AudioNode.prototype,'channelInterpretation',{get:function get(){return this.output.channelInterpretation;},set:function set(i){return this.output.channelInterpretation=i;}});/**
		 *  The number of inputs feeding into the AudioNode.
		 *  For source nodes, this will be 0.
		 *  @type {Number}
		 *  @name numberOfInputs
		 *  @memberof Tone.AudioNode#
		 *  @readOnly
		 */Object.defineProperty(Tone.AudioNode.prototype,'numberOfInputs',{get:function get(){if(this.input){if(Tone.isArray(this.input)){return this.input.length;}else{return 1;}}else{return 0;}}});/**
		 *  The number of outputs coming out of the AudioNode.
		 *  @type {Number}
		 *  @name numberOfOutputs
		 *  @memberof Tone.AudioNode#
		 *  @readOnly
		 */Object.defineProperty(Tone.AudioNode.prototype,'numberOfOutputs',{get:function get(){if(this.output){if(Tone.isArray(this.output)){return this.output.length;}else{return 1;}}else{return 0;}}});/**
		 * Called when an audio param connects to this node
		 * @private
		 */Tone.AudioNode.prototype._onConnect=function(){};/**
		 *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode
		 *  @param  {Tone | AudioParam | AudioNode} unit
		 *  @param {number} [outputNum=0] optionally which output to connect from
		 *  @param {number} [inputNum=0] optionally which input to connect to
		 *  @returns {Tone.AudioNode} this
		 */Tone.AudioNode.prototype.connect=function(unit,outputNum,inputNum){if(unit._onConnect){unit._onConnect(this);}if(Tone.isArray(this.output)){outputNum=Tone.defaultArg(outputNum,0);this.output[outputNum].connect(unit,0,inputNum);}else{this.output.connect(unit,outputNum,inputNum);}return this;};/**
		 *  disconnect the output
		 *  @param {Number|AudioNode} output Either the output index to disconnect
		 *                                   if the output is an array, or the
		 *                                   node to disconnect from.
		 *  @returns {Tone.AudioNode} this
		 */Tone.AudioNode.prototype.disconnect=function(destination,outputNum,inputNum){if(Tone.isArray(this.output)){if(Tone.isNumber(destination)){this.output[destination].disconnect();}else{outputNum=Tone.defaultArg(outputNum,0);this.output[outputNum].disconnect(destination,0,inputNum);}}else{this.output.disconnect.apply(this.output,arguments);}};/**
		 *  Connect the output of this node to the rest of the nodes in series.
		 *  @example
		 *  //connect a node to an effect, panVol and then to the master output
		 *  node.chain(effect, panVol, Tone.Master);
		 *  @param {...AudioParam|Tone|AudioNode} nodes
		 *  @returns {Tone.AudioNode} this
		 *  @private
		 */Tone.AudioNode.prototype.chain=function(){var currentUnit=this;for(var i=0;i<arguments.length;i++){var toUnit=arguments[i];currentUnit.connect(toUnit);currentUnit=toUnit;}return this;};/**
		 *  connect the output of this node to the rest of the nodes in parallel.
		 *  @param {...AudioParam|Tone|AudioNode} nodes
		 *  @returns {Tone.AudioNode} this
		 *  @private
		 */Tone.AudioNode.prototype.fan=function(){for(var i=0;i<arguments.length;i++){this.connect(arguments[i]);}return this;};if(window.AudioNode){//give native nodes chain and fan methods
AudioNode.prototype.chain=Tone.AudioNode.prototype.chain;AudioNode.prototype.fan=Tone.AudioNode.prototype.fan;}/**
		 * Dispose and disconnect
		 * @return {Tone.AudioNode} this
		 */Tone.AudioNode.prototype.dispose=function(){if(Tone.isDefined(this.input)){if(this.input instanceof AudioNode){this.input.disconnect();}this.input=null;}if(Tone.isDefined(this.output)){if(this.output instanceof AudioNode){this.output.disconnect();}this.output=null;}this._context=null;return this;};return Tone.AudioNode;});Module(function(Tone){/**
		 *  @class  Base class for all Signals. Used Internally.
		 *
		 *  @constructor
		 *  @extends {Tone}
		 */Tone.SignalBase=function(){Tone.AudioNode.call(this);};Tone.extend(Tone.SignalBase,Tone.AudioNode);/**
		 *  When signals connect to other signals or AudioParams,
		 *  they take over the output value of that signal or AudioParam.
		 *  For all other nodes, the behavior is the same as a default <code>connect</code>.
		 *
		 *  @override
		 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node
		 *  @param {number} [outputNumber=0] The output number to connect from.
		 *  @param {number} [inputNumber=0] The input number to connect to.
		 *  @returns {Tone.SignalBase} this
		 */Tone.SignalBase.prototype.connect=function(node,outputNumber,inputNumber){//zero it out so that the signal can have full control
if(Tone.Signal&&Tone.Signal===node.constructor||Tone.Param&&Tone.Param===node.constructor){//cancel changes
node._param.cancelScheduledValues(0);//reset the value
node._param.value=0;//mark the value as overridden
node.overridden=true;}else if(node instanceof AudioParam){node.cancelScheduledValues(0);node.value=0;}Tone.AudioNode.prototype.connect.call(this,node,outputNumber,inputNumber);return this;};return Tone.SignalBase;});Module(function(Tone){if(Tone.supported){//fixes safari only bug which is still present in 11
var ua=navigator.userAgent.toLowerCase();var isSafari=ua.includes('safari')&&!ua.includes('chrome');if(isSafari){var WaveShaperNode=function WaveShaperNode(context){this._internalNode=this.input=this.output=context._native_createWaveShaper();this._curve=null;for(var prop in this._internalNode){this._defineProperty(this._internalNode,prop);}};Object.defineProperty(WaveShaperNode.prototype,'curve',{get:function get(){return this._curve;},set:function set(curve){this._curve=curve;var array=new Float32Array(curve.length+1);array.set(curve,1);array[0]=curve[0];this._internalNode.curve=array;}});WaveShaperNode.prototype._defineProperty=function(context,prop){if(Tone.isUndef(this[prop])){Object.defineProperty(this,prop,{get:function get(){if(typeof context[prop]==='function'){return context[prop].bind(context);}else{return context[prop];}},set:function set(val){context[prop]=val;}});}};AudioContext.prototype._native_createWaveShaper=AudioContext.prototype.createWaveShaper;AudioContext.prototype.createWaveShaper=function(){return new WaveShaperNode(this);};}}});Module(function(Tone){/**
		 *  @class Wraps the native Web Audio API
		 *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @param {function|Array|Number} mapping The function used to define the values.
		 *                                    The mapping function should take two arguments:
		 *                                    the first is the value at the current position
		 *                                    and the second is the array position.
		 *                                    If the argument is an array, that array will be
		 *                                    set as the wave shaping function. The input
		 *                                    signal is an AudioRange [-1, 1] value and the output
		 *                                    signal can take on any numerical values.
		 *
		 *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.
		 *  @example
		 * var timesTwo = new Tone.WaveShaper(function(val){
		 * 	return val * 2;
		 * }, 2048);
		 *  @example
		 * //a waveshaper can also be constructed with an array of values
		 * var invert = new Tone.WaveShaper([1, -1]);
		 */Tone.WaveShaper=function(mapping,bufferLen){Tone.SignalBase.call(this);/**
			 *  the waveshaper
			 *  @type {WaveShaperNode}
			 *  @private
			 */this._shaper=this.input=this.output=this.context.createWaveShaper();/**
			 *  the waveshapers curve
			 *  @type {Float32Array}
			 *  @private
			 */this._curve=null;if(Array.isArray(mapping)){this.curve=mapping;}else if(isFinite(mapping)||Tone.isUndef(mapping)){this._curve=new Float32Array(Tone.defaultArg(mapping,1024));}else if(Tone.isFunction(mapping)){this._curve=new Float32Array(Tone.defaultArg(bufferLen,1024));this.setMap(mapping);}};Tone.extend(Tone.WaveShaper,Tone.SignalBase);/**
		 *  Uses a mapping function to set the value of the curve.
		 *  @param {function} mapping The function used to define the values.
		 *                            The mapping function take two arguments:
		 *                            the first is the value at the current position
		 *                            which goes from -1 to 1 over the number of elements
		 *                            in the curve array. The second argument is the array position.
		 *  @returns {Tone.WaveShaper} this
		 *  @example
		 * //map the input signal from [-1, 1] to [0, 10]
		 * shaper.setMap(function(val, index){
		 * 	return (val + 1) * 5;
		 * })
		 */Tone.WaveShaper.prototype.setMap=function(mapping){var array=new Array(this._curve.length);for(var i=0,len=this._curve.length;i<len;i++){var normalized=i/(len-1)*2-1;array[i]=mapping(normalized,i);}this.curve=array;return this;};/**
		 * The array to set as the waveshaper curve. For linear curves
		 * array length does not make much difference, but for complex curves
		 * longer arrays will provide smoother interpolation.
		 * @memberOf Tone.WaveShaper#
		 * @type {Array}
		 * @name curve
		 */Object.defineProperty(Tone.WaveShaper.prototype,'curve',{get:function get(){return this._shaper.curve;},set:function set(mapping){this._curve=new Float32Array(mapping);this._shaper.curve=this._curve;}});/**
		 * Specifies what type of oversampling (if any) should be used when
		 * applying the shaping curve. Can either be "none", "2x" or "4x".
		 * @memberOf Tone.WaveShaper#
		 * @type {string}
		 * @name oversample
		 */Object.defineProperty(Tone.WaveShaper.prototype,'oversample',{get:function get(){return this._shaper.oversample;},set:function set(oversampling){if(['none','2x','4x'].includes(oversampling)){this._shaper.oversample=oversampling;}else{throw new RangeError('Tone.WaveShaper: oversampling must be either \'none\', \'2x\', or \'4x\'');}}});/**
		 *  Clean up.
		 *  @returns {Tone.WaveShaper} this
		 */Tone.WaveShaper.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._shaper.disconnect();this._shaper=null;this._curve=null;return this;};return Tone.WaveShaper;});Module(function(Tone){/**
		 *  @class Tone.TimeBase is a flexible encoding of time
		 *         which can be evaluated to and from a string.
		 *  @extends {Tone}
		 *  @param  {Time}  val    The time value as a number or string
		 *  @param  {String=}  units  Unit values
		 *  @example
		 * Tone.TimeBase(4, "n")
		 * Tone.TimeBase(2, "t")
		 * Tone.TimeBase("2t")
		 * Tone.TimeBase("2t") + Tone.TimeBase("4n");
		 */Tone.TimeBase=function(val,units){//allows it to be constructed with or without 'new'
if(this instanceof Tone.TimeBase){/**
				 *  The value
				 *  @type  {Number|String|Tone.TimeBase}
				 *  @private
				 */this._val=val;/**
				 * The units
				 * @type {String?}
				 * @private
				 */this._units=units;//test if the value is a string representation of a number
if(Tone.isUndef(this._units)&&Tone.isString(this._val)&&// eslint-disable-next-line eqeqeq
parseFloat(this._val)==this._val&&this._val.charAt(0)!=='+'){this._val=parseFloat(this._val);this._units=this._defaultUnits;}else if(val&&val.constructor===this.constructor){//if they're the same type, just copy values over
this._val=val._val;this._units=val._units;}else if(val instanceof Tone.TimeBase){switch(this._defaultUnits){case's':this._val=val.toSeconds();break;case'i':this._val=val.toTicks();break;case'hz':this._val=val.toFrequency();break;case'midi':this._val=val.toMidi();break;default:throw new Error('Unrecognized default units '+this._defaultUnits);}}}else{return new Tone.TimeBase(val,units);}};Tone.extend(Tone.TimeBase);///////////////////////////////////////////////////////////////////////////
//	ABSTRACT SYNTAX TREE PARSER
///////////////////////////////////////////////////////////////////////////
/**
		 *  All the primary expressions.
		 *  @private
		 *  @type  {Object}
		 */Tone.TimeBase.prototype._expressions={'n':{regexp:/^(\d+)n(\.?)$/i,method:function method(value,dot){value=parseInt(value);var scalar=dot==='.'?1.5:1;if(value===1){return this._beatsToUnits(this._getTimeSignature())*scalar;}else{return this._beatsToUnits(4/value)*scalar;}}},'t':{regexp:/^(\d+)t$/i,method:function method(value){value=parseInt(value);return this._beatsToUnits(8/(parseInt(value)*3));}},'m':{regexp:/^(\d+)m$/i,method:function method(value){return this._beatsToUnits(parseInt(value)*this._getTimeSignature());}},'i':{regexp:/^(\d+)i$/i,method:function method(value){return this._ticksToUnits(parseInt(value));}},'hz':{regexp:/^(\d+(?:\.\d+)?)hz$/i,method:function method(value){return this._frequencyToUnits(parseFloat(value));}},'tr':{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/,method:function method(m,q,s){var total=0;if(m&&m!=='0'){total+=this._beatsToUnits(this._getTimeSignature()*parseFloat(m));}if(q&&q!=='0'){total+=this._beatsToUnits(parseFloat(q));}if(s&&s!=='0'){total+=this._beatsToUnits(parseFloat(s)/4);}return total;}},'s':{regexp:/^(\d+(?:\.\d+)?)s$/,method:function method(value){return this._secondsToUnits(parseFloat(value));}},'samples':{regexp:/^(\d+)samples$/,method:function method(value){return parseInt(value)/this.context.sampleRate;}},'default':{regexp:/^(\d+(?:\.\d+)?)$/,method:function method(value){return this._expressions[this._defaultUnits].method.call(this,value);}}};/**
		 *  The default units if none are given.
		 *  @type {String}
		 *  @private
		 */Tone.TimeBase.prototype._defaultUnits='s';///////////////////////////////////////////////////////////////////////////
//	TRANSPORT FALLBACKS
///////////////////////////////////////////////////////////////////////////
/**
		 * Return the bpm, or 120 if Transport is not available
		 * @type {Number}
		 * @private
		 */Tone.TimeBase.prototype._getBpm=function(){if(Tone.Transport){return Tone.Transport.bpm.value;}else{return 120;}};/**
		 * Return the timeSignature or 4 if Transport is not available
		 * @type {Number}
		 * @private
		 */Tone.TimeBase.prototype._getTimeSignature=function(){if(Tone.Transport){return Tone.Transport.timeSignature;}else{return 4;}};/**
		 * Return the PPQ or 192 if Transport is not available
		 * @type {Number}
		 * @private
		 */Tone.TimeBase.prototype._getPPQ=function(){if(Tone.Transport){return Tone.Transport.PPQ;}else{return 192;}};/**
		 * Return the current time in whichever context is relevant
		 * @type {Number}
		 * @private
		 */Tone.TimeBase.prototype._now=function(){return this.now();};///////////////////////////////////////////////////////////////////////////
//	UNIT CONVERSIONS
///////////////////////////////////////////////////////////////////////////
/**
		 *  Returns the value of a frequency in the current units
		 *  @param {Frequency} freq
		 *  @return  {Number}
		 *  @private
		 */Tone.TimeBase.prototype._frequencyToUnits=function(freq){return 1/freq;};/**
		 *  Return the value of the beats in the current units
		 *  @param {Number} beats
		 *  @return  {Number}
		 *  @private
		 */Tone.TimeBase.prototype._beatsToUnits=function(beats){return 60/this._getBpm()*beats;};/**
		 *  Returns the value of a second in the current units
		 *  @param {Seconds} seconds
		 *  @return  {Number}
		 *  @private
		 */Tone.TimeBase.prototype._secondsToUnits=function(seconds){return seconds;};/**
		 *  Returns the value of a tick in the current time units
		 *  @param {Ticks} ticks
		 *  @return  {Number}
		 *  @private
		 */Tone.TimeBase.prototype._ticksToUnits=function(ticks){return ticks*(this._beatsToUnits(1)/this._getPPQ());};/**
		 * With no arguments, return 'now'
		 *  @return  {Number}
		 *  @private
		 */Tone.TimeBase.prototype._noArg=function(){return this._now();};///////////////////////////////////////////////////////////////////////////
//	EXPRESSIONS
///////////////////////////////////////////////////////////////////////////
/**
		 *  Evaluate the time value. Returns the time
		 *  in seconds.
		 *  @return  {Seconds}
		 */Tone.TimeBase.prototype.valueOf=function(){if(Tone.isUndef(this._val)){return this._noArg();}else if(Tone.isString(this._val)&&Tone.isUndef(this._units)){for(var units in this._expressions){if(this._expressions[units].regexp.test(this._val.trim())){this._units=units;break;}}}if(Tone.isDefined(this._units)){var expr=this._expressions[this._units];var matching=this._val.toString().trim().match(expr.regexp);if(matching){return expr.method.apply(this,matching.slice(1));}else{return expr.method.call(this,parseFloat(this._val));}}else{return this._val;}};/**
		 *  Return the value in seconds
		 *  @return {Seconds}
		 */Tone.TimeBase.prototype.toSeconds=function(){return this.valueOf();};/**
		 *  Return the value in hertz
		 *  @return {Frequency}
		 */Tone.TimeBase.prototype.toFrequency=function(){return 1/this.toSeconds();};/**
		 *  Return the time in samples
		 *  @return  {Samples}
		 */Tone.TimeBase.prototype.toSamples=function(){return this.toSeconds()*this.context.sampleRate;};/**
		 *  Return the time in milliseconds.
		 *  @return  {Milliseconds}
		 */Tone.TimeBase.prototype.toMilliseconds=function(){return this.toSeconds()*1000;};/**
		 *  Clean up
		 *  @return {Tone.TimeBase} this
		 */Tone.TimeBase.prototype.dispose=function(){this._val=null;this._units=null;};return Tone.TimeBase;});Module(function(Tone){/**
		 *  @class Tone.Frequency is a primitive type for encoding Frequency values.
		 *         Eventually all time values are evaluated to hertz
		 *         using the `eval` method.
		 *  @constructor
		 *  @extends {Tone.TimeBase}
		 *  @param  {String|Number}  val    The time value.
		 *  @param  {String=}  units  The units of the value.
		 *  @example
		 * Tone.Frequency("C3") // 261
		 * Tone.Frequency(38, "midi") //
		 * Tone.Frequency("C3").transpose(4);
		 */Tone.Frequency=function(val,units){if(this instanceof Tone.Frequency){Tone.TimeBase.call(this,val,units);}else{return new Tone.Frequency(val,units);}};Tone.extend(Tone.Frequency,Tone.TimeBase);///////////////////////////////////////////////////////////////////////////
//	AUGMENT BASE EXPRESSIONS
///////////////////////////////////////////////////////////////////////////
Tone.Frequency.prototype._expressions=Object.assign({},Tone.TimeBase.prototype._expressions,{'midi':{regexp:/^(\d+(?:\.\d+)?midi)/,method:function method(value){if(this._defaultUnits==='midi'){return value;}else{return Tone.Frequency.mtof(value);}}},'note':{regexp:/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,method:function method(pitch,octave){var index=noteToScaleIndex[pitch.toLowerCase()];var noteNumber=index+(parseInt(octave)+1)*12;if(this._defaultUnits==='midi'){return noteNumber;}else{return Tone.Frequency.mtof(noteNumber);}}},'tr':{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,method:function method(m,q,s){var total=1;if(m&&m!=='0'){total*=this._beatsToUnits(this._getTimeSignature()*parseFloat(m));}if(q&&q!=='0'){total*=this._beatsToUnits(parseFloat(q));}if(s&&s!=='0'){total*=this._beatsToUnits(parseFloat(s)/4);}return total;}}});///////////////////////////////////////////////////////////////////////////
//	EXPRESSIONS
///////////////////////////////////////////////////////////////////////////
/**
		 *  Transposes the frequency by the given number of semitones.
		 *  @param  {Interval}  interval
		 *  @return  {Tone.Frequency} A new transposed frequency
		 *  @example
		 * Tone.Frequency("A4").transpose(3); //"C5"
		 */Tone.Frequency.prototype.transpose=function(interval){return new this.constructor(this.valueOf()*Tone.intervalToFrequencyRatio(interval));};/**
		 *  Takes an array of semitone intervals and returns
		 *  an array of frequencies transposed by those intervals.
		 *  @param  {Array}  intervals
		 *  @return  {Array<Tone.Frequency>} Returns an array of Frequencies
		 *  @example
		 * Tone.Frequency("A4").harmonize([0, 3, 7]); //["A4", "C5", "E5"]
		 */Tone.Frequency.prototype.harmonize=function(intervals){return intervals.map(function(interval){return this.transpose(interval);}.bind(this));};///////////////////////////////////////////////////////////////////////////
//	UNIT CONVERSIONS
///////////////////////////////////////////////////////////////////////////
/**
		 *  Return the value of the frequency as a MIDI note
		 *  @return  {MIDI}
		 *  @example
		 * Tone.Frequency("C4").toMidi(); //60
		 */Tone.Frequency.prototype.toMidi=function(){return Tone.Frequency.ftom(this.valueOf());};/**
		 *  Return the value of the frequency in Scientific Pitch Notation
		 *  @return  {Note}
		 *  @example
		 * Tone.Frequency(69, "midi").toNote(); //"A4"
		 */Tone.Frequency.prototype.toNote=function(){var freq=this.toFrequency();var log=Math.log2(freq/Tone.Frequency.A4);var noteNumber=Math.round(12*log)+57;var octave=Math.floor(noteNumber/12);if(octave<0){noteNumber+=-12*octave;}var noteName=scaleIndexToNote[noteNumber%12];return noteName+octave.toString();};/**
		 *  Return the duration of one cycle in seconds.
		 *  @return  {Seconds}
		 */Tone.Frequency.prototype.toSeconds=function(){return 1/Tone.TimeBase.prototype.toSeconds.call(this);};/**
		 *  Return the value in Hertz
		 *  @return  {Frequency}
		 */Tone.Frequency.prototype.toFrequency=function(){return Tone.TimeBase.prototype.toFrequency.call(this);};/**
		 *  Return the duration of one cycle in ticks
		 *  @return  {Ticks}
		 */Tone.Frequency.prototype.toTicks=function(){var quarterTime=this._beatsToUnits(1);var quarters=this.valueOf()/quarterTime;return Math.floor(quarters*Tone.Transport.PPQ);};///////////////////////////////////////////////////////////////////////////
//	UNIT CONVERSIONS HELPERS
///////////////////////////////////////////////////////////////////////////
/**
		 *  With no arguments, return 0
		 *  @return  {Number}
		 *  @private
		 */Tone.Frequency.prototype._noArg=function(){return 0;};/**
		 *  Returns the value of a frequency in the current units
		 *  @param {Frequency} freq
		 *  @return  {Number}
		 *  @private
		 */Tone.Frequency.prototype._frequencyToUnits=function(freq){return freq;};/**
		 *  Returns the value of a tick in the current time units
		 *  @param {Ticks} ticks
		 *  @return  {Number}
		 *  @private
		 */Tone.Frequency.prototype._ticksToUnits=function(ticks){return 1/(ticks*60/(Tone.Transport.bpm.value*Tone.Transport.PPQ));};/**
		 *  Return the value of the beats in the current units
		 *  @param {Number} beats
		 *  @return  {Number}
		 *  @private
		 */Tone.Frequency.prototype._beatsToUnits=function(beats){return 1/Tone.TimeBase.prototype._beatsToUnits.call(this,beats);};/**
		 *  Returns the value of a second in the current units
		 *  @param {Seconds} seconds
		 *  @return  {Number}
		 *  @private
		 */Tone.Frequency.prototype._secondsToUnits=function(seconds){return 1/seconds;};/**
		 *  The default units if none are given.
		 *  @private
		 */Tone.Frequency.prototype._defaultUnits='hz';///////////////////////////////////////////////////////////////////////////
//	FREQUENCY CONVERSIONS
///////////////////////////////////////////////////////////////////////////
/**
		 *  Note to scale index
		 *  @type  {Object}
		 */var noteToScaleIndex={'cbb':-2,'cb':-1,'c':0,'c#':1,'cx':2,'dbb':0,'db':1,'d':2,'d#':3,'dx':4,'ebb':2,'eb':3,'e':4,'e#':5,'ex':6,'fbb':3,'fb':4,'f':5,'f#':6,'fx':7,'gbb':5,'gb':6,'g':7,'g#':8,'gx':9,'abb':7,'ab':8,'a':9,'a#':10,'ax':11,'bbb':9,'bb':10,'b':11,'b#':12,'bx':13};/**
		 *  scale index to note (sharps)
		 *  @type  {Array}
		 */var scaleIndexToNote=['C','C#','D','D#','E','F','F#','G','G#','A','A#','B'];/**
		 *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)
		 *  A4's values in Hertz.
		 *  @type {Frequency}
		 *  @static
		 */Tone.Frequency.A4=440;/**
		 *  Convert a MIDI note to frequency value.
		 *  @param  {MIDI} midi The midi number to convert.
		 *  @return {Frequency} the corresponding frequency value
		 *  @static
		 *  @example
		 * Tone.Frequency.mtof(69); // returns 440
		 */Tone.Frequency.mtof=function(midi){return Tone.Frequency.A4*Math.pow(2,(midi-69)/12);};/**
		 *  Convert a frequency value to a MIDI note.
		 *  @param {Frequency} frequency The value to frequency value to convert.
		 *  @returns  {MIDI}
		 *  @static
		 *  @example
		 * Tone.Frequency.ftom(440); // returns 69
		 */Tone.Frequency.ftom=function(frequency){return 69+Math.round(12*Math.log2(frequency/Tone.Frequency.A4));};return Tone.Frequency;});Module(function(Tone){/**
		 *  @class Tone.Time is a primitive type for encoding Time values.
		 *         Tone.Time can be constructed with or without the `new` keyword. Tone.Time can be passed
		 *         into the parameter of any method which takes time as an argument.
		 *  @constructor
		 *  @extends {Tone.TimeBase}
		 *  @param  {String|Number}  val    The time value.
		 *  @param  {String=}  units  The units of the value.
		 *  @example
		 * var t = Tone.Time("4n");//a quarter note
		 */Tone.Time=function(val,units){if(this instanceof Tone.Time){Tone.TimeBase.call(this,val,units);}else{return new Tone.Time(val,units);}};Tone.extend(Tone.Time,Tone.TimeBase);/**
		 * Extend the base expressions
		 */Tone.Time.prototype._expressions=Object.assign({},Tone.TimeBase.prototype._expressions,{'quantize':{regexp:/^@(.+)/,method:function method(capture){if(Tone.Transport){var quantTo=new this.constructor(capture);return Tone.Transport.nextSubdivision(quantTo);}else{return 0;}}},'now':{regexp:/^\+(.+)/,method:function method(capture){return this._now()+new this.constructor(capture);}}});/**
		 *  Quantize the time by the given subdivision. Optionally add a
		 *  percentage which will move the time value towards the ideal
		 *  quantized value by that percentage.
		 *  @param  {Number|Time}  val    The subdivision to quantize to
		 *  @param  {NormalRange}  [percent=1]  Move the time value
		 *                                   towards the quantized value by
		 *                                   a percentage.
		 *  @return  {Number}  this
		 *  @example
		 * Tone.Time(21).quantize(2) //returns 22
		 * Tone.Time(0.6).quantize("4n", 0.5) //returns 0.55
		 */Tone.Time.prototype.quantize=function(subdiv,percent){percent=Tone.defaultArg(percent,1);var subdivision=new this.constructor(subdiv);var value=this.valueOf();var multiple=Math.round(value/subdivision);var ideal=multiple*subdivision;var diff=ideal-value;return value+diff*percent;};///////////////////////////////////////////////////////////////////////////
// CONVERSIONS
///////////////////////////////////////////////////////////////////////////
/**
		 *  Convert a Time to Notation. The notation values are will be the
		 *  closest representation between 1m to 128th note.
		 *  @return {Notation}
		 *  @example
		 * //if the Transport is at 120bpm:
		 * Tone.Time(2).toNotation();//returns "1m"
		 */Tone.Time.prototype.toNotation=function(){var time=this.toSeconds();var testNotations=['1m'];for(var power=1;power<8;power++){var subdiv=Math.pow(2,power);testNotations.push(subdiv+'n.');testNotations.push(subdiv+'n');testNotations.push(subdiv+'t');}testNotations.push('0');//find the closets notation representation
var closest=testNotations[0];var closestSeconds=Tone.Time(testNotations[0]).toSeconds();testNotations.forEach(function(notation){var notationSeconds=Tone.Time(notation).toSeconds();if(Math.abs(notationSeconds-time)<Math.abs(closestSeconds-time)){closest=notation;closestSeconds=notationSeconds;}});return closest;};/**
		 *  Return the time encoded as Bars:Beats:Sixteenths.
		 *  @return  {BarsBeatsSixteenths}
		 */Tone.Time.prototype.toBarsBeatsSixteenths=function(){var quarterTime=this._beatsToUnits(1);var quarters=this.valueOf()/quarterTime;var measures=Math.floor(quarters/this._getTimeSignature());var sixteenths=quarters%1*4;quarters=Math.floor(quarters)%this._getTimeSignature();sixteenths=sixteenths.toString();if(sixteenths.length>3){// the additional parseFloat removes insignificant trailing zeroes
sixteenths=parseFloat(parseFloat(sixteenths).toFixed(3));}var progress=[measures,quarters,sixteenths];return progress.join(':');};/**
		 *  Return the time in ticks.
		 *  @return  {Ticks}
		 */Tone.Time.prototype.toTicks=function(){var quarterTime=this._beatsToUnits(1);var quarters=this.valueOf()/quarterTime;return Math.round(quarters*this._getPPQ());};/**
		 *  Return the time in seconds.
		 *  @return  {Seconds}
		 */Tone.Time.prototype.toSeconds=function(){return this.valueOf();};/**
		 *  Return the value as a midi note.
		 *  @return  {Midi}
		 */Tone.Time.prototype.toMidi=function(){return Tone.Frequency.ftom(this.toFrequency());};return Tone.Time;});Module(function(Tone){/**
		 *  @class Tone.TransportTime is a the time along the Transport's
		 *         timeline. It is similar to Tone.Time, but instead of evaluating
		 *         against the AudioContext's clock, it is evaluated against
		 *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).
		 *  @constructor
		 *  @param  {Time}  val    The time value as a number or string
		 *  @param  {String=}  units  Unit values
		 *  @extends {Tone.Time}
		 */Tone.TransportTime=function(val,units){if(this instanceof Tone.TransportTime){Tone.Time.call(this,val,units);}else{return new Tone.TransportTime(val,units);}};Tone.extend(Tone.TransportTime,Tone.Time);/**
		 * Return the current time in whichever context is relevant
		 * @type {Number}
		 * @private
		 */Tone.TransportTime.prototype._now=function(){return Tone.Transport.seconds;};return Tone.TransportTime;});Module(function(Tone){///////////////////////////////////////////////////////////////////////////
//	TYPES
///////////////////////////////////////////////////////////////////////////
/**
		 * Units which a value can take on.
		 * @enum {String}
		 */Tone.Type={/**
			 *  Default units
			 *  @typedef {Default}
			 */Default:'number',/**
			 *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).
			 *
			 *  * Numbers, which will be taken literally as the time (in seconds).
			 *  * Notation, ("4n", "8t") describes time in BPM and time signature relative values.
			 *  * TransportTime, ("4:3:2") will also provide tempo and time signature relative times
			 *  in the form BARS:QUARTERS:SIXTEENTHS.
			 *  * Frequency, ("8hz") is converted to the length of the cycle in seconds.
			 *  * Now-Relative, ("+1") prefix any of the above with "+" and it will be interpreted as
			 *  "the current time plus whatever expression follows".
			 *  * Expressions, ("3:0 + 2 - (1m / 7)") any of the above can also be combined
			 *  into a mathematical expression which will be evaluated to compute the desired time.
			 *  * No Argument, for methods which accept time, no argument will be interpreted as
			 *  "now" (i.e. the currentTime).
			 *
			 *  @typedef {Time}
			 */Time:'time',/**
			 *  Frequency can be described similar to time, except ultimately the
			 *  values are converted to frequency instead of seconds. A number
			 *  is taken literally as the value in hertz. Additionally any of the
			 *  Time encodings can be used. Note names in the form
			 *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their
			 *  frequency value.
			 *  @typedef {Frequency}
			 */Frequency:'frequency',/**
			 *  TransportTime describes a position along the Transport's timeline. It is
			 *  similar to Time in that it uses all the same encodings, but TransportTime specifically
			 *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.
			 *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)
			 *  @typedef {TransportTime}
			 */TransportTime:'transportTime',/**
			 *  Ticks are the basic subunit of the Transport. They are
			 *  the smallest unit of time that the Transport supports.
			 *  @typedef {Ticks}
			 */Ticks:'ticks',/**
			 *  Normal values are within the range [0, 1].
			 *  @typedef {NormalRange}
			 */NormalRange:'normalRange',/**
			 *  AudioRange values are between [-1, 1].
			 *  @typedef {AudioRange}
			 */AudioRange:'audioRange',/**
			 *  Decibels are a logarithmic unit of measurement which is useful for volume
			 *  because of the logarithmic way that we perceive loudness. 0 decibels
			 *  means no change in volume. -10db is approximately half as loud and 10db
			 *  is twice is loud.
			 *  @typedef {Decibels}
			 */Decibels:'db',/**
			 *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.
			 *  @typedef {Interval}
			 */Interval:'interval',/**
			 *  Beats per minute.
			 *  @typedef {BPM}
			 */BPM:'bpm',/**
			 *  The value must be greater than or equal to 0.
			 *  @typedef {Positive}
			 */Positive:'positive',/**
			 *  Gain is the ratio between input and output of a signal.
			 *  A gain of 0 is the same as silencing the signal. A gain of
			 *  1, causes no change to the incoming signal.
			 *  @typedef {Gain}
			 */Gain:'gain',/**
			 *  A cent is a hundredth of a semitone.
			 *  @typedef {Cents}
			 */Cents:'cents',/**
			 *  Angle between 0 and 360.
			 *  @typedef {Degrees}
			 */Degrees:'degrees',/**
			 *  A number representing a midi note.
			 *  @typedef {MIDI}
			 */MIDI:'midi',/**
			 *  A colon-separated representation of time in the form of
			 *  Bars:Beats:Sixteenths.
			 *  @typedef {BarsBeatsSixteenths}
			 */BarsBeatsSixteenths:'barsBeatsSixteenths',/**
			 *  Sampling is the reduction of a continuous signal to a discrete signal.
			 *  Audio is typically sampled 44100 times per second.
			 *  @typedef {Samples}
			 */Samples:'samples',/**
			 *  Hertz are a frequency representation defined as one cycle per second.
			 *  @typedef {Hertz}
			 */Hertz:'hertz',/**
			 *  A frequency represented by a letter name,
			 *  accidental and octave. This system is known as
			 *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).
			 *  @typedef {Note}
			 */Note:'note',/**
			 *  One millisecond is a thousandth of a second.
			 *  @typedef {Milliseconds}
			 */Milliseconds:'milliseconds',/**
			 *  Seconds are the time unit of the AudioContext. In the end,
			 *  all values need to be evaluated to seconds.
			 *  @typedef {Seconds}
			 */Seconds:'seconds',/**
			 *  A string representing a duration relative to a measure.
			 *  * "4n" = quarter note
			 *  * "2m" = two measures
			 *  * "8t" = eighth-note triplet
			 *  @typedef {Notation}
			 */Notation:'notation'};///////////////////////////////////////////////////////////////////////////
// AUGMENT TONE's PROTOTYPE
///////////////////////////////////////////////////////////////////////////
/**
		 *  Convert Time into seconds.
		 *
		 *  Unlike the method which it overrides, this takes into account
		 *  transporttime and musical notation.
		 *
		 *  Time : 1.40
		 *  Notation: 4n or 1m or 2t
		 *  Now Relative: +3n
		 *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)
		 *
		 *  @param  {Time} time
		 *  @return {Seconds}
		 */Tone.prototype.toSeconds=function(time){if(Tone.isNumber(time)){return time;}else if(Tone.isUndef(time)){return this.now();}else if(Tone.isString(time)){return new Tone.Time(time).toSeconds();}else if(time instanceof Tone.TimeBase){return time.toSeconds();}};/**
		 *  Convert a frequency representation into a number.
		 *  @param  {Frequency} freq
		 *  @return {Hertz}      the frequency in hertz
		 */Tone.prototype.toFrequency=function(freq){if(Tone.isNumber(freq)){return freq;}else if(Tone.isString(freq)||Tone.isUndef(freq)){return new Tone.Frequency(freq).valueOf();}else if(freq instanceof Tone.TimeBase){return freq.toFrequency();}};/**
		 *  Convert a time representation into ticks.
		 *  @param  {Time} time
		 *  @return {Ticks}  the time in ticks
		 */Tone.prototype.toTicks=function(time){if(Tone.isNumber(time)||Tone.isString(time)){return new Tone.TransportTime(time).toTicks();}else if(Tone.isUndef(time)){return Tone.Transport.ticks;}else if(time instanceof Tone.TimeBase){return time.toTicks();}};return Tone;});Module(function(Tone){/**
		 *  @class Tone.Param wraps the native Web Audio's AudioParam to provide
		 *         additional unit conversion functionality. It also
		 *         serves as a base-class for classes which have a single,
		 *         automatable parameter.
		 *  @extends {Tone.AudioNode}
		 *  @param  {AudioParam}  param  The parameter to wrap.
		 *  @param  {Tone.Type} units The units of the audio param.
		 *  @param  {Boolean} convert If the param should be converted.
		 */Tone.Param=function(){var options=Tone.defaults(arguments,['param','units','convert'],Tone.Param);Tone.AudioNode.call(this);/**
			 *  The native parameter to control
			 *  @type  {AudioParam}
			 *  @private
			 */this._param=this.input=options.param;/**
			 *  The units of the parameter
			 *  @type {Tone.Type}
			 */this.units=options.units;/**
			 *  If the value should be converted or not
			 *  @type {Boolean}
			 */this.convert=options.convert;/**
			 *  True if the signal value is being overridden by
			 *  a connected signal.
			 *  @readOnly
			 *  @type  {boolean}
			 *  @private
			 */this.overridden=false;/**
			 * The timeline which tracks all of the automations.
			 * @type {Tone.Timeline}
			 * @private
			 */this._events=new Tone.Timeline(1000);if(Tone.isDefined(options.value)&&this._param){this.value=options.value;}};Tone.extend(Tone.Param,Tone.AudioNode);/**
		 *  Defaults
		 *  @type  {Object}
		 *  @const
		 */Tone.Param.defaults={'units':Tone.Type.Default,'convert':true,'param':undefined};/**
		 * The current value of the parameter.
		 * @memberOf Tone.Param#
		 * @type {Number}
		 * @name value
		 */Object.defineProperty(Tone.Param.prototype,'value',{get:function get(){var now=this.now();return this._toUnits(this.getValueAtTime(now));},set:function set(value){this._initialValue=this._fromUnits(value);this.cancelScheduledValues(this.context.currentTime);this.setValueAtTime(value,this.context.currentTime);}});/**
		 * The minimum output value of the parameter
		 * @memberOf Tone.Param#
		 * @type {Number}
		 * @name value
		 */Object.defineProperty(Tone.Param.prototype,'minValue',{get:function get(){if(this.units===Tone.Type.Time||this.units===Tone.Type.Frequency||this.units===Tone.Type.NormalRange||this.units===Tone.Type.Positive||this.units===Tone.Type.BPM){return 0;}else if(this.units===Tone.Type.AudioRange){return-1;}else if(this.units===Tone.Type.Decibels){return-Infinity;}else{return this._param.minValue;}}});/**
		 * The maximum output value of the parameter
		 * @memberOf Tone.Param#
		 * @type {Number}
		 * @name value
		 */Object.defineProperty(Tone.Param.prototype,'maxValue',{get:function get(){if(this.units===Tone.Type.NormalRange||this.units===Tone.Type.AudioRange){return 1;}else{return this._param.maxValue;}}});/**
		 *  Convert the given value from the type specified by Tone.Param.units
		 *  into the destination value (such as Gain or Frequency).
		 *  @private
		 *  @param  {*} val the value to convert
		 *  @return {number}     the number which the value should be set to
		 */Tone.Param.prototype._fromUnits=function(val){if((this.convert||Tone.isUndef(this.convert))&&!this.overridden){switch(this.units){case Tone.Type.Time:return this.toSeconds(val);case Tone.Type.Frequency:return this.toFrequency(val);case Tone.Type.Decibels:return Tone.dbToGain(val);case Tone.Type.NormalRange:return Math.min(Math.max(val,0),1);case Tone.Type.AudioRange:return Math.min(Math.max(val,-1),1);case Tone.Type.Positive:return Math.max(val,0);default:return val;}}else{return val;}};/**
		 * Convert the parameters value into the units specified by Tone.Param.units.
		 * @private
		 * @param  {number} val the value to convert
		 * @return {number}
		 */Tone.Param.prototype._toUnits=function(val){if(this.convert||Tone.isUndef(this.convert)){switch(this.units){case Tone.Type.Decibels:return Tone.gainToDb(val);default:return val;}}else{return val;}};/**
		 *  the minimum output value
		 *  @type {Number}
		 *  @private
		 */Tone.Param.prototype._minOutput=0.00001;/**
		 *  The event types
		 *  @enum {String}
		 *  @private
		 */Tone.Param.AutomationType={Linear:'linearRampToValueAtTime',Exponential:'exponentialRampToValueAtTime',Target:'setTargetAtTime',SetValue:'setValueAtTime'};/**
		 *  Schedules a parameter value change at the given time.
		 *  @param {*}	value The value to set the signal.
		 *  @param {Time}  time The time when the change should occur.
		 *  @returns {Tone.Param} this
		 *  @example
		 * //set the frequency to "G4" in exactly 1 second from now.
		 * freq.setValueAtTime("G4", "+1");
		 */Tone.Param.prototype.setValueAtTime=function(value,time){time=this.toSeconds(time);value=this._fromUnits(value);this._events.add({'type':Tone.Param.AutomationType.SetValue,'value':value,'time':time});this._param.setValueAtTime(value,time);return this;};/**
		 *  Get the signals value at the given time. Subsequent scheduling
		 *  may invalidate the returned value.
		 *  @param {Time} time When to get the value
		 *  @returns {Number} The value at the given time
		 */Tone.Param.prototype.getValueAtTime=function(time){time=this.toSeconds(time);var after=this._events.getAfter(time);var before=this._events.get(time);var initialValue=Tone.defaultArg(this._initialValue,this._param.defaultValue);var value=initialValue;//if it was set by
if(before===null){value=initialValue;}else if(before.type===Tone.Param.AutomationType.Target){var previous=this._events.getBefore(before.time);var previousVal;if(previous===null){previousVal=initialValue;}else{previousVal=previous.value;}value=this._exponentialApproach(before.time,previousVal,before.value,before.constant,time);}else if(after===null){value=before.value;}else if(after.type===Tone.Param.AutomationType.Linear){value=this._linearInterpolate(before.time,before.value,after.time,after.value,time);}else if(after.type===Tone.Param.AutomationType.Exponential){value=this._exponentialInterpolate(before.time,before.value,after.time,after.value,time);}else{value=before.value;}return value;};/**
		 *  Creates a schedule point with the current value at the current time.
		 *  This is useful for creating an automation anchor point in order to
		 *  schedule changes from the current value.
		 *
		 *  @param {number=} now (Optionally) pass the now value in.
		 *  @returns {Tone.Param} this
		 */Tone.Param.prototype.setRampPoint=function(time){time=this.toSeconds(time);var currentVal=this.getValueAtTime(time);this.cancelAndHoldAtTime(time);if(currentVal===0){currentVal=this._minOutput;}this.setValueAtTime(this._toUnits(currentVal),time);return this;};/**
		 *  Schedules a linear continuous change in parameter value from the
		 *  previous scheduled parameter value to the given value.
		 *
		 *  @param  {number} value
		 *  @param  {Time} endTime
		 *  @returns {Tone.Param} this
		 */Tone.Param.prototype.linearRampToValueAtTime=function(value,endTime){value=this._fromUnits(value);endTime=this.toSeconds(endTime);this._events.add({'type':Tone.Param.AutomationType.Linear,'value':value,'time':endTime});this._param.linearRampToValueAtTime(value,endTime);return this;};/**
		 *  Schedules an exponential continuous change in parameter value from
		 *  the previous scheduled parameter value to the given value.
		 *
		 *  @param  {number} value
		 *  @param  {Time} endTime
		 *  @returns {Tone.Param} this
		 */Tone.Param.prototype.exponentialRampToValueAtTime=function(value,endTime){value=this._fromUnits(value);value=Math.max(this._minOutput,value);endTime=this.toSeconds(endTime);//store the event
this._events.add({'type':Tone.Param.AutomationType.Exponential,'time':endTime,'value':value});this._param.exponentialRampToValueAtTime(value,endTime);return this;};/**
		 *  Schedules an exponential continuous change in parameter value from
		 *  the current time and current value to the given value over the
		 *  duration of the rampTime.
		 *
		 *  @param  {number} value   The value to ramp to.
		 *  @param  {Time} rampTime the time that it takes the
		 *                               value to ramp from it's current value
		 *  @param {Time}	[startTime=now] 	When the ramp should start.
		 *  @returns {Tone.Param} this
		 *  @example
		 * //exponentially ramp to the value 2 over 4 seconds.
		 * signal.exponentialRampTo(2, 4);
		 */Tone.Param.prototype.exponentialRampTo=function(value,rampTime,startTime){startTime=this.toSeconds(startTime);this.setRampPoint(startTime);this.exponentialRampToValueAtTime(value,startTime+this.toSeconds(rampTime));return this;};/**
		 *  Schedules an linear continuous change in parameter value from
		 *  the current time and current value to the given value over the
		 *  duration of the rampTime.
		 *
		 *  @param  {number} value   The value to ramp to.
		 *  @param  {Time} rampTime the time that it takes the
		 *                               value to ramp from it's current value
		 *  @param {Time}	[startTime=now] 	When the ramp should start.
		 *  @returns {Tone.Param} this
		 *  @example
		 * //linearly ramp to the value 4 over 3 seconds.
		 * signal.linearRampTo(4, 3);
		 */Tone.Param.prototype.linearRampTo=function(value,rampTime,startTime){startTime=this.toSeconds(startTime);this.setRampPoint(startTime);this.linearRampToValueAtTime(value,startTime+this.toSeconds(rampTime));return this;};/**
		 *  Start exponentially approaching the target value at the given time. Since it
		 *  is an exponential approach it will continue approaching after the ramp duration. The
		 *  rampTime is the time that it takes to reach over 99% of the way towards the value.
		 *  @param  {number} value   The value to ramp to.
		 *  @param  {Time} rampTime the time that it takes the
		 *                               value to ramp from it's current value
		 *  @param {Time}	[startTime=now] 	When the ramp should start.
		 *  @returns {Tone.Param} this
		 *  @example
		 * //exponentially ramp to the value 2 over 4 seconds.
		 * signal.exponentialRampTo(2, 4);
		 */Tone.Param.prototype.targetRampTo=function(value,rampTime,startTime){startTime=this.toSeconds(startTime);this.setRampPoint(startTime);this.exponentialApproachValueAtTime(value,startTime,rampTime);return this;};/**
		 *  Start exponentially approaching the target value at the given time. Since it
		 *  is an exponential approach it will continue approaching after the ramp duration. The
		 *  rampTime is the time that it takes to reach over 99% of the way towards the value. This methods
		 *  is similar to setTargetAtTime except the third argument is a time instead of a 'timeConstant'
		 *  @param  {number} value   The value to ramp to.
		 *  @param {Time}	time 	When the ramp should start.
		 *  @param  {Time} rampTime the time that it takes the
		 *                               value to ramp from it's current value
		 *  @returns {Tone.Param} this
		 *  @example
		 * //exponentially ramp to the value 2 over 4 seconds.
		 * signal.exponentialRampTo(2, 4);
		 */Tone.Param.prototype.exponentialApproachValueAtTime=function(value,time,rampTime){var timeConstant=Math.log(this.toSeconds(rampTime)+1)/Math.log(200);time=this.toSeconds(time);return this.setTargetAtTime(value,time,timeConstant);};/**
		 *  Start exponentially approaching the target value at the given time with
		 *  a rate having the given time constant.
		 *  @param {number} value
		 *  @param {Time} startTime
		 *  @param {number} timeConstant
		 *  @returns {Tone.Param} this
		 */Tone.Param.prototype.setTargetAtTime=function(value,startTime,timeConstant){value=this._fromUnits(value);// The value will never be able to approach without timeConstant > 0.
if(timeConstant<=0){throw new Error('timeConstant must be greater than 0');}startTime=this.toSeconds(startTime);this._events.add({'type':Tone.Param.AutomationType.Target,'value':value,'time':startTime,'constant':timeConstant});this._param.setTargetAtTime(value,startTime,timeConstant);return this;};/**
		 *  Sets an array of arbitrary parameter values starting at the given time
		 *  for the given duration.
		 *
		 *  @param {Array} values
		 *  @param {Time} startTime
		 *  @param {Time} duration
		 *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value
		 *  @returns {Tone.Param} this
		 */Tone.Param.prototype.setValueCurveAtTime=function(values,startTime,duration,scaling){scaling=Tone.defaultArg(scaling,1);duration=this.toSeconds(duration);startTime=this.toSeconds(startTime);this.setValueAtTime(values[0]*scaling,startTime);var segTime=duration/(values.length-1);for(var i=1;i<values.length;i++){this.linearRampToValueAtTime(values[i]*scaling,startTime+i*segTime);}return this;};/**
		 *  Cancels all scheduled parameter changes with times greater than or
		 *  equal to startTime.
		 *
		 *  @param  {Time} time
		 *  @returns {Tone.Param} this
		 */Tone.Param.prototype.cancelScheduledValues=function(time){time=this.toSeconds(time);this._events.cancel(time);this._param.cancelScheduledValues(time);return this;};/**
		 *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except
		 *  it holds the automated value at time until the next automated event.
		 *  @param  {Time} time
		 *  @returns {Tone.Param} this
		 */Tone.Param.prototype.cancelAndHoldAtTime=function(time){var valueAtTime=this.getValueAtTime(time);//if there is an event at the given time
//and that even is not a "set"
var before=this._events.get(time);var after=this._events.getAfter(time);if(before&&before.time===time){//remove everything after
if(after){this._events.cancel(after.time);}else{this._events.cancel(time+0.000001);}}else if(after){//cancel the next event(s)
this._events.cancel(after.time);if(!this._param.cancelAndHoldAtTime){this._param.cancelScheduledValues(time);}if(after.type===Tone.Param.AutomationType.Linear){if(!this._param.cancelAndHoldAtTime){this.linearRampToValueAtTime(valueAtTime,time);}else{this._events.add({'type':Tone.Param.AutomationType.Linear,'value':valueAtTime,'time':time});}}else if(after.type===Tone.Param.AutomationType.Exponential){if(!this._param.cancelAndHoldAtTime){this.exponentialRampToValueAtTime(valueAtTime,time);}else{this._events.add({'type':Tone.Param.AutomationType.Exponential,'value':valueAtTime,'time':time});}}}//set the value at the given time
this._events.add({'type':Tone.Param.AutomationType.SetValue,'value':valueAtTime,'time':time});if(this._param.cancelAndHoldAtTime){this._param.cancelAndHoldAtTime(time);}else{this._param.setValueAtTime(valueAtTime,time);}return this;};/**
		 *  Ramps to the given value over the duration of the rampTime.
		 *  Automatically selects the best ramp type (exponential or linear)
		 *  depending on the `units` of the signal
		 *
		 *  @param  {number} value
		 *  @param  {Time} rampTime 	The time that it takes the
		 *                              value to ramp from it's current value
		 *  @param {Time}	[startTime=now] 	When the ramp should start.
		 *  @returns {Tone.Param} this
		 *  @example
		 * //ramp to the value either linearly or exponentially
		 * //depending on the "units" value of the signal
		 * signal.rampTo(0, 10);
		 *  @example
		 * //schedule it to ramp starting at a specific time
		 * signal.rampTo(0, 10, 5)
		 */Tone.Param.prototype.rampTo=function(value,rampTime,startTime){rampTime=Tone.defaultArg(rampTime,0.1);if(this.units===Tone.Type.Frequency||this.units===Tone.Type.BPM||this.units===Tone.Type.Decibels){this.exponentialRampTo(value,rampTime,startTime);}else{this.linearRampTo(value,rampTime,startTime);}return this;};///////////////////////////////////////////////////////////////////////////
//	AUTOMATION CURVE CALCULATIONS
//	MIT License, copyright (c) 2014 Jordan Santell
///////////////////////////////////////////////////////////////////////////
// Calculates the the value along the curve produced by setTargetAtTime
Tone.Param.prototype._exponentialApproach=function(t0,v0,v1,timeConstant,t){return v1+(v0-v1)*Math.exp(-(t-t0)/timeConstant);};// Calculates the the value along the curve produced by linearRampToValueAtTime
Tone.Param.prototype._linearInterpolate=function(t0,v0,t1,v1,t){return v0+(v1-v0)*((t-t0)/(t1-t0));};// Calculates the the value along the curve produced by exponentialRampToValueAtTime
Tone.Param.prototype._exponentialInterpolate=function(t0,v0,t1,v1,t){return v0*Math.pow(v1/v0,(t-t0)/(t1-t0));};/**
		 *  Clean up
		 *  @returns {Tone.Param} this
		 */Tone.Param.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._param=null;this._events=null;return this;};return Tone.Param;});Module(function(Tone){/**
		 *  @class Wrapper around the OfflineAudioContext
		 *  @extends {Tone.Context}
		 *  @param  {Number}  channels  The number of channels to render
		 *  @param  {Number}  duration  The duration to render in samples
		 *  @param {Number} sampleRate the sample rate to render at
		 */Tone.OfflineContext=function(channels,duration,sampleRate){/**
			 *  The offline context
			 *  @private
			 *  @type  {OfflineAudioContext}
			 */var offlineContext=new OfflineAudioContext(channels,duration*sampleRate,sampleRate);//wrap the methods/members
Tone.Context.call(this,{'context':offlineContext,'clockSource':'offline','lookAhead':0,'updateInterval':128/sampleRate});/**
			 *  A private reference to the duration
			 *  @private
			 *  @type  {Number}
			 */this._duration=duration;/**
			 *  An artificial clock source
			 *  @type  {Number}
			 *  @private
			 */this._currentTime=0;};Tone.extend(Tone.OfflineContext,Tone.Context);/**
		 *  Override the now method to point to the internal clock time
		 *  @return  {Number}
		 */Tone.OfflineContext.prototype.now=function(){return this._currentTime;};/**
		 *  Render the output of the OfflineContext
		 *  @return  {Promise}
		 */Tone.OfflineContext.prototype.render=function(){while(this._duration-this._currentTime>=0){//invoke all the callbacks on that time
this.emit('tick');//increment the clock
this._currentTime+=this.blockTime;}return this._context.startRendering();};/**
		 *  Close the context
		 *  @return  {Promise}
		 */Tone.OfflineContext.prototype.close=function(){this._context=null;return Promise.resolve();};return Tone.OfflineContext;});Module(function(Tone){if(Tone.supported){var ua=navigator.userAgent.toLowerCase();var isMobileSafari=ua.includes('safari')&&!ua.includes('chrome')&&ua.includes('mobile');if(isMobileSafari){//mobile safari has a bizarre bug with the offline context
//when a BufferSourceNode is started, it starts the offline context
//
//deferring all BufferSource starts till the last possible moment
//reduces the likelihood of this happening
Tone.OfflineContext.prototype.createBufferSource=function(){var bufferSource=this._context.createBufferSource();var _native_start=bufferSource.start;bufferSource.start=function(time){this.setTimeout(function(){_native_start.call(bufferSource,time);}.bind(this),0);}.bind(this);return bufferSource;};}}});Module(function(Tone){/**
		 *  @class A thin wrapper around the Native Web Audio GainNode.
		 *         The GainNode is a basic building block of the Web Audio
		 *         API and is useful for routing audio and adjusting gains.
		 *  @extends {Tone}
		 *  @param  {Number=}  gain  The initial gain of the GainNode
		 *  @param {Tone.Type=} units The units of the gain parameter.
		 */Tone.Gain=function(){var options=Tone.defaults(arguments,['gain','units'],Tone.Gain);Tone.AudioNode.call(this);/**
			 *  The GainNode
			 *  @type  {GainNode}
			 *  @private
			 */this.input=this.output=this._gainNode=this.context.createGain();/**
			 *  The gain parameter of the gain node.
			 *  @type {Gain}
			 *  @signal
			 */this.gain=new Tone.Param({'param':this._gainNode.gain,'units':options.units,'value':options.gain,'convert':options.convert});this._readOnly('gain');};Tone.extend(Tone.Gain,Tone.AudioNode);/**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */Tone.Gain.defaults={'gain':1,'convert':true};/**
		 *  Clean up.
		 *  @return  {Tone.Gain}  this
		 */Tone.Gain.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._gainNode.disconnect();this._gainNode=null;this._writable('gain');this.gain.dispose();this.gain=null;};return Tone.Gain;});Module(function(Tone){if(Tone.supported&&!AudioContext.prototype.createConstantSource){var ConstantSourceNode=function ConstantSourceNode(context){this.context=context;var buffer=context.createBuffer(1,128,context.sampleRate);var arr=buffer.getChannelData(0);for(var i=0;i<arr.length;i++){arr[i]=1;}this._bufferSource=context.createBufferSource();this._bufferSource.channelCount=1;this._bufferSource.channelCountMode='explicit';this._bufferSource.buffer=buffer;this._bufferSource.loop=true;var gainNode=this._output=context.createGain();this.offset=gainNode.gain;this._bufferSource.connect(gainNode);};ConstantSourceNode.prototype.start=function(time){this._bufferSource.start(time);return this;};ConstantSourceNode.prototype.stop=function(time){this._bufferSource.stop(time);return this;};ConstantSourceNode.prototype.connect=function(){this._output.connect.apply(this._output,arguments);return this;};ConstantSourceNode.prototype.disconnect=function(){this._output.disconnect.apply(this._output,arguments);return this;};AudioContext.prototype.createConstantSource=function(){return new ConstantSourceNode(this);};Tone.Context.prototype.createConstantSource=function(){return new ConstantSourceNode(this);};}});Module(function(Tone){/**
		 *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.
		 *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal
		 *          has all of the methods available to native Web Audio
		 *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)
		 *          as well as additional conveniences. Read more about working with signals
		 *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).
		 *
		 *  @constructor
		 *  @extends {Tone.Param}
		 *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam
		 *                                     is passed in, that parameter will be wrapped
		 *                                     and controlled by the Signal.
		 *  @param {string} [units=Number] unit The units the signal is in.
		 *  @example
		 * var signal = new Tone.Signal(10);
		 */Tone.Signal=function(){var options=Tone.defaults(arguments,['value','units'],Tone.Signal);Tone.Param.call(this,options);/**
			* When a signal is connected to another signal or audio param,
			* this signal becomes a proxy for it
			* @type {Array}
			* @private
			*/this._proxies=[];/**
			* Indicates if the constant source was started or not
			* @private
			* @type {Boolean}
			*/this._sourceStarted=false;/**
			 * The constant source node which generates the signal
			 * @type {ConstantSourceNode}
			 * @private
			 */this._constantSource=this.context.createConstantSource();this._param=this._constantSource.offset;this.value=options.value;/**
			 * The node where the constant signal value is scaled.
			 * @type {GainNode}
			 * @private
			 */this.output=this._constantSource;/**
			 * The node where the value is set.
			 * @type {Tone.Param}
			 * @private
			 */this.input=this._param=this.output.offset;};Tone.extend(Tone.Signal,Tone.Param);/**
		 *  The default values
		 *  @type  {Object}
		 *  @static
		 *  @const
		 */Tone.Signal.defaults={'value':0,'units':Tone.Type.Default,'convert':true};/**
		 *  When signals connect to other signals or AudioParams,
		 *  they take over the output value of that signal or AudioParam.
		 *  For all other nodes, the behavior is the same as a default <code>connect</code>.
		 *
		 *  @override
		 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node
		 *  @param {number} [outputNumber=0] The output number to connect from.
		 *  @param {number} [inputNumber=0] The input number to connect to.
		 *  @returns {Tone.Signal} this
		 *  @method
		 */Tone.Signal.prototype.connect=function(node){//this is an optimization where this node will forward automations
//to connected nodes without any signal if possible.
if(this._isParam(node)&&!this._sourceStarted){this._proxies.push(node);node.overridden=true;this._applyAutomations(node);}else{Tone.SignalBase.prototype.connect.apply(this,arguments);if(!this._sourceStarted){this._sourceStarted=true;this._constantSource.start(0);}}return this;};/**
		 * Takes a node as an argument and returns if it is a Param or AudioParam
		 * @param  {*} node The node to test
		 * @return {Boolean}
		 * @private
		 */Tone.Signal.prototype._isParam=function(node){return Tone.Param&&Tone.Param===node.constructor||node instanceof AudioParam;};/**
		 * Discard the optimization and connect all of the proxies
		 * @private
		 */Tone.Signal.prototype._connectProxies=function(){if(!this._sourceStarted){this._sourceStarted=true;this._constantSource.start(0);}this._proxies.forEach(function(proxy){Tone.SignalBase.prototype.connect.call(this,proxy);if(proxy._proxies){proxy._connectProxies();}}.bind(this));};/**
		 * Invoked when a node is connected to this
		 * @param  {AudioNode} from
		 * @private
		 */Tone.Signal.prototype._onConnect=function(from){if(!this._isParam(from)){//connect all the proxies
this._connectProxies();}};/**
		 * Apply all the current automations to the given parameter
		 * @param  {AudioParam} param
		 * @private
		 */Tone.Signal.prototype._applyAutomations=function(param){var now=this.context.currentTime;param.cancelScheduledValues(now);var currentVal=this.getValueAtTime(now);param.setValueAtTime(currentVal,now);this._events.forEachFrom(now,function(event){param[event.type](event.value,event.time,event.constant);});};/**
		 * Disconnect from the given node or all nodes if no param is given.
		 * @param  {AudioNode|AudioParam} node
		 * @return {Tone.Signal}      this
		 */Tone.Signal.prototype.disconnect=function(node){if(this._proxies.includes(node)){var index=this._proxies.indexOf(node);this._proxies.splice(index,1);}else if(!node){//no argument, disconnect everything
this._proxies=[];}return Tone.SignalBase.prototype.disconnect.apply(this,arguments);};/**
		 * Return the current signal value at the given time.
		 * @param  {Time} time When to get the signal value
		 * @return {Number}
		 */Tone.Signal.prototype.getValueAtTime=function(time){if(this._param.getValueAtTime){return this._param.getValueAtTime(time);}else{return Tone.Param.prototype.getValueAtTime.call(this,time);}};//wrap all of the automation methods
['setValueAtTime','linearRampToValueAtTime','exponentialRampToValueAtTime','setTargetAtTime'].forEach(function(method){var previousMethod=Tone.Signal.prototype[method];Tone.Signal.prototype[method]=function(){var args=arguments;previousMethod.apply(this,arguments);args[0]=this._fromUnits(args[0]);args[1]=this.toSeconds(args[1]);//apply it to the proxies
this._proxies.forEach(function(signal){signal[method].apply(signal,args);});};});['cancelScheduledValues','cancelAndHoldAtTime'].forEach(function(method){var previousMethod=Tone.Signal.prototype[method];Tone.Signal.prototype[method]=function(){var args=arguments;previousMethod.apply(this,arguments);args[0]=this.toSeconds(args[0]);//apply it to the proxies
this._proxies.forEach(function(signal){signal[method].apply(signal,args);});};});/**
		 *  dispose and disconnect
		 *  @returns {Tone.Signal} this
		 */Tone.Signal.prototype.dispose=function(){Tone.Param.prototype.dispose.call(this);this._constantSource.disconnect();this._constantSource=null;this._proxies=null;return this;};return Tone.Signal;});Module(function(Tone){/**
		 *  @class Pow applies an exponent to the incoming signal. The incoming signal
		 *         must be AudioRange.
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. 
		 *  @example
		 * var pow = new Tone.Pow(2);
		 * var sig = new Tone.Signal(0.5).connect(pow);
		 * //output of pow is 0.25. 
		 */Tone.Pow=function(exp){Tone.SignalBase.call(this);/**
			 * the exponent
			 * @private
			 * @type {number}
			 */this._exp=Tone.defaultArg(exp,1);/**
			 *  @type {WaveShaperNode}
			 *  @private
			 */this._expScaler=this.input=this.output=new Tone.WaveShaper(this._expFunc(this._exp),8192);};Tone.extend(Tone.Pow,Tone.SignalBase);/**
		 * The value of the exponent.
		 * @memberOf Tone.Pow#
		 * @type {number}
		 * @name value
		 */Object.defineProperty(Tone.Pow.prototype,'value',{get:function get(){return this._exp;},set:function set(exp){this._exp=exp;this._expScaler.setMap(this._expFunc(this._exp));}});/**
		 *  the function which maps the waveshaper
		 *  @param   {number} exp
		 *  @return {function}
		 *  @private
		 */Tone.Pow.prototype._expFunc=function(exp){return function(val){return Math.pow(Math.abs(val),exp);};};/**
		 *  Clean up.
		 *  @returns {Tone.Pow} this
		 */Tone.Pow.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._expScaler.dispose();this._expScaler=null;return this;};return Tone.Pow;});Module(function(Tone){/**
		 *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)
		 *          envelope generator. Tone.Envelope outputs a signal which
		 *          can be connected to an AudioParam or Tone.Signal.
		 *          <img src="https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg">
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Time} [attack] The amount of time it takes for the envelope to go from
		 *                         0 to it's maximum value.
		 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
		 *                       	to fall to the sustain value.
		 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
		 *                                	the release is triggered.
		 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0.
		 *  @example
		 * //an amplitude envelope
		 * var gainNode = Tone.context.createGain();
		 * var env = new Tone.Envelope({
		 * 	"attack" : 0.1,
		 * 	"decay" : 0.2,
		 * 	"sustain" : 1,
		 * 	"release" : 0.8,
		 * });
		 * env.connect(gainNode.gain);
		 */Tone.Envelope=function(){//get all of the defaults
var options=Tone.defaults(arguments,['attack','decay','sustain','release'],Tone.Envelope);Tone.AudioNode.call(this);/**
			 *  When triggerAttack is called, the attack time is the amount of
			 *  time it takes for the envelope to reach it's maximum value.
			 *  @type {Time}
			 */this.attack=options.attack;/**
			 *  After the attack portion of the envelope, the value will fall
			 *  over the duration of the decay time to it's sustain value.
			 *  @type {Time}
			 */this.decay=options.decay;/**
			 * 	The sustain value is the value
			 * 	which the envelope rests at after triggerAttack is
			 * 	called, but before triggerRelease is invoked.
			 *  @type {NormalRange}
			 */this.sustain=options.sustain;/**
			 *  After triggerRelease is called, the envelope's
			 *  value will fall to it's miminum value over the
			 *  duration of the release time.
			 *  @type {Time}
			 */this.release=options.release;/**
			 *  the next time the envelope is at standby
			 *  @type {number}
			 *  @private
			 */this._attackCurve='linear';/**
			 *  the next time the envelope is at standby
			 *  @type {number}
			 *  @private
			 */this._releaseCurve='exponential';/**
			 *  the signal
			 *  @type {Tone.Signal}
			 *  @private
			 */this._sig=this.output=new Tone.Signal(0);//set the attackCurve initially
this.attackCurve=options.attackCurve;this.releaseCurve=options.releaseCurve;};Tone.extend(Tone.Envelope,Tone.AudioNode);/**
		 *  the default parameters
		 *  @static
		 *  @const
		 */Tone.Envelope.defaults={'attack':0.01,'decay':0.1,'sustain':0.5,'release':1,'attackCurve':'linear','releaseCurve':'exponential'};/**
		 * Read the current value of the envelope. Useful for
		 * syncronizing visual output to the envelope.
		 * @memberOf Tone.Envelope#
		 * @type {Number}
		 * @name value
		 * @readOnly
		 */Object.defineProperty(Tone.Envelope.prototype,'value',{get:function get(){return this.getValueAtTime(this.now());}});/**
		 * The shape of the attack.
		 * Can be any of these strings:
		 * <ul>
		 *   <li>linear</li>
		 *   <li>exponential</li>
		 *   <li>sine</li>
		 *   <li>cosine</li>
		 *   <li>bounce</li>
		 *   <li>ripple</li>
		 *   <li>step</li>
		 * </ul>
		 * Can also be an array which describes the curve. Values
		 * in the array are evenly subdivided and linearly
		 * interpolated over the duration of the attack.
		 * @memberOf Tone.Envelope#
		 * @type {String|Array}
		 * @name attackCurve
		 * @example
		 * env.attackCurve = "linear";
		 * @example
		 * //can also be an array
		 * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]
		 */Object.defineProperty(Tone.Envelope.prototype,'attackCurve',{get:function get(){if(Tone.isString(this._attackCurve)){return this._attackCurve;}else if(Tone.isArray(this._attackCurve)){//look up the name in the curves array
for(var type in Tone.Envelope.Type){if(Tone.Envelope.Type[type].In===this._attackCurve){return type;}}//otherwise just return the array
return this._attackCurve;}},set:function set(curve){//check if it's a valid type
if(Tone.Envelope.Type.hasOwnProperty(curve)){var curveDef=Tone.Envelope.Type[curve];if(Tone.isObject(curveDef)){this._attackCurve=curveDef.In;}else{this._attackCurve=curveDef;}}else if(Tone.isArray(curve)){this._attackCurve=curve;}else{throw new Error('Tone.Envelope: invalid curve: '+curve);}}});/**
		 * The shape of the release. See the attack curve types.
		 * @memberOf Tone.Envelope#
		 * @type {String|Array}
		 * @name releaseCurve
		 * @example
		 * env.releaseCurve = "linear";
		 */Object.defineProperty(Tone.Envelope.prototype,'releaseCurve',{get:function get(){if(Tone.isString(this._releaseCurve)){return this._releaseCurve;}else if(Tone.isArray(this._releaseCurve)){//look up the name in the curves array
for(var type in Tone.Envelope.Type){if(Tone.Envelope.Type[type].Out===this._releaseCurve){return type;}}//otherwise just return the array
return this._releaseCurve;}},set:function set(curve){//check if it's a valid type
if(Tone.Envelope.Type.hasOwnProperty(curve)){var curveDef=Tone.Envelope.Type[curve];if(Tone.isObject(curveDef)){this._releaseCurve=curveDef.Out;}else{this._releaseCurve=curveDef;}}else if(Tone.isArray(curve)){this._releaseCurve=curve;}else{throw new Error('Tone.Envelope: invalid curve: '+curve);}}});/**
		 *  Trigger the attack/decay portion of the ADSR envelope.
		 *  @param  {Time} [time=now] When the attack should start.
		 *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.
		 *                               number between 0-1
		 *  @returns {Tone.Envelope} this
		 *  @example
		 *  //trigger the attack 0.5 seconds from now with a velocity of 0.2
		 *  env.triggerAttack("+0.5", 0.2);
		 */Tone.Envelope.prototype.triggerAttack=function(time,velocity){time=this.toSeconds(time);var originalAttack=this.toSeconds(this.attack);var attack=originalAttack;var decay=this.toSeconds(this.decay);velocity=Tone.defaultArg(velocity,1);//check if it's not a complete attack
var currentValue=this.getValueAtTime(time);if(currentValue>0){//subtract the current value from the attack time
var attackRate=1/attack;var remainingDistance=1-currentValue;//the attack is now the remaining time
attack=remainingDistance/attackRate;}//attack
if(this._attackCurve==='linear'){this._sig.linearRampTo(velocity,attack,time);}else if(this._attackCurve==='exponential'){this._sig.targetRampTo(velocity,attack,time);}else if(attack>0){this._sig.cancelAndHoldAtTime(time);var curve=this._attackCurve;//take only a portion of the curve
if(attack<originalAttack){var percentComplete=1-attack/originalAttack;var sliceIndex=Math.floor(percentComplete*this._attackCurve.length);curve=this._attackCurve.slice(sliceIndex);//the first index is the current value
curve[0]=currentValue;}this._sig.setValueCurveAtTime(curve,time,attack,velocity);}//decay
if(decay){this._sig.targetRampTo(velocity*this.sustain,decay,attack+time);}return this;};/**
		 *  Triggers the release of the envelope.
		 *  @param  {Time} [time=now] When the release portion of the envelope should start.
		 *  @returns {Tone.Envelope} this
		 *  @example
		 *  //trigger release immediately
		 *  env.triggerRelease();
		 */Tone.Envelope.prototype.triggerRelease=function(time){time=this.toSeconds(time);var currentValue=this.getValueAtTime(time);if(currentValue>0){var release=this.toSeconds(this.release);if(this._releaseCurve==='linear'){this._sig.linearRampTo(0,release,time);}else if(this._releaseCurve==='exponential'){this._sig.targetRampTo(0,release,time);}else{var curve=this._releaseCurve;if(Tone.isArray(curve)){this._sig.cancelAndHoldAtTime(time);this._sig.setValueCurveAtTime(curve,time,release,currentValue);}}}return this;};/**
		 *  Get the scheduled value at the given time. This will
		 *  return the unconverted (raw) value.
		 *  @param  {Number}  time  The time in seconds.
		 *  @return  {Number}  The scheduled value at the given time.
		 */Tone.Envelope.prototype.getValueAtTime=function(time){return this._sig.getValueAtTime(time);};/**
		 *  triggerAttackRelease is shorthand for triggerAttack, then waiting
		 *  some duration, then triggerRelease.
		 *  @param {Time} duration The duration of the sustain.
		 *  @param {Time} [time=now] When the attack should be triggered.
		 *  @param {number} [velocity=1] The velocity of the envelope.
		 *  @returns {Tone.Envelope} this
		 *  @example
		 * //trigger the attack and then the release after 0.6 seconds.
		 * env.triggerAttackRelease(0.6);
		 */Tone.Envelope.prototype.triggerAttackRelease=function(duration,time,velocity){time=this.toSeconds(time);this.triggerAttack(time,velocity);this.triggerRelease(time+this.toSeconds(duration));return this;};/**
		 *  Cancels all scheduled envelope changes after the given time.
		 *  @param  {Time} after
		 *  @returns {Tone.Envelope} this
		 */Tone.Envelope.prototype.cancel=function(after){this._sig.cancelScheduledValues(after);return this;};/**
		 *  Borrows the connect method from Tone.Signal.
		 *  @function
		 *  @private
		 */Tone.Envelope.prototype.connect=Tone.SignalBase.prototype.connect;/**
	 	 *  Generate some complex envelope curves.
	 	 */(function _createCurves(){var curveLen=128;var i,k;//cosine curve
var cosineCurve=[];for(i=0;i<curveLen;i++){cosineCurve[i]=Math.sin(i/(curveLen-1)*(Math.PI/2));}//ripple curve
var rippleCurve=[];var rippleCurveFreq=6.4;for(i=0;i<curveLen-1;i++){k=i/(curveLen-1);var sineWave=Math.sin(k*(Math.PI*2)*rippleCurveFreq-Math.PI/2)+1;rippleCurve[i]=sineWave/10+k*0.83;}rippleCurve[curveLen-1]=1;//stairs curve
var stairsCurve=[];var steps=5;for(i=0;i<curveLen;i++){stairsCurve[i]=Math.ceil(i/(curveLen-1)*steps)/steps;}//in-out easing curve
var sineCurve=[];for(i=0;i<curveLen;i++){k=i/(curveLen-1);sineCurve[i]=0.5*(1-Math.cos(Math.PI*k));}//a bounce curve
var bounceCurve=[];for(i=0;i<curveLen;i++){k=i/(curveLen-1);var freq=Math.pow(k,3)*4+0.2;var val=Math.cos(freq*Math.PI*2*k);bounceCurve[i]=Math.abs(val*(1-k));}/**
			 *  Invert a value curve to make it work for the release
			 *  @private
			 */function invertCurve(curve){var out=new Array(curve.length);for(var j=0;j<curve.length;j++){out[j]=1-curve[j];}return out;}/**
			 *  reverse the curve
			 *  @private
			 */function reverseCurve(curve){return curve.slice(0).reverse();}/**
			 *  attack and release curve arrays
			 *  @type  {Object}
			 *  @private
			 */Tone.Envelope.Type={'linear':'linear','exponential':'exponential','bounce':{In:invertCurve(bounceCurve),Out:bounceCurve},'cosine':{In:cosineCurve,Out:reverseCurve(cosineCurve)},'step':{In:stairsCurve,Out:invertCurve(stairsCurve)},'ripple':{In:rippleCurve,Out:invertCurve(rippleCurve)},'sine':{In:sineCurve,Out:invertCurve(sineCurve)}};})();/**
		 *  Disconnect and dispose.
		 *  @returns {Tone.Envelope} this
		 */Tone.Envelope.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._sig.dispose();this._sig=null;this._attackCurve=null;this._releaseCurve=null;return this;};return Tone.Envelope;});Module(function(Tone){/**
		 *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node.
		 *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts
		 *          an audio signal as the input and will apply the envelope to the amplitude
		 *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).
		 *
		 *  @constructor
		 *  @extends {Tone.Envelope}
		 *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from
		 *                               0 to it's maximum value.
		 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
		 *                       	to fall to the sustain value.
		 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
		 *                                	the release is triggered.
		 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0.
		 *  @example
		 * var ampEnv = new Tone.AmplitudeEnvelope({
		 * 	"attack": 0.1,
		 * 	"decay": 0.2,
		 * 	"sustain": 1.0,
		 * 	"release": 0.8
		 * }).toMaster();
		 * //create an oscillator and connect it
		 * var osc = new Tone.Oscillator().connect(ampEnv).start();
		 * //trigger the envelopes attack and release "8t" apart
		 * ampEnv.triggerAttackRelease("8t");
		 */Tone.AmplitudeEnvelope=function(){Tone.Envelope.apply(this,arguments);/**
			 *  the input node
			 *  @type {GainNode}
			 *  @private
			 */this.input=this.output=new Tone.Gain();this._sig.connect(this.output.gain);};Tone.extend(Tone.AmplitudeEnvelope,Tone.Envelope);/**
		 *  Clean up
		 *  @return  {Tone.AmplitudeEnvelope}  this
		 */Tone.AmplitudeEnvelope.prototype.dispose=function(){Tone.Envelope.prototype.dispose.call(this);return this;};return Tone.AmplitudeEnvelope;});Module(function(Tone){/**
		 *  AnalyserNode.getFloatTimeDomainData polyfill
		 *  @private
		 */if(Tone.supported){if(!AnalyserNode.prototype.getFloatTimeDomainData){//referenced https://github.com/mohayonao/get-float-time-domain-data
AnalyserNode.prototype.getFloatTimeDomainData=function(array){var uint8=new Uint8Array(array.length);this.getByteTimeDomainData(uint8);for(var i=0;i<uint8.length;i++){array[i]=(uint8[i]-128)/128;}};}}});Module(function(Tone){/**
		 *  @class  Wrapper around the native Web Audio's
		 *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).
		 *          Extracts FFT or Waveform data from the incoming signal.
		 *  @extends {Tone.AudioNode}
		 *  @param {String=} type The return type of the analysis, either "fft", or "waveform".
		 *  @param {Number=} size The size of the FFT. Value must be a power of
		 *                       two in the range 32 to 32768.
		 */Tone.Analyser=function(){var options=Tone.defaults(arguments,['type','size'],Tone.Analyser);Tone.AudioNode.call(this);/**
			 *  The analyser node.
			 *  @private
			 *  @type {AnalyserNode}
			 */this._analyser=this.input=this.output=this.context.createAnalyser();/**
			 *  The analysis type
			 *  @type {String}
			 *  @private
			 */this._type=options.type;/**
			 *  The buffer that the FFT data is written to
			 *  @type {TypedArray}
			 *  @private
			 */this._buffer=null;//set the values initially
this.size=options.size;this.type=options.type;};Tone.extend(Tone.Analyser,Tone.AudioNode);/**
		 *  The default values.
		 *  @type {Object}
		 *  @const
		 */Tone.Analyser.defaults={'size':1024,'type':'fft','smoothing':0.8};/**
		 *  Possible return types of analyser.getValue()
		 *  @enum {String}
		 */Tone.Analyser.Type={Waveform:'waveform',FFT:'fft'};/**
		 *  Run the analysis given the current settings and return the
		 *  result as a TypedArray.
		 *  @returns {TypedArray}
		 */Tone.Analyser.prototype.getValue=function(){if(this._type===Tone.Analyser.Type.FFT){this._analyser.getFloatFrequencyData(this._buffer);}else if(this._type===Tone.Analyser.Type.Waveform){this._analyser.getFloatTimeDomainData(this._buffer);}return this._buffer;};/**
		 *  The size of analysis. This must be a power of two in the range 32 to 32768.
		 *  @memberOf Tone.Analyser#
		 *  @type {Number}
		 *  @name size
		 */Object.defineProperty(Tone.Analyser.prototype,'size',{get:function get(){return this._analyser.frequencyBinCount;},set:function set(size){this._analyser.fftSize=size*2;this._buffer=new Float32Array(size);}});/**
		 *  The analysis function returned by analyser.getValue(), either "fft" or "waveform".
		 *  @memberOf Tone.Analyser#
		 *  @type {String}
		 *  @name type
		 */Object.defineProperty(Tone.Analyser.prototype,'type',{get:function get(){return this._type;},set:function set(type){if(type!==Tone.Analyser.Type.Waveform&&type!==Tone.Analyser.Type.FFT){throw new TypeError('Tone.Analyser: invalid type: '+type);}this._type=type;}});/**
		 *  0 represents no time averaging with the last analysis frame.
		 *  @memberOf Tone.Analyser#
		 *  @type {NormalRange}
		 *  @name smoothing
		 */Object.defineProperty(Tone.Analyser.prototype,'smoothing',{get:function get(){return this._analyser.smoothingTimeConstant;},set:function set(val){this._analyser.smoothingTimeConstant=val;}});/**
		 *  Clean up.
		 *  @return  {Tone.Analyser}  this
		 */Tone.Analyser.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._analyser.disconnect();this._analyser=null;this._buffer=null;};return Tone.Analyser;});Module(function(Tone){/**
		 *  @class Tone.Compressor is a thin wrapper around the Web Audio
		 *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).
		 *         Compression reduces the volume of loud sounds or amplifies quiet sounds
		 *         by narrowing or "compressing" an audio signal's dynamic range.
		 *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.
		 *  @param {Positive} [ratio] The gain reduction ratio.
		 *  @example
		 * var comp = new Tone.Compressor(-30, 3);
		 */Tone.Compressor=function(){var options=Tone.defaults(arguments,['threshold','ratio'],Tone.Compressor);Tone.AudioNode.call(this);/**
			 *  the compressor node
			 *  @type {DynamicsCompressorNode}
			 *  @private
			 */this._compressor=this.input=this.output=this.context.createDynamicsCompressor();/**
			 *  the threshold vaue
			 *  @type {Decibels}
			 *  @signal
			 */this.threshold=new Tone.Param({'param':this._compressor.threshold,'units':Tone.Type.Decibels,'convert':false});/**
			 *  The attack parameter
			 *  @type {Time}
			 *  @signal
			 */this.attack=new Tone.Param(this._compressor.attack,Tone.Type.Time);/**
			 *  The release parameter
			 *  @type {Time}
			 *  @signal
			 */this.release=new Tone.Param(this._compressor.release,Tone.Type.Time);/**
			 *  The knee parameter
			 *  @type {Decibels}
			 *  @signal
			 */this.knee=new Tone.Param({'param':this._compressor.knee,'units':Tone.Type.Decibels,'convert':false});/**
			 *  The ratio value
			 *  @type {Number}
			 *  @signal
			 */this.ratio=new Tone.Param({'param':this._compressor.ratio,'convert':false});//set the defaults
this._readOnly(['knee','release','attack','ratio','threshold']);this.set(options);};Tone.extend(Tone.Compressor,Tone.AudioNode);/**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.Compressor.defaults={'ratio':12,'threshold':-24,'release':0.25,'attack':0.003,'knee':30};/**
		 *  clean up
		 *  @returns {Tone.Compressor} this
		 */Tone.Compressor.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._writable(['knee','release','attack','ratio','threshold']);this._compressor.disconnect();this._compressor=null;this.attack.dispose();this.attack=null;this.release.dispose();this.release=null;this.threshold.dispose();this.threshold=null;this.ratio.dispose();this.ratio=null;this.knee.dispose();this.knee=null;return this;};return Tone.Compressor;});Module(function(Tone){/**
		 *  @class Add a signal and a number or two signals. When no value is
		 *         passed into the constructor, Tone.Add will sum <code>input[0]</code>
		 *         and <code>input[1]</code>. If a value is passed into the constructor, 
		 *         the it will be added to the input.
		 *  
		 *  @constructor
		 *  @extends {Tone.Signal}
		 *  @param {number=} value If no value is provided, Tone.Add will sum the first
		 *                         and second inputs. 
		 *  @example
		 * var signal = new Tone.Signal(2);
		 * var add = new Tone.Add(2);
		 * signal.connect(add);
		 * //the output of add equals 4
		 *  @example
		 * //if constructed with no arguments
		 * //it will add the first and second inputs
		 * var add = new Tone.Add();
		 * var sig0 = new Tone.Signal(3).connect(add, 0, 0);
		 * var sig1 = new Tone.Signal(4).connect(add, 0, 1);
		 * //the output of add equals 7. 
		 */Tone.Add=function(value){Tone.Signal.call(this);this.createInsOuts(2,0);/**
			 *  the summing node
			 *  @type {GainNode}
			 *  @private
			 */this._sum=this.input[0]=this.input[1]=this.output=new Tone.Gain();/**
			 *  @private
			 *  @type {Tone.Signal}
			 */this._param=this.input[1]=new Tone.Signal(value);this._param.connect(this._sum);};Tone.extend(Tone.Add,Tone.Signal);/**
		 *  Clean up.
		 *  @returns {Tone.Add} this
		 */Tone.Add.prototype.dispose=function(){Tone.Signal.prototype.dispose.call(this);this._sum.dispose();this._sum=null;return this;};return Tone.Add;});Module(function(Tone){/**
		 *  @class  Multiply two incoming signals. Or, if a number is given in the constructor,
		 *          multiplies the incoming signal by that value.
		 *
		 *  @constructor
		 *  @extends {Tone.Signal}
		 *  @param {number=} value Constant value to multiple. If no value is provided,
		 *                         it will return the product of the first and second inputs
		 *  @example
		 * var mult = new Tone.Multiply();
		 * var sigA = new Tone.Signal(3);
		 * var sigB = new Tone.Signal(4);
		 * sigA.connect(mult, 0, 0);
		 * sigB.connect(mult, 0, 1);
		 * //output of mult is 12.
		 *  @example
		 * var mult = new Tone.Multiply(10);
		 * var sig = new Tone.Signal(2).connect(mult);
		 * //the output of mult is 20.
		 */Tone.Multiply=function(value){Tone.Signal.call(this);this.createInsOuts(2,0);/**
			 *  the input node is the same as the output node
			 *  it is also the GainNode which handles the scaling of incoming signal
			 *
			 *  @type {GainNode}
			 *  @private
			 */this._mult=this.input[0]=this.output=new Tone.Gain();/**
			 *  the scaling parameter
			 *  @type {AudioParam}
			 *  @private
			 */this._param=this.input[1]=this.output.gain;this.value=Tone.defaultArg(value,0);};Tone.extend(Tone.Multiply,Tone.Signal);/**
		 *  clean up
		 *  @returns {Tone.Multiply} this
		 */Tone.Multiply.prototype.dispose=function(){Tone.Signal.prototype.dispose.call(this);this._mult.dispose();this._mult=null;this._param=null;return this;};return Tone.Multiply;});Module(function(Tone){/**
		 *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @example
		 * var neg = new Tone.Negate();
		 * var sig = new Tone.Signal(-2).connect(neg);
		 * //output of neg is positive 2. 
		 */Tone.Negate=function(){Tone.SignalBase.call(this);/**
			 *  negation is done by multiplying by -1
			 *  @type {Tone.Multiply}
			 *  @private
			 */this._multiply=this.input=this.output=new Tone.Multiply(-1);};Tone.extend(Tone.Negate,Tone.SignalBase);/**
		 *  clean up
		 *  @returns {Tone.Negate} this
		 */Tone.Negate.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._multiply.dispose();this._multiply=null;return this;};return Tone.Negate;});Module(function(Tone){/**
		 *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected 
		 *         to <code>input[0]</code>. If an argument is provided in the constructor, the 
		 *         signals <code>.value</code> will be subtracted from the incoming signal.
		 *
		 *  @extends {Tone.Signal}
		 *  @constructor
		 *  @param {number=} value The value to subtract from the incoming signal. If the value
		 *                         is omitted, it will subtract the second signal from the first.
		 *  @example
		 * var sub = new Tone.Subtract(1);
		 * var sig = new Tone.Signal(4).connect(sub);
		 * //the output of sub is 3. 
		 *  @example
		 * var sub = new Tone.Subtract();
		 * var sigA = new Tone.Signal(10);
		 * var sigB = new Tone.Signal(2.5);
		 * sigA.connect(sub, 0, 0);
		 * sigB.connect(sub, 0, 1);
		 * //output of sub is 7.5
		 */Tone.Subtract=function(value){Tone.Signal.call(this);this.createInsOuts(2,0);/**
			 *  the summing node
			 *  @type {GainNode}
			 *  @private
			 */this._sum=this.input[0]=this.output=new Tone.Gain();/**
			 *  negate the input of the second input before connecting it
			 *  to the summing node.
			 *  @type {Tone.Negate}
			 *  @private
			 */this._neg=new Tone.Negate();/**
			 *  the node where the value is set
			 *  @private
			 *  @type {Tone.Signal}
			 */this._param=this.input[1]=new Tone.Signal(value);this._param.chain(this._neg,this._sum);};Tone.extend(Tone.Subtract,Tone.Signal);/**
		 *  Clean up.
		 *  @returns {Tone.SignalBase} this
		 */Tone.Subtract.prototype.dispose=function(){Tone.Signal.prototype.dispose.call(this);this._neg.dispose();this._neg=null;this._sum.disconnect();this._sum=null;return this;};return Tone.Subtract;});Module(function(Tone){/**
		 *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @example
		 * var eqPowGain = new Tone.EqualPowerGain();
		 */Tone.EqualPowerGain=function(){Tone.SignalBase.call(this);/**
			 *  @type {Tone.WaveShaper}
			 *  @private
			 */this._eqPower=this.input=this.output=new Tone.WaveShaper(function(val){if(Math.abs(val)<0.001){//should output 0 when input is 0
return 0;}else{return Tone.equalPowerScale(val);}}.bind(this),4096);};Tone.extend(Tone.EqualPowerGain,Tone.SignalBase);/**
		 *  clean up
		 *  @returns {Tone.EqualPowerGain} this
		 */Tone.EqualPowerGain.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._eqPower.dispose();this._eqPower=null;return this;};return Tone.EqualPowerGain;});Module(function(Tone){/**
		 * @class  Tone.Crossfade provides equal power fading between two inputs.
		 *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).
		 *
		 * @constructor
		 * @extends {Tone.AudioNode}
		 * @param {NormalRange} [initialFade=0.5]
		 * @example
		 * var crossFade = new Tone.CrossFade(0.5);
		 * //connect effect A to crossfade from
		 * //effect output 0 to crossfade input 0
		 * effectA.connect(crossFade, 0, 0);
		 * //connect effect B to crossfade from
		 * //effect output 0 to crossfade input 1
		 * effectB.connect(crossFade, 0, 1);
		 * crossFade.fade.value = 0;
		 * // ^ only effectA is output
		 * crossFade.fade.value = 1;
		 * // ^ only effectB is output
		 * crossFade.fade.value = 0.5;
		 * // ^ the two signals are mixed equally.
		 */Tone.CrossFade=function(initialFade){Tone.AudioNode.call(this);this.createInsOuts(2,1);/**
			 *  Alias for <code>input[0]</code>.
			 *  @type {Tone.Gain}
			 */this.a=this.input[0]=new Tone.Gain();/**
			 *  Alias for <code>input[1]</code>.
			 *  @type {Tone.Gain}
			 */this.b=this.input[1]=new Tone.Gain();/**
			 * 	The mix between the two inputs. A fade value of 0
			 * 	will output 100% <code>input[0]</code> and
			 * 	a value of 1 will output 100% <code>input[1]</code>.
			 *  @type {NormalRange}
			 *  @signal
			 */this.fade=new Tone.Signal(Tone.defaultArg(initialFade,0.5),Tone.Type.NormalRange);/**
			 *  equal power gain cross fade
			 *  @private
			 *  @type {Tone.EqualPowerGain}
			 */this._equalPowerA=new Tone.EqualPowerGain();/**
			 *  equal power gain cross fade
			 *  @private
			 *  @type {Tone.EqualPowerGain}
			 */this._equalPowerB=new Tone.EqualPowerGain();/**
			 *  invert the incoming signal
			 *  @private
			 *  @type {Tone}
			 */this._one=this.context.getConstant(1);/**
			 *  invert the incoming signal
			 *  @private
			 *  @type {Tone.Subtract}
			 */this._invert=new Tone.Subtract();//connections
this.a.connect(this.output);this.b.connect(this.output);this.fade.chain(this._equalPowerB,this.b.gain);this._one.connect(this._invert,0,0);this.fade.connect(this._invert,0,1);this._invert.chain(this._equalPowerA,this.a.gain);this._readOnly('fade');};Tone.extend(Tone.CrossFade,Tone.AudioNode);/**
		 *  clean up
		 *  @returns {Tone.CrossFade} this
		 */Tone.CrossFade.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._writable('fade');this._equalPowerA.dispose();this._equalPowerA=null;this._equalPowerB.dispose();this._equalPowerB=null;this.fade.dispose();this.fade=null;this._invert.dispose();this._invert=null;this._one=null;this.a.dispose();this.a=null;this.b.dispose();this.b=null;return this;};return Tone.CrossFade;});Module(function(Tone){/**
		 *  @class  Tone.Filter is a filter which allows for all of the same native methods
		 *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).
		 *          Tone.Filter has the added ability to set the filter rolloff at -12
		 *          (default), -24 and -48.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.
		 *  @param {string=} type The type of filter.
		 *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.
		 *                            3 choices: -12, -24, and -48
		 *  @example
		 *  var filter = new Tone.Filter(200, "highpass");
		 */Tone.Filter=function(){var options=Tone.defaults(arguments,['frequency','type','rolloff'],Tone.Filter);Tone.AudioNode.call(this);this.createInsOuts(1,1);/**
			 *  the filter(s)
			 *  @type {Array}
			 *  @private
			 */this._filters=[];/**
			 *  The cutoff frequency of the filter.
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=new Tone.Signal(options.frequency,Tone.Type.Frequency);/**
			 *  The detune parameter
			 *  @type {Cents}
			 *  @signal
			 */this.detune=new Tone.Signal(0,Tone.Type.Cents);/**
			 *  The gain of the filter, only used in certain filter types
			 *  @type {Number}
			 *  @signal
			 */this.gain=new Tone.Signal({'value':options.gain,'convert':false});/**
			 *  The Q or Quality of the filter
			 *  @type {Positive}
			 *  @signal
			 */this.Q=new Tone.Signal(options.Q);/**
			 *  the type of the filter
			 *  @type {string}
			 *  @private
			 */this._type=options.type;/**
			 *  the rolloff value of the filter
			 *  @type {number}
			 *  @private
			 */this._rolloff=options.rolloff;//set the rolloff;
this.rolloff=options.rolloff;this._readOnly(['detune','frequency','gain','Q']);};Tone.extend(Tone.Filter,Tone.AudioNode);/**
		 *  the default parameters
		 *
		 *  @static
		 *  @type {Object}
		 */Tone.Filter.defaults={'type':'lowpass','frequency':350,'rolloff':-12,'Q':1,'gain':0};/**
		 * The type of the filter. Types: "lowpass", "highpass",
		 * "bandpass", "lowshelf", "highshelf", "notch", "allpass", or "peaking".
		 * @memberOf Tone.Filter#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.Filter.prototype,'type',{get:function get(){return this._type;},set:function set(type){var types=['lowpass','highpass','bandpass','lowshelf','highshelf','notch','allpass','peaking'];if(types.indexOf(type)===-1){throw new TypeError('Tone.Filter: invalid type '+type);}this._type=type;for(var i=0;i<this._filters.length;i++){this._filters[i].type=type;}}});/**
		 * The rolloff of the filter which is the drop in db
		 * per octave. Implemented internally by cascading filters.
		 * Only accepts the values -12, -24, -48 and -96.
		 * @memberOf Tone.Filter#
		 * @type {number}
		 * @name rolloff
		 */Object.defineProperty(Tone.Filter.prototype,'rolloff',{get:function get(){return this._rolloff;},set:function set(rolloff){rolloff=parseInt(rolloff,10);var possibilities=[-12,-24,-48,-96];var cascadingCount=possibilities.indexOf(rolloff);//check the rolloff is valid
if(cascadingCount===-1){throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');}cascadingCount+=1;this._rolloff=rolloff;//first disconnect the filters and throw them away
this.input.disconnect();for(var i=0;i<this._filters.length;i++){this._filters[i].disconnect();this._filters[i]=null;}this._filters=new Array(cascadingCount);for(var count=0;count<cascadingCount;count++){var filter=this.context.createBiquadFilter();filter.type=this._type;this.frequency.connect(filter.frequency);this.detune.connect(filter.detune);this.Q.connect(filter.Q);this.gain.connect(filter.gain);this._filters[count]=filter;}//connect them up
var connectionChain=[this.input].concat(this._filters).concat([this.output]);Tone.connectSeries.apply(Tone,connectionChain);}});/**
		 *  Clean up.
		 *  @return {Tone.Filter} this
		 */Tone.Filter.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);for(var i=0;i<this._filters.length;i++){this._filters[i].disconnect();this._filters[i]=null;}this._filters=null;this._writable(['detune','frequency','gain','Q']);this.frequency.dispose();this.Q.dispose();this.frequency=null;this.Q=null;this.detune.dispose();this.detune=null;this.gain.dispose();this.gain=null;return this;};return Tone.Filter;});Module(function(Tone){/**
		 *  @class Split the incoming signal into three bands (low, mid, high)
		 *         with two crossover frequency controls.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency
		 *  @param {Frequency} [highFrequency] the mid/high crossover frequency
		 */Tone.MultibandSplit=function(){var options=Tone.defaults(arguments,['lowFrequency','highFrequency'],Tone.MultibandSplit);Tone.AudioNode.call(this);/**
			 *  the input
			 *  @type {Tone.Gain}
			 *  @private
			 */this.input=new Tone.Gain();/**
			 *  the outputs
			 *  @type {Array}
			 *  @private
			 */this.output=new Array(3);/**
			 *  The low band. Alias for <code>output[0]</code>
			 *  @type {Tone.Filter}
			 */this.low=this.output[0]=new Tone.Filter(0,'lowpass');/**
			 *  the lower filter of the mid band
			 *  @type {Tone.Filter}
			 *  @private
			 */this._lowMidFilter=new Tone.Filter(0,'highpass');/**
			 *  The mid band output. Alias for <code>output[1]</code>
			 *  @type {Tone.Filter}
			 */this.mid=this.output[1]=new Tone.Filter(0,'lowpass');/**
			 *  The high band output. Alias for <code>output[2]</code>
			 *  @type {Tone.Filter}
			 */this.high=this.output[2]=new Tone.Filter(0,'highpass');/**
			 *  The low/mid crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */this.lowFrequency=new Tone.Signal(options.lowFrequency,Tone.Type.Frequency);/**
			 *  The mid/high crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */this.highFrequency=new Tone.Signal(options.highFrequency,Tone.Type.Frequency);/**
			 *  The quality of all the filters
			 *  @type {Number}
			 *  @signal
			 */this.Q=new Tone.Signal(options.Q);this.input.fan(this.low,this.high);this.input.chain(this._lowMidFilter,this.mid);//the frequency control signal
this.lowFrequency.connect(this.low.frequency);this.lowFrequency.connect(this._lowMidFilter.frequency);this.highFrequency.connect(this.mid.frequency);this.highFrequency.connect(this.high.frequency);//the Q value
this.Q.connect(this.low.Q);this.Q.connect(this._lowMidFilter.Q);this.Q.connect(this.mid.Q);this.Q.connect(this.high.Q);this._readOnly(['high','mid','low','highFrequency','lowFrequency']);};Tone.extend(Tone.MultibandSplit,Tone.AudioNode);/**
		 *  @private
		 *  @static
		 *  @type {Object}
		 */Tone.MultibandSplit.defaults={'lowFrequency':400,'highFrequency':2500,'Q':1};/**
		 *  Clean up.
		 *  @returns {Tone.MultibandSplit} this
		 */Tone.MultibandSplit.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._writable(['high','mid','low','highFrequency','lowFrequency']);this.low.dispose();this.low=null;this._lowMidFilter.dispose();this._lowMidFilter=null;this.mid.dispose();this.mid=null;this.high.dispose();this.high=null;this.lowFrequency.dispose();this.lowFrequency=null;this.highFrequency.dispose();this.highFrequency=null;this.Q.dispose();this.Q=null;return this;};return Tone.MultibandSplit;});Module(function(Tone){/**
		 *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as
		 *         well as the low and high crossover frequencies.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *
		 *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.
		 *  @param {Decibels} [midLevel] The gain applied to the mid.
		 *  @param {Decibels} [highLevel] The gain applied to the high.
		 *  @example
		 * var eq = new Tone.EQ3(-10, 3, -20);
		 */Tone.EQ3=function(){var options=Tone.defaults(arguments,['low','mid','high'],Tone.EQ3);Tone.AudioNode.call(this);/**
			 *  the output node
			 *  @type {GainNode}
			 *  @private
			 */this.output=new Tone.Gain();/**
			 *  the multiband split
			 *  @type {Tone.MultibandSplit}
			 *  @private
			 */this._multibandSplit=this.input=new Tone.MultibandSplit({'lowFrequency':options.lowFrequency,'highFrequency':options.highFrequency});/**
			 *  The gain for the lower signals
			 *  @type  {Tone.Gain}
			 *  @private
			 */this._lowGain=new Tone.Gain(options.low,Tone.Type.Decibels);/**
			 *  The gain for the mid signals
			 *  @type  {Tone.Gain}
			 *  @private
			 */this._midGain=new Tone.Gain(options.mid,Tone.Type.Decibels);/**
			 * The gain in decibels of the high part
			 * @type {Tone.Gain}
			 * @private
			 */this._highGain=new Tone.Gain(options.high,Tone.Type.Decibels);/**
			 * The gain in decibels of the low part
			 * @type {Decibels}
			 * @signal
			 */this.low=this._lowGain.gain;/**
			 * The gain in decibels of the mid part
			 * @type {Decibels}
			 * @signal
			 */this.mid=this._midGain.gain;/**
			 * The gain in decibels of the high part
			 * @type {Decibels}
			 * @signal
			 */this.high=this._highGain.gain;/**
			 *  The Q value for all of the filters.
			 *  @type {Positive}
			 *  @signal
			 */this.Q=this._multibandSplit.Q;/**
			 *  The low/mid crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */this.lowFrequency=this._multibandSplit.lowFrequency;/**
			 *  The mid/high crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */this.highFrequency=this._multibandSplit.highFrequency;//the frequency bands
this._multibandSplit.low.chain(this._lowGain,this.output);this._multibandSplit.mid.chain(this._midGain,this.output);this._multibandSplit.high.chain(this._highGain,this.output);this._readOnly(['low','mid','high','lowFrequency','highFrequency']);};Tone.extend(Tone.EQ3,Tone.AudioNode);/**
		 *  the default values
		 */Tone.EQ3.defaults={'low':0,'mid':0,'high':0,'lowFrequency':400,'highFrequency':2500};/**
		 *  clean up
		 *  @returns {Tone.EQ3} this
		 */Tone.EQ3.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._writable(['low','mid','high','lowFrequency','highFrequency']);this._multibandSplit.dispose();this._multibandSplit=null;this.lowFrequency=null;this.highFrequency=null;this._lowGain.dispose();this._lowGain=null;this._midGain.dispose();this._midGain=null;this._highGain.dispose();this._highGain=null;this.low=null;this.mid=null;this.high=null;this.Q=null;return this;};return Tone.EQ3;});Module(function(Tone){/**
		 *  @class  Performs a linear scaling on an input signal.
		 *          Scales a NormalRange input to between
		 *          outputMin and outputMax.
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @param {number} [outputMin=0] The output value when the input is 0. 
		 *  @param {number} [outputMax=1]	The output value when the input is 1. 
		 *  @example
		 * var scale = new Tone.Scale(50, 100);
		 * var signal = new Tone.Signal(0.5).connect(scale);
		 * //the output of scale equals 75
		 */Tone.Scale=function(outputMin,outputMax){Tone.SignalBase.call(this);/** 
			 *  @private
			 *  @type {number}
			 */this._outputMin=Tone.defaultArg(outputMin,0);/** 
			 *  @private
			 *  @type {number}
			 */this._outputMax=Tone.defaultArg(outputMax,1);/** 
			 *  @private
			 *  @type {Tone.Multiply}
			 *  @private
			 */this._scale=this.input=new Tone.Multiply(1);/** 
			 *  @private
			 *  @type {Tone.Add}
			 *  @private
			 */this._add=this.output=new Tone.Add(0);this._scale.connect(this._add);this._setRange();};Tone.extend(Tone.Scale,Tone.SignalBase);/**
		 * The minimum output value. This number is output when 
		 * the value input value is 0. 
		 * @memberOf Tone.Scale#
		 * @type {number}
		 * @name min
		 */Object.defineProperty(Tone.Scale.prototype,'min',{get:function get(){return this._outputMin;},set:function set(min){this._outputMin=min;this._setRange();}});/**
		 * The maximum output value. This number is output when 
		 * the value input value is 1. 
		 * @memberOf Tone.Scale#
		 * @type {number}
		 * @name max
		 */Object.defineProperty(Tone.Scale.prototype,'max',{get:function get(){return this._outputMax;},set:function set(max){this._outputMax=max;this._setRange();}});/**
		 *  set the values
		 *  @private
		 */Tone.Scale.prototype._setRange=function(){this._add.value=this._outputMin;this._scale.value=this._outputMax-this._outputMin;};/**
		 *  Clean up.
		 *  @returns {Tone.Scale} this
		 */Tone.Scale.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._add.dispose();this._add=null;this._scale.dispose();this._scale=null;return this;};return Tone.Scale;});Module(function(Tone){/**
		 *  @class  Performs an exponential scaling on an input signal.
		 *          Scales a NormalRange value [0,1] exponentially
		 *          to the output range of outputMin to outputMax.
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @param {number} [outputMin=0] The output value when the input is 0.
		 *  @param {number} [outputMax=1]	The output value when the input is 1.
		 *  @param {number} [exponent=2] The exponent which scales the incoming signal.
		 *  @example
		 * var scaleExp = new Tone.ScaleExp(0, 100, 2);
		 * var signal = new Tone.Signal(0.5).connect(scaleExp);
		 */Tone.ScaleExp=function(outputMin,outputMax,exponent){Tone.SignalBase.call(this);/**
			 *  scale the input to the output range
			 *  @type {Tone.Scale}
			 *  @private
			 */this._scale=this.output=new Tone.Scale(outputMin,outputMax);/**
			 *  @private
			 *  @type {Tone.Pow}
			 *  @private
			 */this._exp=this.input=new Tone.Pow(Tone.defaultArg(exponent,2));this._exp.connect(this._scale);};Tone.extend(Tone.ScaleExp,Tone.SignalBase);/**
		 * Instead of interpolating linearly between the <code>min</code> and
		 * <code>max</code> values, setting the exponent will interpolate between
		 * the two values with an exponential curve.
		 * @memberOf Tone.ScaleExp#
		 * @type {number}
		 * @name exponent
		 */Object.defineProperty(Tone.ScaleExp.prototype,'exponent',{get:function get(){return this._exp.value;},set:function set(exp){this._exp.value=exp;}});/**
		 * The minimum output value. This number is output when
		 * the value input value is 0.
		 * @memberOf Tone.ScaleExp#
		 * @type {number}
		 * @name min
		 */Object.defineProperty(Tone.ScaleExp.prototype,'min',{get:function get(){return this._scale.min;},set:function set(min){this._scale.min=min;}});/**
		 * The maximum output value. This number is output when
		 * the value input value is 1.
		 * @memberOf Tone.ScaleExp#
		 * @type {number}
		 * @name max
		 */Object.defineProperty(Tone.ScaleExp.prototype,'max',{get:function get(){return this._scale.max;},set:function set(max){this._scale.max=max;}});/**
		 *  Clean up.
		 *  @returns {Tone.ScaleExp} this
		 */Tone.ScaleExp.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._scale.dispose();this._scale=null;this._exp.dispose();this._exp=null;return this;};return Tone.ScaleExp;});Module(function(Tone){/**
		 *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).
		 *  @extends {Tone}
		 *  @param {Time=} delayTime The delay applied to the incoming signal.
		 *  @param {Time=} maxDelay The maximum delay time.
		 */Tone.Delay=function(){var options=Tone.defaults(arguments,['delayTime','maxDelay'],Tone.Delay);Tone.AudioNode.call(this);/**
			 * The maximum delay time initialized with the node
			 * @type {Number}
			 * @private
			 */this._maxDelay=Math.max(this.toSeconds(options.maxDelay),this.toSeconds(options.delayTime));/**
			 *  The native delay node
			 *  @type {DelayNode}
			 *  @private
			 */this._delayNode=this.input=this.output=this.context.createDelay(this._maxDelay);/**
			 *  The amount of time the incoming signal is
			 *  delayed.
			 *  @type {Time}
			 *  @signal
			 */this.delayTime=new Tone.Param({'param':this._delayNode.delayTime,'units':Tone.Type.Time,'value':options.delayTime});this._readOnly('delayTime');};Tone.extend(Tone.Delay,Tone.AudioNode);/**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */Tone.Delay.defaults={'maxDelay':1,'delayTime':0};/**
		 * The maximum delay time. This cannot be changed. The value is passed into the constructor.
		 * @memberof Tone.Delay#
		 * @type {Time}
		 * @name maxDelay
		 * @readOnly
		 */Object.defineProperty(Tone.Delay.prototype,'maxDelay',{get:function get(){return this._maxDelay;}});/**
		 *  Clean up.
		 *  @return  {Tone.Delay}  this
		 */Tone.Delay.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._delayNode.disconnect();this._delayNode=null;this._writable('delayTime');this.delayTime=null;return this;};return Tone.Delay;});Module(function(Tone){/**
		 *  @class Comb filters are basic building blocks for physical modeling. Read more
		 *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Time|Object} [delayTime] The delay time of the filter.
		 *  @param {NormalRange=} resonance The amount of feedback the filter has.
		 */Tone.FeedbackCombFilter=function(){var options=Tone.defaults(arguments,['delayTime','resonance'],Tone.FeedbackCombFilter);Tone.AudioNode.call(this);/**
			 *  the delay node
			 *  @type {DelayNode}
			 *  @private
			 */this._delay=this.input=this.output=new Tone.Delay(options.delayTime);/**
			 *  The amount of delay of the comb filter.
			 *  @type {Time}
			 *  @signal
			 */this.delayTime=this._delay.delayTime;/**
			 *  the feedback node
			 *  @type {GainNode}
			 *  @private
			 */this._feedback=new Tone.Gain(options.resonance,Tone.Type.NormalRange);/**
			 *  The amount of feedback of the delayed signal.
			 *  @type {NormalRange}
			 *  @signal
			 */this.resonance=this._feedback.gain;this._delay.chain(this._feedback,this._delay);this._readOnly(['resonance','delayTime']);};Tone.extend(Tone.FeedbackCombFilter,Tone.AudioNode);/**
		 *  the default parameters
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.FeedbackCombFilter.defaults={'delayTime':0.1,'resonance':0.5};/**
		 *  clean up
		 *  @returns {Tone.FeedbackCombFilter} this
		 */Tone.FeedbackCombFilter.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._writable(['resonance','delayTime']);this._delay.dispose();this._delay=null;this.delayTime=null;this._feedback.dispose();this._feedback=null;this.resonance=null;return this;};return Tone.FeedbackCombFilter;});Module(function(Tone){/**
		 *  @class  Get the current waveform data of the connected audio source.
		 *  @extends {Tone.AudioNode}
		 *  @param {Number=} size The size of the FFT. Value must be a power of
		 *                       two in the range 32 to 32768.
		 */Tone.FFT=function(){var options=Tone.defaults(arguments,['size'],Tone.FFT);options.type=Tone.Analyser.Type.FFT;Tone.AudioNode.call(this);/**
			 *  The analyser node.
			 *  @private
			 *  @type {Tone.Analyser}
			 */this._analyser=this.input=this.output=new Tone.Analyser(options);};Tone.extend(Tone.FFT,Tone.AudioNode);/**
		 *  The default values.
		 *  @type {Object}
		 *  @const
		 */Tone.FFT.defaults={'size':1024};/**
		 *  Gets the waveform of the audio source. Returns the waveform data
		 *  of length [size](#size) as a Float32Array with values between -1 and 1.
		 *  @returns {TypedArray}
		 */Tone.FFT.prototype.getValue=function(){return this._analyser.getValue();};/**
		 *  The size of analysis. This must be a power of two in the range 32 to 32768.
		 *  @memberOf Tone.FFT#
		 *  @type {Number}
		 *  @name size
		 */Object.defineProperty(Tone.FFT.prototype,'size',{get:function get(){return this._analyser.size;},set:function set(size){this._analyser.size=size;}});/**
		 *  Clean up.
		 *  @return  {Tone.FFT}  this
		 */Tone.FFT.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._analyser.dispose();this._analyser=null;};return Tone.FFT;});Module(function(Tone){/**
		 *  @class Return the absolute value of an incoming signal.
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @example
		 * var signal = new Tone.Signal(-1);
		 * var abs = new Tone.Abs();
		 * signal.connect(abs);
		 * //the output of abs is 1.
		 */Tone.Abs=function(){Tone.SignalBase.call(this);/**
			 *  @type {Tone.LessThan}
			 *  @private
			 */this._abs=this.input=this.output=new Tone.WaveShaper(function(val){if(Math.abs(val)<0.001){return 0;}else{return Math.abs(val);}},1024);};Tone.extend(Tone.Abs,Tone.SignalBase);/**
		 *  dispose method
		 *  @returns {Tone.Abs} this
		 */Tone.Abs.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._abs.dispose();this._abs=null;return this;};return Tone.Abs;});Module(function(Tone){/**
		 *  @class  Tone.Follower is a  crude envelope follower which will follow
		 *          the amplitude of an incoming signal.
		 *          Take care with small (< 0.02) attack or decay values
		 *          as follower has some ripple which is exaggerated
		 *          at these values. Read more about envelope followers (also known
		 *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Time|Object} [attack] The rate at which the follower rises.
		 *  @param {Time=} release The rate at which the folower falls.
		 *  @example
		 * var follower = new Tone.Follower(0.2, 0.4);
		 */Tone.Follower=function(){var options=Tone.defaults(arguments,['attack','release'],Tone.Follower);Tone.AudioNode.call(this);this.createInsOuts(1,1);/**
			 *  @type {Tone.Abs}
			 *  @private
			 */this._abs=new Tone.Abs();/**
			 *  the lowpass filter which smooths the input
			 *  @type {BiquadFilterNode}
			 *  @private
			 */this._filter=this.context.createBiquadFilter();this._filter.type='lowpass';this._filter.frequency.value=0;this._filter.Q.value=-100;/**
			 *  @type {WaveShaperNode}
			 *  @private
			 */this._frequencyValues=new Tone.WaveShaper();/**
			 *  @type {Tone.Subtract}
			 *  @private
			 */this._sub=new Tone.Subtract();/**
			 *  @type {Tone.Delay}
			 *  @private
			 */this._delay=new Tone.Delay(this.blockTime);/**
			 *  this keeps it far from 0, even for very small differences
			 *  @type {Tone.Multiply}
			 *  @private
			 */this._mult=new Tone.Multiply(10000);/**
			 *  @private
			 *  @type {number}
			 */this._attack=options.attack;/**
			 *  @private
			 *  @type {number}
			 */this._release=options.release;//the smoothed signal to get the values
this.input.chain(this._abs,this._filter,this.output);//the difference path
this._abs.connect(this._sub,0,1);this._filter.chain(this._delay,this._sub);//threshold the difference and use the thresh to set the frequency
this._sub.chain(this._mult,this._frequencyValues,this._filter.frequency);//set the attack and release values in the table
this._setAttackRelease(this._attack,this._release);};Tone.extend(Tone.Follower,Tone.AudioNode);/**
		 *  @static
		 *  @type {Object}
		 */Tone.Follower.defaults={'attack':0.05,'release':0.5};/**
		 *  sets the attack and release times in the wave shaper
		 *  @param   {Time} attack
		 *  @param   {Time} release
		 *  @private
		 */Tone.Follower.prototype._setAttackRelease=function(attack,release){var minTime=this.blockTime;attack=Tone.Time(attack).toFrequency();release=Tone.Time(release).toFrequency();attack=Math.max(attack,minTime);release=Math.max(release,minTime);this._frequencyValues.setMap(function(val){if(val<=0){return attack;}else{return release;}});};/**
		 * The attack time.
		 * @memberOf Tone.Follower#
		 * @type {Time}
		 * @name attack
		 */Object.defineProperty(Tone.Follower.prototype,'attack',{get:function get(){return this._attack;},set:function set(attack){this._attack=attack;this._setAttackRelease(this._attack,this._release);}});/**
		 * The release time.
		 * @memberOf Tone.Follower#
		 * @type {Time}
		 * @name release
		 */Object.defineProperty(Tone.Follower.prototype,'release',{get:function get(){return this._release;},set:function set(release){this._release=release;this._setAttackRelease(this._attack,this._release);}});/**
		 *  Borrows the connect method from Signal so that the output can be used
		 *  as a Tone.Signal control signal.
		 *  @function
		 */Tone.Follower.prototype.connect=Tone.SignalBase.prototype.connect;/**
		 *  dispose
		 *  @returns {Tone.Follower} this
		 */Tone.Follower.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._filter.disconnect();this._filter=null;this._frequencyValues.disconnect();this._frequencyValues=null;this._delay.dispose();this._delay=null;this._sub.disconnect();this._sub=null;this._abs.dispose();this._abs=null;this._mult.dispose();this._mult=null;this._curve=null;return this;};return Tone.Follower;});Module(function(Tone){/**
		 *  @class Tone.ScaledEnvelop is an envelope which can be scaled
		 *         to any range. It's useful for applying an envelope
		 *         to a frequency or any other non-NormalRange signal
		 *         parameter.
		 *
		 *  @extends {Tone.Envelope}
		 *  @constructor
		 *  @param {Time|Object} [attack]	the attack time in seconds
		 *  @param {Time} [decay]	the decay time in seconds
		 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
		 *  @param {Time} [release]	the release time in seconds
		 *  @example
		 *  var scaledEnv = new Tone.ScaledEnvelope({
		 *  	"attack" : 0.2,
		 *  	"min" : 200,
		 *  	"max" : 2000
		 *  });
		 *  scaledEnv.connect(oscillator.frequency);
		 */Tone.ScaledEnvelope=function(){//get all of the defaults
var options=Tone.defaults(arguments,['attack','decay','sustain','release'],Tone.Envelope);Tone.Envelope.call(this,options);options=Tone.defaultArg(options,Tone.ScaledEnvelope.defaults);/**
			 *  scale the incoming signal by an exponent
			 *  @type {Tone.Pow}
			 *  @private
			 */this._exp=this.output=new Tone.Pow(options.exponent);/**
			 *  scale the signal to the desired range
			 *  @type {Tone.Multiply}
			 *  @private
			 */this._scale=this.output=new Tone.Scale(options.min,options.max);this._sig.chain(this._exp,this._scale);};Tone.extend(Tone.ScaledEnvelope,Tone.Envelope);/**
		 *  the default parameters
		 *  @static
		 */Tone.ScaledEnvelope.defaults={'min':0,'max':1,'exponent':1};/**
		 * The envelope's min output value. This is the value which it
		 * starts at.
		 * @memberOf Tone.ScaledEnvelope#
		 * @type {number}
		 * @name min
		 */Object.defineProperty(Tone.ScaledEnvelope.prototype,'min',{get:function get(){return this._scale.min;},set:function set(min){this._scale.min=min;}});/**
		 * The envelope's max output value. In other words, the value
		 * at the peak of the attack portion of the envelope.
		 * @memberOf Tone.ScaledEnvelope#
		 * @type {number}
		 * @name max
		 */Object.defineProperty(Tone.ScaledEnvelope.prototype,'max',{get:function get(){return this._scale.max;},set:function set(max){this._scale.max=max;}});/**
		 * The envelope's exponent value.
		 * @memberOf Tone.ScaledEnvelope#
		 * @type {number}
		 * @name exponent
		 */Object.defineProperty(Tone.ScaledEnvelope.prototype,'exponent',{get:function get(){return this._exp.value;},set:function set(exp){this._exp.value=exp;}});/**
		 *  clean up
		 *  @returns {Tone.ScaledEnvelope} this
		 */Tone.ScaledEnvelope.prototype.dispose=function(){Tone.Envelope.prototype.dispose.call(this);this._scale.dispose();this._scale=null;this._exp.dispose();this._exp=null;return this;};return Tone.ScaledEnvelope;});Module(function(Tone){/**
		 *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`
		 *         it's got a `baseFrequency` and `octaves` parameter.
		 *
		 *  @extends {Tone.Envelope}
		 *  @constructor
		 *  @param {Time|Object} [attack]	the attack time in seconds
		 *  @param {Time} [decay]	the decay time in seconds
		 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
		 *  @param {Time} [release]	the release time in seconds
		 *  @example
		 *  var freqEnv = new Tone.FrequencyEnvelope({
		 *  	"attack" : 0.2,
		 *  	"baseFrequency" : "C2",
		 *  	"octaves" : 4
		 *  });
		 *  freqEnv.connect(oscillator.frequency);
		 */Tone.FrequencyEnvelope=function(){var options=Tone.defaults(arguments,['attack','decay','sustain','release'],Tone.Envelope);Tone.ScaledEnvelope.call(this,options);//merge it with the frequency envelope defaults
options=Tone.defaultArg(options,Tone.FrequencyEnvelope.defaults);/**
			 *  Stores the octave value
			 *  @type {Positive}
			 *  @private
			 */this._octaves=options.octaves;//setup
this.baseFrequency=options.baseFrequency;this.octaves=options.octaves;};Tone.extend(Tone.FrequencyEnvelope,Tone.Envelope);/**
		 *  the default parameters
		 *  @static
		 */Tone.FrequencyEnvelope.defaults={'baseFrequency':200,'octaves':4,'exponent':2};/**
		 * The envelope's mininum output value. This is the value which it
		 * starts at.
		 * @memberOf Tone.FrequencyEnvelope#
		 * @type {Frequency}
		 * @name baseFrequency
		 */Object.defineProperty(Tone.FrequencyEnvelope.prototype,'baseFrequency',{get:function get(){return this._scale.min;},set:function set(min){this._scale.min=this.toFrequency(min);//also update the octaves
this.octaves=this._octaves;}});/**
		 * The number of octaves above the baseFrequency that the
		 * envelope will scale to.
		 * @memberOf Tone.FrequencyEnvelope#
		 * @type {Positive}
		 * @name octaves
		 */Object.defineProperty(Tone.FrequencyEnvelope.prototype,'octaves',{get:function get(){return this._octaves;},set:function set(octaves){this._octaves=octaves;this._scale.max=this.baseFrequency*Math.pow(2,octaves);}});/**
		 * The envelope's exponent value.
		 * @memberOf Tone.FrequencyEnvelope#
		 * @type {number}
		 * @name exponent
		 */Object.defineProperty(Tone.FrequencyEnvelope.prototype,'exponent',{get:function get(){return this._exp.value;},set:function set(exp){this._exp.value=exp;}});/**
		 *  clean up
		 *  @returns {Tone.FrequencyEnvelope} this
		 */Tone.FrequencyEnvelope.prototype.dispose=function(){Tone.ScaledEnvelope.prototype.dispose.call(this);return this;};return Tone.FrequencyEnvelope;});Module(function(Tone){/**
		 *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @example
		 * var gt0 = new Tone.GreaterThanZero();
		 * var sig = new Tone.Signal(0.01).connect(gt0);
		 * //the output of gt0 is 1.
		 * sig.value = 0;
		 * //the output of gt0 is 0.
		 */Tone.GreaterThanZero=function(){Tone.SignalBase.call(this);/**
			 *  @type {Tone.WaveShaper}
			 *  @private
			 */this._thresh=this.output=new Tone.WaveShaper(function(val){if(val<=0){return 0;}else{return 1;}},127);/**
			 *  scale the first thresholded signal by a large value.
			 *  this will help with values which are very close to 0
			 *  @type {Tone.Multiply}
			 *  @private
			 */this._scale=this.input=new Tone.Multiply(10000);//connections
this._scale.connect(this._thresh);};Tone.extend(Tone.GreaterThanZero,Tone.SignalBase);/**
		 *  dispose method
		 *  @returns {Tone.GreaterThanZero} this
		 */Tone.GreaterThanZero.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._scale.dispose();this._scale=null;this._thresh.dispose();this._thresh=null;return this;};return Tone.GreaterThanZero;});Module(function(Tone){/**
		 *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.
		 *          can compare two signals or a signal and a number.
		 *
		 *  @constructor
		 *  @extends {Tone.Signal}
		 *  @param {number} [value=0] the value to compare to the incoming signal
		 *  @example
		 * var gt = new Tone.GreaterThan(2);
		 * var sig = new Tone.Signal(4).connect(gt);
		 * //output of gt is equal 1.
		 */Tone.GreaterThan=function(value){Tone.Signal.call(this);this.createInsOuts(2,0);/**
			 *  subtract the amount from the incoming signal
			 *  @type {Tone.Subtract}
			 *  @private
			 */this._param=this.input[0]=new Tone.Subtract(value);this.input[1]=this._param.input[1];/**
			 *  compare that amount to zero
			 *  @type {Tone.GreaterThanZero}
			 *  @private
			 */this._gtz=this.output=new Tone.GreaterThanZero();//connect
this._param.connect(this._gtz);};Tone.extend(Tone.GreaterThan,Tone.Signal);/**
		 *  dispose method
		 *  @returns {Tone.GreaterThan} this
		 */Tone.GreaterThan.prototype.dispose=function(){Tone.Signal.prototype.dispose.call(this);this._gtz.dispose();this._gtz=null;return this;};return Tone.GreaterThan;});Module(function(Tone){/**
		 *  @class  Tone.Gate only passes a signal through when the incoming
		 *          signal exceeds a specified threshold. To do this, Gate uses
		 *          a Tone.Follower to follow the amplitude of the incoming signal.
		 *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Decibels|Object} [threshold] The threshold above which the gate will open.
		 *  @param {Time=} attack The follower's attack time
		 *  @param {Time=} release The follower's release time
		 *  @example
		 * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();
		 * var mic = new Tone.UserMedia().connect(gate);
		 * //the gate will only pass through the incoming
		 * //signal when it's louder than -30db
		 */Tone.Gate=function(){var options=Tone.defaults(arguments,['threshold','attack','release'],Tone.Gate);Tone.AudioNode.call(this);this.createInsOuts(1,1);/**
			 *  @type {Tone.Follower}
			 *  @private
			 */this._follower=new Tone.Follower(options.attack,options.release);/**
			 *  @type {Tone.GreaterThan}
			 *  @private
			 */this._gt=new Tone.GreaterThan(Tone.dbToGain(options.threshold));//the connections
this.input.connect(this.output);//the control signal
this.input.chain(this._gt,this._follower,this.output.gain);};Tone.extend(Tone.Gate,Tone.AudioNode);/**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */Tone.Gate.defaults={'attack':0.1,'release':0.1,'threshold':-40};/**
		 * The threshold of the gate in decibels
		 * @memberOf Tone.Gate#
		 * @type {Decibels}
		 * @name threshold
		 */Object.defineProperty(Tone.Gate.prototype,'threshold',{get:function get(){return Tone.gainToDb(this._gt.value);},set:function set(thresh){this._gt.value=Tone.dbToGain(thresh);}});/**
		 * The attack speed of the gate
		 * @memberOf Tone.Gate#
		 * @type {Time}
		 * @name attack
		 */Object.defineProperty(Tone.Gate.prototype,'attack',{get:function get(){return this._follower.attack;},set:function set(attackTime){this._follower.attack=attackTime;}});/**
		 * The release speed of the gate
		 * @memberOf Tone.Gate#
		 * @type {Time}
		 * @name release
		 */Object.defineProperty(Tone.Gate.prototype,'release',{get:function get(){return this._follower.release;},set:function set(releaseTime){this._follower.release=releaseTime;}});/**
		 *  Clean up.
		 *  @returns {Tone.Gate} this
		 */Tone.Gate.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._follower.dispose();this._gt.dispose();this._follower=null;this._gt=null;return this;};return Tone.Gate;});Module(function(Tone){/**
		 * @class Tone.TickSignal extends Tone.Signal, but adds the capability
		 *        to calculate the number of elapsed ticks. exponential and target curves
		 *        are approximated with multiple linear ramps.
		 *
		 *        Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos, for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)
		 *        describing integrating timing functions for tempo calculations.
		 *
		 * @param {Number} value The initial value of the signal
		 * @extends {Tone.Signal}
		 */Tone.TickSignal=function(value){value=Tone.defaultArg(value,1);Tone.Signal.call(this,{'units':Tone.Type.Ticks,'value':value});//extend the memory
this._events.memory=Infinity;//clear the clock from the beginning
this.cancelScheduledValues(0);//set an initial event
this._events.add({'type':Tone.Param.AutomationType.SetValue,'time':0,'value':value});};Tone.extend(Tone.TickSignal,Tone.Signal);/**
		 * Wraps Tone.Signal methods so that they also
		 * record the ticks.
		 * @param  {Function} method
		 * @return {Function}
		 * @private
		 */function _wrapScheduleMethods(method){return function(value,time){time=this.toSeconds(time);method.apply(this,arguments);var event=this._events.get(time);var previousEvent=this._events.previousEvent(event);var ticksUntilTime=this._getTicksUntilEvent(previousEvent,time);event.ticks=Math.max(ticksUntilTime,0);return this;};}Tone.TickSignal.prototype.setValueAtTime=_wrapScheduleMethods(Tone.Signal.prototype.setValueAtTime);Tone.TickSignal.prototype.linearRampToValueAtTime=_wrapScheduleMethods(Tone.Signal.prototype.linearRampToValueAtTime);/**
		 *  Start exponentially approaching the target value at the given time with
		 *  a rate having the given time constant.
		 *  @param {number} value
		 *  @param {Time} startTime
		 *  @param {number} timeConstant
		 *  @returns {Tone.TickSignal} this
		 */Tone.TickSignal.prototype.setTargetAtTime=function(value,time,constant){//aproximate it with multiple linear ramps
time=this.toSeconds(time);this.setRampPoint(time);value=this._fromUnits(value);//start from previously scheduled value
var prevEvent=this._events.get(time);var segments=Math.round(Math.max(1/constant,1));for(var i=0;i<=segments;i++){var segTime=constant*i+time;var rampVal=this._exponentialApproach(prevEvent.time,prevEvent.value,value,constant,segTime);this.linearRampToValueAtTime(this._toUnits(rampVal),segTime);}return this;};/**
		 *  Schedules an exponential continuous change in parameter value from
		 *  the previous scheduled parameter value to the given value.
		 *  @param  {number} value
		 *  @param  {Time} endTime
		 *  @returns {Tone.TickSignal} this
		 */Tone.TickSignal.prototype.exponentialRampToValueAtTime=function(value,time){//aproximate it with multiple linear ramps
time=this.toSeconds(time);value=this._fromUnits(value);//start from previously scheduled value
var prevEvent=this._events.get(time);if(prevEvent===null){prevEvent={'value':this._initialValue,'time':0};}//approx 10 segments per second
var segments=Math.round(Math.max((time-prevEvent.time)*10,1));var segmentDur=(time-prevEvent.time)/segments;for(var i=0;i<=segments;i++){var segTime=segmentDur*i+prevEvent.time;var rampVal=this._exponentialInterpolate(prevEvent.time,prevEvent.value,time,value,segTime);this.linearRampToValueAtTime(this._toUnits(rampVal),segTime);}return this;};/**
		 * Returns the tick value at the time. Takes into account
		 * any automation curves scheduled on the signal.
		 * @private
		 * @param  {Time} time The time to get the tick count at
		 * @return {Ticks}      The number of ticks which have elapsed at the time
		 *                          given any automations.
		 */Tone.TickSignal.prototype._getTicksUntilEvent=function(event,time){if(event===null){event={'ticks':0,'time':0};}else if(Tone.isUndef(event.ticks)){var previousEvent=this._events.previousEvent(event);event.ticks=this._getTicksUntilEvent(previousEvent,event.time);}var val0=this.getValueAtTime(event.time);var val1=this.getValueAtTime(time);//if it's right on the line, take the previous value
if(this._events.get(time).time===time&&this._events.get(time).type===Tone.Param.AutomationType.SetValue){val1=this.getValueAtTime(time-this.sampleTime);}return 0.5*(time-event.time)*(val0+val1)+event.ticks;};/**
		 * Returns the tick value at the time. Takes into account
		 * any automation curves scheduled on the signal.
		 * @param  {Time} time The time to get the tick count at
		 * @return {Ticks}      The number of ticks which have elapsed at the time
		 *                          given any automations.
		 */Tone.TickSignal.prototype.getTicksAtTime=function(time){time=this.toSeconds(time);var event=this._events.get(time);return Math.max(this._getTicksUntilEvent(event,time),0);};/**
		 * Return the elapsed time of the number of ticks from the given time
		 * @param {Ticks} ticks The number of ticks to calculate
		 * @param  {Time} time The time to get the next tick from
		 * @return {Seconds} The duration of the number of ticks from the given time in seconds
		 */Tone.TickSignal.prototype.getDurationOfTicks=function(ticks,time){time=this.toSeconds(time);var currentTick=this.getTicksAtTime(time);return this.getTimeOfTick(currentTick+ticks)-time;};/**
		 * Given a tick, returns the time that tick occurs at.
		 * @param  {Ticks} tick
		 * @return {Time}      The time that the tick occurs.
		 */Tone.TickSignal.prototype.getTimeOfTick=function(tick){var before=this._events.get(tick,'ticks');var after=this._events.getAfter(tick,'ticks');if(before&&before.ticks===tick){return before.time;}else if(before&&after&&after.type===Tone.Param.AutomationType.Linear&&before.value!==after.value){var val0=this.getValueAtTime(before.time);var val1=this.getValueAtTime(after.time);var delta=(val1-val0)/(after.time-before.time);var k=Math.sqrt(Math.pow(val0,2)-2*delta*(before.ticks-tick));var sol1=(-val0+k)/delta;var sol2=(-val0-k)/delta;return(sol1>0?sol1:sol2)+before.time;}else if(before){if(before.value===0){return Infinity;}else{return before.time+(tick-before.ticks)/before.value;}}else{return tick/this._initialValue;}};/**
		 * Convert some number of ticks their the duration in seconds accounting
		 * for any automation curves starting at the given time.
		 * @param  {Ticks} ticks The number of ticks to convert to seconds.
		 * @param  {Time} [when=now]  When along the automation timeline to convert the ticks.
		 * @return {Tone.Time}       The duration in seconds of the ticks.
		 */Tone.TickSignal.prototype.ticksToTime=function(ticks,when){when=this.toSeconds(when);return new Tone.Time(this.getDurationOfTicks(ticks,when));};/**
		 * The inverse of [ticksToTime](#tickstotime). Convert a duration in
		 * seconds to the corresponding number of ticks accounting for any
		 * automation curves starting at the given time.
		 * @param  {Time} duration The time interval to convert to ticks.
		 * @param  {Time} [when=now]     When along the automation timeline to convert the ticks.
		 * @return {Tone.Ticks}          The duration in ticks.
		 */Tone.TickSignal.prototype.timeToTicks=function(duration,when){when=this.toSeconds(when);duration=this.toSeconds(duration);var startTicks=this.getTicksAtTime(when);var endTicks=this.getTicksAtTime(when+duration);return new Tone.Ticks(endTicks-startTicks);};return Tone.TickSignal;});Module(function(Tone){/**
		 *  @class  A Timeline State. Provides the methods: <code>setStateAtTime("state", time)</code>
		 *          and <code>getValueAtTime(time)</code>.
		 *
		 *  @extends {Tone.Timeline}
		 *  @param {String} initial The initial state of the TimelineState. 
		 *                          Defaults to <code>undefined</code>
		 */Tone.TimelineState=function(initial){Tone.Timeline.call(this);/**
			 *  The initial state
			 *  @private
			 *  @type {String}
			 */this._initial=initial;};Tone.extend(Tone.TimelineState,Tone.Timeline);/**
		 *  Returns the scheduled state scheduled before or at
		 *  the given time.
		 *  @param  {Number}  time  The time to query.
		 *  @return  {String}  The name of the state input in setStateAtTime.
		 */Tone.TimelineState.prototype.getValueAtTime=function(time){var event=this.get(time);if(event!==null){return event.state;}else{return this._initial;}};/**
		 *  Add a state to the timeline.
		 *  @param  {String}  state The name of the state to set.
		 *  @param  {Number}  time  The time to query.
		 *  @returns {Tone.TimelineState} this
		 */Tone.TimelineState.prototype.setStateAtTime=function(state,time){//all state changes need to be >= the previous state time
//TODO throw error if time < the previous event time
this.add({'state':state,'time':time});return this;};/**
		 *  Return the event before the time with the given state
		 *  @param {Tone.State} state The state to look for
		 *  @param  {Time}  time  When to check before			
		 *  @return  {Object}  The event with the given state before the time
		 */Tone.TimelineState.prototype.getLastState=function(state,time){time=this.toSeconds(time);var index=this._search(time);for(var i=index;i>=0;i--){var event=this._timeline[i];if(event.state===state){return event;}}};/**
		 *  Return the event after the time with the given state
		 *  @param {Tone.State} state The state to look for
		 *  @param  {Time}  time  When to check from
		 *  @return  {Object}  The event with the given state after the time
		 */Tone.TimelineState.prototype.getNextState=function(state,time){time=this.toSeconds(time);var index=this._search(time);if(index!==-1){for(var i=index;i<this._timeline.length;i++){var event=this._timeline[i];if(event.state===state){return event;}}}};return Tone.TimelineState;});Module(function(Tone){/**
		 *  @class  Uses [Tone.TickSignal](TickSignal) to track elapsed ticks with
		 *  		complex automation curves.
		 *
		 * 	@constructor
	     *  @param {Frequency} frequency The initial frequency that the signal ticks at
		 *  @extends {Tone}
		 */Tone.TickSource=function(){var options=Tone.defaults(arguments,['frequency'],Tone.TickSource);/**
			 *  The frequency the callback function should be invoked.
			 *  @type  {Frequency}
			 *  @signal
			 */this.frequency=new Tone.TickSignal(options.frequency,Tone.Type.Frequency);this._readOnly('frequency');/**
			 *  The state timeline
			 *  @type {Tone.TimelineState}
			 *  @private
			 */this._state=new Tone.TimelineState(Tone.State.Stopped);this._state.setStateAtTime(Tone.State.Stopped,0);/**
			 * The offset values of the ticks
			 * @type {Tone.Timeline}
			 * @private
			 */this._tickOffset=new Tone.Timeline();//add the first event
this.setTicksAtTime(0,0);};Tone.extend(Tone.TickSource);/**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */Tone.TickSource.defaults={'frequency':1};/**
		 *  Returns the playback state of the source, either "started", "stopped" or "paused".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.TickSource#
		 *  @name state
		 */Object.defineProperty(Tone.TickSource.prototype,'state',{get:function get(){return this._state.getValueAtTime(this.now());}});/**
		 *  Start the clock at the given time. Optionally pass in an offset
		 *  of where to start the tick counter from.
		 *  @param  {Time=}  time    The time the clock should start
		 *  @param {Ticks=0} offset The number of ticks to start the source at
		 *  @return  {Tone.TickSource}  this
		 */Tone.TickSource.prototype.start=function(time,offset){time=this.toSeconds(time);if(this._state.getValueAtTime(time)!==Tone.State.Started){this._state.setStateAtTime(Tone.State.Started,time);if(Tone.isDefined(offset)){this.setTicksAtTime(offset,time);}}return this;};/**
		 *  Stop the clock. Stopping the clock resets the tick counter to 0.
		 *  @param {Time} [time=now] The time when the clock should stop.
		 *  @returns {Tone.TickSource} this
		 *  @example
		 * clock.stop();
		 */Tone.TickSource.prototype.stop=function(time){time=this.toSeconds(time);//cancel the previous stop
if(this._state.getValueAtTime(time)===Tone.State.Stopped){var event=this._state.get(time);if(event.time>0){this._tickOffset.cancel(event.time);this._state.cancel(event.time);}}this._state.cancel(time);this._state.setStateAtTime(Tone.State.Stopped,time);this.setTicksAtTime(0,time);return this;};/**
		 *  Pause the clock. Pausing does not reset the tick counter.
		 *  @param {Time} [time=now] The time when the clock should stop.
		 *  @returns {Tone.TickSource} this
		 */Tone.TickSource.prototype.pause=function(time){time=this.toSeconds(time);if(this._state.getValueAtTime(time)===Tone.State.Started){this._state.setStateAtTime(Tone.State.Paused,time);}return this;};/**
		 *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.
		 *  @param {Time} [time=now] When to clear the events after
		 *  @returns {Tone.TickSource} this
		 */Tone.TickSource.prototype.cancel=function(time){time=this.toSeconds(time);this._state.cancel(time);this._tickOffset.cancel(time);return this;};/**
		 * Get the elapsed ticks at the given time
		 * @param  {Time} time  When to get the tick value
		 * @return {Ticks}     The number of ticks
		 */Tone.TickSource.prototype.getTicksAtTime=function(time){time=this.toSeconds(time);var stopEvent=this._state.getLastState(Tone.State.Stopped,time);//this event allows forEachBetween to iterate until the current time
var tmpEvent={state:Tone.State.Paused,time:time};this._state.add(tmpEvent);//keep track of the previous offset event
var lastState=stopEvent;var elapsedTicks=0;//iterate through all the events since the last stop
this._state.forEachBetween(stopEvent.time,time+this.sampleTime,function(e){var periodStartTime=lastState.time;//if there is an offset event in this period use that
var offsetEvent=this._tickOffset.get(e.time);if(offsetEvent.time>=lastState.time){elapsedTicks=offsetEvent.ticks;periodStartTime=offsetEvent.time;}if(lastState.state===Tone.State.Started&&e.state!==Tone.State.Started){elapsedTicks+=this.frequency.getTicksAtTime(e.time)-this.frequency.getTicksAtTime(periodStartTime);}lastState=e;}.bind(this));//remove the temporary event
this._state.remove(tmpEvent);//return the ticks
return elapsedTicks;};/**
		 *  The number of times the callback was invoked. Starts counting at 0
		 *  and increments after the callback was invoked. Returns -1 when stopped.
		 *  @memberOf Tone.TickSource#
		 *  @name ticks
		 *  @type {Ticks}
		 */Object.defineProperty(Tone.TickSource.prototype,'ticks',{get:function get(){return this.getTicksAtTime(this.now());},set:function set(t){this.setTicksAtTime(t,this.now());}});/**
		 *  The time since ticks=0 that the TickSource has been running. Accounts
		 *  for tempo curves
		 *  @memberOf Tone.TickSource#
		 *  @name seconds
		 *  @type {Seconds}
		 */Object.defineProperty(Tone.TickSource.prototype,'seconds',{get:function get(){return this.getSecondsAtTime(this.now());},set:function set(s){var now=this.now();var ticks=this.frequency.timeToTicks(s,now);this.setTicksAtTime(ticks,now);}});/**
		 *  Return the elapsed seconds at the given time.
		 *  @param  {Time}  time  When to get the elapsed seconds
		 *  @return  {Seconds}  The number of elapsed seconds
		 */Tone.TickSource.prototype.getSecondsAtTime=function(time){time=this.toSeconds(time);var stopEvent=this._state.getLastState(Tone.State.Stopped,time);//this event allows forEachBetween to iterate until the current time
var tmpEvent={state:Tone.State.Paused,time:time};this._state.add(tmpEvent);//keep track of the previous offset event
var lastState=stopEvent;var elapsedSeconds=0;//iterate through all the events since the last stop
this._state.forEachBetween(stopEvent.time,time+this.sampleTime,function(e){var periodStartTime=lastState.time;//if there is an offset event in this period use that
var offsetEvent=this._tickOffset.get(e.time);if(offsetEvent.time>=lastState.time){elapsedSeconds=offsetEvent.seconds;periodStartTime=offsetEvent.time;}if(lastState.state===Tone.State.Started&&e.state!==Tone.State.Started){elapsedSeconds+=e.time-periodStartTime;}lastState=e;}.bind(this));//remove the temporary event
this._state.remove(tmpEvent);//return the ticks
return elapsedSeconds;};/**
		 * Set the clock's ticks at the given time.
		 * @param  {Ticks} ticks The tick value to set
		 * @param  {Time} time  When to set the tick value
		 * @return {Tone.TickSource}       this
		 */Tone.TickSource.prototype.setTicksAtTime=function(ticks,time){time=this.toSeconds(time);this._tickOffset.cancel(time);this._tickOffset.add({'time':time,'ticks':ticks,'seconds':this.frequency.getDurationOfTicks(ticks,time)});return this;};/**
		 *  Returns the scheduled state at the given time.
		 *  @param  {Time}  time  The time to query.
		 *  @return  {String}  The name of the state input in setStateAtTime.
		 *  @example
		 * source.start("+0.1");
		 * source.getStateAtTime("+0.1"); //returns "started"
		 */Tone.TickSource.prototype.getStateAtTime=function(time){time=this.toSeconds(time);return this._state.getValueAtTime(time);};/**
		 * Get the time of the given tick. The second argument
		 * is when to test before. Since ticks can be set (with setTicksAtTime)
		 * there may be multiple times for a given tick value. 
		 * @param  {Ticks} ticks The tick number.
		 * @param  {Time=} before When to measure the tick value from. 
		 * @return {Time}       The time of the tick
		 */Tone.TickSource.prototype.getTimeOfTick=function(tick,before){before=Tone.defaultArg(before,this.now());var offset=this._tickOffset.get(before);var event=this._state.get(before);var startTime=Math.max(offset.time,event.time);var absoluteTicks=this.frequency.getTicksAtTime(startTime)+tick-offset.ticks;return this.frequency.getTimeOfTick(absoluteTicks);};/**
		 *  Invoke the callback event at all scheduled ticks between the 
		 *  start time and the end time
		 *  @param  {Time}    startTime  The beginning of the search range
		 *  @param  {Time}    endTime    The end of the search range
		 *  @param  {Function<Time,Ticks>}  callback   The callback to invoke with each tick
		 *  @return  {Tone.TickSource}    this
		 */Tone.TickSource.prototype.forEachTickBetween=function(startTime,endTime,callback){//only iterate through the sections where it is "started"
var lastStateEvent=this._state.get(startTime);this._state.forEachBetween(startTime,endTime,function(event){if(lastStateEvent.state===Tone.State.Started&&event.state!==Tone.State.Started){this.forEachTickBetween(Math.max(lastStateEvent.time,startTime),event.time-this.sampleTime,callback);}lastStateEvent=event;}.bind(this));startTime=Math.max(lastStateEvent.time,startTime);if(lastStateEvent.state===Tone.State.Started&&this._state){//figure out the difference between the frequency ticks and the 
var startTicks=this.frequency.getTicksAtTime(startTime);var ticksAtStart=this.frequency.getTicksAtTime(lastStateEvent.time);var diff=startTicks-ticksAtStart;var offset=diff%1;if(offset!==0){offset=1-offset;}var nextTickTime=this.frequency.getTimeOfTick(startTicks+offset);var error=null;while(nextTickTime<endTime&&this._state){try{callback(nextTickTime,Math.round(this.getTicksAtTime(nextTickTime)));}catch(e){error=e;break;}if(this._state){nextTickTime+=this.frequency.getDurationOfTicks(1,nextTickTime);}}}if(error){throw error;}return this;};/**
		 *  Clean up
		 *  @returns {Tone.TickSource} this
		 */Tone.TickSource.prototype.dispose=function(){Tone.Param.prototype.dispose.call(this);this._state.dispose();this._state=null;this._tickOffset.dispose();this._tickOffset=null;this._writable('frequency');this.frequency.dispose();this.frequency=null;return this;};return Tone.TickSource;});Module(function(Tone){/**
		 *  @class  A sample accurate clock which provides a callback at the given rate.
		 *          While the callback is not sample-accurate (it is still susceptible to
		 *          loose JS timing), the time passed in as the argument to the callback
		 *          is precise. For most applications, it is better to use Tone.Transport
		 *          instead of the Clock by itself since you can synchronize multiple callbacks.
		 *
		 * 	@constructor
		 *  @extends {Tone.Emitter}
		 * 	@param {function} callback The callback to be invoked with the time of the audio event
		 * 	@param {Frequency} frequency The rate of the callback
		 * 	@example
		 * //the callback will be invoked approximately once a second
		 * //and will print the time exactly once a second apart.
		 * var clock = new Tone.Clock(function(time){
		 * 	console.log(time);
		 * }, 1);
		 */Tone.Clock=function(){var options=Tone.defaults(arguments,['callback','frequency'],Tone.Clock);Tone.Emitter.call(this);/**
			 *  The callback function to invoke at the scheduled tick.
			 *  @type  {Function}
			 */this.callback=options.callback;/**
			 *  The next time the callback is scheduled.
			 *  @type {Number}
			 *  @private
			 */this._nextTick=0;/**
			 *  The tick counter
			 *  @type  {Tone.TickSource}
			 *  @private
			 */this._tickSource=new Tone.TickSource(options.frequency);/**
			 *  The last time the loop callback was invoked
			 *  @private
			 *  @type {Number}
			 */this._lastUpdate=0;/**
			 *  The rate the callback function should be invoked.
			 *  @type  {BPM}
			 *  @signal
			 */this.frequency=this._tickSource.frequency;this._readOnly('frequency');/**
			 *  The state timeline
			 *  @type {Tone.TimelineState}
			 *  @private
			 */this._state=new Tone.TimelineState(Tone.State.Stopped);//add an initial state
this._state.setStateAtTime(Tone.State.Stopped,0);/**
			 *  The loop function bound to its context.
			 *  This is necessary to remove the event in the end.
			 *  @type {Function}
			 *  @private
			 */this._boundLoop=this._loop.bind(this);//bind a callback to the worker thread
this.context.on('tick',this._boundLoop);};Tone.extend(Tone.Clock,Tone.Emitter);/**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */Tone.Clock.defaults={'callback':Tone.noOp,'frequency':1};/**
		 *  Returns the playback state of the source, either "started", "stopped" or "paused".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.Clock#
		 *  @name state
		 */Object.defineProperty(Tone.Clock.prototype,'state',{get:function get(){return this._state.getValueAtTime(this.now());}});/**
		 *  Start the clock at the given time. Optionally pass in an offset
		 *  of where to start the tick counter from.
		 *  @param  {Time=}  time    The time the clock should start
		 *  @param  {Ticks=}  offset  Where the tick counter starts counting from.
		 *  @return  {Tone.Clock}  this
		 */Tone.Clock.prototype.start=function(time,offset){time=this.toSeconds(time);if(this._state.getValueAtTime(time)!==Tone.State.Started){this._state.setStateAtTime(Tone.State.Started,time);this._tickSource.start(time,offset);if(time<this._lastUpdate){this.emit('start',time,offset);}}return this;};/**
		 *  Stop the clock. Stopping the clock resets the tick counter to 0.
		 *  @param {Time} [time=now] The time when the clock should stop.
		 *  @returns {Tone.Clock} this
		 *  @example
		 * clock.stop();
		 */Tone.Clock.prototype.stop=function(time){time=this.toSeconds(time);this._state.cancel(time);this._state.setStateAtTime(Tone.State.Stopped,time);this._tickSource.stop(time);if(time<this._lastUpdate){this.emit('stop',time);}return this;};/**
		 *  Pause the clock. Pausing does not reset the tick counter.
		 *  @param {Time} [time=now] The time when the clock should stop.
		 *  @returns {Tone.Clock} this
		 */Tone.Clock.prototype.pause=function(time){time=this.toSeconds(time);if(this._state.getValueAtTime(time)===Tone.State.Started){this._state.setStateAtTime(Tone.State.Paused,time);this._tickSource.pause(time);if(time<this._lastUpdate){this.emit('pause',time);}}return this;};/**
		 *  The number of times the callback was invoked. Starts counting at 0
		 *  and increments after the callback was invoked.
		 *  @type {Ticks}
		 */Object.defineProperty(Tone.Clock.prototype,'ticks',{get:function get(){return Math.ceil(this.getTicksAtTime(this.now()));},set:function set(t){this._tickSource.ticks=t;}});/**
		 *  The time since ticks=0 that the Clock has been running. Accounts
		 *  for tempo curves
		 *  @type {Seconds}
		 */Object.defineProperty(Tone.Clock.prototype,'seconds',{get:function get(){return this._tickSource.seconds;},set:function set(s){this._tickSource.seconds=s;}});/**
		 *  Return the elapsed seconds at the given time.
		 *  @param  {Time}  time  When to get the elapsed seconds
		 *  @return  {Seconds}  The number of elapsed seconds
		 */Tone.Clock.prototype.getSecondsAtTime=function(time){return this._tickSource.getSecondsAtTime(time);};/**
		 * Set the clock's ticks at the given time.
		 * @param  {Ticks} ticks The tick value to set
		 * @param  {Time} time  When to set the tick value
		 * @return {Tone.Clock}       this
		 */Tone.Clock.prototype.setTicksAtTime=function(ticks,time){this._tickSource.setTicksAtTime(ticks,time);return this;};/**
		 * Get the clock's ticks at the given time.
		 * @param  {Time} time  When to get the tick value
		 * @return {Ticks}       The tick value at the given time.
		 */Tone.Clock.prototype.getTicksAtTime=function(time){return this._tickSource.getTicksAtTime(time);};/**
		 * Get the time of the next tick
		 * @param  {Ticks} ticks The tick number.
		 * @param  {Time} before 
		 * @return {Tone.Clock}       this
		 */Tone.Clock.prototype.nextTickTime=function(offset,when){when=this.toSeconds(when);var currentTick=this.getTicksAtTime(when);return this._tickSource.getTimeOfTick(currentTick+offset,when);};/**
		 *  The scheduling loop.
		 *  @private
		 */Tone.Clock.prototype._loop=function(){var startTime=this._lastUpdate;var endTime=this.now();this._lastUpdate=endTime;if(startTime!==endTime){//the state change events
this._state.forEachBetween(startTime,endTime,function(e){switch(e.state){case Tone.State.Started:var offset=this._tickSource.getTicksAtTime(e.time);this.emit('start',e.time,offset);break;case Tone.State.Stopped:if(e.time!==0){this.emit('stop',e.time);}break;case Tone.State.Paused:this.emit('pause',e.time);break;}}.bind(this));//the tick callbacks
this._tickSource.forEachTickBetween(startTime,endTime,function(time,ticks){this.callback(time,ticks);}.bind(this));}};/**
		 *  Returns the scheduled state at the given time.
		 *  @param  {Time}  time  The time to query.
		 *  @return  {String}  The name of the state input in setStateAtTime.
		 *  @example
		 * clock.start("+0.1");
		 * clock.getStateAtTime("+0.1"); //returns "started"
		 */Tone.Clock.prototype.getStateAtTime=function(time){time=this.toSeconds(time);return this._state.getValueAtTime(time);};/**
		 *  Clean up
		 *  @returns {Tone.Clock} this
		 */Tone.Clock.prototype.dispose=function(){Tone.Emitter.prototype.dispose.call(this);this.context.off('tick',this._boundLoop);this._writable('frequency');this._tickSource.dispose();this._tickSource=null;this.frequency=null;this._boundLoop=null;this._nextTick=Infinity;this.callback=null;this._state.dispose();this._state=null;};return Tone.Clock;});Module(function(Tone){/**
		 *  @class Similar to Tone.Timeline, but all events represent
		 *         intervals with both "time" and "duration" times. The
		 *         events are placed in a tree structure optimized
		 *         for querying an intersection point with the timeline
		 *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)
		 *         to represent the data.
		 *  @extends {Tone}
		 */Tone.IntervalTimeline=function(){Tone.call(this);/**
			 *  The root node of the inteval tree
			 *  @type  {IntervalNode}
			 *  @private
			 */this._root=null;/**
			 *  Keep track of the length of the timeline.
			 *  @type  {Number}
			 *  @private
			 */this._length=0;};Tone.extend(Tone.IntervalTimeline);/**
		 *  The event to add to the timeline. All events must
		 *  have a time and duration value
		 *  @param  {Object}  event  The event to add to the timeline
		 *  @return  {Tone.IntervalTimeline}  this
		 */Tone.IntervalTimeline.prototype.add=function(event){if(Tone.isUndef(event.time)||Tone.isUndef(event.duration)){throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');}event.time=event.time.valueOf();var node=new IntervalNode(event.time,event.time+event.duration,event);if(this._root===null){this._root=node;}else{this._root.insert(node);}this._length++;// Restructure tree to be balanced
while(node!==null){node.updateHeight();node.updateMax();this._rebalance(node);node=node.parent;}return this;};/**
		 *  Remove an event from the timeline.
		 *  @param  {Object}  event  The event to remove from the timeline
		 *  @return  {Tone.IntervalTimeline}  this
		 */Tone.IntervalTimeline.prototype.remove=function(event){if(this._root!==null){var results=[];this._root.search(event.time,results);for(var i=0;i<results.length;i++){var node=results[i];if(node.event===event){this._removeNode(node);this._length--;break;}}}return this;};/**
		 *  The number of items in the timeline.
		 *  @type {Number}
		 *  @memberOf Tone.IntervalTimeline#
		 *  @name length
		 *  @readOnly
		 */Object.defineProperty(Tone.IntervalTimeline.prototype,'length',{get:function get(){return this._length;}});/**
		 *  Remove events whose time time is after the given time
		 *  @param  {Number}  time  The time to query.
		 *  @returns {Tone.IntervalTimeline} this
		 */Tone.IntervalTimeline.prototype.cancel=function(after){this.forEachFrom(after,function(event){this.remove(event);}.bind(this));return this;};/**
		 *  Set the root node as the given node
		 *  @param {IntervalNode} node
		 *  @private
		 */Tone.IntervalTimeline.prototype._setRoot=function(node){this._root=node;if(this._root!==null){this._root.parent=null;}};/**
		 *  Replace the references to the node in the node's parent
		 *  with the replacement node.
		 *  @param  {IntervalNode}  node
		 *  @param  {IntervalNode}  replacement
		 *  @private
		 */Tone.IntervalTimeline.prototype._replaceNodeInParent=function(node,replacement){if(node.parent!==null){if(node.isLeftChild()){node.parent.left=replacement;}else{node.parent.right=replacement;}this._rebalance(node.parent);}else{this._setRoot(replacement);}};/**
		 *  Remove the node from the tree and replace it with
		 *  a successor which follows the schema.
		 *  @param  {IntervalNode}  node
		 *  @private
		 */Tone.IntervalTimeline.prototype._removeNode=function(node){if(node.left===null&&node.right===null){this._replaceNodeInParent(node,null);}else if(node.right===null){this._replaceNodeInParent(node,node.left);}else if(node.left===null){this._replaceNodeInParent(node,node.right);}else{var balance=node.getBalance();var replacement,temp;if(balance>0){if(node.left.right===null){replacement=node.left;replacement.right=node.right;temp=replacement;}else{replacement=node.left.right;while(replacement.right!==null){replacement=replacement.right;}replacement.parent.right=replacement.left;temp=replacement.parent;replacement.left=node.left;replacement.right=node.right;}}else if(node.right.left===null){replacement=node.right;replacement.left=node.left;temp=replacement;}else{replacement=node.right.left;while(replacement.left!==null){replacement=replacement.left;}replacement.parent=replacement.parent;replacement.parent.left=replacement.right;temp=replacement.parent;replacement.left=node.left;replacement.right=node.right;}if(node.parent!==null){if(node.isLeftChild()){node.parent.left=replacement;}else{node.parent.right=replacement;}}else{this._setRoot(replacement);}// this._replaceNodeInParent(node, replacement);
this._rebalance(temp);}node.dispose();};/**
		 *  Rotate the tree to the left
		 *  @param  {IntervalNode}  node
		 *  @private
		 */Tone.IntervalTimeline.prototype._rotateLeft=function(node){var parent=node.parent;var isLeftChild=node.isLeftChild();// Make node.right the new root of this sub tree (instead of node)
var pivotNode=node.right;node.right=pivotNode.left;pivotNode.left=node;if(parent!==null){if(isLeftChild){parent.left=pivotNode;}else{parent.right=pivotNode;}}else{this._setRoot(pivotNode);}};/**
		 *  Rotate the tree to the right
		 *  @param  {IntervalNode}  node
		 *  @private
		 */Tone.IntervalTimeline.prototype._rotateRight=function(node){var parent=node.parent;var isLeftChild=node.isLeftChild();// Make node.left the new root of this sub tree (instead of node)
var pivotNode=node.left;node.left=pivotNode.right;pivotNode.right=node;if(parent!==null){if(isLeftChild){parent.left=pivotNode;}else{parent.right=pivotNode;}}else{this._setRoot(pivotNode);}};/**
		 *  Balance the BST
		 *  @param  {IntervalNode}  node
		 *  @private
		 */Tone.IntervalTimeline.prototype._rebalance=function(node){var balance=node.getBalance();if(balance>1){if(node.left.getBalance()<0){this._rotateLeft(node.left);}else{this._rotateRight(node);}}else if(balance<-1){if(node.right.getBalance()>0){this._rotateRight(node.right);}else{this._rotateLeft(node);}}};/**
		 *  Get an event whose time and duration span the give time. Will
		 *  return the match whose "time" value is closest to the given time.
		 *  @param  {Object}  event  The event to add to the timeline
		 *  @return  {Object}  The event which spans the desired time
		 */Tone.IntervalTimeline.prototype.get=function(time){if(this._root!==null){var results=[];this._root.search(time,results);if(results.length>0){var max=results[0];for(var i=1;i<results.length;i++){if(results[i].low>max.low){max=results[i];}}return max.event;}}return null;};/**
		 *  Iterate over everything in the timeline.
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.IntervalTimeline} this
		 */Tone.IntervalTimeline.prototype.forEach=function(callback){if(this._root!==null){var allNodes=[];this._root.traverse(function(node){allNodes.push(node);});for(var i=0;i<allNodes.length;i++){var ev=allNodes[i].event;if(ev){callback(ev);}}}return this;};/**
		 *  Iterate over everything in the array in which the given time
		 *  overlaps with the time and duration time of the event.
		 *  @param  {Number}  time The time to check if items are overlapping
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.IntervalTimeline} this
		 */Tone.IntervalTimeline.prototype.forEachAtTime=function(time,callback){if(this._root!==null){var results=[];this._root.search(time,results);for(var i=results.length-1;i>=0;i--){var ev=results[i].event;if(ev){callback(ev);}}}return this;};/**
		 *  Iterate over everything in the array in which the time is greater
		 *  than or equal to the given time.
		 *  @param  {Number}  time The time to check if items are before
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.IntervalTimeline} this
		 */Tone.IntervalTimeline.prototype.forEachFrom=function(time,callback){if(this._root!==null){var results=[];this._root.searchAfter(time,results);for(var i=results.length-1;i>=0;i--){var ev=results[i].event;callback(ev);}}return this;};/**
		 *  Clean up
		 *  @return  {Tone.IntervalTimeline}  this
		 */Tone.IntervalTimeline.prototype.dispose=function(){var allNodes=[];if(this._root!==null){this._root.traverse(function(node){allNodes.push(node);});}for(var i=0;i<allNodes.length;i++){allNodes[i].dispose();}allNodes=null;this._root=null;return this;};///////////////////////////////////////////////////////////////////////////
//	INTERVAL NODE HELPER
///////////////////////////////////////////////////////////////////////////
/**
		 *  Represents a node in the binary search tree, with the addition
		 *  of a "high" value which keeps track of the highest value of
		 *  its children.
		 *  References:
		 *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/
		 *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf
		 *  @param {Number} low
		 *  @param {Number} high
		 *  @private
		 */var IntervalNode=function IntervalNode(low,high,event){//the event container
this.event=event;//the low value
this.low=low;//the high value
this.high=high;//the high value for this and all child nodes
this.max=this.high;//the nodes to the left
this._left=null;//the nodes to the right
this._right=null;//the parent node
this.parent=null;//the number of child nodes
this.height=0;};/**
		 *  Insert a node into the correct spot in the tree
		 *  @param  {IntervalNode}  node
		 */IntervalNode.prototype.insert=function(node){if(node.low<=this.low){if(this.left===null){this.left=node;}else{this.left.insert(node);}}else if(this.right===null){this.right=node;}else{this.right.insert(node);}};/**
		 *  Search the tree for nodes which overlap
		 *  with the given point
		 *  @param  {Number}  point  The point to query
		 *  @param  {Array}  results  The array to put the results
		 */IntervalNode.prototype.search=function(point,results){// If p is to the right of the rightmost point of any interval
// in this node and all children, there won't be any matches.
if(point>this.max){return;}// Search left children
if(this.left!==null){this.left.search(point,results);}// Check this node
if(this.low<=point&&this.high>point){results.push(this);}// If p is to the left of the time of this interval,
// then it can't be in any child to the right.
if(this.low>point){return;}// Search right children
if(this.right!==null){this.right.search(point,results);}};/**
		 *  Search the tree for nodes which are less
		 *  than the given point
		 *  @param  {Number}  point  The point to query
		 *  @param  {Array}  results  The array to put the results
		 */IntervalNode.prototype.searchAfter=function(point,results){// Check this node
if(this.low>=point){results.push(this);if(this.left!==null){this.left.searchAfter(point,results);}}// search the right side
if(this.right!==null){this.right.searchAfter(point,results);}};/**
		 *  Invoke the callback on this element and both it's branches
		 *  @param  {Function}  callback
		 */IntervalNode.prototype.traverse=function(callback){callback(this);if(this.left!==null){this.left.traverse(callback);}if(this.right!==null){this.right.traverse(callback);}};/**
		 *  Update the height of the node
		 */IntervalNode.prototype.updateHeight=function(){if(this.left!==null&&this.right!==null){this.height=Math.max(this.left.height,this.right.height)+1;}else if(this.right!==null){this.height=this.right.height+1;}else if(this.left!==null){this.height=this.left.height+1;}else{this.height=0;}};/**
		 *  Update the height of the node
		 */IntervalNode.prototype.updateMax=function(){this.max=this.high;if(this.left!==null){this.max=Math.max(this.max,this.left.max);}if(this.right!==null){this.max=Math.max(this.max,this.right.max);}};/**
		 *  The balance is how the leafs are distributed on the node
		 *  @return  {Number}  Negative numbers are balanced to the right
		 */IntervalNode.prototype.getBalance=function(){var balance=0;if(this.left!==null&&this.right!==null){balance=this.left.height-this.right.height;}else if(this.left!==null){balance=this.left.height+1;}else if(this.right!==null){balance=-(this.right.height+1);}return balance;};/**
		 *  @returns {Boolean} true if this node is the left child
		 *  of its parent
		 */IntervalNode.prototype.isLeftChild=function(){return this.parent!==null&&this.parent.left===this;};/**
		 *  get/set the left node
		 *  @type {IntervalNode}
		 */Object.defineProperty(IntervalNode.prototype,'left',{get:function get(){return this._left;},set:function set(node){this._left=node;if(node!==null){node.parent=this;}this.updateHeight();this.updateMax();}});/**
		 *  get/set the right node
		 *  @type {IntervalNode}
		 */Object.defineProperty(IntervalNode.prototype,'right',{get:function get(){return this._right;},set:function set(node){this._right=node;if(node!==null){node.parent=this;}this.updateHeight();this.updateMax();}});/**
		 *  null out references.
		 */IntervalNode.prototype.dispose=function(){this.parent=null;this._left=null;this._right=null;this.event=null;};///////////////////////////////////////////////////////////////////////////
//	END INTERVAL NODE HELPER
///////////////////////////////////////////////////////////////////////////
return Tone.IntervalTimeline;});Module(function(Tone){/**
		 *  @class Tone.Ticks is a primitive type for encoding Time values.
		 *         Tone.Ticks can be constructed with or without the `new` keyword. Tone.Ticks can be passed
		 *         into the parameter of any method which takes time as an argument.
		 *  @constructor
		 *  @extends {Tone.TransportTime}
		 *  @param  {String|Number}  val    The time value.
		 *  @param  {String=}  units  The units of the value.
		 *  @example
		 * var t = Tone.Ticks("4n");//a quarter note
		 */Tone.Ticks=function(val,units){if(this instanceof Tone.Ticks){Tone.TransportTime.call(this,val,units);}else{return new Tone.Ticks(val,units);}};Tone.extend(Tone.Ticks,Tone.TransportTime);/**
		 *  The default units if none are given.
		 *  @type {String}
		 *  @private
		 */Tone.Ticks.prototype._defaultUnits='i';/**
		 * Get the current time in the given units
		 * @return {Ticks}
		 * @private
		 */Tone.Ticks.prototype._now=function(){return Tone.Transport.ticks;};/**
		 *  Return the value of the beats in the current units
		 *  @param {Number} beats
		 *  @return  {Number}
		 *  @private
		 */Tone.Ticks.prototype._beatsToUnits=function(beats){return this._getPPQ()*beats;};/**
		 *  Returns the value of a second in the current units
		 *  @param {Seconds} seconds
		 *  @return  {Number}
		 *  @private
		 */Tone.Ticks.prototype._secondsToUnits=function(seconds){return seconds/(60/this._getBpm())*this._getPPQ();};/**
		 *  Returns the value of a tick in the current time units
		 *  @param {Ticks} ticks
		 *  @return  {Number}
		 *  @private
		 */Tone.Ticks.prototype._ticksToUnits=function(ticks){return ticks;};/**
		 *  Return the time in ticks
		 *  @return  {Ticks}
		 */Tone.Ticks.prototype.toTicks=function(){return this.valueOf();};/**
		 *  Return the time in ticks
		 *  @return  {Ticks}
		 */Tone.Ticks.prototype.toSeconds=function(){return this.valueOf()/this._getPPQ()*(60/this._getBpm());};return Tone.Ticks;});Module(function(Tone){/**
		 *  @class Tone.TransportEvent is an internal class used by (Tone.Transport)[Transport]
		 *         to schedule events. Do no invoke this class directly, it is
		 *         handled from within Tone.Transport.
		 *  @extends {Tone}
		 *  @param {Object} options
		 */Tone.TransportEvent=function(Transport,options){options=Tone.defaultArg(options,Tone.TransportEvent.defaults);Tone.call(this);/**
			 * Reference to the Transport that created it
			 * @type {Tone.Transport}
			 */this.Transport=Transport;/**
			 * The unique id of the event
			 * @type {Number}
			 */this.id=Tone.TransportEvent._eventId++;/**
			 * The time the event starts
			 * @type {Ticks}
			 */this.time=Tone.Ticks(options.time);/**
			 * The callback to invoke
			 * @type {Function}
			 */this.callback=options.callback;/**
			 * If the event should be removed after being created.
			 * @type {Boolean}
			 * @private
			 */this._once=options.once;};Tone.extend(Tone.TransportEvent);/**
		 * The defaults
		 * @static
		 * @type {Object}
		 */Tone.TransportEvent.defaults={'once':false,'callback':Tone.noOp};/**
		 * Current ID counter
		 * @private
		 * @static
		 * @type {Number}
		 */Tone.TransportEvent._eventId=0;/**
		 * Invoke the event callback.
		 * @param  {Time} time  The AudioContext time in seconds of the event
		 */Tone.TransportEvent.prototype.invoke=function(time){if(this.callback){this.callback(time);if(this._once&&this.Transport){this.Transport.clear(this.id);}}};/**
		 * Clean up
		 * @return {Tone.TransportEvent} this
		 */Tone.TransportEvent.prototype.dispose=function(){Tone.prototype.dispose.call(this);this.Transport=null;this.callback=null;this.time=null;return this;};return Tone.TransportEvent;});Module(function(Tone){/**
		 *  @class Tone.TransportRepeatEvent is an internal class used by Tone.Transport
		 *         to schedule repeat events. This class should not be instantiated directly.
		 *  @extends {Tone.TransportEvent}
		 *  @param {Object} options
		 */Tone.TransportRepeatEvent=function(Transport,options){Tone.TransportEvent.call(this,Transport,options);options=Tone.defaultArg(options,Tone.TransportRepeatEvent.defaults);/**
			 * When the event should stop repeating
			 * @type {Ticks}
			 * @private
			 */this.duration=Tone.Ticks(options.duration);/**
			 * The interval of the repeated event
			 * @type {Ticks}
			 * @private
			 */this._interval=Tone.Ticks(options.interval);/**
			 * The ID of the current timeline event
			 * @type {Number}
			 * @private
			 */this._currentId=-1;/**
			 * The ID of the next timeline event
			 * @type {Number}
			 * @private
			 */this._nextId=-1;/**
			  * The time of the next event
			  * @type {Ticks}
			  * @private
			  */this._nextTick=this.time;/**
			 * a reference to the bound start method
			 * @type {Function}
			 * @private
			 */this._boundRestart=this._restart.bind(this);this.Transport.on('start loopStart',this._boundRestart);this._restart();};Tone.extend(Tone.TransportRepeatEvent,Tone.TransportEvent);/**
		 * The defaults
		 * @static
		 * @type {Object}
		 */Tone.TransportRepeatEvent.defaults={'duration':Infinity,'interval':1};/**
		 * Invoke the callback. Returns the tick time which
		 * the next event should be scheduled at.
		 * @param  {Number} time  The AudioContext time in seconds of the event
		 */Tone.TransportRepeatEvent.prototype.invoke=function(time){//create more events if necessary
this._createEvents(time);//call the super class
Tone.TransportEvent.prototype.invoke.call(this,time);};/**
		 * Push more events onto the timeline to keep up with the position of the timeline
		 * @private
		 */Tone.TransportRepeatEvent.prototype._createEvents=function(time){// schedule the next event
var ticks=this.Transport.getTicksAtTime(time);if(ticks>=this.time&&ticks>=this._nextTick&&this._nextTick+this._interval<this.time+this.duration){this._nextTick+=this._interval;this._currentId=this._nextId;this._nextId=this.Transport.scheduleOnce(this.invoke.bind(this),Tone.Ticks(this._nextTick));}};/**
		 * Push more events onto the timeline to keep up with the position of the timeline
		 * @private
		 */Tone.TransportRepeatEvent.prototype._restart=function(time){this.Transport.clear(this._currentId);this.Transport.clear(this._nextId);this._nextTick=this.time;var ticks=this.Transport.getTicksAtTime(time);if(ticks>this.time){this._nextTick=this.time+Math.ceil((ticks-this.time)/this._interval)*this._interval;}this._currentId=this.Transport.scheduleOnce(this.invoke.bind(this),Tone.Ticks(this._nextTick));this._nextTick+=this._interval;this._nextId=this.Transport.scheduleOnce(this.invoke.bind(this),Tone.Ticks(this._nextTick));};/**
		 * Clean up
		 * @return {Tone.TransportRepeatEvent} this
		 */Tone.TransportRepeatEvent.prototype.dispose=function(){this.Transport.clear(this._currentId);this.Transport.clear(this._nextId);this.Transport.off('start loopStart',this._boundRestart);this._boundCreateEvents=null;Tone.TransportEvent.prototype.dispose.call(this);this.duration=null;this._interval=null;return this;};return Tone.TransportRepeatEvent;});Module(function(Tone){/**
		 *  @class  Transport for timing musical events.
		 *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)
		 *          Tone.Transport timing events pass in the exact time of the scheduled event
		 *          in the argument of the callback function. Pass that time value to the object
		 *          you're scheduling. <br><br>
		 *          A single transport is created for you when the library is initialized.
		 *          <br><br>
		 *          The transport emits the events: "start", "stop", "pause", and "loop" which are
		 *          called with the time of that event as the argument.
		 *
		 *  @extends {Tone.Emitter}
		 *  @singleton
		 *  @example
		 * //repeated event every 8th note
		 * Tone.Transport.scheduleRepeat(function(time){
		 * 	//do something with the time
		 * }, "8n");
		 *  @example
		 * //schedule an event on the 16th measure
		 * Tone.Transport.schedule(function(time){
		 * 	//do something with the time
		 * }, "16:0:0");
		 */Tone.Transport=function(){Tone.Emitter.call(this);Tone.getContext(function(){///////////////////////////////////////////////////////////////////////
//	LOOPING
//////////////////////////////////////////////////////////////////////
/**
				 * 	If the transport loops or not.
				 *  @type {boolean}
				 */this.loop=false;/**
				 * 	The loop start position in ticks
				 *  @type {Ticks}
				 *  @private
				 */this._loopStart=0;/**
				 * 	The loop end position in ticks
				 *  @type {Ticks}
				 *  @private
				 */this._loopEnd=0;///////////////////////////////////////////////////////////////////////
//	CLOCK/TEMPO
//////////////////////////////////////////////////////////////////////
/**
				 *  Pulses per quarter is the number of ticks per quarter note.
				 *  @private
				 *  @type  {Number}
				 */this._ppq=TransportConstructor.defaults.PPQ;/**
				 *  watches the main oscillator for timing ticks
				 *  initially starts at 120bpm
				 *  @private
				 *  @type {Tone.Clock}
				 */this._clock=new Tone.Clock({'callback':this._processTick.bind(this),'frequency':0});this._bindClockEvents();/**
				 *  The Beats Per Minute of the Transport.
				 *  @type {BPM}
				 *  @signal
				 *  @example
				 * Tone.Transport.bpm.value = 80;
				 * //ramp the bpm to 120 over 10 seconds
				 * Tone.Transport.bpm.rampTo(120, 10);
				 */this.bpm=this._clock.frequency;this.bpm._toUnits=this._toUnits.bind(this);this.bpm._fromUnits=this._fromUnits.bind(this);this.bpm.units=Tone.Type.BPM;this.bpm.value=TransportConstructor.defaults.bpm;this._readOnly('bpm');/**
				 *  The time signature, or more accurately the numerator
				 *  of the time signature over a denominator of 4.
				 *  @type {Number}
				 *  @private
				 */this._timeSignature=TransportConstructor.defaults.timeSignature;///////////////////////////////////////////////////////////////////////
//	TIMELINE EVENTS
//////////////////////////////////////////////////////////////////////
/**
				 *  All the events in an object to keep track by ID
				 *  @type {Object}
				 *  @private
				 */this._scheduledEvents={};/**
				 * 	The scheduled events.
				 *  @type {Tone.Timeline}
				 *  @private
				 */this._timeline=new Tone.Timeline();/**
				 *  Repeated events
				 *  @type {Array}
				 *  @private
				 */this._repeatedEvents=new Tone.IntervalTimeline();/**
				 *  All of the synced Signals
				 *  @private
				 *  @type {Array}
				 */this._syncedSignals=[];///////////////////////////////////////////////////////////////////////
//	SWING
//////////////////////////////////////////////////////////////////////
/**
				 *  The subdivision of the swing
				 *  @type  {Ticks}
				 *  @private
				 */this._swingTicks=TransportConstructor.defaults.PPQ/2;//8n
/**
				 *  The swing amount
				 *  @type {NormalRange}
				 *  @private
				 */this._swingAmount=0;}.bind(this));};Tone.extend(Tone.Transport,Tone.Emitter);/**
		 *  the defaults
		 *  @type {Object}
		 *  @const
		 *  @static
		 */Tone.Transport.defaults={'bpm':120,'swing':0,'swingSubdivision':'8n','timeSignature':4,'loopStart':0,'loopEnd':'4m','PPQ':192};///////////////////////////////////////////////////////////////////////////////
//	TICKS
///////////////////////////////////////////////////////////////////////////////
/**
		 *  called on every tick
		 *  @param   {number} tickTime clock relative tick time
		 *  @private
		 */Tone.Transport.prototype._processTick=function(tickTime,ticks){//handle swing
if(this._swingAmount>0&&ticks%this._ppq!==0&&//not on a downbeat
ticks%(this._swingTicks*2)!==0){//add some swing
var progress=ticks%(this._swingTicks*2)/(this._swingTicks*2);var amount=Math.sin(progress*Math.PI)*this._swingAmount;tickTime+=Tone.Ticks(this._swingTicks*2/3).toSeconds()*amount;}//do the loop test
if(this.loop){if(ticks>=this._loopEnd){this.emit('loopEnd',tickTime);this._clock.setTicksAtTime(this._loopStart,tickTime);ticks=this._loopStart;this.emit('loopStart',tickTime,this._clock.getSecondsAtTime(tickTime));this.emit('loop',tickTime);}}//invoke the timeline events scheduled on this tick
this._timeline.forEachAtTime(ticks,function(event){event.invoke(tickTime);});};///////////////////////////////////////////////////////////////////////////////
//	SCHEDULABLE EVENTS
///////////////////////////////////////////////////////////////////////////////
/**
		 *  Schedule an event along the timeline.
		 *  @param {Function} callback The callback to be invoked at the time.
		 *  @param {TransportTime}  time The time to invoke the callback at.
		 *  @return {Number} The id of the event which can be used for canceling the event.
		 *  @example
		 * //trigger the callback when the Transport reaches the desired time
		 * Tone.Transport.schedule(function(time){
		 * 	envelope.triggerAttack(time);
		 * }, "128i");
		 */Tone.Transport.prototype.schedule=function(callback,time){var event=new Tone.TransportEvent(this,{'time':Tone.TransportTime(time),'callback':callback});return this._addEvent(event,this._timeline);};/**
		 *  Schedule a repeated event along the timeline. The event will fire
		 *  at the `interval` starting at the `startTime` and for the specified
		 *  `duration`.
		 *  @param  {Function}  callback   The callback to invoke.
		 *  @param  {Time}    interval   The duration between successive
		 *                               callbacks. Must be a positive number.
		 *  @param  {TransportTime=}    startTime  When along the timeline the events should
		 *                               start being invoked.
		 *  @param {Time} [duration=Infinity] How long the event should repeat.
		 *  @return  {Number}    The ID of the scheduled event. Use this to cancel
		 *                           the event.
		 *  @example
		 * //a callback invoked every eighth note after the first measure
		 * Tone.Transport.scheduleRepeat(callback, "8n", "1m");
		 */Tone.Transport.prototype.scheduleRepeat=function(callback,interval,startTime,duration){var event=new Tone.TransportRepeatEvent(this,{'callback':callback,'interval':Tone.Time(interval),'time':Tone.TransportTime(startTime),'duration':Tone.Time(Tone.defaultArg(duration,Infinity))});//kick it off if the Transport is started
return this._addEvent(event,this._repeatedEvents);};/**
		 *  Schedule an event that will be removed after it is invoked.
		 *  Note that if the given time is less than the current transport time,
		 *  the event will be invoked immediately.
		 *  @param {Function} callback The callback to invoke once.
		 *  @param {TransportTime} time The time the callback should be invoked.
		 *  @returns {Number} The ID of the scheduled event.
		 */Tone.Transport.prototype.scheduleOnce=function(callback,time){var event=new Tone.TransportEvent(this,{'time':Tone.TransportTime(time),'callback':callback,'once':true});return this._addEvent(event,this._timeline);};/**
		 *  Clear the passed in event id from the timeline
		 *  @param {Number} eventId The id of the event.
		 *  @returns {Tone.Transport} this
		 */Tone.Transport.prototype.clear=function(eventId){if(this._scheduledEvents.hasOwnProperty(eventId)){var item=this._scheduledEvents[eventId.toString()];item.timeline.remove(item.event);item.event.dispose();delete this._scheduledEvents[eventId.toString()];}return this;};/**
		 * Add an event to the correct timeline. Keep track of the
		 * timeline it was added to.
		 * @param {Tone.TransportEvent}	event
		 * @param {Tone.Timeline} timeline
		 * @returns {Number} the event id which was just added
		 * @private
		 */Tone.Transport.prototype._addEvent=function(event,timeline){this._scheduledEvents[event.id.toString()]={'event':event,'timeline':timeline};timeline.add(event);return event.id;};/**
		 *  Remove scheduled events from the timeline after
		 *  the given time. Repeated events will be removed
		 *  if their startTime is after the given time
		 *  @param {TransportTime} [after=0] Clear all events after
		 *                          this time.
		 *  @returns {Tone.Transport} this
		 */Tone.Transport.prototype.cancel=function(after){after=Tone.defaultArg(after,0);after=this.toTicks(after);this._timeline.forEachFrom(after,function(event){this.clear(event.id);}.bind(this));this._repeatedEvents.forEachFrom(after,function(event){this.clear(event.id);}.bind(this));return this;};///////////////////////////////////////////////////////////////////////////////
//	START/STOP/PAUSE
///////////////////////////////////////////////////////////////////////////////
/**
		 *  Bind start/stop/pause events from the clock and emit them.
		 *  @private
		 */Tone.Transport.prototype._bindClockEvents=function(){this._clock.on('start',function(time,offset){offset=Tone.Ticks(offset).toSeconds();this.emit('start',time,offset);}.bind(this));this._clock.on('stop',function(time){this.emit('stop',time);}.bind(this));this._clock.on('pause',function(time){this.emit('pause',time);}.bind(this));};/**
		 *  Returns the playback state of the source, either "started", "stopped", or "paused"
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.Transport#
		 *  @name state
		 */Object.defineProperty(Tone.Transport.prototype,'state',{get:function get(){return this._clock.getStateAtTime(this.now());}});/**
		 *  Start the transport and all sources synced to the transport.
		 *  @param  {Time} [time=now] The time when the transport should start.
		 *  @param  {TransportTime=} offset The timeline offset to start the transport.
		 *  @returns {Tone.Transport} this
		 *  @example
		 * //start the transport in one second starting at beginning of the 5th measure.
		 * Tone.Transport.start("+1", "4:0:0");
		 */Tone.Transport.prototype.start=function(time,offset){//start the clock
if(Tone.isDefined(offset)){offset=this.toTicks(offset);}this._clock.start(time,offset);return this;};/**
		 *  Stop the transport and all sources synced to the transport.
		 *  @param  {Time} [time=now] The time when the transport should stop.
		 *  @returns {Tone.Transport} this
		 *  @example
		 * Tone.Transport.stop();
		 */Tone.Transport.prototype.stop=function(time){this._clock.stop(time);return this;};/**
		 *  Pause the transport and all sources synced to the transport.
		 *  @param  {Time} [time=now]
		 *  @returns {Tone.Transport} this
		 */Tone.Transport.prototype.pause=function(time){this._clock.pause(time);return this;};/**
		 * Toggle the current state of the transport. If it is
		 * started, it will stop it, otherwise it will start the Transport.
		 * @param  {Time=} time The time of the event
		 * @return {Tone.Transport}      this
		 */Tone.Transport.prototype.toggle=function(time){time=this.toSeconds(time);if(this._clock.getStateAtTime(time)!==Tone.State.Started){this.start(time);}else{this.stop(time);}return this;};///////////////////////////////////////////////////////////////////////////////
//	SETTERS/GETTERS
///////////////////////////////////////////////////////////////////////////////
/**
		 *  The time signature as just the numerator over 4.
		 *  For example 4/4 would be just 4 and 6/8 would be 3.
		 *  @memberOf Tone.Transport#
		 *  @type {Number|Array}
		 *  @name timeSignature
		 *  @example
		 * //common time
		 * Tone.Transport.timeSignature = 4;
		 * // 7/8
		 * Tone.Transport.timeSignature = [7, 8];
		 * //this will be reduced to a single number
		 * Tone.Transport.timeSignature; //returns 3.5
		 */Object.defineProperty(Tone.Transport.prototype,'timeSignature',{get:function get(){return this._timeSignature;},set:function set(timeSig){if(Tone.isArray(timeSig)){timeSig=timeSig[0]/timeSig[1]*4;}this._timeSignature=timeSig;}});/**
		 * When the Tone.Transport.loop = true, this is the starting position of the loop.
		 * @memberOf Tone.Transport#
		 * @type {Time}
		 * @name loopStart
		 */Object.defineProperty(Tone.Transport.prototype,'loopStart',{get:function get(){return Tone.Ticks(this._loopStart).toSeconds();},set:function set(startPosition){this._loopStart=this.toTicks(startPosition);}});/**
		 * When the Tone.Transport.loop = true, this is the ending position of the loop.
		 * @memberOf Tone.Transport#
		 * @type {Time}
		 * @name loopEnd
		 */Object.defineProperty(Tone.Transport.prototype,'loopEnd',{get:function get(){return Tone.Ticks(this._loopEnd).toSeconds();},set:function set(endPosition){this._loopEnd=this.toTicks(endPosition);}});/**
		 *  Set the loop start and stop at the same time.
		 *  @param {TransportTime} startPosition
		 *  @param {TransportTime} endPosition
		 *  @returns {Tone.Transport} this
		 *  @example
		 * //loop over the first measure
		 * Tone.Transport.setLoopPoints(0, "1m");
		 * Tone.Transport.loop = true;
		 */Tone.Transport.prototype.setLoopPoints=function(startPosition,endPosition){this.loopStart=startPosition;this.loopEnd=endPosition;return this;};/**
		 *  The swing value. Between 0-1 where 1 equal to
		 *  the note + half the subdivision.
		 *  @memberOf Tone.Transport#
		 *  @type {NormalRange}
		 *  @name swing
		 */Object.defineProperty(Tone.Transport.prototype,'swing',{get:function get(){return this._swingAmount;},set:function set(amount){//scale the values to a normal range
this._swingAmount=amount;}});/**
		 *  Set the subdivision which the swing will be applied to.
		 *  The default value is an 8th note. Value must be less
		 *  than a quarter note.
		 *
		 *  @memberOf Tone.Transport#
		 *  @type {Time}
		 *  @name swingSubdivision
		 */Object.defineProperty(Tone.Transport.prototype,'swingSubdivision',{get:function get(){return Tone.Ticks(this._swingTicks).toNotation();},set:function set(subdivision){this._swingTicks=this.toTicks(subdivision);}});/**
		 *  The Transport's position in Bars:Beats:Sixteenths.
		 *  Setting the value will jump to that position right away.
		 *  @memberOf Tone.Transport#
		 *  @type {BarsBeatsSixteenths}
		 *  @name position
		 */Object.defineProperty(Tone.Transport.prototype,'position',{get:function get(){var now=this.now();var ticks=this._clock.getTicksAtTime(now);return Tone.Ticks(ticks).toBarsBeatsSixteenths();},set:function set(progress){var ticks=this.toTicks(progress);this.ticks=ticks;}});/**
		 *  The Transport's position in seconds
		 *  Setting the value will jump to that position right away.
		 *  @memberOf Tone.Transport#
		 *  @type {Seconds}
		 *  @name seconds
		 */Object.defineProperty(Tone.Transport.prototype,'seconds',{get:function get(){return this._clock.seconds;},set:function set(s){var now=this.now();var ticks=this.bpm.timeToTicks(s,now);this.ticks=ticks;}});/**
		 *  The Transport's loop position as a normalized value. Always
		 *  returns 0 if the transport if loop is not true.
		 *  @memberOf Tone.Transport#
		 *  @name progress
		 *  @type {NormalRange}
		 */Object.defineProperty(Tone.Transport.prototype,'progress',{get:function get(){if(this.loop){var now=this.now();var ticks=this._clock.getTicksAtTime(now);return(ticks-this._loopStart)/(this._loopEnd-this._loopStart);}else{return 0;}}});/**
		 *  The transports current tick position.
		 *
		 *  @memberOf Tone.Transport#
		 *  @type {Ticks}
		 *  @name ticks
		 */Object.defineProperty(Tone.Transport.prototype,'ticks',{get:function get(){return this._clock.ticks;},set:function set(t){if(this._clock.ticks!==t){var now=this.now();//stop everything synced to the transport
if(this.state===Tone.State.Started){this.emit('stop',now);this._clock.setTicksAtTime(t,now);//restart it with the new time
this.emit('start',now,this.seconds);}else{this._clock.setTicksAtTime(t,now);}}}});/**
		 * Get the clock's ticks at the given time.
		 * @param  {Time} time  When to get the tick value
		 * @return {Ticks}       The tick value at the given time.
		 */Tone.Transport.prototype.getTicksAtTime=function(time){return Math.round(this._clock.getTicksAtTime(time));};/**
		 *  Return the elapsed seconds at the given time.
		 *  @param  {Time}  time  When to get the elapsed seconds
		 *  @return  {Seconds}  The number of elapsed seconds
		 */Tone.Transport.prototype.getSecondsAtTime=function(time){return this._clock.getSecondsAtTime(time);};/**
		 *  Pulses Per Quarter note. This is the smallest resolution
		 *  the Transport timing supports. This should be set once
		 *  on initialization and not set again. Changing this value
		 *  after other objects have been created can cause problems.
		 *
		 *  @memberOf Tone.Transport#
		 *  @type {Number}
		 *  @name PPQ
		 */Object.defineProperty(Tone.Transport.prototype,'PPQ',{get:function get(){return this._ppq;},set:function set(ppq){var bpm=this.bpm.value;this._ppq=ppq;this.bpm.value=bpm;}});/**
		 *  Convert from BPM to frequency (factoring in PPQ)
		 *  @param  {BPM}  bpm The BPM value to convert to frequency
		 *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.
		 *  @private
		 */Tone.Transport.prototype._fromUnits=function(bpm){return 1/(60/bpm/this.PPQ);};/**
		 *  Convert from frequency (with PPQ) into BPM
		 *  @param  {Frequency}  freq The clocks frequency to convert to BPM
		 *  @return  {BPM}  The frequency value as BPM.
		 *  @private
		 */Tone.Transport.prototype._toUnits=function(freq){return freq/this.PPQ*60;};///////////////////////////////////////////////////////////////////////////////
//	SYNCING
///////////////////////////////////////////////////////////////////////////////
/**
		 *  Returns the time aligned to the next subdivision
		 *  of the Transport. If the Transport is not started,
		 *  it will return 0.
		 *  Note: this will not work precisely during tempo ramps.
		 *  @param  {Time}  subdivision  The subdivision to quantize to
		 *  @return  {Number}  The context time of the next subdivision.
		 *  @example
		 * Tone.Transport.start(); //the transport must be started
		 * Tone.Transport.nextSubdivision("4n");
		 */Tone.Transport.prototype.nextSubdivision=function(subdivision){subdivision=this.toTicks(subdivision);if(this.state!==Tone.State.Started){//if the transport's not started, return 0
return 0;}else{var now=this.now();//the remainder of the current ticks and the subdivision
var transportPos=this.getTicksAtTime(now);var remainingTicks=subdivision-transportPos%subdivision;return this._clock.nextTickTime(remainingTicks,now);}};/**
		 *  Attaches the signal to the tempo control signal so that
		 *  any changes in the tempo will change the signal in the same
		 *  ratio.
		 *
		 *  @param  {Tone.Signal} signal
		 *  @param {number=} ratio Optionally pass in the ratio between
		 *                         the two signals. Otherwise it will be computed
		 *                         based on their current values.
		 *  @returns {Tone.Transport} this
		 */Tone.Transport.prototype.syncSignal=function(signal,ratio){if(!ratio){//get the sync ratio
var now=this.now();if(signal.getValueAtTime(now)!==0){ratio=signal.getValueAtTime(now)/this.bpm.getValueAtTime(now);}else{ratio=0;}}var ratioSignal=new Tone.Gain(ratio);this.bpm.chain(ratioSignal,signal._param);this._syncedSignals.push({'ratio':ratioSignal,'signal':signal,'initial':signal.value});signal.value=0;return this;};/**
		 *  Unsyncs a previously synced signal from the transport's control.
		 *  See Tone.Transport.syncSignal.
		 *  @param  {Tone.Signal} signal
		 *  @returns {Tone.Transport} this
		 */Tone.Transport.prototype.unsyncSignal=function(signal){for(var i=this._syncedSignals.length-1;i>=0;i--){var syncedSignal=this._syncedSignals[i];if(syncedSignal.signal===signal){syncedSignal.ratio.dispose();syncedSignal.signal.value=syncedSignal.initial;this._syncedSignals.splice(i,1);}}return this;};/**
		 *  Clean up.
		 *  @returns {Tone.Transport} this
		 *  @private
		 */Tone.Transport.prototype.dispose=function(){Tone.Emitter.prototype.dispose.call(this);this._clock.dispose();this._clock=null;this._writable('bpm');this.bpm=null;this._timeline.dispose();this._timeline=null;this._repeatedEvents.dispose();this._repeatedEvents=null;return this;};///////////////////////////////////////////////////////////////////////////////
//	INITIALIZATION
///////////////////////////////////////////////////////////////////////////////
var TransportConstructor=Tone.Transport;Tone.Transport=new TransportConstructor();Tone.Context.on('init',function(context){if(context.Transport instanceof TransportConstructor){Tone.Transport=context.Transport;}else{Tone.Transport=new TransportConstructor();}//store the Transport on the context so it can be retrieved later
context.Transport=Tone.Transport;});Tone.Context.on('close',function(context){if(context.Transport instanceof TransportConstructor){context.Transport.dispose();}});return Tone.Transport;});Module(function(Tone){/**
		 *  @class Tone.Volume is a simple volume node, useful for creating a volume fader.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Decibels} [volume=0] the initial volume
		 *  @example
		 * var vol = new Tone.Volume(-12);
		 * instrument.chain(vol, Tone.Master);
		 */Tone.Volume=function(){var options=Tone.defaults(arguments,['volume'],Tone.Volume);Tone.AudioNode.call(this);/**
			 * the output node
			 * @type {GainNode}
			 * @private
			 */this.output=this.input=new Tone.Gain(options.volume,Tone.Type.Decibels);/**
			 * The unmuted volume
			 * @type {Decibels}
			 * @private
			 */this._unmutedVolume=options.volume;/**
			 *  The volume control in decibels.
			 *  @type {Decibels}
			 *  @signal
			 */this.volume=this.output.gain;this._readOnly('volume');//set the mute initially
this.mute=options.mute;};Tone.extend(Tone.Volume,Tone.AudioNode);/**
		 *  Defaults
		 *  @type  {Object}
		 *  @const
		 *  @static
		 */Tone.Volume.defaults={'volume':0,'mute':false};/**
		 * Mute the output.
		 * @memberOf Tone.Volume#
		 * @type {boolean}
		 * @name mute
		 * @example
		 * //mute the output
		 * volume.mute = true;
		 */Object.defineProperty(Tone.Volume.prototype,'mute',{get:function get(){return this.volume.value===-Infinity;},set:function set(mute){if(!this.mute&&mute){this._unmutedVolume=this.volume.value;//maybe it should ramp here?
this.volume.value=-Infinity;}else if(this.mute&&!mute){this.volume.value=this._unmutedVolume;}}});/**
		 *  clean up
		 *  @returns {Tone.Volume} this
		 */Tone.Volume.prototype.dispose=function(){this.input.dispose();Tone.AudioNode.prototype.dispose.call(this);this._writable('volume');this.volume.dispose();this.volume=null;return this;};return Tone.Volume;});Module(function(Tone){/**
		 *  @class  A single master output which is connected to the
		 *          AudioDestinationNode (aka your speakers).
		 *          It provides useful conveniences such as the ability
		 *          to set the volume and mute the entire application.
		 *          It also gives you the ability to apply master effects to your application.
		 *          <br><br>
		 *          Like Tone.Transport, A single Tone.Master is created
		 *          on initialization and you do not need to explicitly construct one.
		 *
		 *  @constructor
		 *  @extends {Tone}
		 *  @singleton
		 *  @example
		 * //the audio will go from the oscillator to the speakers
		 * oscillator.connect(Tone.Master);
		 * //a convenience for connecting to the master output is also provided:
		 * oscillator.toMaster();
		 * //the above two examples are equivalent.
		 */Tone.Master=function(){Tone.AudioNode.call(this);Tone.getContext(function(){this.createInsOuts(1,0);/**
				 *  The private volume node
				 *  @type  {Tone.Volume}
				 *  @private
				 */this._volume=this.output=new Tone.Volume();/**
				 * The volume of the master output.
				 * @type {Decibels}
				 * @signal
				 */this.volume=this._volume.volume;this._readOnly('volume');//connections
this.input.chain(this.output,this.context.destination);}.bind(this));};Tone.extend(Tone.Master,Tone.AudioNode);/**
		 *  @type {Object}
		 *  @const
		 */Tone.Master.defaults={'volume':0,'mute':false};/**
		 * Mute the output.
		 * @memberOf Tone.Master#
		 * @type {boolean}
		 * @name mute
		 * @example
		 * //mute the output
		 * Tone.Master.mute = true;
		 */Object.defineProperty(Tone.Master.prototype,'mute',{get:function get(){return this._volume.mute;},set:function set(mute){this._volume.mute=mute;}});/**
		 *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously
		 *  chained in the master effects chain.
		 *  @param {AudioNode|Tone} args... All arguments will be connected in a row
		 *                                  and the Master will be routed through it.
		 *  @return  {Tone.Master}  this
		 *  @example
		 * //some overall compression to keep the levels in check
		 * var masterCompressor = new Tone.Compressor({
		 * 	"threshold" : -6,
		 * 	"ratio" : 3,
		 * 	"attack" : 0.5,
		 * 	"release" : 0.1
		 * });
		 * //give a little boost to the lows
		 * var lowBump = new Tone.Filter(200, "lowshelf");
		 * //route everything through the filter
		 * //and compressor before going to the speakers
		 * Tone.Master.chain(lowBump, masterCompressor);
		 */Tone.Master.prototype.chain=function(){this.input.disconnect();this.input.chain.apply(this.input,arguments);arguments[arguments.length-1].connect(this.output);};/**
		 *  Clean up
		 *  @return  {Tone.Master}  this
		 */Tone.Master.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._writable('volume');this._volume.dispose();this._volume=null;this.volume=null;};///////////////////////////////////////////////////////////////////////////
//	AUGMENT TONE's PROTOTYPE
///////////////////////////////////////////////////////////////////////////
/**
		 *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)
		 *  @returns {Tone.AudioNode} this
		 *  @example
		 * //connect an oscillator to the master output
		 * var osc = new Tone.Oscillator().toMaster();
		 */Tone.AudioNode.prototype.toMaster=function(){this.connect(Tone.Master);return this;};if(window.AudioNode){// Also augment AudioNode's prototype to include toMaster as a convenience
AudioNode.prototype.toMaster=function(){this.connect(Tone.Master);return this;};}/**
		 *  initialize the module and listen for new audio contexts
		 */var MasterConstructor=Tone.Master;Tone.Master=new MasterConstructor();Tone.Context.on('init',function(context){// if it already exists, just restore it
if(context.Master instanceof MasterConstructor){Tone.Master=context.Master;}else{Tone.Master=new MasterConstructor();}context.Master=Tone.Master;});Tone.Context.on('close',function(context){if(context.Master instanceof MasterConstructor){context.Master.dispose();}});return Tone.Master;});Module(function(Tone){/**
		 *  @class  Base class for sources. Sources have start/stop methods
		 *          and the ability to be synced to the
		 *          start/stop of Tone.Transport.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @example
		 * //Multiple state change events can be chained together,
		 * //but must be set in the correct order and with ascending times
		 *
		 * // OK
		 * state.start().stop("+0.2");
		 * // AND
		 * state.start().stop("+0.2").start("+0.4").stop("+0.7")
		 *
		 * // BAD
		 * state.stop("+0.2").start();
		 * // OR
		 * state.start("+0.3").stop("+0.2");
		 *
		 */Tone.Source=function(options){options=Tone.defaultArg(options,Tone.Source.defaults);Tone.AudioNode.call(this);/**
			 *  The output volume node
			 *  @type  {Tone.Volume}
			 *  @private
			 */this._volume=this.output=new Tone.Volume(options.volume);/**
			 * The volume of the output in decibels.
			 * @type {Decibels}
			 * @signal
			 * @example
			 * source.volume.value = -6;
			 */this.volume=this._volume.volume;this._readOnly('volume');/**
			 * 	Keep track of the scheduled state.
			 *  @type {Tone.TimelineState}
			 *  @private
			 */this._state=new Tone.TimelineState(Tone.State.Stopped);this._state.memory=100;/**
			 *  The synced `start` callback function from the transport
			 *  @type {Function}
			 *  @private
			 */this._synced=false;/**
			 *  Keep track of all of the scheduled event ids
			 *  @type  {Array}
			 *  @private
			 */this._scheduled=[];//make the output explicitly stereo
this._volume.output.output.channelCount=2;this._volume.output.output.channelCountMode='explicit';//mute initially
this.mute=options.mute;};Tone.extend(Tone.Source,Tone.AudioNode);/**
		 *  The default parameters
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.Source.defaults={'volume':0,'mute':false};/**
		 *  Returns the playback state of the source, either "started" or "stopped".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.Source#
		 *  @name state
		 */Object.defineProperty(Tone.Source.prototype,'state',{get:function get(){if(this._synced){if(Tone.Transport.state===Tone.State.Started){return this._state.getValueAtTime(Tone.Transport.seconds);}else{return Tone.State.Stopped;}}else{return this._state.getValueAtTime(this.now());}}});/**
		 * Mute the output.
		 * @memberOf Tone.Source#
		 * @type {boolean}
		 * @name mute
		 * @example
		 * //mute the output
		 * source.mute = true;
		 */Object.defineProperty(Tone.Source.prototype,'mute',{get:function get(){return this._volume.mute;},set:function set(mute){this._volume.mute=mute;}});//overwrite these functions
Tone.Source.prototype._start=Tone.noOp;Tone.Source.prototype.restart=Tone.noOp;Tone.Source.prototype._stop=Tone.noOp;/**
		 *  Start the source at the specified time. If no time is given,
		 *  start the source now.
		 *  @param  {Time} [time=now] When the source should be started.
		 *  @returns {Tone.Source} this
		 *  @example
		 * source.start("+0.5"); //starts the source 0.5 seconds from now
		 */Tone.Source.prototype.start=function(time,offset,duration){if(Tone.isUndef(time)&&this._synced){time=Tone.Transport.seconds;}else{time=this.toSeconds(time);}//if it's started, stop it and restart it
if(this._state.getValueAtTime(time)===Tone.State.Started){this._state.cancel(time);this._state.setStateAtTime(Tone.State.Started,time);this.restart(time,offset,duration);}else{this._state.setStateAtTime(Tone.State.Started,time);if(this._synced){// add the offset time to the event
var event=this._state.get(time);event.offset=Tone.defaultArg(offset,0);event.duration=duration;var sched=Tone.Transport.schedule(function(t){this._start(t,offset,duration);}.bind(this),time);this._scheduled.push(sched);//if it's already started
if(Tone.Transport.state===Tone.State.Started){this._syncedStart(this.now(),Tone.Transport.seconds);}}else{this._start.apply(this,arguments);}}return this;};/**
		 *  Stop the source at the specified time. If no time is given,
		 *  stop the source now.
		 *  @param  {Time} [time=now] When the source should be stopped.
		 *  @returns {Tone.Source} this
		 *  @example
		 * source.stop(); // stops the source immediately
		 */Tone.Source.prototype.stop=function(time){if(Tone.isUndef(time)&&this._synced){time=Tone.Transport.seconds;}else{time=this.toSeconds(time);}if(!this._synced){this._stop.apply(this,arguments);}else{var sched=Tone.Transport.schedule(this._stop.bind(this),time);this._scheduled.push(sched);}this._state.cancel(time);this._state.setStateAtTime(Tone.State.Stopped,time);return this;};/**
		 *  Sync the source to the Transport so that all subsequent
		 *  calls to `start` and `stop` are synced to the TransportTime
		 *  instead of the AudioContext time.
		 *
		 *  @returns {Tone.Source} this
		 *  @example
		 * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline
		 * source.sync().start(0).stop(0.3);
		 * //start the transport.
		 * Tone.Transport.start();
		 *
		 *  @example
		 * //start the transport with an offset and the sync'ed sources
		 * //will start in the correct position
		 * source.sync().start(0.1);
		 * //the source will be invoked with an offset of 0.4
		 * Tone.Transport.start("+0.5", 0.5);
		 */Tone.Source.prototype.sync=function(){this._synced=true;this._syncedStart=function(time,offset){if(offset>0){// get the playback state at that time
var stateEvent=this._state.get(offset);// listen for start events which may occur in the middle of the sync'ed time
if(stateEvent&&stateEvent.state===Tone.State.Started&&stateEvent.time!==offset){// get the offset
var startOffset=offset-this.toSeconds(stateEvent.time);var duration;if(stateEvent.duration){duration=this.toSeconds(stateEvent.duration)-startOffset;}this._start(time,this.toSeconds(stateEvent.offset)+startOffset,duration);}}}.bind(this);this._syncedStop=function(time){var seconds=Tone.Transport.getSecondsAtTime(Math.max(time-this.sampleTime,0));if(this._state.getValueAtTime(seconds)===Tone.State.Started){this._stop(time);}}.bind(this);Tone.Transport.on('start loopStart',this._syncedStart);Tone.Transport.on('stop pause loopEnd',this._syncedStop);return this;};/**
		 *  Unsync the source to the Transport. See Tone.Source.sync
		 *  @returns {Tone.Source} this
		 */Tone.Source.prototype.unsync=function(){if(this._synced){Tone.Transport.off('stop pause loopEnd',this._syncedStop);Tone.Transport.off('start loopStart',this._syncedStart);}this._synced=false;// clear all of the scheduled ids
for(var i=0;i<this._scheduled.length;i++){var id=this._scheduled[i];Tone.Transport.clear(id);}this._scheduled=[];this._state.cancel(0);return this;};/**
		 *	Clean up.
		 *  @return {Tone.Source} this
		 */Tone.Source.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this.unsync();this._scheduled=null;this._writable('volume');this._volume.dispose();this._volume=null;this.volume=null;this._state.dispose();this._state=null;};return Tone.Source;});Module(function(Tone){/**
		 *  AudioBuffer.copyTo/FromChannel polyfill
		 *  @private
		 */if(Tone.supported){if(!AudioBuffer.prototype.copyToChannel){AudioBuffer.prototype.copyToChannel=function(src,chanNum,start){var channel=this.getChannelData(chanNum);start=start||0;for(var i=0;i<channel.length;i++){channel[i+start]=src[i];}};AudioBuffer.prototype.copyFromChannel=function(dest,chanNum,start){var channel=this.getChannelData(chanNum);start=start||0;for(var i=0;i<dest.length;i++){dest[i]=channel[i+start];}};}}});Module(function(Tone){/**
		 *  @class  Buffer loading and storage. Tone.Buffer is used internally by all
		 *          classes that make requests for audio files such as Tone.Player,
		 *          Tone.Sampler and Tone.Convolver.
		 *
		 *          Aside from load callbacks from individual buffers, Tone.Buffer
		 *  		provides events which keep track of the loading progress
		 *  		of _all_ of the buffers. These are Tone.Buffer.on("load" / "progress" / "error")
		 *
		 *  @constructor
		 *  @extends {Tone}
		 *  @param {AudioBuffer|String} url The url to load, or the audio buffer to set.
		 *  @param {Function=} onload A callback which is invoked after the buffer is loaded.
		 *                            It's recommended to use `Tone.Buffer.on('load', callback)` instead
		 *                            since it will give you a callback when _all_ buffers are loaded.
		 *  @param {Function=} onerror The callback to invoke if there is an error
		 *  @example
		 * var buffer = new Tone.Buffer("path/to/sound.mp3", function(){
		 * 	//the buffer is now available.
		 * 	var buff = buffer.get();
		 * });
		 *  @example
		 * //can load provide fallback extension types if the first type is not supported.
		 * var buffer = new Tone.Buffer("path/to/sound.[mp3|ogg|wav]");
		 */Tone.Buffer=function(){var options=Tone.defaults(arguments,['url','onload','onerror'],Tone.Buffer);Tone.call(this);/**
			 *  stores the loaded AudioBuffer
			 *  @type {AudioBuffer}
			 *  @private
			 */this._buffer=null;/**
			 *  indicates if the buffer should be reversed or not
			 *  @type {Boolean}
			 *  @private
			 */this._reversed=options.reverse;/**
			 *  The XHR
			 *  @type  {XMLHttpRequest}
			 *  @private
			 */this._xhr=null;/**
			 * Private callback when the buffer is loaded.
			 * @type {Function}
			 * @private
			 */this._onload=Tone.noOp;if(options.url instanceof AudioBuffer||options.url instanceof Tone.Buffer){this.set(options.url);// invoke the onload callback
if(options.onload){if(this.loaded){options.onload(this);}else{this._onload=options.onload;}}}else if(Tone.isString(options.url)){this.load(options.url).then(options.onload).catch(options.onerror);}};Tone.extend(Tone.Buffer);/**
		 *  the default parameters
		 *  @type {Object}
		 */Tone.Buffer.defaults={'url':undefined,'reverse':false,'onload':Tone.noOp,'onerror':Tone.noOp};/**
		 *  Pass in an AudioBuffer or Tone.Buffer to set the value
		 *  of this buffer.
		 *  @param {AudioBuffer|Tone.Buffer} buffer the buffer
		 *  @returns {Tone.Buffer} this
		 */Tone.Buffer.prototype.set=function(buffer){if(buffer instanceof Tone.Buffer){if(buffer.loaded){this._buffer=buffer.get();}else{buffer._onload=function(){this.set(buffer);this._onload(this);}.bind(this);}}else{this._buffer=buffer;}return this;};/**
		 *  @return {AudioBuffer} The audio buffer stored in the object.
		 */Tone.Buffer.prototype.get=function(){return this._buffer;};/**
		 *  Makes an xhr reqest for the selected url then decodes
		 *  the file as an audio buffer. Invokes
		 *  the callback once the audio buffer loads.
		 *  @param {String} url The url of the buffer to load.
		 *                      filetype support depends on the
		 *                      browser.
		 *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer
		 */Tone.Buffer.prototype.load=function(url,onload,onerror){var promise=new Promise(function(load,error){this._xhr=Tone.Buffer.load(url,//success
function(buff){this._xhr=null;this.set(buff);load(this);this._onload(this);if(onload){onload(this);}}.bind(this),//error
function(err){this._xhr=null;error(err);if(onerror){onerror(err);}}.bind(this));}.bind(this));return promise;};/**
		 *  dispose and disconnect
		 *  @returns {Tone.Buffer} this
		 */Tone.Buffer.prototype.dispose=function(){Tone.prototype.dispose.call(this);this._buffer=null;if(this._xhr){Tone.Buffer._removeFromDownloadQueue(this._xhr);this._xhr.abort();this._xhr=null;}return this;};/**
		 * If the buffer is loaded or not
		 * @memberOf Tone.Buffer#
		 * @type {Boolean}
		 * @name loaded
		 * @readOnly
		 */Object.defineProperty(Tone.Buffer.prototype,'loaded',{get:function get(){return this.length>0;}});/**
		 * The duration of the buffer.
		 * @memberOf Tone.Buffer#
		 * @type {Number}
		 * @name duration
		 * @readOnly
		 */Object.defineProperty(Tone.Buffer.prototype,'duration',{get:function get(){if(this._buffer){return this._buffer.duration;}else{return 0;}}});/**
		 * The length of the buffer in samples
		 * @memberOf Tone.Buffer#
		 * @type {Number}
		 * @name length
		 * @readOnly
		 */Object.defineProperty(Tone.Buffer.prototype,'length',{get:function get(){if(this._buffer){return this._buffer.length;}else{return 0;}}});/**
		 * The number of discrete audio channels. Returns 0 if no buffer
		 * is loaded.
		 * @memberOf Tone.Buffer#
		 * @type {Number}
		 * @name numberOfChannels
		 * @readOnly
		 */Object.defineProperty(Tone.Buffer.prototype,'numberOfChannels',{get:function get(){if(this._buffer){return this._buffer.numberOfChannels;}else{return 0;}}});/**
		 *  Set the audio buffer from the array. To create a multichannel AudioBuffer,
		 *  pass in a multidimensional array.
		 *  @param {Float32Array} array The array to fill the audio buffer
		 *  @return {Tone.Buffer} this
		 */Tone.Buffer.prototype.fromArray=function(array){var isMultidimensional=array[0].length>0;var channels=isMultidimensional?array.length:1;var len=isMultidimensional?array[0].length:array.length;var buffer=this.context.createBuffer(channels,len,this.context.sampleRate);if(!isMultidimensional&&channels===1){array=[array];}for(var c=0;c<channels;c++){buffer.copyToChannel(array[c],c);}this._buffer=buffer;return this;};/**
		 * 	Sums muliple channels into 1 channel
		 *  @param {Number=} channel Optionally only copy a single channel from the array.
		 *  @return {Array}
		 */Tone.Buffer.prototype.toMono=function(chanNum){if(Tone.isNumber(chanNum)){this.fromArray(this.toArray(chanNum));}else{var outputArray=new Float32Array(this.length);var numChannels=this.numberOfChannels;for(var channel=0;channel<numChannels;channel++){var channelArray=this.toArray(channel);for(var i=0;i<channelArray.length;i++){outputArray[i]+=channelArray[i];}}//divide by the number of channels
outputArray=outputArray.map(function(sample){return sample/numChannels;});this.fromArray(outputArray);}return this;};/**
		 * 	Get the buffer as an array. Single channel buffers will return a 1-dimensional
		 * 	Float32Array, and multichannel buffers will return multidimensional arrays.
		 *  @param {Number=} channel Optionally only copy a single channel from the array.
		 *  @return {Array}
		 */Tone.Buffer.prototype.toArray=function(channel){if(Tone.isNumber(channel)){return this.getChannelData(channel);}else if(this.numberOfChannels===1){return this.toArray(0);}else{var ret=[];for(var c=0;c<this.numberOfChannels;c++){ret[c]=this.getChannelData(c);}return ret;}};/**
		 *  Returns the Float32Array representing the PCM audio data for the specific channel.
		 *  @param  {Number}  channel  The channel number to return
		 *  @return  {Float32Array}  The audio as a TypedArray
		 */Tone.Buffer.prototype.getChannelData=function(channel){return this._buffer.getChannelData(channel);};/**
		 *  Cut a subsection of the array and return a buffer of the
		 *  subsection. Does not modify the original buffer
		 *  @param {Time} start The time to start the slice
		 *  @param {Time=} end The end time to slice. If none is given
		 *                     will default to the end of the buffer
		 *  @return {Tone.Buffer} this
		 */Tone.Buffer.prototype.slice=function(start,end){end=Tone.defaultArg(end,this.duration);var startSamples=Math.floor(this.context.sampleRate*this.toSeconds(start));var endSamples=Math.floor(this.context.sampleRate*this.toSeconds(end));var replacement=[];for(var i=0;i<this.numberOfChannels;i++){replacement[i]=this.toArray(i).slice(startSamples,endSamples);}var retBuffer=new Tone.Buffer().fromArray(replacement);return retBuffer;};/**
		 *  Reverse the buffer.
		 *  @private
		 *  @return {Tone.Buffer} this
		 */Tone.Buffer.prototype._reverse=function(){if(this.loaded){for(var i=0;i<this.numberOfChannels;i++){Array.prototype.reverse.call(this.getChannelData(i));}}return this;};/**
		 * Reverse the buffer.
		 * @memberOf Tone.Buffer#
		 * @type {Boolean}
		 * @name reverse
		 */Object.defineProperty(Tone.Buffer.prototype,'reverse',{get:function get(){return this._reversed;},set:function set(rev){if(this._reversed!==rev){this._reversed=rev;this._reverse();}}});///////////////////////////////////////////////////////////////////////////
// STATIC METHODS
///////////////////////////////////////////////////////////////////////////
//statically inherits Emitter methods
Tone.Emitter.mixin(Tone.Buffer);/**
		 *  the static queue for all of the xhr requests
		 *  @type {Array}
		 *  @private
		 */Tone.Buffer._downloadQueue=[];/**
		 *  A path which is prefixed before every url.
		 *  @type  {String}
		 *  @static
		 */Tone.Buffer.baseUrl='';/**
		 *  Create a Tone.Buffer from the array. To create a multichannel AudioBuffer,
		 *  pass in a multidimensional array.
		 *  @param {Float32Array} array The array to fill the audio buffer
		 *  @return {Tone.Buffer} A Tone.Buffer created from the array
		 */Tone.Buffer.fromArray=function(array){return new Tone.Buffer().fromArray(array);};/**
		 * Creates a Tone.Buffer from a URL, returns a promise
		 * which resolves to a Tone.Buffer
		 * @param  {String} url The url to load.
		 * @return {Promise<Tone.Buffer>}     A promise which resolves to a Tone.Buffer
		 */Tone.Buffer.fromUrl=function(url){var buffer=new Tone.Buffer();return buffer.load(url).then(function(){return buffer;});};/**
		 * Remove an xhr request from the download queue
		 * @private
		 */Tone.Buffer._removeFromDownloadQueue=function(request){var index=Tone.Buffer._downloadQueue.indexOf(request);if(index!==-1){Tone.Buffer._downloadQueue.splice(index,1);}};/**
		 *  Loads a url using XMLHttpRequest.
		 *  @param {String} url
		 *  @param {Function} onload
		 *  @param {Function} onerror
		 *  @param {Function} onprogress
		 *  @return {XMLHttpRequest}
		 */Tone.Buffer.load=function(url,onload,onerror){//default
onload=Tone.defaultArg(onload,Tone.noOp);// test if the url contains multiple extensions
var matches=url.match(/\[(.+\|?)+\]$/);if(matches){var extensions=matches[1].split('|');var extension=extensions[0];for(var i=0;i<extensions.length;i++){if(Tone.Buffer.supportsType(extensions[i])){extension=extensions[i];break;}}url=url.replace(matches[0],extension);}function onError(e){Tone.Buffer._removeFromDownloadQueue(request);Tone.Buffer.emit('error',e);if(onerror){onerror(e);}else{throw e;}}function onProgress(){//calculate the progress
var totalProgress=0;for(var i=0;i<Tone.Buffer._downloadQueue.length;i++){totalProgress+=Tone.Buffer._downloadQueue[i].progress;}Tone.Buffer.emit('progress',totalProgress/Tone.Buffer._downloadQueue.length);}var request=new XMLHttpRequest();request.open('GET',Tone.Buffer.baseUrl+url,true);request.responseType='arraybuffer';//start out as 0
request.progress=0;Tone.Buffer._downloadQueue.push(request);request.addEventListener('load',function(){if(request.status===200){Tone.context.decodeAudioData(request.response).then(function(buff){request.progress=1;onProgress();onload(buff);Tone.Buffer._removeFromDownloadQueue(request);if(Tone.Buffer._downloadQueue.length===0){//emit the event at the end
Tone.Buffer.emit('load');}}).catch(function(){Tone.Buffer._removeFromDownloadQueue(request);onError('Tone.Buffer: could not decode audio data: '+url);});}else{onError('Tone.Buffer: could not locate file: '+url);}});request.addEventListener('error',onError);request.addEventListener('progress',function(event){if(event.lengthComputable){//only go to 95%, the last 5% is when the audio is decoded
request.progress=event.loaded/event.total*0.95;onProgress();}});request.send();return request;};/**
		 *  Stop all of the downloads in progress
		 *  @return {Tone.Buffer}
		 *  @static
		 */Tone.Buffer.cancelDownloads=function(){Tone.Buffer._downloadQueue.slice().forEach(function(request){Tone.Buffer._removeFromDownloadQueue(request);request.abort();});return Tone.Buffer;};/**
		 *  Checks a url's extension to see if the current browser can play that file type.
		 *  @param {String} url The url/extension to test
		 *  @return {Boolean} If the file extension can be played
		 *  @static
		 *  @example
		 * Tone.Buffer.supportsType("wav"); //returns true
		 * Tone.Buffer.supportsType("path/to/file.wav"); //returns true
		 */Tone.Buffer.supportsType=function(url){var extension=url.split('.');extension=extension[extension.length-1];var response=document.createElement('audio').canPlayType('audio/'+extension);return response!=='';};/**
		 *  Returns a Promise which resolves when all of the buffers have loaded
		 *  @return {Promise}
		 */Tone.loaded=function(){var onload,onerror;function removeEvents(){//remove the events when it's resolved
Tone.Buffer.off('load',onload);Tone.Buffer.off('error',onerror);}return new Promise(function(success,fail){onload=function onload(){success();};onerror=function onerror(){fail();};//add the event listeners
Tone.Buffer.on('load',onload);Tone.Buffer.on('error',onerror);}).then(removeEvents).catch(function(e){removeEvents();throw new Error(e);});};return Tone.Buffer;});Module(function(Tone){/**
		 *  @class Wrapper around the native fire-and-forget OscillatorNode. Adds the
		 *     ability to reschedule the stop method.
		 *  @extends {Tone.AudioNode}
		 *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play
		 *  @param  {Function}  onload  The callback to invoke when the
		 *                               buffer is done playing.
		 */Tone.OscillatorNode=function(){var options=Tone.defaults(arguments,['frequency','type'],Tone.OscillatorNode);Tone.AudioNode.call(this,options);/**
			 *  The callback to invoke after the
			 *  buffer source is done playing.
			 *  @type  {Function}
			 */this.onended=options.onended;/**
			 *  The oscillator start time
			 *  @type  {Number}
			 *  @private
			 */this._startTime=-1;/**
			 *  The oscillator stop time
			 *  @type  {Number}
			 *  @private
			 */this._stopTime=-1;/**
			 *  The gain node which envelopes the OscillatorNode
			 *  @type  {Tone.Gain}
			 *  @private
			 */this._gainNode=this.output=new Tone.Gain();this._gainNode.gain.setValueAtTime(0,this.context.currentTime);/**
			 *  The oscillator
			 *  @type  {OscillatorNode}
			 *  @private
			 */this._oscillator=this.context.createOscillator();this._oscillator.connect(this._gainNode);this.type=options.type;/**
			 *  The frequency of the oscillator
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=new Tone.Param(this._oscillator.frequency,Tone.Type.Frequency);this.frequency.value=options.frequency;/**
			 *  The detune of the oscillator
			 *  @type {Frequency}
			 *  @signal
			 */this.detune=new Tone.Param(this._oscillator.detune,Tone.Type.Cents);this.detune.value=options.detune;/**
			 *  The value that the buffer ramps to
			 *  @type {Gain}
			 *  @private
			 */this._gain=1;};Tone.extend(Tone.OscillatorNode,Tone.AudioNode);/**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */Tone.OscillatorNode.defaults={'frequency':440,'detune':0,'type':'sine','onended':Tone.noOp};/**
		 *  Returns the playback state of the oscillator, either "started" or "stopped".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.OscillatorNode#
		 *  @name state
		 */Object.defineProperty(Tone.OscillatorNode.prototype,'state',{get:function get(){return this.getStateAtTime(this.now());}});/**
		 *  Get the playback state at the given time
		 *  @param  {Time}  time  The time to test the state at
		 *  @return  {Tone.State}  The playback state. 
		 */Tone.OscillatorNode.prototype.getStateAtTime=function(time){time=this.toSeconds(time);if(this._startTime!==-1&&time>=this._startTime&&(this._stopTime===-1||time<=this._stopTime)){return Tone.State.Started;}else{return Tone.State.Stopped;}};/**
	     * Start the oscillator node at the given time
	     * @param  {Time=} time When to start the oscillator
	     * @return {OscillatorNode}      this
	     */Tone.OscillatorNode.prototype.start=function(time){if(this._startTime===-1){this._startTime=this.toSeconds(time);this._oscillator.start(this._startTime);var now=this.context.currentTime;this._gainNode.gain.cancelScheduledValues(now);this._gainNode.gain.setValueAtTime(0,now);this._gainNode.gain.setValueAtTime(1,this._startTime);}else{throw new Error('cannot call OscillatorNode.start more than once');}return this;};/**
	     * Sets an arbitrary custom periodic waveform given a PeriodicWave.
	     * @param  {PeriodicWave} periodicWave PeriodicWave should be created with context.createPeriodicWave
	     * @return {OscillatorNode} this
	     */Tone.OscillatorNode.prototype.setPeriodicWave=function(periodicWave){this._oscillator.setPeriodicWave(periodicWave);return this;};/**
	     * Stop the oscillator node at the given time
	     * @param  {Time=} time When to stop the oscillator
	     * @return {OscillatorNode}      this
	     */Tone.OscillatorNode.prototype.stop=function(time){//cancel the previous stop
this.cancelStop();//reschedule it
this._stopTime=this.toSeconds(time);this._gainNode.gain.setValueAtTime(0,this._stopTime);this.context.clearTimeout(this._timeout);this._timeout=this.context.setTimeout(function(){this._oscillator.stop(this.now());this.onended();}.bind(this),this._stopTime-this.now());return this;};/**
		 *  Cancel a scheduled stop event
		 *  @return  {Tone.OscillatorNode}  this
		 */Tone.OscillatorNode.prototype.cancelStop=function(){if(this._startTime!==-1){//cancel the stop envelope
this._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime);this._gainNode.gain.setValueAtTime(1,Math.max(this.now(),this._startTime));this.context.clearTimeout(this._timeout);this._stopTime=-1;}return this;};/**
		 * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'
		 * @memberOf Tone.OscillatorNode#
		 * @type {Time}
		 * @name type
		 */Object.defineProperty(Tone.OscillatorNode.prototype,'type',{get:function get(){return this._oscillator.type;},set:function set(type){this._oscillator.type=type;}});/**
		 *  Clean up.
		 *  @return  {Tone.OscillatorNode}  this
		 */Tone.OscillatorNode.prototype.dispose=function(){this.context.clearTimeout(this._timeout);Tone.AudioNode.prototype.dispose.call(this);this.onended=null;this._oscillator.disconnect();this._oscillator=null;this._gainNode.dispose();this._gainNode=null;this.frequency.dispose();this.frequency=null;this.detune.dispose();this.detune=null;return this;};return Tone.OscillatorNode;});Module(function(Tone){/**
		 *  @class Tone.Oscillator supports a number of features including
		 *         phase rotation, multiple oscillator types (see Tone.Oscillator.type),
		 *         and Transport syncing (see Tone.Oscillator.syncFrequency).
		 *
		 *  @constructor
		 *  @extends {Tone.Source}
		 *  @param {Frequency} [frequency] Starting frequency
		 *  @param {string} [type] The oscillator type. Read more about type below.
		 *  @example
		 * //make and start a 440hz sine tone
		 * var osc = new Tone.Oscillator(440, "sine").toMaster().start();
		 */Tone.Oscillator=function(){var options=Tone.defaults(arguments,['frequency','type'],Tone.Oscillator);Tone.Source.call(this,options);/**
			 *  the main oscillator
			 *  @type {OscillatorNode}
			 *  @private
			 */this._oscillator=null;/**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=new Tone.Signal(options.frequency,Tone.Type.Frequency);/**
			 *  The detune control signal.
			 *  @type {Cents}
			 *  @signal
			 */this.detune=new Tone.Signal(options.detune,Tone.Type.Cents);/**
			 *  the periodic wave
			 *  @type {PeriodicWave}
			 *  @private
			 */this._wave=null;/**
			 *  The partials of the oscillator
			 *  @type {Array}
			 *  @private
			 */this._partials=Tone.defaultArg(options.partials,[1]);/**
			 *  the phase of the oscillator
			 *  between 0 - 360
			 *  @type {number}
			 *  @private
			 */this._phase=options.phase;/**
			 *  the type of the oscillator
			 *  @type {string}
			 *  @private
			 */this._type=null;//setup
this.type=options.type;this.phase=this._phase;this._readOnly(['frequency','detune']);};Tone.extend(Tone.Oscillator,Tone.Source);/**
		 *  the default parameters
		 *  @type {Object}
		 */Tone.Oscillator.defaults={'type':'sine','frequency':440,'detune':0,'phase':0,'partials':[]};/**
		 *  The Oscillator types
		 *  @enum {String}
		 */Tone.Oscillator.Type={Sine:'sine',Triangle:'triangle',Sawtooth:'sawtooth',Square:'square',Custom:'custom'};/**
		 *  start the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */Tone.Oscillator.prototype._start=function(time){//new oscillator with previous values
this._oscillator=new Tone.OscillatorNode();if(this._wave){this._oscillator.setPeriodicWave(this._wave);}else{this._oscillator.type=this._type;}//connect the control signal to the oscillator frequency & detune
this._oscillator.connect(this.output);this.frequency.connect(this._oscillator.frequency);this.detune.connect(this._oscillator.detune);//start the oscillator
time=this.toSeconds(time);this._oscillator.start(time);};/**
		 *  stop the oscillator
		 *  @private
		 *  @param  {Time} [time=now] (optional) timing parameter
		 *  @returns {Tone.Oscillator} this
		 */Tone.Oscillator.prototype._stop=function(time){if(this._oscillator){time=this.toSeconds(time);this._oscillator.stop(time);}return this;};/**
		 * Restart the oscillator. Does not stop the oscillator, but instead
		 * just cancels any scheduled 'stop' from being invoked.
		 * @param  {Time=} time
		 * @return {Tone.Oscillator}      this
		 */Tone.Oscillator.prototype.restart=function(time){this._oscillator.cancelStop();this._state.cancel(this.toSeconds(time));return this;};/**
		 *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,
		 *  will also affect the oscillators frequency.
		 *  @returns {Tone.Oscillator} this
		 *  @example
		 * Tone.Transport.bpm.value = 120;
		 * osc.frequency.value = 440;
		 * //the ration between the bpm and the frequency will be maintained
		 * osc.syncFrequency();
		 * Tone.Transport.bpm.value = 240;
		 * // the frequency of the oscillator is doubled to 880
		 */Tone.Oscillator.prototype.syncFrequency=function(){Tone.Transport.syncSignal(this.frequency);return this;};/**
		 *  Unsync the oscillator's frequency from the Transport.
		 *  See Tone.Oscillator.syncFrequency
		 *  @returns {Tone.Oscillator} this
		 */Tone.Oscillator.prototype.unsyncFrequency=function(){Tone.Transport.unsyncSignal(this.frequency);return this;};/**
		 * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of
		 * setting the first x number of partials of the oscillator. For example: "sine4" would
		 * set be the first 4 partials of the sine wave and "triangle8" would set the first
		 * 8 partials of the triangle wave.
		 * <br><br>
		 * Uses PeriodicWave internally even for native types so that it can set the phase.
		 * PeriodicWave equations are from the
		 * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).
		 *
		 * @memberOf Tone.Oscillator#
		 * @type {string}
		 * @name type
		 * @example
		 * //set it to a square wave
		 * osc.type = "square";
		 * @example
		 * //set the first 6 partials of a sawtooth wave
		 * osc.type = "sawtooth6";
		 */Object.defineProperty(Tone.Oscillator.prototype,'type',{get:function get(){return this._type;},set:function set(type){var isBasicType=[Tone.Oscillator.Type.Sine,Tone.Oscillator.Type.Square,Tone.Oscillator.Type.Triangle,Tone.Oscillator.Type.Sawtooth].includes(type);if(this._phase===0&&isBasicType){this._wave=null;//just go with the basic approach
if(this._oscillator!==null){this._oscillator.type===type;}}else{var coefs=this._getRealImaginary(type,this._phase);var periodicWave=this.context.createPeriodicWave(coefs[0],coefs[1]);this._wave=periodicWave;if(this._oscillator!==null){this._oscillator.setPeriodicWave(this._wave);}}this._type=type;}});/**
		 *  Returns the real and imaginary components based
		 *  on the oscillator type.
		 *  @returns {Array} [real, imaginary]
		 *  @private
		 */Tone.Oscillator.prototype._getRealImaginary=function(type,phase){var fftSize=4096;var periodicWaveSize=fftSize/2;var real=new Float32Array(periodicWaveSize);var imag=new Float32Array(periodicWaveSize);var partialCount=1;if(type===Tone.Oscillator.Type.Custom){partialCount=this._partials.length+1;periodicWaveSize=partialCount;}else{var partial=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(type);if(partial){partialCount=parseInt(partial[2])+1;type=partial[1];partialCount=Math.max(partialCount,2);periodicWaveSize=partialCount;}}for(var n=1;n<periodicWaveSize;++n){var piFactor=2/(n*Math.PI);var b;switch(type){case Tone.Oscillator.Type.Sine:b=n<=partialCount?1:0;break;case Tone.Oscillator.Type.Square:b=n&1?2*piFactor:0;break;case Tone.Oscillator.Type.Sawtooth:b=piFactor*(n&1?1:-1);break;case Tone.Oscillator.Type.Triangle:if(n&1){b=2*(piFactor*piFactor)*(n-1>>1&1?-1:1);}else{b=0;}break;case Tone.Oscillator.Type.Custom:b=this._partials[n-1];break;default:throw new TypeError('Tone.Oscillator: invalid type: '+type);}if(b!==0){real[n]=-b*Math.sin(phase*n);imag[n]=b*Math.cos(phase*n);}else{real[n]=0;imag[n]=0;}}return[real,imag];};/**
		 *  Compute the inverse FFT for a given phase.
		 *  @param  {Float32Array}  real
		 *  @param  {Float32Array}  imag
		 *  @param  {NormalRange}  phase
		 *  @return  {AudioRange}
		 *  @private
		 */Tone.Oscillator.prototype._inverseFFT=function(real,imag,phase){var sum=0;var len=real.length;for(var i=0;i<len;i++){sum+=real[i]*Math.cos(i*phase)+imag[i]*Math.sin(i*phase);}return sum;};/**
		 *  Returns the initial value of the oscillator.
		 *  @return  {AudioRange}
		 *  @private
		 */Tone.Oscillator.prototype._getInitialValue=function(){var coefs=this._getRealImaginary(this._type,0);var real=coefs[0];var imag=coefs[1];var maxValue=0;var twoPi=Math.PI*2;//check for peaks in 8 places
for(var i=0;i<8;i++){maxValue=Math.max(this._inverseFFT(real,imag,i/8*twoPi),maxValue);}return-this._inverseFFT(real,imag,this._phase)/maxValue;};/**
		 * The partials of the waveform. A partial represents
		 * the amplitude at a harmonic. The first harmonic is the
		 * fundamental frequency, the second is the octave and so on
		 * following the harmonic series.
		 * Setting this value will automatically set the type to "custom".
		 * The value is an empty array when the type is not "custom".
		 * @memberOf Tone.Oscillator#
		 * @type {Array}
		 * @name partials
		 * @example
		 * osc.partials = [1, 0.2, 0.01];
		 */Object.defineProperty(Tone.Oscillator.prototype,'partials',{get:function get(){if(this._type!==Tone.Oscillator.Type.Custom){return[];}else{return this._partials;}},set:function set(partials){this._partials=partials;this.type=Tone.Oscillator.Type.Custom;}});/**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.Oscillator#
		 * @type {Degrees}
		 * @name phase
		 * @example
		 * osc.phase = 180; //flips the phase of the oscillator
		 */Object.defineProperty(Tone.Oscillator.prototype,'phase',{get:function get(){return this._phase*(180/Math.PI);},set:function set(phase){this._phase=phase*Math.PI/180;//reset the type
this.type=this._type;}});/**
		 *  Dispose and disconnect.
		 *  @return {Tone.Oscillator} this
		 */Tone.Oscillator.prototype.dispose=function(){Tone.Source.prototype.dispose.call(this);if(this._oscillator!==null){this._oscillator.dispose();this._oscillator=null;}this._wave=null;this._writable(['frequency','detune']);this.frequency.dispose();this.frequency=null;this.detune.dispose();this.detune=null;this._partials=null;return this;};return Tone.Oscillator;});Module(function(Tone){/**
		 *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. 
		 *         See Tone.GainToAudio.
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @example
		 *  var a2g = new Tone.AudioToGain();
		 */Tone.AudioToGain=function(){Tone.SignalBase.call(this);/**
			 *  @type {WaveShaperNode}
			 *  @private
			 */this._norm=this.input=this.output=new Tone.WaveShaper(function(x){return(x+1)/2;});};Tone.extend(Tone.AudioToGain,Tone.SignalBase);/**
		 *  clean up
		 *  @returns {Tone.AudioToGain} this
		 */Tone.AudioToGain.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._norm.dispose();this._norm=null;return this;};return Tone.AudioToGain;});Module(function(Tone){/**
		 *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be
		 *         it's own class is that many browsers optimize out Tone.Signal
		 *         with a value of 0 and will not process nodes further down the graph.
		 *  @extends {Tone.SignalBase}
		 */Tone.Zero=function(){Tone.SignalBase.call(this);/**
			 *  The gain node
			 *  @type  {Tone.Gain}
			 *  @private
			 */this._gain=this.input=this.output=new Tone.Gain();this.context.getConstant(0).connect(this._gain);};Tone.extend(Tone.Zero,Tone.SignalBase);/**
		 *  clean up
		 *  @return  {Tone.Zero}  this
		 */Tone.Zero.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._gain.dispose();this._gain=null;return this;};return Tone.Zero;});Module(function(Tone){/**
		 *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal
		 *          which can be attached to an AudioParam or Tone.Signal
		 *          in order to modulate that parameter with an oscillator. The LFO can
		 *          also be synced to the transport to start/stop and change when the tempo changes.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be
		 *                               in the frequency range of 0.1 to 10 hertz.
		 *  @param {number=} min The minimum output value of the LFO.
		 *  @param {number=} max The maximum value of the LFO.
		 *  @example
		 * var lfo = new Tone.LFO("4n", 400, 4000);
		 * lfo.connect(filter.frequency);
		 */Tone.LFO=function(){var options=Tone.defaults(arguments,['frequency','min','max'],Tone.LFO);Tone.AudioNode.call(this);/**
			 *  The oscillator.
			 *  @type {Tone.Oscillator}
			 *  @private
			 */this._oscillator=new Tone.Oscillator({'frequency':options.frequency,'type':options.type});/**
			 *  the lfo's frequency
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=this._oscillator.frequency;/**
			 * The amplitude of the LFO, which controls the output range between
			 * the min and max output. For example if the min is -10 and the max
			 * is 10, setting the amplitude to 0.5 would make the LFO modulate
			 * between -5 and 5.
			 * @type {Number}
			 * @signal
			 */this.amplitude=this._oscillator.volume;this.amplitude.units=Tone.Type.NormalRange;this.amplitude.value=options.amplitude;/**
			 *  The signal which is output when the LFO is stopped
			 *  @type  {Tone.Signal}
			 *  @private
			 */this._stoppedSignal=new Tone.Signal(0,Tone.Type.AudioRange);/**
			 *  Just outputs zeros.
			 *  @type {Tone.Zero}
			 *  @private
			 */this._zeros=new Tone.Zero();/**
			 *  The value that the LFO outputs when it's stopped
			 *  @type {AudioRange}
			 *  @private
			 */this._stoppedValue=0;/**
			 *  @type {Tone.AudioToGain}
			 *  @private
			 */this._a2g=new Tone.AudioToGain();/**
			 *  @type {Tone.Scale}
			 *  @private
			 */this._scaler=this.output=new Tone.Scale(options.min,options.max);/**
			 *  the units of the LFO (used for converting)
			 *  @type {Tone.Type}
			 *  @private
			 */this._units=Tone.Type.Default;this.units=options.units;//connect it up
this._oscillator.chain(this._a2g,this._scaler);this._zeros.connect(this._a2g);this._stoppedSignal.connect(this._a2g);this._readOnly(['amplitude','frequency']);this.phase=options.phase;};Tone.extend(Tone.LFO,Tone.AudioNode);/**
		 *  the default parameters
		 *
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.LFO.defaults={'type':'sine','min':0,'max':1,'phase':0,'frequency':'4n','amplitude':1,'units':Tone.Type.Default};/**
		 *  Start the LFO.
		 *  @param  {Time} [time=now] the time the LFO will start
		 *  @returns {Tone.LFO} this
		 */Tone.LFO.prototype.start=function(time){time=this.toSeconds(time);this._stoppedSignal.setValueAtTime(0,time);this._oscillator.start(time);return this;};/**
		 *  Stop the LFO.
		 *  @param  {Time} [time=now] the time the LFO will stop
		 *  @returns {Tone.LFO} this
		 */Tone.LFO.prototype.stop=function(time){time=this.toSeconds(time);this._stoppedSignal.setValueAtTime(this._stoppedValue,time);this._oscillator.stop(time);return this;};/**
		 *  Sync the start/stop/pause to the transport
		 *  and the frequency to the bpm of the transport
		 *  @returns {Tone.LFO} this
		 *  @example
		 *  lfo.frequency.value = "8n";
		 *  lfo.sync().start(0)
		 *  //the rate of the LFO will always be an eighth note,
		 *  //even as the tempo changes
		 */Tone.LFO.prototype.sync=function(){this._oscillator.sync();this._oscillator.syncFrequency();return this;};/**
		 *  unsync the LFO from transport control
		 *  @returns {Tone.LFO} this
		 */Tone.LFO.prototype.unsync=function(){this._oscillator.unsync();this._oscillator.unsyncFrequency();return this;};/**
		 * The miniumum output of the LFO.
		 * @memberOf Tone.LFO#
		 * @type {number}
		 * @name min
		 */Object.defineProperty(Tone.LFO.prototype,'min',{get:function get(){return this._toUnits(this._scaler.min);},set:function set(min){min=this._fromUnits(min);this._scaler.min=min;}});/**
		 * The maximum output of the LFO.
		 * @memberOf Tone.LFO#
		 * @type {number}
		 * @name max
		 */Object.defineProperty(Tone.LFO.prototype,'max',{get:function get(){return this._toUnits(this._scaler.max);},set:function set(max){max=this._fromUnits(max);this._scaler.max=max;}});/**
		 * The type of the oscillator: sine, square, sawtooth, triangle.
		 * @memberOf Tone.LFO#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.LFO.prototype,'type',{get:function get(){return this._oscillator.type;},set:function set(type){this._oscillator.type=type;this._stoppedValue=this._oscillator._getInitialValue();this._stoppedSignal.value=this._stoppedValue;}});/**
		 * The phase of the LFO.
		 * @memberOf Tone.LFO#
		 * @type {number}
		 * @name phase
		 */Object.defineProperty(Tone.LFO.prototype,'phase',{get:function get(){return this._oscillator.phase;},set:function set(phase){this._oscillator.phase=phase;this._stoppedValue=this._oscillator._getInitialValue();this._stoppedSignal.value=this._stoppedValue;}});/**
		 * The output units of the LFO.
		 * @memberOf Tone.LFO#
		 * @type {Tone.Type}
		 * @name units
		 */Object.defineProperty(Tone.LFO.prototype,'units',{get:function get(){return this._units;},set:function set(val){var currentMin=this.min;var currentMax=this.max;//convert the min and the max
this._units=val;this.min=currentMin;this.max=currentMax;}});/**
		 * Mute the output.
		 * @memberOf Tone.LFO#
		 * @type {Boolean}
		 * @name mute
		 */Object.defineProperty(Tone.LFO.prototype,'mute',{get:function get(){return this._oscillator.mute;},set:function set(mute){this._oscillator.mute=mute;}});/**
		 *  Returns the playback state of the source, either "started" or "stopped".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.LFO#
		 *  @name state
		 */Object.defineProperty(Tone.LFO.prototype,'state',{get:function get(){return this._oscillator.state;}});/**
		 *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node.
		 *  Tone.LFO will automatically convert to the destination units of the
		 *  will get the units from the connected node.
		 *  @param  {Tone | AudioParam | AudioNode} node
		 *  @param {number} [outputNum=0] optionally which output to connect from
		 *  @param {number} [inputNum=0] optionally which input to connect to
		 *  @returns {Tone.LFO} this
		 *  @private
		 */Tone.LFO.prototype.connect=function(node){if(node.constructor===Tone.Signal||node.constructor===Tone.Param){this.convert=node.convert;this.units=node.units;}Tone.SignalBase.prototype.connect.apply(this,arguments);return this;};/**
		 *  private method borrowed from Param converts
		 *  units from their destination value
		 *  @function
		 *  @private
		 */Tone.LFO.prototype._fromUnits=Tone.Param.prototype._fromUnits;/**
		 *  private method borrowed from Param converts
		 *  units to their destination value
		 *  @function
		 *  @private
		 */Tone.LFO.prototype._toUnits=Tone.Param.prototype._toUnits;/**
		 *  disconnect and dispose
		 *  @returns {Tone.LFO} this
		 */Tone.LFO.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._writable(['amplitude','frequency']);this._oscillator.dispose();this._oscillator=null;this._stoppedSignal.dispose();this._stoppedSignal=null;this._zeros.dispose();this._zeros=null;this._scaler.dispose();this._scaler=null;this._a2g.dispose();this._a2g=null;this.frequency=null;this.amplitude=null;return this;};return Tone.LFO;});Module(function(Tone){/**
		 *  @class Tone.Limiter will limit the loudness of an incoming signal.
		 *         It is composed of a Tone.Compressor with a fast attack
		 *         and release. Limiters are commonly used to safeguard against
		 *         signal clipping. Unlike a compressor, limiters do not provide
		 *         smooth gain reduction and almost completely prevent
		 *         additional gain above the threshold.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {number} threshold The theshold above which the limiting is applied.
		 *  @example
		 *  var limiter = new Tone.Limiter(-6);
		 */Tone.Limiter=function(){var options=Tone.defaults(arguments,['threshold'],Tone.Limiter);Tone.AudioNode.call(this);/**
			 *  the compressor
			 *  @private
			 *  @type {Tone.Compressor}
			 */this._compressor=this.input=this.output=new Tone.Compressor({'attack':0.001,'decay':0.001,'threshold':options.threshold});/**
			 * The threshold of of the limiter
			 * @type {Decibel}
			 * @signal
			 */this.threshold=this._compressor.threshold;this._readOnly('threshold');};Tone.extend(Tone.Limiter,Tone.AudioNode);/**
		 *  The default value
		 *  @type {Object}
		 *  @const
		 *  @static
		 */Tone.Limiter.defaults={'threshold':-12};/**
		 *  Clean up.
		 *  @returns {Tone.Limiter} this
		 */Tone.Limiter.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._compressor.dispose();this._compressor=null;this._writable('threshold');this.threshold=null;return this;};return Tone.Limiter;});Module(function(Tone){/**
		 *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to
		 *         Tone.FeedbackCombFilter, but includes a lowpass filter.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Time|Object} [delayTime] The delay time of the comb filter
		 *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter
		 *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the
		 *                                signal as it is fedback.
		 */Tone.LowpassCombFilter=function(){var options=Tone.defaults(arguments,['delayTime','resonance','dampening'],Tone.LowpassCombFilter);Tone.AudioNode.call(this);this.createInsOuts(1,1);/**
			 *  the delay node
			 *  @type {DelayNode}
			 *  @private
			 */this._delay=this.input=new Tone.Delay(options.delayTime);/**
			 *  The delayTime of the comb filter.
			 *  @type {Time}
			 *  @signal
			 */this.delayTime=this._delay.delayTime;/**
			 *  the lowpass filter
			 *  @type  {BiquadFilterNode}
			 *  @private
			 */this._lowpass=this.output=this.context.createBiquadFilter();this._lowpass.Q.value=-3.0102999566398125;this._lowpass.type='lowpass';/**
			 *  The dampening control of the feedback
			 *  @type {Frequency}
			 *  @signal
			 */this.dampening=new Tone.Param({'param':this._lowpass.frequency,'units':Tone.Type.Frequency,'value':options.dampening});/**
			 *  the feedback gain
			 *  @type {Tone.Gain}
			 *  @private
			 */this._feedback=new Tone.Gain(options.resonance,Tone.Type.NormalRange);/**
			 *  The amount of feedback of the delayed signal.
			 *  @type {NormalRange}
			 *  @signal
			 */this.resonance=this._feedback.gain;//connections
this._delay.chain(this._lowpass,this._feedback,this._delay);this._readOnly(['dampening','resonance','delayTime']);};Tone.extend(Tone.LowpassCombFilter,Tone.AudioNode);/**
		 *  the default parameters
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.LowpassCombFilter.defaults={'delayTime':0.1,'resonance':0.5,'dampening':3000};/**
		 *  Clean up.
		 *  @returns {Tone.LowpassCombFilter} this
		 */Tone.LowpassCombFilter.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._writable(['dampening','resonance','delayTime']);this.dampening.dispose();this.dampening=null;this.resonance.dispose();this.resonance=null;this._delay.dispose();this._delay=null;this.delayTime=null;this._lowpass.disconnect();this._lowpass=null;this._feedback.disconnect();this._feedback=null;return this;};return Tone.LowpassCombFilter;});Module(function(Tone){/**
		 *  @class  Tone.Merge brings two signals into the left and right
		 *          channels of a single stereo channel.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @example
		 * var merge = new Tone.Merge().toMaster();
		 * //routing a sine tone in the left channel
		 * //and noise in the right channel
		 * var osc = new Tone.Oscillator().connect(merge.left);
		 * var noise = new Tone.Noise().connect(merge.right);
		 * //starting our oscillators
		 * noise.start();
		 * osc.start();
		 */Tone.Merge=function(){Tone.AudioNode.call(this);this.createInsOuts(2,0);/**
			 *  The left input channel.
			 *  Alias for <code>input[0]</code>
			 *  @type {GainNode}
			 */this.left=this.input[0]=new Tone.Gain();/**
			 *  The right input channel.
			 *  Alias for <code>input[1]</code>.
			 *  @type {GainNode}
			 */this.right=this.input[1]=new Tone.Gain();/**
			 *  the merger node for the two channels
			 *  @type {ChannelMergerNode}
			 *  @private
			 */this._merger=this.output=this.context.createChannelMerger(2);//connections
this.left.connect(this._merger,0,0);this.right.connect(this._merger,0,1);this.left.channelCount=1;this.right.channelCount=1;this.left.channelCountMode='explicit';this.right.channelCountMode='explicit';};Tone.extend(Tone.Merge,Tone.AudioNode);/**
		 *  Clean up.
		 *  @returns {Tone.Merge} this
		 */Tone.Merge.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this.left.dispose();this.left=null;this.right.dispose();this.right=null;this._merger.disconnect();this._merger=null;return this;};return Tone.Merge;});Module(function(Tone){/**
		 *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)
		 *          of an input signal with some averaging applied. It can also get the raw
		 *          value of the input signal.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Number} smoothing The amount of smoothing applied between frames.
		 *  @example
		 * var meter = new Tone.Meter();
		 * var mic = new Tone.UserMedia().open();
		 * //connect mic to the meter
		 * mic.connect(meter);
		 * //the current level of the mic input in decibels
		 * var level = meter.getValue();
		 */Tone.Meter=function(){var options=Tone.defaults(arguments,['smoothing'],Tone.Meter);Tone.AudioNode.call(this);/**
			 *  The analyser node which computes the levels.
			 *  @private
			 *  @type  {Tone.Analyser}
			 */this.input=this.output=this._analyser=new Tone.Analyser('waveform',1024);/**
			 *  The amount of carryover between the current and last frame.
			 *  Only applied meter for "level" type.
			 *  @type  {Number}
			 */this.smoothing=options.smoothing;};Tone.extend(Tone.Meter,Tone.AudioNode);/**
		 *  The defaults
		 *  @type {Object}
		 *  @static
		 *  @const
		 */Tone.Meter.defaults={'smoothing':0.8};/**
		 *  Get the current decibel value of the incoming signal
		 *  @returns {Decibels}
		 */Tone.Meter.prototype.getLevel=function(){this._analyser.type='fft';var values=this._analyser.getValue();var offset=28;// normalizes most signal levels
// TODO: compute loudness from FFT
return Math.max.apply(this,values)+offset;};/**
		 *  Get the signal value of the incoming signal
		 *  @returns {Number}
		 */Tone.Meter.prototype.getValue=function(){this._analyser.type='waveform';var value=this._analyser.getValue();return value[0];};/**
		 * A value from 0 -> 1 where 0 represents no time averaging with the last analysis frame.
		 * @memberOf Tone.Meter#
		 * @type {Number}
		 * @name smoothing
		 * @readOnly
		 */Object.defineProperty(Tone.Meter.prototype,'smoothing',{get:function get(){return this._analyser.smoothing;},set:function set(val){this._analyser.smoothing=val;}});/**
		 *  Clean up.
		 *  @returns {Tone.Meter} this
		 */Tone.Meter.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._analyser.dispose();this._analyser=null;return this;};return Tone.Meter;});Module(function(Tone){/**
		 *	@class  Tone.Split splits an incoming signal into left and right channels.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @example
		 * var split = new Tone.Split();
		 * stereoSignal.connect(split);
		 */Tone.Split=function(){Tone.AudioNode.call(this);this.createInsOuts(0,2);/**
			 *  @type {ChannelSplitterNode}
			 *  @private
			 */this._splitter=this.input=this.context.createChannelSplitter(2);this._splitter.channelCount=2;this._splitter.channelCountMode='explicit';/**
			 *  Left channel output.
			 *  Alias for <code>output[0]</code>
			 *  @type {Tone.Gain}
			 */this.left=this.output[0]=new Tone.Gain();/**
			 *  Right channel output.
			 *  Alias for <code>output[1]</code>
			 *  @type {Tone.Gain}
			 */this.right=this.output[1]=new Tone.Gain();//connections
this._splitter.connect(this.left,0,0);this._splitter.connect(this.right,1,0);};Tone.extend(Tone.Split,Tone.AudioNode);/**
		 *  Clean up.
		 *  @returns {Tone.Split} this
		 */Tone.Split.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._splitter.disconnect();this.left.dispose();this.left=null;this.right.dispose();this.right=null;this._splitter=null;return this;};return Tone.Split;});Module(function(Tone){/**
		 *  @class Mid/Side processing separates the the 'mid' signal
		 *         (which comes out of both the left and the right channel)
		 *         and the 'side' (which only comes out of the the side channels). <br><br>
		 *         <code>
		 *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>
		 *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>
		 *         </code>
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 */Tone.MidSideSplit=function(){Tone.AudioNode.call(this);this.createInsOuts(0,2);/**
			 *  split the incoming signal into left and right channels
			 *  @type  {Tone.Split}
			 *  @private
			 */this._split=this.input=new Tone.Split();/**
			 *  The mid send. Connect to mid processing. Alias for
			 *  <code>output[0]</code>
			 *  @type {Tone.Add}
			 */this._midAdd=new Tone.Add();/**
			 * Multiply the _midAdd by sqrt(1/2)
			 * @type {Tone.Multiply}
			 */this.mid=this.output[0]=new Tone.Multiply(Math.SQRT1_2);/**
			 *  The side output. Connect to side processing. Also Output 1
			 *  @type {Tone.Subtract}
			 */this._sideSubtract=new Tone.Subtract();/**
			 * Multiply the _midAdd by sqrt(1/2)
			 * @type {Tone.Multiply}
			 */this.side=this.output[1]=new Tone.Multiply(Math.SQRT1_2);this._split.connect(this._midAdd,0,0);this._split.connect(this._midAdd,1,1);this._split.connect(this._sideSubtract,0,0);this._split.connect(this._sideSubtract,1,1);this._midAdd.connect(this.mid);this._sideSubtract.connect(this.side);};Tone.extend(Tone.MidSideSplit,Tone.AudioNode);/**
		 *  clean up
		 *  @returns {Tone.MidSideSplit} this
		 */Tone.MidSideSplit.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this.mid.dispose();this.mid=null;this.side.dispose();this.side=null;this._midAdd.dispose();this._midAdd=null;this._sideSubtract.dispose();this._sideSubtract=null;this._split.dispose();this._split=null;return this;};return Tone.MidSideSplit;});Module(function(Tone){/**
		 *  @class Mid/Side processing separates the the 'mid' signal
		 *         (which comes out of both the left and the right channel)
		 *         and the 'side' (which only comes out of the the side channels).
		 *         MidSideMerge merges the mid and side signal after they've been seperated
		 *         by Tone.MidSideSplit.<br><br>
		 *         <code>
		 *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>
		 *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>
		 *         </code>
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 */Tone.MidSideMerge=function(){Tone.AudioNode.call(this);this.createInsOuts(2,0);/**
			 *  The mid signal input. Alias for
			 *  <code>input[0]</code>
			 *  @type  {Tone.Gain}
			 */this.mid=this.input[0]=new Tone.Gain();/**
			 *  recombine the mid/side into Left
			 *  @type {Tone.Add}
			 *  @private
			 */this._left=new Tone.Add();/**
			 * Multiply the left by sqrt(1/2)
			 * @type {Tone.Multiply}
			 */this._timesTwoLeft=new Tone.Multiply(Math.SQRT1_2);/**
			 *  The side signal input. Alias for
			 *  <code>input[1]</code>
			 *  @type  {Tone.Gain}
			 */this.side=this.input[1]=new Tone.Gain();/**
			 *  recombine the mid/side into Right
			 *  @type {Tone.Subtract}
			 *  @private
			 */this._right=new Tone.Subtract();/**
			 * Multiply the right by sqrt(1/2)
			 * @type {Tone.Multiply}
			 */this._timesTwoRight=new Tone.Multiply(Math.SQRT1_2);/**
			 *  Merge the left/right signal back into a stereo signal.
			 *  @type {Tone.Merge}
			 *  @private
			 */this._merge=this.output=new Tone.Merge();this.mid.connect(this._left,0,0);this.side.connect(this._left,0,1);this.mid.connect(this._right,0,0);this.side.connect(this._right,0,1);this._left.connect(this._timesTwoLeft);this._right.connect(this._timesTwoRight);this._timesTwoLeft.connect(this._merge,0,0);this._timesTwoRight.connect(this._merge,0,1);};Tone.extend(Tone.MidSideMerge,Tone.AudioNode);/**
		 *  clean up
		 *  @returns {Tone.MidSideMerge} this
		 */Tone.MidSideMerge.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this.mid.dispose();this.mid=null;this.side.dispose();this.side=null;this._left.dispose();this._left=null;this._timesTwoLeft.dispose();this._timesTwoLeft=null;this._right.dispose();this._right=null;this._timesTwoRight.dispose();this._timesTwoRight=null;this._merge.dispose();this._merge=null;return this;};return Tone.MidSideMerge;});Module(function(Tone){/**
		 *  @class Tone.MidSideCompressor applies two different compressors to the mid
		 *         and side signal components. See Tone.MidSideSplit.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @param {Object} options The options that are passed to the mid and side
		 *                          compressors.
		 *  @constructor
		 */Tone.MidSideCompressor=function(options){Tone.AudioNode.call(this);options=Tone.defaultArg(options,Tone.MidSideCompressor.defaults);/**
			 *  the mid/side split
			 *  @type  {Tone.MidSideSplit}
			 *  @private
			 */this._midSideSplit=this.input=new Tone.MidSideSplit();/**
			 *  the mid/side recombination
			 *  @type  {Tone.MidSideMerge}
			 *  @private
			 */this._midSideMerge=this.output=new Tone.MidSideMerge();/**
			 *  The compressor applied to the mid signal
			 *  @type  {Tone.Compressor}
			 */this.mid=new Tone.Compressor(options.mid);/**
			 *  The compressor applied to the side signal
			 *  @type  {Tone.Compressor}
			 */this.side=new Tone.Compressor(options.side);this._midSideSplit.mid.chain(this.mid,this._midSideMerge.mid);this._midSideSplit.side.chain(this.side,this._midSideMerge.side);this._readOnly(['mid','side']);};Tone.extend(Tone.MidSideCompressor,Tone.AudioNode);/**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */Tone.MidSideCompressor.defaults={'mid':{'ratio':3,'threshold':-24,'release':0.03,'attack':0.02,'knee':16},'side':{'ratio':6,'threshold':-30,'release':0.25,'attack':0.03,'knee':10}};/**
		 *  Clean up.
		 *  @returns {Tone.MidSideCompressor} this
		 */Tone.MidSideCompressor.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._writable(['mid','side']);this.mid.dispose();this.mid=null;this.side.dispose();this.side=null;this._midSideSplit.dispose();this._midSideSplit=null;this._midSideMerge.dispose();this._midSideMerge=null;return this;};return Tone.MidSideCompressor;});Module(function(Tone){/**
		 *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal
		 *         where both left and right channels have the same value. This can be useful
		 *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 */Tone.Mono=function(){Tone.AudioNode.call(this);this.createInsOuts(1,0);/**
			 *  merge the signal
			 *  @type {Tone.Merge}
			 *  @private
			 */this._merge=this.output=new Tone.Merge();this.input.connect(this._merge,0,0);this.input.connect(this._merge,0,1);};Tone.extend(Tone.Mono,Tone.AudioNode);/**
		 *  clean up
		 *  @returns {Tone.Mono} this
		 */Tone.Mono.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._merge.dispose();this._merge=null;return this;};return Tone.Mono;});Module(function(Tone){/**
		 *  @class A compressor with seperate controls over low/mid/high dynamics
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Object} options The low/mid/high compressor settings.
		 *  @example
		 *  var multiband = new Tone.MultibandCompressor({
		 *  	"lowFrequency" : 200,
		 *  	"highFrequency" : 1300
		 *  	"low" : {
		 *  		"threshold" : -12
		 *  	}
		 *  })
		 */Tone.MultibandCompressor=function(options){Tone.AudioNode.call(this);options=Tone.defaultArg(arguments,Tone.MultibandCompressor.defaults);/**
			 *  split the incoming signal into high/mid/low
			 *  @type {Tone.MultibandSplit}
			 *  @private
			 */this._splitter=this.input=new Tone.MultibandSplit({'lowFrequency':options.lowFrequency,'highFrequency':options.highFrequency});/**
			 *  low/mid crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */this.lowFrequency=this._splitter.lowFrequency;/**
			 *  mid/high crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */this.highFrequency=this._splitter.highFrequency;/**
			 *  the output
			 *  @type {Tone.Gain}
			 *  @private
			 */this.output=new Tone.Gain();/**
			 *  The compressor applied to the low frequencies.
			 *  @type {Tone.Compressor}
			 */this.low=new Tone.Compressor(options.low);/**
			 *  The compressor applied to the mid frequencies.
			 *  @type {Tone.Compressor}
			 */this.mid=new Tone.Compressor(options.mid);/**
			 *  The compressor applied to the high frequencies.
			 *  @type {Tone.Compressor}
			 */this.high=new Tone.Compressor(options.high);//connect the compressor
this._splitter.low.chain(this.low,this.output);this._splitter.mid.chain(this.mid,this.output);this._splitter.high.chain(this.high,this.output);this._readOnly(['high','mid','low','highFrequency','lowFrequency']);};Tone.extend(Tone.MultibandCompressor,Tone.AudioNode);/**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */Tone.MultibandCompressor.defaults={'low':Tone.Compressor.defaults,'mid':Tone.Compressor.defaults,'high':Tone.Compressor.defaults,'lowFrequency':250,'highFrequency':2000};/**
		 *  clean up
		 *  @returns {Tone.MultibandCompressor} this
		 */Tone.MultibandCompressor.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._splitter.dispose();this._writable(['high','mid','low','highFrequency','lowFrequency']);this.low.dispose();this.mid.dispose();this.high.dispose();this._splitter=null;this.low=null;this.mid=null;this.high=null;this.lowFrequency=null;this.highFrequency=null;return this;};return Tone.MultibandCompressor;});Module(function(Tone){if(Tone.supported&&!window.StereoPannerNode){/**
			 * @class Shimmed StereoPannerNode
			 * @param  {AudioContext} context
			 * @private
			 */var StereoPannerNode=function StereoPannerNode(context){/**
				 * The audio context
				 * @type {AudioContext}
				 */this.context=context;/**
				 * The left/right panning. [-1, 1]
				 * @type {AudioRange}
				 * @signal
				 */this.pan=new Tone.Signal(0,Tone.Type.AudioRange);/**
				 * Equal power scaling of the right gain
				 * @type {Tone.WaveShaper}
				 */var rightWaveShaper=new Tone.WaveShaper(function(val){return Tone.equalPowerScale((val+1)/2);},4096);/**
				 * Equal power scaling of the left gain
				 * @type {Tone.WaveShaper}
				 * @private
				 */var leftWaveShaper=new Tone.WaveShaper(function(val){return Tone.equalPowerScale(1-(val+1)/2);},4096);/**
				 * The left gain value
				 * @type {Tone.Gain}
				 * @private
				 */var leftGain=new Tone.Gain();/**
				 * The right gain value
				 * @type {Tone.Gain}
				 * @private
				 */var rightGain=new Tone.Gain();/**
				 * Split the incoming signal
				 * @type {Tone.Split}
				 * @private
				 */var split=this.input=new Tone.Split();/**
				 * Keeps the waveshapers from optimizing 0s
				 * @type {Tone.Zero}
				 * @private
				 */var zero=new Tone.Zero();zero.fan(rightWaveShaper,leftWaveShaper);/**
				 * Merge the outgoing signal
				 * @type {Tone.Merge}
				 * @private
				 */var merge=this.output=new Tone.Merge();//connections
split.left.chain(leftGain,merge.left);split.right.chain(rightGain,merge.right);this.pan.chain(leftWaveShaper,leftGain.gain);this.pan.chain(rightWaveShaper,rightGain.gain);};StereoPannerNode.prototype.disconnect=function(){this.output.disconnect.apply(this.output,arguments);};StereoPannerNode.prototype.connect=function(){this.output.connect.apply(this.output,arguments);};//add it to the AudioContext
AudioContext.prototype.createStereoPanner=function(){return new StereoPannerNode(this);};Tone.Context.prototype.createStereoPanner=function(){return new StereoPannerNode(this);};}});Module(function(Tone){/**
		 *  @class  Tone.Panner is an equal power Left/Right Panner and does not
		 *          support 3D. Panner uses the StereoPannerNode when available.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {NormalRange} [initialPan=0] The initail panner value (center).
		 *  @example
		 *  //pan the input signal hard right.
		 *  var panner = new Tone.Panner(1);
		 */Tone.Panner=function(initialPan){Tone.AudioNode.call(this);/**
			*  the panner node
			*  @type {StereoPannerNode}
			*  @private
			*/this._panner=this.input=this.output=this.context.createStereoPanner();/**
			*  The pan control. -1 = hard left, 1 = hard right.
			*  @type {AudioRange}
			*  @signal
			*/this.pan=this._panner.pan;//initial value
this.pan.value=Tone.defaultArg(initialPan,0);this._readOnly('pan');};Tone.extend(Tone.Panner,Tone.AudioNode);/**
		 *  Clean up.
		 *  @returns {Tone.Panner} this
		 */Tone.Panner.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._writable('pan');this._panner.disconnect();this._panner=null;this.pan=null;return this;};return Tone.Panner;});Module(function(Tone){/**
		 *  @class  A spatialized panner node which supports equalpower or HRTF panning.
		 *          Tries to normalize the API across various browsers. See Tone.Listener
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Number} positionX The initial x position.
		 *  @param {Number} positionY The initial y position.
		 *  @param {Number} positionZ The initial z position.
		 */Tone.Panner3D=function(){var options=Tone.defaults(arguments,['positionX','positionY','positionZ'],Tone.Panner3D);Tone.AudioNode.call(this);/**
			 *  The panner node
			 *  @type {PannerNode}
			 *  @private
			 */this._panner=this.input=this.output=this.context.createPanner();//set some values
this._panner.panningModel=options.panningModel;this._panner.maxDistance=options.maxDistance;this._panner.distanceModel=options.distanceModel;this._panner.coneOuterGain=options.coneOuterGain;this._panner.coneOuterAngle=options.coneOuterAngle;this._panner.coneInnerAngle=options.coneInnerAngle;this._panner.refDistance=options.refDistance;this._panner.rolloffFactor=options.rolloffFactor;/**
			 *  Holds the current orientation
			 *  @type  {Array}
			 *  @private
			 */this._orientation=[options.orientationX,options.orientationY,options.orientationZ];/**
			 *  Holds the current position
			 *  @type  {Array}
			 *  @private
			 */this._position=[options.positionX,options.positionY,options.positionZ];// set the default position/orientation
this.orientationX=options.orientationX;this.orientationY=options.orientationY;this.orientationZ=options.orientationZ;this.positionX=options.positionX;this.positionY=options.positionY;this.positionZ=options.positionZ;};Tone.extend(Tone.Panner3D,Tone.AudioNode);/**
		 *  Defaults according to the specification
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.Panner3D.defaults={'positionX':0,'positionY':0,'positionZ':0,'orientationX':0,'orientationY':0,'orientationZ':0,'panningModel':'equalpower','maxDistance':10000,'distanceModel':'inverse','coneOuterGain':0,'coneOuterAngle':360,'coneInnerAngle':360,'refDistance':1,'rolloffFactor':1};/**
		 * The ramp time which is applied to the setTargetAtTime
		 * @type {Number}
		 * @private
		 */Tone.Panner3D.prototype._rampTimeConstant=0.01;/**
		 *  Sets the position of the source in 3d space.
		 *  @param  {Number}  x
		 *  @param  {Number}  y
		 *  @param  {Number}  z
		 *  @return {Tone.Panner3D} this
		 */Tone.Panner3D.prototype.setPosition=function(x,y,z){if(this._panner.positionX){var now=this.now();this._panner.positionX.setTargetAtTime(x,now,this._rampTimeConstant);this._panner.positionY.setTargetAtTime(y,now,this._rampTimeConstant);this._panner.positionZ.setTargetAtTime(z,now,this._rampTimeConstant);}else{this._panner.setPosition(x,y,z);}this._position=Array.prototype.slice.call(arguments);return this;};/**
		 *  Sets the orientation of the source in 3d space.
		 *  @param  {Number}  x
		 *  @param  {Number}  y
		 *  @param  {Number}  z
		 *  @return {Tone.Panner3D} this
		 */Tone.Panner3D.prototype.setOrientation=function(x,y,z){if(this._panner.orientationX){var now=this.now();this._panner.orientationX.setTargetAtTime(x,now,this._rampTimeConstant);this._panner.orientationY.setTargetAtTime(y,now,this._rampTimeConstant);this._panner.orientationZ.setTargetAtTime(z,now,this._rampTimeConstant);}else{this._panner.setOrientation(x,y,z);}this._orientation=Array.prototype.slice.call(arguments);return this;};/**
		 *  The x position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name positionX
		 */Object.defineProperty(Tone.Panner3D.prototype,'positionX',{set:function set(pos){this._position[0]=pos;this.setPosition.apply(this,this._position);},get:function get(){return this._position[0];}});/**
		 *  The y position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name positionY
		 */Object.defineProperty(Tone.Panner3D.prototype,'positionY',{set:function set(pos){this._position[1]=pos;this.setPosition.apply(this,this._position);},get:function get(){return this._position[1];}});/**
		 *  The z position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name positionZ
		 */Object.defineProperty(Tone.Panner3D.prototype,'positionZ',{set:function set(pos){this._position[2]=pos;this.setPosition.apply(this,this._position);},get:function get(){return this._position[2];}});/**
		 *  The x orientation of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name orientationX
		 */Object.defineProperty(Tone.Panner3D.prototype,'orientationX',{set:function set(pos){this._orientation[0]=pos;this.setOrientation.apply(this,this._orientation);},get:function get(){return this._orientation[0];}});/**
		 *  The y orientation of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name orientationY
		 */Object.defineProperty(Tone.Panner3D.prototype,'orientationY',{set:function set(pos){this._orientation[1]=pos;this.setOrientation.apply(this,this._orientation);},get:function get(){return this._orientation[1];}});/**
		 *  The z orientation of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name orientationZ
		 */Object.defineProperty(Tone.Panner3D.prototype,'orientationZ',{set:function set(pos){this._orientation[2]=pos;this.setOrientation.apply(this,this._orientation);},get:function get(){return this._orientation[2];}});/**
		 *  Proxy a property on the panner to an exposed public propery
		 *  @param  {String}  prop
		 *  @private
		 */Tone.Panner3D._aliasProperty=function(prop){Object.defineProperty(Tone.Panner3D.prototype,prop,{set:function set(val){this._panner[prop]=val;},get:function get(){return this._panner[prop];}});};/**
		 *  The panning model. Either "equalpower" or "HRTF".
		 *  @type {String}
		 *  @memberOf Tone.Panner3D#
		 *  @name panningModel
		 */Tone.Panner3D._aliasProperty('panningModel');/**
		 *  A reference distance for reducing volume as source move further from the listener
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name refDistance
		 */Tone.Panner3D._aliasProperty('refDistance');/**
		 *  Describes how quickly the volume is reduced as source moves away from listener.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name rolloffFactor
		 */Tone.Panner3D._aliasProperty('rolloffFactor');/**
		 *  The distance model used by,  "linear", "inverse", or "exponential".
		 *  @type {String}
		 *  @memberOf Tone.Panner3D#
		 *  @name distanceModel
		 */Tone.Panner3D._aliasProperty('distanceModel');/**
		 *  The angle, in degrees, inside of which there will be no volume reduction
		 *  @type {Degrees}
		 *  @memberOf Tone.Panner3D#
		 *  @name coneInnerAngle
		 */Tone.Panner3D._aliasProperty('coneInnerAngle');/**
		 *  The angle, in degrees, outside of which the volume will be reduced
		 *  to a constant value of coneOuterGain
		 *  @type {Degrees}
		 *  @memberOf Tone.Panner3D#
		 *  @name coneOuterAngle
		 */Tone.Panner3D._aliasProperty('coneOuterAngle');/**
		 *  The gain outside of the coneOuterAngle
		 *  @type {Gain}
		 *  @memberOf Tone.Panner3D#
		 *  @name coneOuterGain
		 */Tone.Panner3D._aliasProperty('coneOuterGain');/**
		 *  The maximum distance between source and listener,
		 *  after which the volume will not be reduced any further.
		 *  @type {Positive}
		 *  @memberOf Tone.Panner3D#
		 *  @name maxDistance
		 */Tone.Panner3D._aliasProperty('maxDistance');/**
		 *  Clean up.
		 *  @returns {Tone.Panner3D} this
		 */Tone.Panner3D.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._panner.disconnect();this._panner=null;this._orientation=null;this._position=null;return this;};return Tone.Panner3D;});Module(function(Tone){/**
		 *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {AudioRange} pan the initial pan
		 *  @param {number} volume The output volume.
		 *  @example
		 * //pan the incoming signal left and drop the volume
		 * var panVol = new Tone.PanVol(-0.25, -12);
		 */Tone.PanVol=function(){var options=Tone.defaults(arguments,['pan','volume'],Tone.PanVol);Tone.AudioNode.call(this);/**
			 *  The panning node
			 *  @type {Tone.Panner}
			 *  @private
			 */this._panner=this.input=new Tone.Panner(options.pan);/**
			 *  The L/R panning control.
			 *  @type {AudioRange}
			 *  @signal
			 */this.pan=this._panner.pan;/**
			 *  The volume node
			 *  @type {Tone.Volume}
			 *  @private
			 */this._volume=this.output=new Tone.Volume(options.volume);/**
			 *  The volume control in decibels.
			 *  @type {Decibels}
			 *  @signal
			 */this.volume=this._volume.volume;//connections
this._panner.connect(this._volume);this.mute=options.mute;this._readOnly(['pan','volume']);};Tone.extend(Tone.PanVol,Tone.AudioNode);/**
		 *  The defaults
		 *  @type  {Object}
		 *  @const
		 *  @static
		 */Tone.PanVol.defaults={'pan':0,'volume':0,'mute':false};/**
		 * Mute/unmute the volume
		 * @memberOf Tone.PanVol#
		 * @name mute
		 * @type {Boolean}
		 */Object.defineProperty(Tone.PanVol.prototype,'mute',{get:function get(){return this._volume.mute;},set:function set(mute){this._volume.mute=mute;}});/**
		 *  clean up
		 *  @returns {Tone.PanVol} this
		 */Tone.PanVol.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._writable(['pan','volume']);this._panner.dispose();this._panner=null;this.pan=null;this._volume.dispose();this._volume=null;this.volume=null;return this;};return Tone.PanVol;});Module(function(Tone){/**
		 *  @class Tone.Solo lets you isolate a specific audio stream. When
		 *         an instance is set to `solo=true`, it will mute all other instances.
		 *  @extends {Tone.AudioNode}
		 *  @example
		 * var soloA = new Tone.Solo()
		 * var soloB = new Tone.Solo()
		 * soloA.solo = true
		 * //no audio will pass through soloB
		 */Tone.Solo=function(){var options=Tone.defaults(arguments,['solo'],Tone.Solo);Tone.AudioNode.call(this);/**
			 *  The input and output node
			 *  @type  {Tone.Gain}
			 */this.input=this.output=new Tone.Gain();/**
			 *  A bound _soloed method
			 *  @type  {Function}
			 *  @private
			 */this._soloBind=this._soloed.bind(this);//listen for solo events class-wide.
this.context.on('solo',this._soloBind);//set initially
this.solo=options.solo;};Tone.extend(Tone.Solo,Tone.AudioNode);/**
		 *  The defaults
		 *  @type  {Object}
		 *  @static
		 */Tone.Solo.defaults={solo:false};/**
		 *  Isolates this instance and mutes all other instances of Tone.Solo.
		 *  Only one instance can be soloed at a time. A soloed
		 *  instance will report `solo=false` when another instance is soloed.
		 *  @memberOf Tone.Solo#
		 *  @type {Boolean}
		 *  @name solo
		 */Object.defineProperty(Tone.Solo.prototype,'solo',{get:function get(){return this._isSoloed();},set:function set(solo){if(solo){this._addSolo();}else{this._removeSolo();}this.context.emit('solo',this);}});/**
		 *  If the current instance is muted, i.e. another instance is soloed
		 *  @memberOf Tone.Solo#
		 *  @type {Boolean}
		 *  @name muted
		 *  @readOnly
		 */Object.defineProperty(Tone.Solo.prototype,'muted',{get:function get(){return this.input.gain.value===0;}});/**
		 * Add this to the soloed array
		 * @private
		 */Tone.Solo.prototype._addSolo=function(){if(!Tone.isArray(this.context._currentSolo)){this.context._currentSolo=[];}if(!this._isSoloed()){this.context._currentSolo.push(this);}};/**
		 * Remove this from the soloed array
		 * @private
		 */Tone.Solo.prototype._removeSolo=function(){if(this._isSoloed()){var index=this.context._currentSolo.indexOf(this);this.context._currentSolo.splice(index,1);}};/**
		 * @return {Boolean} Is this on the soloed array
		 * @private
		 */Tone.Solo.prototype._isSoloed=function(){if(Tone.isArray(this.context._currentSolo)){return this.context._currentSolo.length!==0&&this.context._currentSolo.indexOf(this)!==-1;}else{return false;}};/**
		 * @return {Boolean} Returns true if no one is soloed
		 * @private
		 */Tone.Solo.prototype._noSolos=function(){return!Tone.isArray(this.context._currentSolo)||this.context._currentSolo.length===0;};/**
		 *  Solo the current instance and unsolo all other instances.
		 *  @param  {Tone.Solo}  instance  The instance which is being soloed/unsoloed.
		 *  @private
		 */Tone.Solo.prototype._soloed=function(){if(this._isSoloed()){this.input.gain.value=1;}else if(this._noSolos()){//no one is soloed
this.input.gain.value=1;}else{this.input.gain.value=0;}};/**
		 *  Clean up
		 *  @return  {Tone.Solo}  this
		 */Tone.Solo.prototype.dispose=function(){this.context.off('solo',this._soloBind);this._removeSolo();this._soloBind=null;Tone.AudioNode.prototype.dispose.call(this);return this;};return Tone.Solo;});Module(function(Tone){/**
		 *  @class  Get the current waveform data of the connected audio source.
		 *  @extends {Tone.AudioNode}
		 *  @param {Number=} size The size of the FFT. Value must be a power of
		 *                       two in the range 32 to 32768.
		 */Tone.Waveform=function(){var options=Tone.defaults(arguments,['size'],Tone.Waveform);options.type=Tone.Analyser.Type.Waveform;Tone.AudioNode.call(this);/**
			 *  The analyser node.
			 *  @private
			 *  @type {Tone.Analyser}
			 */this._analyser=this.input=this.output=new Tone.Analyser(options);};Tone.extend(Tone.Waveform,Tone.AudioNode);/**
		 *  The default values.
		 *  @type {Object}
		 *  @const
		 */Tone.Waveform.defaults={'size':1024};/**
		 *  Gets the waveform of the audio source. Returns the waveform data
		 *  of length [size](#size) as a Float32Array with values between -1 and 1.
		 *  @returns {TypedArray}
		 */Tone.Waveform.prototype.getValue=function(){return this._analyser.getValue();};/**
		 *  The size of analysis. This must be a power of two in the range 32 to 32768.
		 *  @memberOf Tone.Waveform#
		 *  @type {Number}
		 *  @name size
		 */Object.defineProperty(Tone.Waveform.prototype,'size',{get:function get(){return this._analyser.size;},set:function set(size){this._analyser.size=size;}});/**
		 *  Clean up.
		 *  @return  {Tone.Waveform}  this
		 */Tone.Waveform.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._analyser.dispose();this._analyser=null;};return Tone.Waveform;});Module(function(Tone){/**
		 *  @class Tone.CtrlInterpolate will interpolate between given values based
		 *         on the "index" property. Passing in an array or object literal
		 *         will interpolate each of the parameters. Note (i.e. "C3")
		 *         and Time (i.e. "4n + 2") can be interpolated. All other values are
		 *         assumed to be numbers. 
		 *  @example
		 * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);
		 * interp.index = 0.75;
		 * interp.value; //returns 1.5
		 *
		 *  @example
		 * var interp = new Tone.CtrlInterpolate([
		 * 	[2, 4, 5],
		 * 	[9, 3, 2],
		 * ]);
		 * @param {Array} values The array of values to interpolate over
		 * @param {Positive} index The initial interpolation index.
		 * @extends {Tone}
		 */Tone.CtrlInterpolate=function(){var options=Tone.defaults(arguments,['values','index'],Tone.CtrlInterpolate);Tone.call(this);/**
			 *  The values to interpolate between
			 *  @type  {Array}
			 */this.values=options.values;/**
			 *  The interpolated index between values. For example: a value of 1.5
			 *  would interpolate equally between the value at index 1
			 *  and the value at index 2. 
			 *  @example
			 * interp.index = 0; 
			 * interp.value; //returns the value at 0
			 * interp.index = 0.5;
			 * interp.value; //returns the value between indices 0 and 1. 
			 *  @type  {Positive}
			 */this.index=options.index;};Tone.extend(Tone.CtrlInterpolate);/**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */Tone.CtrlInterpolate.defaults={'index':0,'values':[]};/**
		 *  The current interpolated value based on the index
		 *  @readOnly
		 *  @memberOf Tone.CtrlInterpolate#
		 *  @type {*}
		 *  @name value
		 */Object.defineProperty(Tone.CtrlInterpolate.prototype,'value',{get:function get(){var index=this.index;index=Math.min(index,this.values.length-1);var lowerPosition=Math.floor(index);var lower=this.values[lowerPosition];var upper=this.values[Math.ceil(index)];return this._interpolate(index-lowerPosition,lower,upper);}});/**
		 *  Internal interpolation routine
		 *  @param  {NormalRange}  index  The index between the lower and upper
		 *  @param  {*}  lower 
		 *  @param  {*}  upper 
		 *  @return  {*}  The interpolated value
		 *  @private
		 */Tone.CtrlInterpolate.prototype._interpolate=function(index,lower,upper){if(Tone.isArray(lower)){var retArray=[];for(var i=0;i<lower.length;i++){retArray[i]=this._interpolate(index,lower[i],upper[i]);}return retArray;}else if(Tone.isObject(lower)){var retObj={};for(var attr in lower){retObj[attr]=this._interpolate(index,lower[attr],upper[attr]);}return retObj;}else{lower=this._toNumber(lower);upper=this._toNumber(upper);return(1-index)*lower+index*upper;}};/**
		 *  Convert from the given type into a number
		 *  @param  {Number|String}  value
		 *  @return  {Number}
		 *  @private
		 */Tone.CtrlInterpolate.prototype._toNumber=function(val){if(Tone.isNumber(val)){return val;}else{//otherwise assume that it's Time...
return this.toSeconds(val);}};/**
		 *  Clean up
		 *  @return  {Tone.CtrlInterpolate}  this
		 */Tone.CtrlInterpolate.prototype.dispose=function(){this.values=null;};return Tone.CtrlInterpolate;});Module(function(Tone){/**
		 *  @class Tone.CtrlMarkov represents a Markov Chain where each call
		 *         to Tone.CtrlMarkov.next will move to the next state. If the next
		 *         state choice is an array, the next state is chosen randomly with
		 *         even probability for all of the choices. For a weighted probability
		 *         of the next choices, pass in an object with "state" and "probability" attributes. 
		 *         The probabilities will be normalized and then chosen. If no next options
		 *         are given for the current state, the state will stay there. 
		 *  @extends {Tone}
		 *  @example
		 * var chain = new Tone.CtrlMarkov({
		 * 	"beginning" : ["end", "middle"],
		 * 	"middle" : "end"
		 * });
		 * chain.value = "beginning";
		 * chain.next(); //returns "end" or "middle" with 50% probability
		 *
		 *  @example
		 * var chain = new Tone.CtrlMarkov({
		 * 	"beginning" : [{"value" : "end", "probability" : 0.8}, 
		 * 					{"value" : "middle", "probability" : 0.2}],
		 * 	"middle" : "end"
		 * });
		 * chain.value = "beginning";
		 * chain.next(); //returns "end" with 80% probability or "middle" with 20%.
		 *  @param {Object} values An object with the state names as the keys
		 *                         and the next state(s) as the values. 
		 */Tone.CtrlMarkov=function(values,initial){Tone.call(this);/**
			 *  The Markov values with states as the keys
			 *  and next state(s) as the values. 
			 *  @type {Object}
			 */this.values=Tone.defaultArg(values,{});/**
			 *  The current state of the Markov values. The next
			 *  state will be evaluated and returned when Tone.CtrlMarkov.next
			 *  is invoked.
			 *  @type {String}
			 */this.value=Tone.defaultArg(initial,Object.keys(this.values)[0]);};Tone.extend(Tone.CtrlMarkov);/**
		 *  Returns the next state of the Markov values. 
		 *  @return  {String}
		 */Tone.CtrlMarkov.prototype.next=function(){if(this.values.hasOwnProperty(this.value)){var next=this.values[this.value];if(Tone.isArray(next)){var distribution=this._getProbDistribution(next);var rand=Math.random();var total=0;for(var i=0;i<distribution.length;i++){var dist=distribution[i];if(rand>total&&rand<total+dist){var chosen=next[i];if(Tone.isObject(chosen)){this.value=chosen.value;}else{this.value=chosen;}}total+=dist;}}else{this.value=next;}}return this.value;};/**
		 *  Choose randomly from an array weighted options in the form 
		 *  {"state" : string, "probability" : number} or an array of values
		 *  @param  {Array}  options 
		 *  @return  {Array}  The randomly selected choice
		 *  @private
		 */Tone.CtrlMarkov.prototype._getProbDistribution=function(options){var distribution=[];var total=0;var needsNormalizing=false;for(var i=0;i<options.length;i++){var option=options[i];if(Tone.isObject(option)){needsNormalizing=true;distribution[i]=option.probability;}else{distribution[i]=1/options.length;}total+=distribution[i];}if(needsNormalizing){//normalize the values
for(var j=0;j<distribution.length;j++){distribution[j]=distribution[j]/total;}}return distribution;};/**
		 *  Clean up
		 *  @return  {Tone.CtrlMarkov}  this
		 */Tone.CtrlMarkov.prototype.dispose=function(){this.values=null;};return Tone.CtrlMarkov;});Module(function(Tone){/**
		 *  @class Generate patterns from an array of values.
		 *         Has a number of arpeggiation and randomized
		 *         selection patterns. 
		 *           <ul>
		 *  	        <li>"up" - cycles upward</li>
		 *  			<li>"down" - cycles downward</li>
		 *  			<li>"upDown" - up then and down</li>
		 *  			<li>"downUp" - cycles down then and up</li>
		 *  			<li>"alternateUp" - jump up two and down one</li>
		 *  			<li>"alternateDown" - jump down two and up one</li>
		 *  			<li>"random" - randomly select an index</li>
		 *  			<li>"randomWalk" - randomly moves one index away from the current position</li>
		 *  			<li>"randomOnce" - randomly select an index without repeating until all values have been chosen.</li>
		 *     		</ul>
		 *  @param  {Array}  values   An array of options to choose from.
		 *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.
		 *  @extends {Tone}
		 */Tone.CtrlPattern=function(){var options=Tone.defaults(arguments,['values','type'],Tone.CtrlPattern);Tone.call(this);/**
			 *  The array of values to arpeggiate over
			 *  @type {Array}
			 */this.values=options.values;/**
			 *  The current position in the values array
			 *  @type  {Number}
			 */this.index=0;/**
			 *  The type placeholder
			 *  @type {Tone.CtrlPattern.Type}
			 *  @private
			 */this._type=null;/**
			 *  Shuffled values for the RandomOnce type
			 *  @type {Array}
			 *  @private
			 */this._shuffled=null;/**
			 *  The direction of the movement
			 *  @type {String}
			 *  @private
			 */this._direction=null;this.type=options.type;};Tone.extend(Tone.CtrlPattern);/**
		 *  The Control Patterns
		 *  @type  {Object}
		 *  @static
		 */Tone.CtrlPattern.Type={Up:'up',Down:'down',UpDown:'upDown',DownUp:'downUp',AlternateUp:'alternateUp',AlternateDown:'alternateDown',Random:'random',RandomWalk:'randomWalk',RandomOnce:'randomOnce'};/**
		 *  The default values. 
		 *  @type  {Object}
		 */Tone.CtrlPattern.defaults={'type':Tone.CtrlPattern.Type.Up,'values':[]};/**
		 *  The value at the current index of the pattern.
		 *  @readOnly
		 *  @memberOf Tone.CtrlPattern#
		 *  @type {*}
		 *  @name value
		 */Object.defineProperty(Tone.CtrlPattern.prototype,'value',{get:function get(){//some safeguards
if(this.values.length===0){return;}else if(this.values.length===1){return this.values[0];}this.index=Math.min(this.index,this.values.length-1);var val=this.values[this.index];if(this.type===Tone.CtrlPattern.Type.RandomOnce){if(this.values.length!==this._shuffled.length){this._shuffleValues();}val=this.values[this._shuffled[this.index]];}return val;}});/**
		 *  The pattern used to select the next
		 *  item from the values array
		 *  @memberOf Tone.CtrlPattern#
		 *  @type {Tone.CtrlPattern.Type}
		 *  @name type
		 */Object.defineProperty(Tone.CtrlPattern.prototype,'type',{get:function get(){return this._type;},set:function set(type){this._type=type;this._shuffled=null;//the first index
if(this._type===Tone.CtrlPattern.Type.Up||this._type===Tone.CtrlPattern.Type.UpDown||this._type===Tone.CtrlPattern.Type.RandomOnce||this._type===Tone.CtrlPattern.Type.AlternateUp){this.index=0;}else if(this._type===Tone.CtrlPattern.Type.Down||this._type===Tone.CtrlPattern.Type.DownUp||this._type===Tone.CtrlPattern.Type.AlternateDown){this.index=this.values.length-1;}//the direction
if(this._type===Tone.CtrlPattern.Type.UpDown||this._type===Tone.CtrlPattern.Type.AlternateUp){this._direction=Tone.CtrlPattern.Type.Up;}else if(this._type===Tone.CtrlPattern.Type.DownUp||this._type===Tone.CtrlPattern.Type.AlternateDown){this._direction=Tone.CtrlPattern.Type.Down;}//randoms
if(this._type===Tone.CtrlPattern.Type.RandomOnce){this._shuffleValues();}else if(this._type===Tone.CtrlPattern.Random){this.index=Math.floor(Math.random()*this.values.length);}}});/**
		 *  Return the next value given the current position
		 *  and pattern.
		 *  @return {*} The next value
		 */Tone.CtrlPattern.prototype.next=function(){var type=this.type;//choose the next index
if(type===Tone.CtrlPattern.Type.Up){this.index++;if(this.index>=this.values.length){this.index=0;}}else if(type===Tone.CtrlPattern.Type.Down){this.index--;if(this.index<0){this.index=this.values.length-1;}}else if(type===Tone.CtrlPattern.Type.UpDown||type===Tone.CtrlPattern.Type.DownUp){if(this._direction===Tone.CtrlPattern.Type.Up){this.index++;}else{this.index--;}if(this.index<0){this.index=1;this._direction=Tone.CtrlPattern.Type.Up;}else if(this.index>=this.values.length){this.index=this.values.length-2;this._direction=Tone.CtrlPattern.Type.Down;}}else if(type===Tone.CtrlPattern.Type.Random){this.index=Math.floor(Math.random()*this.values.length);}else if(type===Tone.CtrlPattern.Type.RandomWalk){if(Math.random()<0.5){this.index--;this.index=Math.max(this.index,0);}else{this.index++;this.index=Math.min(this.index,this.values.length-1);}}else if(type===Tone.CtrlPattern.Type.RandomOnce){this.index++;if(this.index>=this.values.length){this.index=0;//reshuffle the values for next time
this._shuffleValues();}}else if(type===Tone.CtrlPattern.Type.AlternateUp){if(this._direction===Tone.CtrlPattern.Type.Up){this.index+=2;this._direction=Tone.CtrlPattern.Type.Down;}else{this.index-=1;this._direction=Tone.CtrlPattern.Type.Up;}if(this.index>=this.values.length){this.index=0;this._direction=Tone.CtrlPattern.Type.Up;}}else if(type===Tone.CtrlPattern.Type.AlternateDown){if(this._direction===Tone.CtrlPattern.Type.Up){this.index+=1;this._direction=Tone.CtrlPattern.Type.Down;}else{this.index-=2;this._direction=Tone.CtrlPattern.Type.Up;}if(this.index<0){this.index=this.values.length-1;this._direction=Tone.CtrlPattern.Type.Down;}}return this.value;};/**
		 *  Shuffles the values and places the results into the _shuffled
		 *  @private
		 */Tone.CtrlPattern.prototype._shuffleValues=function(){var copy=[];this._shuffled=[];for(var i=0;i<this.values.length;i++){copy[i]=i;}while(copy.length>0){var randVal=copy.splice(Math.floor(copy.length*Math.random()),1);this._shuffled.push(randVal[0]);}};/**
		 *  Clean up
		 *  @returns {Tone.CtrlPattern} this
		 */Tone.CtrlPattern.prototype.dispose=function(){this._shuffled=null;this.values=null;};return Tone.CtrlPattern;});Module(function(Tone){/**
		 *  @class  Choose a random value.
		 *  @extends {Tone}
		 *  @example
		 * var randomWalk = new Tone.CtrlRandom({
		 * 	"min" : 0,
		 * 	"max" : 10,
		 * 	"integer" : true
		 * });
		 * randomWalk.eval();
		 *
		 *  @param {Number|Time=} min The minimum return value.
		 *  @param {Number|Time=} max The maximum return value.
		 */Tone.CtrlRandom=function(){var options=Tone.defaults(arguments,['min','max'],Tone.CtrlRandom);Tone.call(this);/**
			 *  The minimum return value
			 *  @type  {Number|Time}
			 */this.min=options.min;/**
			 *  The maximum return value
			 *  @type  {Number|Time}
			 */this.max=options.max;/**
			 *  If the return value should be an integer
			 *  @type  {Boolean}
			 */this.integer=options.integer;};Tone.extend(Tone.CtrlRandom);/**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */Tone.CtrlRandom.defaults={'min':0,'max':1,'integer':false};/**
		 *  Return a random value between min and max. 
		 *  @readOnly
		 *  @memberOf Tone.CtrlRandom#
		 *  @type {*}
		 *  @name value
		 */Object.defineProperty(Tone.CtrlRandom.prototype,'value',{get:function get(){var min=this.toSeconds(this.min);var max=this.toSeconds(this.max);var rand=Math.random();var val=rand*min+(1-rand)*max;if(this.integer){val=Math.floor(val);}return val;}});return Tone.CtrlRandom;});Module(function(Tone){/**
		 *  @class A data structure for holding multiple buffers.
		 *  
		 *  @param  {Object|Array}    urls      An object literal or array
		 *                                      of urls to load.
		 *  @param  {Function=}  callback  The callback to invoke when
		 *                                 the buffers are loaded. 
		 *  @extends {Tone}
		 *  @example
		 * //load a whole bank of piano samples
		 * var pianoSamples = new Tone.Buffers({
		 * 	"C4" : "path/to/C4.mp3"
		 * 	"C#4" : "path/to/C#4.mp3"
		 * 	"D4" : "path/to/D4.mp3"
		 * 	"D#4" : "path/to/D#4.mp3"
		 * 	...
		 * }, function(){
		 * 	//play one of the samples when they all load
		 * 	player.buffer = pianoSamples.get("C4");
		 * 	player.start();
		 * });
		 * 	@example
		 * //To pass in additional parameters in the second parameter
		 * var buffers = new Tone.Buffers(urls, {
		 * 	"onload" : callback,
		 * 	"baseUrl" : "../path/to/audio/"
		 * })
		 */Tone.Buffers=function(urls){//remove the urls from the options
var args=Array.prototype.slice.call(arguments);args.shift();var options=Tone.defaults(args,['onload','baseUrl'],Tone.Buffers);Tone.call(this);/**
			 *  All of the buffers
			 *  @type  {Object}
			 *  @private
			 */this._buffers={};/**
			 *  A path which is prefixed before every url.
			 *  @type  {String}
			 */this.baseUrl=options.baseUrl;this._loadingCount=0;//add each one
for(var key in urls){this._loadingCount++;this.add(key,urls[key],this._bufferLoaded.bind(this,options.onload));}};Tone.extend(Tone.Buffers);/**
		 *  Defaults
		 *  @type  {Object}
		 */Tone.Buffers.defaults={'onload':Tone.noOp,'baseUrl':''};/**
		 *  True if the buffers object has a buffer by that name.
		 *  @param  {String|Number}  name  The key or index of the 
		 *                                 buffer.
		 *  @return  {Boolean}
		 */Tone.Buffers.prototype.has=function(name){return this._buffers.hasOwnProperty(name);};/**
		 *  Get a buffer by name. If an array was loaded, 
		 *  then use the array index.
		 *  @param  {String|Number}  name  The key or index of the 
		 *                                 buffer.
		 *  @return  {Tone.Buffer}
		 */Tone.Buffers.prototype.get=function(name){if(this.has(name)){return this._buffers[name];}else{throw new Error('Tone.Buffers: no buffer named '+name);}};/**
		 *  A buffer was loaded. decrement the counter.
		 *  @param  {Function}  callback 
		 *  @private
		 */Tone.Buffers.prototype._bufferLoaded=function(callback){this._loadingCount--;if(this._loadingCount===0&&callback){callback(this);}};/**
		 * If the buffers are loaded or not
		 * @memberOf Tone.Buffers#
		 * @type {Boolean}
		 * @name loaded
		 * @readOnly
		 */Object.defineProperty(Tone.Buffers.prototype,'loaded',{get:function get(){var isLoaded=true;for(var buffName in this._buffers){var buff=this.get(buffName);isLoaded=isLoaded&&buff.loaded;}return isLoaded;}});/**
		 *  Add a buffer by name and url to the Buffers
		 *  @param  {String}    name      A unique name to give
		 *                                the buffer
		 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, 
		 *                                                 or a buffer which will be added
		 *                                                 with the given name.
		 *  @param  {Function=}  callback  The callback to invoke 
		 *                                 when the url is loaded.
		 */Tone.Buffers.prototype.add=function(name,url,callback){callback=Tone.defaultArg(callback,Tone.noOp);if(url instanceof Tone.Buffer){this._buffers[name]=url;callback(this);}else if(url instanceof AudioBuffer){this._buffers[name]=new Tone.Buffer(url);callback(this);}else if(Tone.isString(url)){this._buffers[name]=new Tone.Buffer(this.baseUrl+url,callback);}return this;};/**
		 *  Clean up.
		 *  @return  {Tone.Buffers} this
		 */Tone.Buffers.prototype.dispose=function(){Tone.prototype.dispose.call(this);for(var name in this._buffers){this._buffers[name].dispose();}this._buffers=null;return this;};return Tone.Buffers;});Module(function(Tone){/**
		 *  buses are another way of routing audio
		 *
		 *  augments Tone.prototype to include send and recieve
		 */ /**
		 *  All of the routes
		 *
		 *  @type {Object}
		 *  @static
		 *  @private
		 */var Buses={};/**
		 *  Send this signal to the channel name.
		 *  @param  {String} channelName A named channel to send the signal to.
		 *  @param  {Decibels} amount The amount of the source to send to the bus.
		 *  @return {GainNode} The gain node which connects this node to the desired channel.
		 *                     Can be used to adjust the levels of the send.
		 *  @example
		 * source.send("reverb", -12);
		 */Tone.prototype.send=function(channelName,amount){if(!Buses.hasOwnProperty(channelName)){Buses[channelName]=this.context.createGain();}amount=Tone.defaultArg(amount,0);var sendKnob=new Tone.Gain(amount,Tone.Type.Decibels);this.connect(sendKnob);sendKnob.connect(Buses[channelName]);return sendKnob;};/**
		 *  Recieve the input from the desired channelName to the input
		 *
		 *  @param  {String} channelName A named channel to send the signal to.
		 *  @param  {Number=} channelNumber The channel to connect to
		 *  @returns {Tone} this
		 *  @example
		 * reverbEffect.receive("reverb");
		 */Tone.prototype.receive=function(channelName,inputNum){if(!Buses.hasOwnProperty(channelName)){Buses[channelName]=this.context.createGain();}Buses[channelName].connect(this,0,inputNum);return this;};//remove all the send/receives when a new audio context is passed in
Tone.Context.on('init',function(context){if(context.Buses){Buses=context.Buses;}else{Buses={};context.Buses=Buses;}});return Tone;});Module(function(Tone){/**
		 *  @class Tone.Draw is useful for synchronizing visuals and audio events.
		 *         Callbacks from Tone.Transport or any of the Tone.Event classes
		 *         always happen _before_ the scheduled time and are not synchronized
		 *         to the animation frame so they are not good for triggering tightly
		 *         synchronized visuals and sound. Tone.Draw makes it easy to schedule
		 *         callbacks using the AudioContext time and uses requestAnimationFrame.
		 *         
		 *  @singleton
		 *  @extends {Tone}
		 *  @example
		 * Tone.Transport.schedule(function(time){
		 * 	//use the time argument to schedule a callback with Tone.Draw
		 * 	Tone.Draw.schedule(function(){
		 * 		//do drawing or DOM manipulation here
		 * 	}, time)
		 * }, "+0.5")
		 */Tone.Draw=function(){Tone.call(this);/**
			 *  All of the events.
			 *  @type  {Tone.Timeline}
			 *  @private
			 */this._events=new Tone.Timeline();/**
			 *  The duration after which events are not invoked.
			 *  @type  {Number}
			 *  @default 0.25
			 */this.expiration=0.25;/**
			 *  The amount of time before the scheduled time 
			 *  that the callback can be invoked. Default is
			 *  half the time of an animation frame (0.008 seconds).
			 *  @type  {Number}
			 *  @default 0.008
			 */this.anticipation=0.008;/**
			 *  The draw loop
			 *  @type  {Function}
			 *  @private
			 */this._boundDrawLoop=this._drawLoop.bind(this);};Tone.extend(Tone.Draw);/**
		 *  Schedule a function at the given time to be invoked
		 *  on the nearest animation frame.
		 *  @param  {Function}  callback  Callback is invoked at the given time.
		 *  @param  {Time}    time      The time relative to the AudioContext time
		 *                              to invoke the callback.
		 *  @return  {Tone.Draw}    this
		 */Tone.Draw.prototype.schedule=function(callback,time){this._events.add({callback:callback,time:this.toSeconds(time)});//start the draw loop on the first event
if(this._events.length===1){requestAnimationFrame(this._boundDrawLoop);}return this;};/**
		 *  Cancel events scheduled after the given time
		 *  @param  {Time=}  after  Time after which scheduled events will 
		 *                          be removed from the scheduling timeline.
		 *  @return  {Tone.Draw}  this
		 */Tone.Draw.prototype.cancel=function(after){this._events.cancel(this.toSeconds(after));return this;};/**
		 *  The draw loop
		 *  @private
		 */Tone.Draw.prototype._drawLoop=function(){var now=Tone.now();while(this._events.length&&this._events.peek().time-this.anticipation<=now){var event=this._events.shift();if(now-event.time<=this.expiration){event.callback();}}if(this._events.length>0){requestAnimationFrame(this._boundDrawLoop);}};//make a singleton
Tone.Draw=new Tone.Draw();return Tone.Draw;});Module(function(Tone){/**
		 *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space
		 *          using a right-handed cartesian coordinate system.
		 *          The units used in the coordinate system are not defined;
		 *          these coordinates are independent/invariant of any particular
		 *          units such as meters or feet. Tone.Panner3D objects have an forward
		 *          vector representing the direction the sound is projecting. Additionally,
		 *          they have a sound cone representing how directional the sound is.
		 *          For example, the sound could be omnidirectional, in which case it would
		 *          be heard anywhere regardless of its forward, or it can be more directional
		 *          and heard only if it is facing the listener. Tone.Listener objects
		 *          (representing a person's ears) have an forward and up vector
		 *          representing in which direction the person is facing. Because both the
		 *          source stream and the listener can be moving, they both have a velocity
		 *          vector representing both the speed and direction of movement. Taken together,
		 *          these two velocities can be used to generate a doppler shift effect which changes the pitch.
		 *          <br><br>
		 *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D
		 *
		 *  @constructor
		 *  @extends {Tone}
		 *  @singleton
		 */Tone.Listener=function(){Tone.call(this);/**
			 *  Holds the current forward orientation
			 *  @type  {Array}
			 *  @private
			 */this._orientation=[0,0,0,0,0,0];/**
			 *  Holds the current position
			 *  @type  {Array}
			 *  @private
			 */this._position=[0,0,0];Tone.getContext(function(){// set the default position/forward
this.set(ListenerConstructor.defaults);}.bind(this));};Tone.extend(Tone.Listener);/**
		 *  Defaults according to the specification
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.Listener.defaults={'positionX':0,'positionY':0,'positionZ':0,'forwardX':0,'forwardY':0,'forwardZ':1,'upX':0,'upY':1,'upZ':0};/**
		 * The ramp time which is applied to the setTargetAtTime
		 * @type {Number}
		 * @private
		 */Tone.Listener.prototype._rampTimeConstant=0.01;/**
		 *  Sets the position of the listener in 3d space.
		 *  @param  {Number}  x
		 *  @param  {Number}  y
		 *  @param  {Number}  z
		 *  @return {Tone.Listener} this
		 */Tone.Listener.prototype.setPosition=function(x,y,z){if(this.context.listener.positionX){var now=this.now();this.context.listener.positionX.setTargetAtTime(x,now,this._rampTimeConstant);this.context.listener.positionY.setTargetAtTime(y,now,this._rampTimeConstant);this.context.listener.positionZ.setTargetAtTime(z,now,this._rampTimeConstant);}else{this.context.listener.setPosition(x,y,z);}this._position=Array.prototype.slice.call(arguments);return this;};/**
		 *  Sets the orientation of the listener using two vectors, the forward
		 *  vector (which direction the listener is facing) and the up vector
		 *  (which the up direction of the listener). An up vector
		 *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction.
		 *  @param  {Number}  x
		 *  @param  {Number}  y
		 *  @param  {Number}  z
		 *  @param  {Number}  upX
		 *  @param  {Number}  upY
		 *  @param  {Number}  upZ
		 *  @return {Tone.Listener} this
		 */Tone.Listener.prototype.setOrientation=function(x,y,z,upX,upY,upZ){if(this.context.listener.forwardX){var now=this.now();this.context.listener.forwardX.setTargetAtTime(x,now,this._rampTimeConstant);this.context.listener.forwardY.setTargetAtTime(y,now,this._rampTimeConstant);this.context.listener.forwardZ.setTargetAtTime(z,now,this._rampTimeConstant);this.context.listener.upX.setTargetAtTime(upX,now,this._rampTimeConstant);this.context.listener.upY.setTargetAtTime(upY,now,this._rampTimeConstant);this.context.listener.upZ.setTargetAtTime(upZ,now,this._rampTimeConstant);}else{this.context.listener.setOrientation(x,y,z,upX,upY,upZ);}this._orientation=Array.prototype.slice.call(arguments);return this;};/**
		 *  The x position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name positionX
		 */Object.defineProperty(Tone.Listener.prototype,'positionX',{set:function set(pos){this._position[0]=pos;this.setPosition.apply(this,this._position);},get:function get(){return this._position[0];}});/**
		 *  The y position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name positionY
		 */Object.defineProperty(Tone.Listener.prototype,'positionY',{set:function set(pos){this._position[1]=pos;this.setPosition.apply(this,this._position);},get:function get(){return this._position[1];}});/**
		 *  The z position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name positionZ
		 */Object.defineProperty(Tone.Listener.prototype,'positionZ',{set:function set(pos){this._position[2]=pos;this.setPosition.apply(this,this._position);},get:function get(){return this._position[2];}});/**
		 *  The x coordinate of the listeners front direction. i.e.
		 *  which way they are facing.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name forwardX
		 */Object.defineProperty(Tone.Listener.prototype,'forwardX',{set:function set(pos){this._orientation[0]=pos;this.setOrientation.apply(this,this._orientation);},get:function get(){return this._orientation[0];}});/**
		 *  The y coordinate of the listeners front direction. i.e.
		 *  which way they are facing.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name forwardY
		 */Object.defineProperty(Tone.Listener.prototype,'forwardY',{set:function set(pos){this._orientation[1]=pos;this.setOrientation.apply(this,this._orientation);},get:function get(){return this._orientation[1];}});/**
		 *  The z coordinate of the listeners front direction. i.e.
		 *  which way they are facing.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name forwardZ
		 */Object.defineProperty(Tone.Listener.prototype,'forwardZ',{set:function set(pos){this._orientation[2]=pos;this.setOrientation.apply(this,this._orientation);},get:function get(){return this._orientation[2];}});/**
		 *  The x coordinate of the listener's up direction. i.e.
		 *  the direction the listener is standing in.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name upX
		 */Object.defineProperty(Tone.Listener.prototype,'upX',{set:function set(pos){this._orientation[3]=pos;this.setOrientation.apply(this,this._orientation);},get:function get(){return this._orientation[3];}});/**
		 *  The y coordinate of the listener's up direction. i.e.
		 *  the direction the listener is standing in.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name upY
		 */Object.defineProperty(Tone.Listener.prototype,'upY',{set:function set(pos){this._orientation[4]=pos;this.setOrientation.apply(this,this._orientation);},get:function get(){return this._orientation[4];}});/**
		 *  The z coordinate of the listener's up direction. i.e.
		 *  the direction the listener is standing in.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name upZ
		 */Object.defineProperty(Tone.Listener.prototype,'upZ',{set:function set(pos){this._orientation[5]=pos;this.setOrientation.apply(this,this._orientation);},get:function get(){return this._orientation[5];}});/**
		 *  Clean up.
		 *  @returns {Tone.Listener} this
		 */Tone.Listener.prototype.dispose=function(){this._orientation=null;this._position=null;return this;};//SINGLETON SETUP
var ListenerConstructor=Tone.Listener;Tone.Listener=new ListenerConstructor();Tone.Context.on('init',function(context){if(context.Listener instanceof ListenerConstructor){//a single listener object
Tone.Listener=context.Listener;}else{//make new Listener insides
Tone.Listener=new ListenerConstructor();}context.Listener=Tone.Listener;});//END SINGLETON SETUP
return Tone.Listener;});Module(function(Tone){/**
		 * Because of a bug in iOS causing the currentTime to increment
		 * before the rendering is started, sometimes it takes multiple
		 * attempts to render the audio correctly.
		 * @private
		 */function attemptRender(callback,duration,sampleRate,tries){tries=Tone.defaultArg(tries,0);var context=new Tone.OfflineContext(2,duration,sampleRate);Tone.context=context;//invoke the callback/scheduling
var response=callback(Tone.Transport);if(context.currentTime>0&&tries<1000){return attemptRender(callback,duration,sampleRate,++tries);}else{return{'response':response,'context':context};}}/**
		 *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.
		 *  The OfflineAudioContext is capable of rendering much faster than real time in many cases.
		 *  The callback function also passes in an offline instance of Tone.Transport which can be used
		 *  to schedule events along the Transport. **NOTE** OfflineAudioContext has the same restrictions
		 *  as the AudioContext in that on certain platforms (like iOS) it must be invoked by an explicit
		 *  user action like a click or tap. 
		 *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.
		 *  @param  {Time}  duration     the amount of time to record for.
		 *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.
		 *  @example
		 * //render 2 seconds of the oscillator
		 * Tone.Offline(function(){
		 * 	//only nodes created in this callback will be recorded
		 * 	var oscillator = new Tone.Oscillator().toMaster().start(0)
		 * 	//schedule their events
		 * }, 2).then(function(buffer){
		 * 	//do something with the output buffer
		 * })
		 * @example
		 * //can also schedule events along the Transport
		 * //using the passed in Offline Transport
		 * Tone.Offline(function(Transport){
		 * 	var osc = new Tone.Oscillator().toMaster()
		 * 	Transport.schedule(function(time){
		 * 		osc.start(time).stop(time + 0.1)
		 * 	}, 1)
		 * 	Transport.start(0.2)
		 * }, 4).then(function(buffer){
		 * 	//do something with the output buffer
		 * })
		 */Tone.Offline=function(callback,duration){//set the OfflineAudioContext
var sampleRate=Tone.context.sampleRate;var originalContext=Tone.context;var renderRet=attemptRender(callback,duration,sampleRate);var response=renderRet.response;var context=renderRet.context;var ret;if(response instanceof Promise){//wait for the promise to resolve
ret=response.then(function(){//then render the audio
return context.render();});}else{//process the audio
ret=context.render();}//return the original AudioContext
Tone.context=originalContext;//return the audio
return ret.then(function(buffer){//wrap it in a Tone.Buffer
return new Tone.Buffer(buffer);});};return Tone.Offline;});Module(function(Tone){/**
		 * 	@class  Tone.Effect is the base class for effects. Connect the effect between
		 * 	        the effectSend and effectReturn GainNodes, then control the amount of
		 * 	        effect which goes to the output using the wet control.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {NormalRange|Object} [wet] The starting wet value.
		 */Tone.Effect=function(){var options=Tone.defaults(arguments,['wet'],Tone.Effect);Tone.AudioNode.call(this);this.createInsOuts(1,1);/**
			 *  the drywet knob to control the amount of effect
			 *  @type {Tone.CrossFade}
			 *  @private
			 */this._dryWet=new Tone.CrossFade(options.wet);/**
			 *  The wet control is how much of the effected
			 *  will pass through to the output. 1 = 100% effected
			 *  signal, 0 = 100% dry signal.
			 *  @type {NormalRange}
			 *  @signal
			 */this.wet=this._dryWet.fade;/**
			 *  connect the effectSend to the input of hte effect
			 *  @type {Tone.Gain}
			 *  @private
			 */this.effectSend=new Tone.Gain();/**
			 *  connect the output of the effect to the effectReturn
			 *  @type {Tone.Gain}
			 *  @private
			 */this.effectReturn=new Tone.Gain();//connections
this.input.connect(this._dryWet.a);this.input.connect(this.effectSend);this.effectReturn.connect(this._dryWet.b);this._dryWet.connect(this.output);this._readOnly(['wet']);};Tone.extend(Tone.Effect,Tone.AudioNode);/**
		 *  @static
		 *  @type {Object}
		 */Tone.Effect.defaults={'wet':1};/**
		 *  chains the effect in between the effectSend and effectReturn
		 *  @param  {Tone} effect
		 *  @private
		 *  @returns {Tone.Effect} this
		 */Tone.Effect.prototype.connectEffect=function(effect){this.effectSend.chain(effect,this.effectReturn);return this;};/**
		 *  Clean up.
		 *  @returns {Tone.Effect} this
		 */Tone.Effect.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._dryWet.dispose();this._dryWet=null;this.effectSend.dispose();this.effectSend=null;this.effectReturn.dispose();this.effectReturn=null;this._writable(['wet']);this.wet=null;return this;};return Tone.Effect;});Module(function(Tone){/**
		 *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.
		 *         Setting the LFO rate and depth allows for control over the filter modulation rate 
		 *         and depth.
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {Time|Object} [frequency] The rate of the LFO.
		 *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation
	 	 *  @param {Frequency=} octaves The number of octaves above the baseFrequency
		 *  @example
		 * //create an autofilter and start it's LFO
		 * var autoFilter = new Tone.AutoFilter("4n").toMaster().start();
		 * //route an oscillator through the filter and start it
		 * var oscillator = new Tone.Oscillator().connect(autoFilter).start();
		 */Tone.AutoFilter=function(){var options=Tone.defaults(arguments,['frequency','baseFrequency','octaves'],Tone.AutoFilter);Tone.Effect.call(this,options);/**
			 *  the lfo which drives the filter cutoff
			 *  @type {Tone.LFO}
			 *  @private
			 */this._lfo=new Tone.LFO({'frequency':options.frequency,'amplitude':options.depth});/**
			 * The range of the filter modulating between the min and max frequency. 
			 * 0 = no modulation. 1 = full modulation.
			 * @type {NormalRange}
			 * @signal
			 */this.depth=this._lfo.amplitude;/**
			 * How fast the filter modulates between min and max. 
			 * @type {Frequency}
			 * @signal
			 */this.frequency=this._lfo.frequency;/**
			 *  The filter node
			 *  @type {Tone.Filter}
			 */this.filter=new Tone.Filter(options.filter);/**
			 *  The octaves placeholder
			 *  @type {Positive}
			 *  @private
			 */this._octaves=0;//connections
this.connectEffect(this.filter);this._lfo.connect(this.filter.frequency);this.type=options.type;this._readOnly(['frequency','depth']);this.octaves=options.octaves;this.baseFrequency=options.baseFrequency;};//extend Effect
Tone.extend(Tone.AutoFilter,Tone.Effect);/**
		 *  defaults
		 *  @static
		 *  @type {Object}
		 */Tone.AutoFilter.defaults={'frequency':1,'type':'sine','depth':1,'baseFrequency':200,'octaves':2.6,'filter':{'type':'lowpass','rolloff':-12,'Q':1}};/**
		 * Start the effect.
		 * @param {Time} [time=now] When the LFO will start. 
		 * @returns {Tone.AutoFilter} this
		 */Tone.AutoFilter.prototype.start=function(time){this._lfo.start(time);return this;};/**
		 * Stop the effect.
		 * @param {Time} [time=now] When the LFO will stop. 
		 * @returns {Tone.AutoFilter} this
		 */Tone.AutoFilter.prototype.stop=function(time){this._lfo.stop(time);return this;};/**
		 * Sync the filter to the transport.
		 * @param {Time} [delay=0] Delay time before starting the effect after the
		 *                               Transport has started. 
		 * @returns {Tone.AutoFilter} this
		 */Tone.AutoFilter.prototype.sync=function(delay){this._lfo.sync(delay);return this;};/**
		 * Unsync the filter from the transport.
		 * @returns {Tone.AutoFilter} this
		 */Tone.AutoFilter.prototype.unsync=function(){this._lfo.unsync();return this;};/**
		 * Type of oscillator attached to the AutoFilter. 
		 * Possible values: "sine", "square", "triangle", "sawtooth".
		 * @memberOf Tone.AutoFilter#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.AutoFilter.prototype,'type',{get:function get(){return this._lfo.type;},set:function set(type){this._lfo.type=type;}});/**
		 * The minimum value of the filter's cutoff frequency.
		 * @memberOf Tone.AutoFilter#
		 * @type {Frequency}
		 * @name min
		 */Object.defineProperty(Tone.AutoFilter.prototype,'baseFrequency',{get:function get(){return this._lfo.min;},set:function set(freq){this._lfo.min=this.toFrequency(freq);//and set the max
this.octaves=this._octaves;}});/**
		 * The maximum value of the filter's cutoff frequency. 
		 * @memberOf Tone.AutoFilter#
		 * @type {Positive}
		 * @name octaves
		 */Object.defineProperty(Tone.AutoFilter.prototype,'octaves',{get:function get(){return this._octaves;},set:function set(oct){this._octaves=oct;this._lfo.max=this.baseFrequency*Math.pow(2,oct);}});/**
		 *  Clean up. 
		 *  @returns {Tone.AutoFilter} this
		 */Tone.AutoFilter.prototype.dispose=function(){Tone.Effect.prototype.dispose.call(this);this._lfo.dispose();this._lfo=null;this.filter.dispose();this.filter=null;this._writable(['frequency','depth']);this.frequency=null;this.depth=null;return this;};return Tone.AutoFilter;});Module(function(Tone){/**
		 *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. 
		 *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. 
		 *  @example
		 * //create an autopanner and start it's LFO
		 * var autoPanner = new Tone.AutoPanner("4n").toMaster().start();
		 * //route an oscillator through the panner and start it
		 * var oscillator = new Tone.Oscillator().connect(autoPanner).start();
		 */Tone.AutoPanner=function(){var options=Tone.defaults(arguments,['frequency'],Tone.AutoPanner);Tone.Effect.call(this,options);/**
			 *  the lfo which drives the panning
			 *  @type {Tone.LFO}
			 *  @private
			 */this._lfo=new Tone.LFO({'frequency':options.frequency,'amplitude':options.depth,'min':-1,'max':1});/**
			 * The amount of panning between left and right. 
			 * 0 = always center. 1 = full range between left and right. 
			 * @type {NormalRange}
			 * @signal
			 */this.depth=this._lfo.amplitude;/**
			 *  the panner node which does the panning
			 *  @type {Tone.Panner}
			 *  @private
			 */this._panner=new Tone.Panner();/**
			 * How fast the panner modulates between left and right. 
			 * @type {Frequency}
			 * @signal
			 */this.frequency=this._lfo.frequency;//connections
this.connectEffect(this._panner);this._lfo.connect(this._panner.pan);this.type=options.type;this._readOnly(['depth','frequency']);};//extend Effect
Tone.extend(Tone.AutoPanner,Tone.Effect);/**
		 *  defaults
		 *  @static
		 *  @type {Object}
		 */Tone.AutoPanner.defaults={'frequency':1,'type':'sine','depth':1};/**
		 * Start the effect.
		 * @param {Time} [time=now] When the LFO will start. 
		 * @returns {Tone.AutoPanner} this
		 */Tone.AutoPanner.prototype.start=function(time){this._lfo.start(time);return this;};/**
		 * Stop the effect.
		 * @param {Time} [time=now] When the LFO will stop. 
		 * @returns {Tone.AutoPanner} this
		 */Tone.AutoPanner.prototype.stop=function(time){this._lfo.stop(time);return this;};/**
		 * Sync the panner to the transport.
		 * @param {Time} [delay=0] Delay time before starting the effect after the
		 *                               Transport has started. 
		 * @returns {Tone.AutoPanner} this
		 */Tone.AutoPanner.prototype.sync=function(delay){this._lfo.sync(delay);return this;};/**
		 * Unsync the panner from the transport
		 * @returns {Tone.AutoPanner} this
		 */Tone.AutoPanner.prototype.unsync=function(){this._lfo.unsync();return this;};/**
		 * Type of oscillator attached to the AutoFilter. 
		 * Possible values: "sine", "square", "triangle", "sawtooth".
		 * @memberOf Tone.AutoFilter#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.AutoPanner.prototype,'type',{get:function get(){return this._lfo.type;},set:function set(type){this._lfo.type=type;}});/**
		 *  clean up
		 *  @returns {Tone.AutoPanner} this
		 */Tone.AutoPanner.prototype.dispose=function(){Tone.Effect.prototype.dispose.call(this);this._lfo.dispose();this._lfo=null;this._panner.dispose();this._panner=null;this._writable(['depth','frequency']);this.frequency=null;this.depth=null;return this;};return Tone.AutoPanner;});Module(function(Tone){/**
		 *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).
		 *          The frequency of the filter is adjusted proportionally to the
		 *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set
		 *                                            to at the low point of the wah
		 *  @param {Positive} [octaves] The number of octaves above the baseFrequency
		 *                                the filter will sweep to when fully open
		 *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for
		 *                                   the incoming signal. Normal range of -40 to 0.
		 *  @example
		 * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();
		 * //initialize the synth and connect to autowah
		 * var synth = new Synth.connect(autoWah);
		 * //Q value influences the effect of the wah - default is 2
		 * autoWah.Q.value = 6;
		 * //more audible on higher notes
		 * synth.triggerAttackRelease("C4", "8n")
		 */Tone.AutoWah=function(){var options=Tone.defaults(arguments,['baseFrequency','octaves','sensitivity'],Tone.AutoWah);Tone.Effect.call(this,options);/**
			 *  The envelope follower. Set the attack/release
			 *  timing to adjust how the envelope is followed.
			 *  @type {Tone.Follower}
			 *  @private
			 */this.follower=new Tone.Follower(options.follower);/**
			 *  scales the follower value to the frequency domain
			 *  @type {Tone}
			 *  @private
			 */this._sweepRange=new Tone.ScaleExp(0,1,0.5);/**
			 *  @type {number}
			 *  @private
			 */this._baseFrequency=options.baseFrequency;/**
			 *  @type {number}
			 *  @private
			 */this._octaves=options.octaves;/**
			 *  the input gain to adjust the sensitivity
			 *  @type {Tone.Gain}
			 *  @private
			 */this._inputBoost=new Tone.Gain();/**
			 *  @type {BiquadFilterNode}
			 *  @private
			 */this._bandpass=new Tone.Filter({'rolloff':-48,'frequency':0,'Q':options.Q});/**
			 *  @type {Tone.Filter}
			 *  @private
			 */this._peaking=new Tone.Filter(0,'peaking');this._peaking.gain.value=options.gain;/**
			 * The gain of the filter.
			 * @type {Number}
			 * @signal
			 */this.gain=this._peaking.gain;/**
			 * The quality of the filter.
			 * @type {Positive}
			 * @signal
			 */this.Q=this._bandpass.Q;//the control signal path
this.effectSend.chain(this._inputBoost,this.follower,this._sweepRange);this._sweepRange.connect(this._bandpass.frequency);this._sweepRange.connect(this._peaking.frequency);//the filtered path
this.effectSend.chain(this._bandpass,this._peaking,this.effectReturn);//set the initial value
this._setSweepRange();this.sensitivity=options.sensitivity;this._readOnly(['gain','Q']);};Tone.extend(Tone.AutoWah,Tone.Effect);/**
		 *  @static
		 *  @type {Object}
		 */Tone.AutoWah.defaults={'baseFrequency':100,'octaves':6,'sensitivity':0,'Q':2,'gain':2,'follower':{'attack':0.3,'release':0.5}};/**
		 * The number of octaves that the filter will sweep above the
		 * baseFrequency.
		 * @memberOf Tone.AutoWah#
		 * @type {Number}
		 * @name octaves
		 */Object.defineProperty(Tone.AutoWah.prototype,'octaves',{get:function get(){return this._octaves;},set:function set(octaves){this._octaves=octaves;this._setSweepRange();}});/**
		 * The base frequency from which the sweep will start from.
		 * @memberOf Tone.AutoWah#
		 * @type {Frequency}
		 * @name baseFrequency
		 */Object.defineProperty(Tone.AutoWah.prototype,'baseFrequency',{get:function get(){return this._baseFrequency;},set:function set(baseFreq){this._baseFrequency=baseFreq;this._setSweepRange();}});/**
		 * The sensitivity to control how responsive to the input signal the filter is.
		 * @memberOf Tone.AutoWah#
		 * @type {Decibels}
		 * @name sensitivity
		 */Object.defineProperty(Tone.AutoWah.prototype,'sensitivity',{get:function get(){return Tone.gainToDb(1/this._inputBoost.gain.value);},set:function set(sensitivy){this._inputBoost.gain.value=1/Tone.dbToGain(sensitivy);}});/**
		 *  sets the sweep range of the scaler
		 *  @private
		 */Tone.AutoWah.prototype._setSweepRange=function(){this._sweepRange.min=this._baseFrequency;this._sweepRange.max=Math.min(this._baseFrequency*Math.pow(2,this._octaves),this.context.sampleRate/2);};/**
		 *  Clean up.
		 *  @returns {Tone.AutoWah} this
		 */Tone.AutoWah.prototype.dispose=function(){Tone.Effect.prototype.dispose.call(this);this.follower.dispose();this.follower=null;this._sweepRange.dispose();this._sweepRange=null;this._bandpass.dispose();this._bandpass=null;this._peaking.dispose();this._peaking=null;this._inputBoost.dispose();this._inputBoost=null;this._writable(['gain','Q']);this.gain=null;this.Q=null;return this;};return Tone.AutoWah;});Module(function(Tone){/**
		 *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus
		 *         values in the NormalRange.
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @param {NormalRange} modulus The modulus to apply.
		 *  @example
		 * var mod = new Tone.Modulo(0.2)
		 * var sig = new Tone.Signal(0.5).connect(mod);
		 * //mod outputs 0.1
		 */Tone.Modulo=function(modulus){Tone.SignalBase.call(this);this.createInsOuts(1,0);/**
			 *  A waveshaper gets the integer multiple of
			 *  the input signal and the modulus.
			 *  @private
			 *  @type {Tone.WaveShaper}
			 */this._shaper=new Tone.WaveShaper(Math.pow(2,16));/**
			 *  the integer multiple is multiplied by the modulus
			 *  @type  {Tone.Multiply}
			 *  @private
			 */this._multiply=new Tone.Multiply();/**
			 *  and subtracted from the input signal
			 *  @type  {Tone.Subtract}
			 *  @private
			 */this._subtract=this.output=new Tone.Subtract();/**
			 *  the modulus signal
			 *  @type  {Tone.Signal}
			 *  @private
			 */this._modSignal=new Tone.Signal(modulus);//connections
this.input.fan(this._shaper,this._subtract);this._modSignal.connect(this._multiply,0,0);this._shaper.connect(this._multiply,0,1);this._multiply.connect(this._subtract,0,1);this._setWaveShaper(modulus);};Tone.extend(Tone.Modulo,Tone.SignalBase);/**
		 *  @param  {number}  mod  the modulus to apply
		 *  @private
		 */Tone.Modulo.prototype._setWaveShaper=function(mod){this._shaper.setMap(function(val){var multiple=Math.floor((val+0.0001)/mod);return multiple;});};/**
		 * The modulus value.
		 * @memberOf Tone.Modulo#
		 * @type {NormalRange}
		 * @name value
		 */Object.defineProperty(Tone.Modulo.prototype,'value',{get:function get(){return this._modSignal.value;},set:function set(mod){this._modSignal.value=mod;this._setWaveShaper(mod);}});/**
		 * clean up
		 *  @returns {Tone.Modulo} this
		 */Tone.Modulo.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._shaper.dispose();this._shaper=null;this._multiply.dispose();this._multiply=null;this._subtract.dispose();this._subtract=null;this._modSignal.dispose();this._modSignal=null;return this;};return Tone.Modulo;});Module(function(Tone){/**
		 *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth.
		 *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing
		 *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {Number} bits The number of bits to downsample the signal. Nominal range
		 *                       of 1 to 8.
		 *  @example
		 * //initialize crusher and route a synth through it
		 * var crusher = new Tone.BitCrusher(4).toMaster();
		 * var synth = new Tone.MonoSynth().connect(crusher);
		 */Tone.BitCrusher=function(){var options=Tone.defaults(arguments,['bits'],Tone.BitCrusher);Tone.Effect.call(this,options);var invStepSize=1/Math.pow(2,options.bits-1);/**
			 *  Subtract the input signal and the modulus of the input signal
			 *  @type {Tone.Subtract}
			 *  @private
			 */this._subtract=new Tone.Subtract();/**
			 *  The mod function
			 *  @type  {Tone.Modulo}
			 *  @private
			 */this._modulo=new Tone.Modulo(invStepSize);/**
			 *  keeps track of the bits
			 *  @type {number}
			 *  @private
			 */this._bits=options.bits;//connect it up
this.effectSend.fan(this._subtract,this._modulo);this._modulo.connect(this._subtract,0,1);this._subtract.connect(this.effectReturn);};Tone.extend(Tone.BitCrusher,Tone.Effect);/**
		 *  the default values
		 *  @static
		 *  @type {Object}
		 */Tone.BitCrusher.defaults={'bits':4};/**
		 * The bit depth of the effect. Nominal range of 1-8.
		 * @memberOf Tone.BitCrusher#
		 * @type {number}
		 * @name bits
		 */Object.defineProperty(Tone.BitCrusher.prototype,'bits',{get:function get(){return this._bits;},set:function set(bits){this._bits=bits;var invStepSize=1/Math.pow(2,bits-1);this._modulo.value=invStepSize;}});/**
		 *  Clean up.
		 *  @returns {Tone.BitCrusher} this
		 */Tone.BitCrusher.prototype.dispose=function(){Tone.Effect.prototype.dispose.call(this);this._subtract.dispose();this._subtract=null;this._modulo.dispose();this._modulo=null;return this;};return Tone.BitCrusher;});Module(function(Tone){/**
		 *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good 
		 *         for making different types of distortion sounds.
		 *         Note that odd orders sound very different from even ones, 
		 *         and order = 1 is no change. 
		 *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).
		 *
		 *  @extends {Tone.Effect}
		 *  @constructor
		 *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. 
		 *  @example
		 * //create a new cheby
		 * var cheby = new Tone.Chebyshev(50);
		 * //create a monosynth connected to our cheby
		 * synth = new Tone.MonoSynth().connect(cheby);
		 */Tone.Chebyshev=function(){var options=Tone.defaults(arguments,['order'],Tone.Chebyshev);Tone.Effect.call(this,options);/**
			 *  @type {WaveShaperNode}
			 *  @private
			 */this._shaper=new Tone.WaveShaper(4096);/**
			 * holds onto the order of the filter
			 * @type {number}
			 * @private
			 */this._order=options.order;this.connectEffect(this._shaper);this.order=options.order;this.oversample=options.oversample;};Tone.extend(Tone.Chebyshev,Tone.Effect);/**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.Chebyshev.defaults={'order':1,'oversample':'none'};/**
		 *  get the coefficient for that degree
		 *  @param {number} x the x value
		 *  @param   {number} degree 
		 *  @param {Object} memo memoize the computed value. 
		 *                       this speeds up computation greatly. 
		 *  @return  {number}       the coefficient 
		 *  @private
		 */Tone.Chebyshev.prototype._getCoefficient=function(x,degree,memo){if(memo.hasOwnProperty(degree)){return memo[degree];}else if(degree===0){memo[degree]=0;}else if(degree===1){memo[degree]=x;}else{memo[degree]=2*x*this._getCoefficient(x,degree-1,memo)-this._getCoefficient(x,degree-2,memo);}return memo[degree];};/**
		 * The order of the Chebyshev polynomial which creates
		 * the equation which is applied to the incoming 
		 * signal through a Tone.WaveShaper. The equations
		 * are in the form:<br>
		 * order 2: 2x^2 + 1<br>
		 * order 3: 4x^3 + 3x <br>
		 * @memberOf Tone.Chebyshev#
		 * @type {Positive}
		 * @name order
		 */Object.defineProperty(Tone.Chebyshev.prototype,'order',{get:function get(){return this._order;},set:function set(order){this._order=order;var curve=new Array(4096);var len=curve.length;for(var i=0;i<len;++i){var x=i*2/len-1;if(x===0){//should output 0 when input is 0
curve[i]=0;}else{curve[i]=this._getCoefficient(x,order,{});}}this._shaper.curve=curve;}});/**
		 * The oversampling of the effect. Can either be "none", "2x" or "4x".
		 * @memberOf Tone.Chebyshev#
		 * @type {string}
		 * @name oversample
		 */Object.defineProperty(Tone.Chebyshev.prototype,'oversample',{get:function get(){return this._shaper.oversample;},set:function set(oversampling){this._shaper.oversample=oversampling;}});/**
		 *  Clean up. 
		 *  @returns {Tone.Chebyshev} this
		 */Tone.Chebyshev.prototype.dispose=function(){Tone.Effect.prototype.dispose.call(this);this._shaper.dispose();this._shaper=null;return this;};return Tone.Chebyshev;});Module(function(Tone){/**
		 *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R.
		 *
		 *	@constructor
		 *	@extends {Tone.Effect}
		 */Tone.StereoEffect=function(){//get the defaults
Tone.AudioNode.call(this);var options=Tone.defaults(arguments,['wet'],Tone.Effect);this.createInsOuts(1,1);/**
			 *  the drywet knob to control the amount of effect
			 *  @type {Tone.CrossFade}
			 *  @private
			 */this._dryWet=new Tone.CrossFade(options.wet);/**
			 *  The wet control, i.e. how much of the effected
			 *  will pass through to the output.
			 *  @type {NormalRange}
			 *  @signal
			 */this.wet=this._dryWet.fade;/**
			 *  then split it
			 *  @type {Tone.Split}
			 *  @private
			 */this._split=new Tone.Split();/**
			 *  the effects send LEFT
			 *  @type {GainNode}
			 *  @private
			 */this.effectSendL=this._split.left;/**
			 *  the effects send RIGHT
			 *  @type {GainNode}
			 *  @private
			 */this.effectSendR=this._split.right;/**
			 *  the stereo effect merger
			 *  @type {Tone.Merge}
			 *  @private
			 */this._merge=new Tone.Merge();/**
			 *  the effect return LEFT
			 *  @type {GainNode}
			 *  @private
			 */this.effectReturnL=this._merge.left;/**
			 *  the effect return RIGHT
			 *  @type {GainNode}
			 *  @private
			 */this.effectReturnR=this._merge.right;//connections
this.input.connect(this._split);//dry wet connections
this.input.connect(this._dryWet,0,0);this._merge.connect(this._dryWet,0,1);this._dryWet.connect(this.output);this._readOnly(['wet']);};Tone.extend(Tone.StereoEffect,Tone.Effect);/**
		 *  Clean up.
		 *  @returns {Tone.StereoEffect} this
		 */Tone.StereoEffect.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._dryWet.dispose();this._dryWet=null;this._split.dispose();this._split=null;this._merge.dispose();this._merge=null;this.effectSendL=null;this.effectSendR=null;this.effectReturnL=null;this.effectReturnR=null;this._writable(['wet']);this.wet=null;return this;};return Tone.StereoEffect;});Module(function(Tone){/**
		 *  @class Tone.Chorus is a stereo chorus effect composed of
		 *         a left and right delay with a Tone.LFO applied to the delayTime of each channel.
		 *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).
		 *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).
		 *
		 *	@constructor
		 *	@extends {Tone.StereoEffect}
		 *	@param {Frequency|Object} [frequency] The frequency of the LFO.
		 *	@param {Milliseconds} [delayTime] The delay of the chorus effect in ms.
		 *	@param {NormalRange} [depth] The depth of the chorus.
		 *	@example
		 * var chorus = new Tone.Chorus(4, 2.5, 0.5);
		 * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);
		 * synth.triggerAttackRelease(["C3","E3","G3"], "8n");
		 */Tone.Chorus=function(){var options=Tone.defaults(arguments,['frequency','delayTime','depth'],Tone.Chorus);Tone.StereoEffect.call(this,options);/**
			 *  the depth of the chorus
			 *  @type {number}
			 *  @private
			 */this._depth=options.depth;/**
			 *  the delayTime
			 *  @type {number}
			 *  @private
			 */this._delayTime=options.delayTime/1000;/**
			 *  the lfo which controls the delayTime
			 *  @type {Tone.LFO}
			 *  @private
			 */this._lfoL=new Tone.LFO({'frequency':options.frequency,'min':0,'max':1});/**
			 *  another LFO for the right side with a 180 degree phase diff
			 *  @type {Tone.LFO}
			 *  @private
			 */this._lfoR=new Tone.LFO({'frequency':options.frequency,'min':0,'max':1,'phase':180});/**
			 *  delay for left
			 *  @type {Tone.Delay}
			 *  @private
			 */this._delayNodeL=new Tone.Delay();/**
			 *  delay for right
			 *  @type {Tone.Delay}
			 *  @private
			 */this._delayNodeR=new Tone.Delay();/**
			 * The frequency of the LFO which modulates the delayTime.
			 * @type {Frequency}
			 * @signal
			 */this.frequency=this._lfoL.frequency;//connections
this.effectSendL.chain(this._delayNodeL,this.effectReturnL);this.effectSendR.chain(this._delayNodeR,this.effectReturnR);//and pass through to make the detune apparent
this.effectSendL.connect(this.effectReturnL);this.effectSendR.connect(this.effectReturnR);//lfo setup
this._lfoL.connect(this._delayNodeL.delayTime);this._lfoR.connect(this._delayNodeR.delayTime);//start the lfo
this._lfoL.start();this._lfoR.start();//have one LFO frequency control the other
this._lfoL.frequency.connect(this._lfoR.frequency);//set the initial values
this.depth=this._depth;this.frequency.value=options.frequency;this.type=options.type;this._readOnly(['frequency']);this.spread=options.spread;};Tone.extend(Tone.Chorus,Tone.StereoEffect);/**
		 *  @static
		 *  @type {Object}
		 */Tone.Chorus.defaults={'frequency':1.5,'delayTime':3.5,'depth':0.7,'type':'sine','spread':180};/**
		 * The depth of the effect. A depth of 1 makes the delayTime
		 * modulate between 0 and 2*delayTime (centered around the delayTime).
		 * @memberOf Tone.Chorus#
		 * @type {NormalRange}
		 * @name depth
		 */Object.defineProperty(Tone.Chorus.prototype,'depth',{get:function get(){return this._depth;},set:function set(depth){this._depth=depth;var deviation=this._delayTime*depth;this._lfoL.min=Math.max(this._delayTime-deviation,0);this._lfoL.max=this._delayTime+deviation;this._lfoR.min=Math.max(this._delayTime-deviation,0);this._lfoR.max=this._delayTime+deviation;}});/**
		 * The delayTime in milliseconds of the chorus. A larger delayTime
		 * will give a more pronounced effect. Nominal range a delayTime
		 * is between 2 and 20ms.
		 * @memberOf Tone.Chorus#
		 * @type {Milliseconds}
		 * @name delayTime
		 */Object.defineProperty(Tone.Chorus.prototype,'delayTime',{get:function get(){return this._delayTime*1000;},set:function set(delayTime){this._delayTime=delayTime/1000;this.depth=this._depth;}});/**
		 * The oscillator type of the LFO.
		 * @memberOf Tone.Chorus#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.Chorus.prototype,'type',{get:function get(){return this._lfoL.type;},set:function set(type){this._lfoL.type=type;this._lfoR.type=type;}});/**
		 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
		 * When set to 180, LFO's will be panned hard left and right respectively.
		 * @memberOf Tone.Chorus#
		 * @type {Degrees}
		 * @name spread
		 */Object.defineProperty(Tone.Chorus.prototype,'spread',{get:function get(){return this._lfoR.phase-this._lfoL.phase;},set:function set(spread){this._lfoL.phase=90-spread/2;this._lfoR.phase=spread/2+90;}});/**
		 *  Clean up.
		 *  @returns {Tone.Chorus} this
		 */Tone.Chorus.prototype.dispose=function(){Tone.StereoEffect.prototype.dispose.call(this);this._lfoL.dispose();this._lfoL=null;this._lfoR.dispose();this._lfoR=null;this._delayNodeL.dispose();this._delayNodeL=null;this._delayNodeR.dispose();this._delayNodeR=null;this._writable('frequency');this.frequency=null;return this;};return Tone.Chorus;});Module(function(Tone){/**
		 *  @class  Tone.Convolver is a wrapper around the Native Web Audio
		 *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).
		 *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on
		 *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer
		 *                                           contianing the impulse response.
		 *  @param {Function=} onload The callback to invoke when the url is loaded.
		 *  @example
		 * //initializing the convolver with an impulse response
		 * var convolver = new Tone.Convolver("./path/to/ir.wav").toMaster();
		 */Tone.Convolver=function(){var options=Tone.defaults(arguments,['url','onload'],Tone.Convolver);Tone.Effect.call(this,options);/**
			 *  convolver node
			 *  @type {ConvolverNode}
			 *  @private
			 */this._convolver=this.context.createConvolver();/**
			 *  the convolution buffer
			 *  @type {Tone.Buffer}
			 *  @private
			 */this._buffer=new Tone.Buffer(options.url,function(buffer){this._convolver.buffer=buffer.get();options.onload();}.bind(this));this.connectEffect(this._convolver);};Tone.extend(Tone.Convolver,Tone.Effect);/**
		 *  @static
		 *  @const
		 *  @type  {Object}
		 */Tone.Convolver.defaults={'onload':Tone.noOp};/**
		 *  The convolver's buffer
		 *  @memberOf Tone.Convolver#
		 *  @type {AudioBuffer}
		 *  @name buffer
		 */Object.defineProperty(Tone.Convolver.prototype,'buffer',{get:function get(){return this._buffer.get();},set:function set(buffer){this._buffer.set(buffer);this._convolver.buffer=this._buffer.get();}});/**
		 *  Load an impulse response url as an audio buffer.
		 *  Decodes the audio asynchronously and invokes
		 *  the callback once the audio buffer loads.
		 *  @param {string} url The url of the buffer to load.
		 *                      filetype support depends on the
		 *                      browser.
		 *  @param  {function=} callback
		 *  @returns {Promise}
		 */Tone.Convolver.prototype.load=function(url,callback){return this._buffer.load(url,function(buff){this.buffer=buff;if(callback){callback();}}.bind(this));};/**
		 *  Clean up.
		 *  @returns {Tone.Convolver} this
		 */Tone.Convolver.prototype.dispose=function(){Tone.Effect.prototype.dispose.call(this);this._convolver.disconnect();this._convolver=null;this._buffer.dispose();this._buffer=null;return this;};return Tone.Convolver;});Module(function(Tone){/**
		 *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.
		 *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).
		 *
		 *  @extends {Tone.Effect}
		 *  @constructor
		 *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)
		 *  @example
		 * var dist = new Tone.Distortion(0.8).toMaster();
		 * var fm = new Tone.SimpleFM().connect(dist);
		 * //this sounds good on bass notes
		 * fm.triggerAttackRelease("A1", "8n");
		 */Tone.Distortion=function(){var options=Tone.defaults(arguments,['distortion'],Tone.Distortion);Tone.Effect.call(this,options);/**
			 *  @type {Tone.WaveShaper}
			 *  @private
			 */this._shaper=new Tone.WaveShaper(4096);/**
			 * holds the distortion amount
			 * @type {number}
			 * @private
			 */this._distortion=options.distortion;this.connectEffect(this._shaper);this.distortion=options.distortion;this.oversample=options.oversample;};Tone.extend(Tone.Distortion,Tone.Effect);/**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.Distortion.defaults={'distortion':0.4,'oversample':'none'};/**
		 * The amount of distortion.
		 * @memberOf Tone.Distortion#
		 * @type {NormalRange}
		 * @name distortion
		 */Object.defineProperty(Tone.Distortion.prototype,'distortion',{get:function get(){return this._distortion;},set:function set(amount){this._distortion=amount;var k=amount*100;var deg=Math.PI/180;this._shaper.setMap(function(x){if(Math.abs(x)<0.001){//should output 0 when input is 0
return 0;}else{return(3+k)*x*20*deg/(Math.PI+k*Math.abs(x));}});}});/**
		 * The oversampling of the effect. Can either be "none", "2x" or "4x".
		 * @memberOf Tone.Distortion#
		 * @type {string}
		 * @name oversample
		 */Object.defineProperty(Tone.Distortion.prototype,'oversample',{get:function get(){return this._shaper.oversample;},set:function set(oversampling){this._shaper.oversample=oversampling;}});/**
		 *  Clean up. 
		 *  @returns {Tone.Distortion} this
		 */Tone.Distortion.prototype.dispose=function(){Tone.Effect.prototype.dispose.call(this);this._shaper.dispose();this._shaper=null;return this;};return Tone.Distortion;});Module(function(Tone){/**
		 * 	@class  Tone.FeedbackEffect provides a loop between an 
		 * 	        audio source and its own output. This is a base-class
		 * 	        for feedback effects. 
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {NormalRange|Object} [feedback] The initial feedback value.
		 */Tone.FeedbackEffect=function(){var options=Tone.defaults(arguments,['feedback'],Tone.FeedbackEffect);Tone.Effect.call(this,options);/**
			 *  the gain which controls the feedback
			 *  @type {Tone.Gain}
			 *  @private
			 */this._feedbackGain=new Tone.Gain(options.feedback,Tone.Type.NormalRange);/**
			 *  The amount of signal which is fed back into the effect input. 
			 *  @type {NormalRange}
			 *  @signal
			 */this.feedback=this._feedbackGain.gain;//the feedback loop
this.effectReturn.chain(this._feedbackGain,this.effectSend);this._readOnly(['feedback']);};Tone.extend(Tone.FeedbackEffect,Tone.Effect);/**
		 *  @static
		 *  @type {Object}
		 */Tone.FeedbackEffect.defaults={'feedback':0.125};/**
		 *  Clean up. 
		 *  @returns {Tone.FeedbackEffect} this
		 */Tone.FeedbackEffect.prototype.dispose=function(){Tone.Effect.prototype.dispose.call(this);this._writable(['feedback']);this._feedbackGain.dispose();this._feedbackGain=null;this.feedback=null;return this;};return Tone.FeedbackEffect;});Module(function(Tone){/**
		 *  @class  Tone.FeedbackDelay is a DelayNode in which part of output
		 *          signal is fed back into the delay.
		 *
		 *  @constructor
		 *  @extends {Tone.FeedbackEffect}
		 *  @param {Time|Object} [delayTime] The delay applied to the incoming signal.
		 *  @param {NormalRange=} feedback The amount of the effected signal which
		 *                            is fed back through the delay.
		 *  @example
		 * var feedbackDelay = new Tone.FeedbackDelay("8n", 0.5).toMaster();
		 * var tom = new Tone.DrumSynth({
		 * 	"octaves" : 4,
		 * 	"pitchDecay" : 0.1
		 * }).connect(feedbackDelay);
		 * tom.triggerAttackRelease("A2","32n");
		 */Tone.FeedbackDelay=function(){var options=Tone.defaults(arguments,['delayTime','feedback'],Tone.FeedbackDelay);Tone.FeedbackEffect.call(this,options);/**
			 *  the delay node
			 *  @type {Tone.Delay}
			 *  @private
			 */this._delayNode=new Tone.Delay(options.delayTime,options.maxDelay);/**
			 *  The delayTime of the DelayNode.
			 *  @type {Time}
			 *  @signal
			 */this.delayTime=this._delayNode.delayTime;// connect it up
this.connectEffect(this._delayNode);this._readOnly(['delayTime']);};Tone.extend(Tone.FeedbackDelay,Tone.FeedbackEffect);/**
		 *  The default values.
		 *  @const
		 *  @static
		 *  @type {Object}
		 */Tone.FeedbackDelay.defaults={'delayTime':0.25,'maxDelay':1};/**
		 *  clean up
		 *  @returns {Tone.FeedbackDelay} this
		 */Tone.FeedbackDelay.prototype.dispose=function(){Tone.FeedbackEffect.prototype.dispose.call(this);this._delayNode.dispose();this._delayNode=null;this._writable(['delayTime']);this.delayTime=null;return this;};return Tone.FeedbackDelay;});Module(function(Tone){/**
		 *  an array of comb filter delay values from Freeverb implementation
		 *  @static
		 *  @private
		 *  @type {Array}
		 */var combFilterTunings=[1557/44100,1617/44100,1491/44100,1422/44100,1277/44100,1356/44100,1188/44100,1116/44100];/**
		 *  an array of allpass filter frequency values from Freeverb implementation
		 *  @private
		 *  @static
		 *  @type {Array}
		 */var allpassFilterFrequencies=[225,556,441,341];/**
		 *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).
		 *         Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).
		 *
		 *  @extends {Tone.Effect}
		 *  @constructor
		 *  @param {NormalRange|Object} [roomSize] Correlated to the decay time.
		 *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part
		 *                                 of the reverb.
		 *  @example
		 * var freeverb = new Tone.Freeverb().toMaster();
		 * freeverb.dampening.value = 1000;
		 * //routing synth through the reverb
		 * var synth = new Tone.AMSynth().connect(freeverb);
		 */Tone.Freeverb=function(){var options=Tone.defaults(arguments,['roomSize','dampening'],Tone.Freeverb);Tone.StereoEffect.call(this,options);/**
			 *  The roomSize value between. A larger roomSize
			 *  will result in a longer decay.
			 *  @type {NormalRange}
			 *  @signal
			 */this.roomSize=new Tone.Signal(options.roomSize,Tone.Type.NormalRange);/**
			 *  The amount of dampening of the reverberant signal.
			 *  @type {Frequency}
			 *  @signal
			 */this.dampening=new Tone.Signal(options.dampening,Tone.Type.Frequency);/**
			 *  the comb filters
			 *  @type {Array}
			 *  @private
			 */this._combFilters=[];/**
			 *  the allpass filters on the left
			 *  @type {Array}
			 *  @private
			 */this._allpassFiltersL=[];/**
			 *  the allpass filters on the right
			 *  @type {Array}
			 *  @private
			 */this._allpassFiltersR=[];//make the allpass filters on the right
for(var l=0;l<allpassFilterFrequencies.length;l++){var allpassL=this.context.createBiquadFilter();allpassL.type='allpass';allpassL.frequency.value=allpassFilterFrequencies[l];this._allpassFiltersL.push(allpassL);}//make the allpass filters on the left
for(var r=0;r<allpassFilterFrequencies.length;r++){var allpassR=this.context.createBiquadFilter();allpassR.type='allpass';allpassR.frequency.value=allpassFilterFrequencies[r];this._allpassFiltersR.push(allpassR);}//make the comb filters
for(var c=0;c<combFilterTunings.length;c++){var lfpf=new Tone.LowpassCombFilter(combFilterTunings[c]);if(c<combFilterTunings.length/2){this.effectSendL.chain(lfpf,this._allpassFiltersL[0]);}else{this.effectSendR.chain(lfpf,this._allpassFiltersR[0]);}this.roomSize.connect(lfpf.resonance);this.dampening.connect(lfpf.dampening);this._combFilters.push(lfpf);}//chain the allpass filters togetehr
Tone.connectSeries.apply(Tone,this._allpassFiltersL);Tone.connectSeries.apply(Tone,this._allpassFiltersR);this._allpassFiltersL[this._allpassFiltersL.length-1].connect(this.effectReturnL);this._allpassFiltersR[this._allpassFiltersR.length-1].connect(this.effectReturnR);this._readOnly(['roomSize','dampening']);};Tone.extend(Tone.Freeverb,Tone.StereoEffect);/**
		 *  @static
		 *  @type {Object}
		 */Tone.Freeverb.defaults={'roomSize':0.7,'dampening':3000};/**
		 *  Clean up.
		 *  @returns {Tone.Freeverb} this
		 */Tone.Freeverb.prototype.dispose=function(){Tone.StereoEffect.prototype.dispose.call(this);for(var al=0;al<this._allpassFiltersL.length;al++){this._allpassFiltersL[al].disconnect();this._allpassFiltersL[al]=null;}this._allpassFiltersL=null;for(var ar=0;ar<this._allpassFiltersR.length;ar++){this._allpassFiltersR[ar].disconnect();this._allpassFiltersR[ar]=null;}this._allpassFiltersR=null;for(var cf=0;cf<this._combFilters.length;cf++){this._combFilters[cf].dispose();this._combFilters[cf]=null;}this._combFilters=null;this._writable(['roomSize','dampening']);this.roomSize.dispose();this.roomSize=null;this.dampening.dispose();this.dampening=null;return this;};return Tone.Freeverb;});Module(function(Tone){/**
		 *  an array of the comb filter delay time values
		 *  @private
		 *  @static
		 *  @type {Array}
		 */var combFilterDelayTimes=[1687/25000,1601/25000,2053/25000,2251/25000];/**
		 *  the resonances of each of the comb filters
		 *  @private
		 *  @static
		 *  @type {Array}
		 */var combFilterResonances=[0.773,0.802,0.753,0.733];/**
		 *  the allpass filter frequencies
		 *  @private
		 *  @static
		 *  @type {Array}
		 */var allpassFilterFreqs=[347,113,37];/**
		 *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)
		 *         tuned by John Chowning in 1970.
		 *         It is made up of three allpass filters and four Tone.FeedbackCombFilter.
		 *
		 *
		 *  @extends {Tone.Effect}
		 *  @constructor
		 *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.
		 *  @example
		 * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);
		 * var delay = new Tone.FeedbackDelay(0.5);
		 * //connecting the synth to reverb through delay
		 * var synth = new Tone.DuoSynth().chain(delay, reverb);
		 * synth.triggerAttackRelease("A4","8n");
		 */Tone.JCReverb=function(){var options=Tone.defaults(arguments,['roomSize'],Tone.JCReverb);Tone.StereoEffect.call(this,options);/**
			 *  room size control values between [0,1]
			 *  @type {NormalRange}
			 *  @signal
			 */this.roomSize=new Tone.Signal(options.roomSize,Tone.Type.NormalRange);/**
			 *  scale the room size
			 *  @type {Tone.Scale}
			 *  @private
			 */this._scaleRoomSize=new Tone.Scale(-0.733,0.197);/**
			 *  a series of allpass filters
			 *  @type {Array}
			 *  @private
			 */this._allpassFilters=[];/**
			 *  parallel feedback comb filters
			 *  @type {Array}
			 *  @private
			 */this._feedbackCombFilters=[];//make the allpass filters
for(var af=0;af<allpassFilterFreqs.length;af++){var allpass=this.context.createBiquadFilter();allpass.type='allpass';allpass.frequency.value=allpassFilterFreqs[af];this._allpassFilters.push(allpass);}//and the comb filters
for(var cf=0;cf<combFilterDelayTimes.length;cf++){var fbcf=new Tone.FeedbackCombFilter(combFilterDelayTimes[cf],0.1);this._scaleRoomSize.connect(fbcf.resonance);fbcf.resonance.value=combFilterResonances[cf];this._allpassFilters[this._allpassFilters.length-1].connect(fbcf);if(cf<combFilterDelayTimes.length/2){fbcf.connect(this.effectReturnL);}else{fbcf.connect(this.effectReturnR);}this._feedbackCombFilters.push(fbcf);}//chain the allpass filters together
this.roomSize.connect(this._scaleRoomSize);Tone.connectSeries.apply(Tone,this._allpassFilters);this.effectSendL.connect(this._allpassFilters[0]);this.effectSendR.connect(this._allpassFilters[0]);this._readOnly(['roomSize']);};Tone.extend(Tone.JCReverb,Tone.StereoEffect);/**
		 *  the default values
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.JCReverb.defaults={'roomSize':0.5};/**
		 *  Clean up.
		 *  @returns {Tone.JCReverb} this
		 */Tone.JCReverb.prototype.dispose=function(){Tone.StereoEffect.prototype.dispose.call(this);for(var apf=0;apf<this._allpassFilters.length;apf++){this._allpassFilters[apf].disconnect();this._allpassFilters[apf]=null;}this._allpassFilters=null;for(var fbcf=0;fbcf<this._feedbackCombFilters.length;fbcf++){this._feedbackCombFilters[fbcf].dispose();this._feedbackCombFilters[fbcf]=null;}this._feedbackCombFilters=null;this._writable(['roomSize']);this.roomSize.dispose();this.roomSize=null;this._scaleRoomSize.dispose();this._scaleRoomSize=null;return this;};return Tone.JCReverb;});Module(function(Tone){/**
		 *  @class Mid/Side processing separates the the 'mid' signal
		 *         (which comes out of both the left and the right channel)
		 *         and the 'side' (which only comes out of the the side channels)
		 *         and effects them separately before being recombined.
		 *         Applies a Mid/Side seperation and recombination.
		 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
		 *         <br><br>
		 *         This is a base-class for Mid/Side Effects.
		 *
		 *  @extends {Tone.Effect}
		 *  @constructor
		 */Tone.MidSideEffect=function(){Tone.Effect.apply(this,arguments);/**
			 *  The mid/side split
			 *  @type  {Tone.MidSideSplit}
			 *  @private
			 */this._midSideSplit=new Tone.MidSideSplit();/**
			 *  The mid/side merge
			 *  @type  {Tone.MidSideMerge}
			 *  @private
			 */this._midSideMerge=new Tone.MidSideMerge();/**
			 *  The mid send. Connect to mid processing
			 *  @type {Tone}
			 *  @private
			 */this.midSend=this._midSideSplit.mid;/**
			 *  The side send. Connect to side processing
			 *  @type {Tone}
			 *  @private
			 */this.sideSend=this._midSideSplit.side;/**
			 *  The mid return connection
			 *  @type {GainNode}
			 *  @private
			 */this.midReturn=this._midSideMerge.mid;/**
			 *  The side return connection
			 *  @type {GainNode}
			 *  @private
			 */this.sideReturn=this._midSideMerge.side;//the connections
this.effectSend.connect(this._midSideSplit);this._midSideMerge.connect(this.effectReturn);};Tone.extend(Tone.MidSideEffect,Tone.Effect);/**
		 *  Clean up.
		 *  @returns {Tone.MidSideEffect} this
		 */Tone.MidSideEffect.prototype.dispose=function(){Tone.Effect.prototype.dispose.call(this);this._midSideSplit.dispose();this._midSideSplit=null;this._midSideMerge.dispose();this._midSideMerge=null;this.midSend=null;this.sideSend=null;this.midReturn=null;this.sideReturn=null;return this;};return Tone.MidSideEffect;});Module(function(Tone){/**
		 *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase
		 *         of different frequency components of an incoming signal. Read more on
		 *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).
		 *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).
		 *
		 *	@extends {Tone.StereoEffect}
		 *	@constructor
		 *	@param {Frequency|Object} [frequency] The speed of the phasing.
		 *	@param {number} [octaves] The octaves of the effect.
		 *	@param {Frequency} [baseFrequency] The base frequency of the filters.
		 *	@example
		 * var phaser = new Tone.Phaser({
		 * 	"frequency" : 15,
		 * 	"octaves" : 5,
		 * 	"baseFrequency" : 1000
		 * }).toMaster();
		 * var synth = new Tone.FMSynth().connect(phaser);
		 * synth.triggerAttackRelease("E3", "2n");
		 */Tone.Phaser=function(){//set the defaults
var options=Tone.defaults(arguments,['frequency','octaves','baseFrequency'],Tone.Phaser);Tone.StereoEffect.call(this,options);/**
			 *  the lfo which controls the frequency on the left side
			 *  @type {Tone.LFO}
			 *  @private
			 */this._lfoL=new Tone.LFO(options.frequency,0,1);/**
			 *  the lfo which controls the frequency on the right side
			 *  @type {Tone.LFO}
			 *  @private
			 */this._lfoR=new Tone.LFO(options.frequency,0,1);this._lfoR.phase=180;/**
			 *  the base modulation frequency
			 *  @type {number}
			 *  @private
			 */this._baseFrequency=options.baseFrequency;/**
			 *  the octaves of the phasing
			 *  @type {number}
			 *  @private
			 */this._octaves=options.octaves;/**
			 *  The quality factor of the filters
			 *  @type {Positive}
			 *  @signal
			 */this.Q=new Tone.Signal(options.Q,Tone.Type.Positive);/**
			 *  the array of filters for the left side
			 *  @type {Array}
			 *  @private
			 */this._filtersL=this._makeFilters(options.stages,this._lfoL,this.Q);/**
			 *  the array of filters for the left side
			 *  @type {Array}
			 *  @private
			 */this._filtersR=this._makeFilters(options.stages,this._lfoR,this.Q);/**
			 * the frequency of the effect
			 * @type {Tone.Signal}
			 */this.frequency=this._lfoL.frequency;this.frequency.value=options.frequency;//connect them up
this.effectSendL.connect(this._filtersL[0]);this.effectSendR.connect(this._filtersR[0]);this._filtersL[options.stages-1].connect(this.effectReturnL);this._filtersR[options.stages-1].connect(this.effectReturnR);//control the frequency with one LFO
this._lfoL.frequency.connect(this._lfoR.frequency);//set the options
this.baseFrequency=options.baseFrequency;this.octaves=options.octaves;//start the lfo
this._lfoL.start();this._lfoR.start();this._readOnly(['frequency','Q']);};Tone.extend(Tone.Phaser,Tone.StereoEffect);/**
		 *  defaults
		 *  @static
		 *  @type {object}
		 */Tone.Phaser.defaults={'frequency':0.5,'octaves':3,'stages':10,'Q':10,'baseFrequency':350};/**
		 *  @param {number} stages
		 *  @returns {Array} the number of filters all connected together
		 *  @private
		 */Tone.Phaser.prototype._makeFilters=function(stages,connectToFreq,Q){var filters=new Array(stages);//make all the filters
for(var i=0;i<stages;i++){var filter=this.context.createBiquadFilter();filter.type='allpass';Q.connect(filter.Q);connectToFreq.connect(filter.frequency);filters[i]=filter;}Tone.connectSeries.apply(Tone,filters);return filters;};/**
		 * The number of octaves the phase goes above
		 * the baseFrequency
		 * @memberOf Tone.Phaser#
		 * @type {Positive}
		 * @name octaves
		 */Object.defineProperty(Tone.Phaser.prototype,'octaves',{get:function get(){return this._octaves;},set:function set(octaves){this._octaves=octaves;var max=this._baseFrequency*Math.pow(2,octaves);this._lfoL.max=max;this._lfoR.max=max;}});/**
		 * The the base frequency of the filters.
		 * @memberOf Tone.Phaser#
		 * @type {number}
		 * @name baseFrequency
		 */Object.defineProperty(Tone.Phaser.prototype,'baseFrequency',{get:function get(){return this._baseFrequency;},set:function set(freq){this._baseFrequency=freq;this._lfoL.min=freq;this._lfoR.min=freq;this.octaves=this._octaves;}});/**
		 *  clean up
		 *  @returns {Tone.Phaser} this
		 */Tone.Phaser.prototype.dispose=function(){Tone.StereoEffect.prototype.dispose.call(this);this._writable(['frequency','Q']);this.Q.dispose();this.Q=null;this._lfoL.dispose();this._lfoL=null;this._lfoR.dispose();this._lfoR=null;for(var i=0;i<this._filtersL.length;i++){this._filtersL[i].disconnect();this._filtersL[i]=null;}this._filtersL=null;for(var j=0;j<this._filtersR.length;j++){this._filtersR[j].disconnect();this._filtersR[j]=null;}this._filtersR=null;this.frequency=null;return this;};return Tone.Phaser;});Module(function(Tone){/**
		 *  @class Just like a stereo feedback effect, but the feedback is routed from left to right
		 *         and right to left instead of on the same channel.
		 *
		 *	@constructor
		 *	@extends {Tone.StereoEffect}
		 */Tone.StereoXFeedbackEffect=function(){var options=Tone.defaults(arguments,['feedback'],Tone.FeedbackEffect);Tone.StereoEffect.call(this,options);/**
			 *  The amount of feedback from the output
			 *  back into the input of the effect (routed
			 *  across left and right channels).
			 *  @type {NormalRange}
			 *  @signal
			 */this.feedback=new Tone.Signal(options.feedback,Tone.Type.NormalRange);/**
			 *  the left side feeback
			 *  @type {Tone.Gain}
			 *  @private
			 */this._feedbackLR=new Tone.Gain();/**
			 *  the right side feeback
			 *  @type {Tone.Gain}
			 *  @private
			 */this._feedbackRL=new Tone.Gain();//connect it up
this.effectReturnL.chain(this._feedbackLR,this.effectSendR);this.effectReturnR.chain(this._feedbackRL,this.effectSendL);this.feedback.fan(this._feedbackLR.gain,this._feedbackRL.gain);this._readOnly(['feedback']);};Tone.extend(Tone.StereoXFeedbackEffect,Tone.StereoEffect);/**
		 *  clean up
		 *  @returns {Tone.StereoXFeedbackEffect} this
		 */Tone.StereoXFeedbackEffect.prototype.dispose=function(){Tone.StereoEffect.prototype.dispose.call(this);this._writable(['feedback']);this.feedback.dispose();this.feedback=null;this._feedbackLR.dispose();this._feedbackLR=null;this._feedbackRL.dispose();this._feedbackRL=null;return this;};return Tone.StereoXFeedbackEffect;});Module(function(Tone){/**
		 *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard
		 *          first in one channel and next in the opposite channel. In a stereo
		 *          system these are the right and left channels.
		 *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays
		 *          with independent delay values. Each delay is routed to one channel
		 *          (left or right), and the channel triggered second will always
		 *          trigger at the same interval after the first.
		 *
		 * 	@constructor
		 * 	@extends {Tone.StereoXFeedbackEffect}
		 *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.
		 *  @param {NormalRange=} feedback The amount of the effected signal which
		 *                                 is fed back through the delay.
		 *  @example
		 * var pingPong = new Tone.PingPongDelay("4n", 0.2).toMaster();
		 * var drum = new Tone.DrumSynth().connect(pingPong);
		 * drum.triggerAttackRelease("C4", "32n");
		 */Tone.PingPongDelay=function(){var options=Tone.defaults(arguments,['delayTime','feedback'],Tone.PingPongDelay);Tone.StereoXFeedbackEffect.call(this,options);/**
			 *  the delay node on the left side
			 *  @type {Tone.Delay}
			 *  @private
			 */this._leftDelay=new Tone.Delay(0,options.maxDelayTime);/**
			 *  the delay node on the right side
			 *  @type {Tone.Delay}
			 *  @private
			 */this._rightDelay=new Tone.Delay(0,options.maxDelayTime);/**
			 *  the predelay on the right side
			 *  @type {Tone.Delay}
			 *  @private
			 */this._rightPreDelay=new Tone.Delay(0,options.maxDelayTime);/**
			 *  the delay time signal
			 *  @type {Time}
			 *  @signal
			 */this.delayTime=new Tone.Signal(options.delayTime,Tone.Type.Time);//connect it up
this.effectSendL.chain(this._leftDelay,this.effectReturnL);this.effectSendR.chain(this._rightPreDelay,this._rightDelay,this.effectReturnR);this.delayTime.fan(this._leftDelay.delayTime,this._rightDelay.delayTime,this._rightPreDelay.delayTime);//rearranged the feedback to be after the rightPreDelay
this._feedbackLR.disconnect();this._feedbackLR.connect(this._rightDelay);this._readOnly(['delayTime']);};Tone.extend(Tone.PingPongDelay,Tone.StereoXFeedbackEffect);/**
		 *  @static
		 *  @type {Object}
		 */Tone.PingPongDelay.defaults={'delayTime':0.25,'maxDelayTime':1};/**
		 *  Clean up.
		 *  @returns {Tone.PingPongDelay} this
		 */Tone.PingPongDelay.prototype.dispose=function(){Tone.StereoXFeedbackEffect.prototype.dispose.call(this);this._leftDelay.dispose();this._leftDelay=null;this._rightDelay.dispose();this._rightDelay=null;this._rightPreDelay.dispose();this._rightPreDelay=null;this._writable(['delayTime']);this.delayTime.dispose();this.delayTime=null;return this;};return Tone.PingPongDelay;});Module(function(Tone){/**
		 *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal.
		 *         The effect is achieved by speeding up or slowing down the delayTime
		 *         of a DelayNode using a sawtooth wave.
		 *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).
		 *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).
		 *
		 *  @extends {Tone.FeedbackEffect}
		 *  @param {Interval=} pitch The interval to transpose the incoming signal by.
		 */Tone.PitchShift=function(){var options=Tone.defaults(arguments,['pitch'],Tone.PitchShift);Tone.FeedbackEffect.call(this,options);/**
			 *  The pitch signal
			 *  @type  {Tone.Signal}
			 *  @private
			 */this._frequency=new Tone.Signal(0);/**
			 *  Uses two DelayNodes to cover up the jump in
			 *  the sawtooth wave.
			 *  @type  {DelayNode}
			 *  @private
			 */this._delayA=new Tone.Delay(0,1);/**
			 *  The first LFO.
			 *  @type  {Tone.LFO}
			 *  @private
			 */this._lfoA=new Tone.LFO({'min':0,'max':0.1,'type':'sawtooth'}).connect(this._delayA.delayTime);/**
			 *  The second DelayNode
			 *  @type  {DelayNode}
			 *  @private
			 */this._delayB=new Tone.Delay(0,1);/**
			 *  The first LFO.
			 *  @type  {Tone.LFO}
			 *  @private
			 */this._lfoB=new Tone.LFO({'min':0,'max':0.1,'type':'sawtooth','phase':180}).connect(this._delayB.delayTime);/**
			 *  Crossfade quickly between the two delay lines
			 *  to cover up the jump in the sawtooth wave
			 *  @type  {Tone.CrossFade}
			 *  @private
			 */this._crossFade=new Tone.CrossFade();/**
			 *  LFO which alternates between the two
			 *  delay lines to cover up the disparity in the
			 *  sawtooth wave.
			 *  @type  {Tone.LFO}
			 *  @private
			 */this._crossFadeLFO=new Tone.LFO({'min':0,'max':1,'type':'triangle','phase':90}).connect(this._crossFade.fade);/**
			 *  The delay node
			 *  @type {Tone.Delay}
			 *  @private
			 */this._feedbackDelay=new Tone.Delay(options.delayTime);/**
			 *  The amount of delay on the input signal
			 *  @type {Time}
			 *  @signal
			 */this.delayTime=this._feedbackDelay.delayTime;this._readOnly('delayTime');/**
			 *  Hold the current pitch
			 *  @type {Number}
			 *  @private
			 */this._pitch=options.pitch;/**
			 *  Hold the current windowSize
			 *  @type {Number}
			 *  @private
			 */this._windowSize=options.windowSize;//connect the two delay lines up
this._delayA.connect(this._crossFade.a);this._delayB.connect(this._crossFade.b);//connect the frequency
this._frequency.fan(this._lfoA.frequency,this._lfoB.frequency,this._crossFadeLFO.frequency);//route the input
this.effectSend.fan(this._delayA,this._delayB);this._crossFade.chain(this._feedbackDelay,this.effectReturn);//start the LFOs at the same time
var now=this.now();this._lfoA.start(now);this._lfoB.start(now);this._crossFadeLFO.start(now);//set the initial value
this.windowSize=this._windowSize;};Tone.extend(Tone.PitchShift,Tone.FeedbackEffect);/**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */Tone.PitchShift.defaults={'pitch':0,'windowSize':0.1,'delayTime':0,'feedback':0};/**
		 * Repitch the incoming signal by some interval (measured
		 * in semi-tones).
		 * @memberOf Tone.PitchShift#
		 * @type {Interval}
		 * @name pitch
		 * @example
		 * pitchShift.pitch = -12; //down one octave
		 * pitchShift.pitch = 7; //up a fifth
		 */Object.defineProperty(Tone.PitchShift.prototype,'pitch',{get:function get(){return this._pitch;},set:function set(interval){this._pitch=interval;var factor=0;if(interval<0){this._lfoA.min=0;this._lfoA.max=this._windowSize;this._lfoB.min=0;this._lfoB.max=this._windowSize;factor=Tone.intervalToFrequencyRatio(interval-1)+1;}else{this._lfoA.min=this._windowSize;this._lfoA.max=0;this._lfoB.min=this._windowSize;this._lfoB.max=0;factor=Tone.intervalToFrequencyRatio(interval)-1;}this._frequency.value=factor*(1.2/this._windowSize);}});/**
		 * The window size corresponds roughly to the sample length in a looping sampler.
		 * Smaller values are desirable for a less noticeable delay time of the pitch shifted
		 * signal, but larger values will result in smoother pitch shifting for larger intervals.
		 * A nominal range of 0.03 to 0.1 is recommended.
		 * @memberOf Tone.PitchShift#
		 * @type {Time}
		 * @name windowSize
		 * @example
		 * pitchShift.windowSize = 0.1;
		 */Object.defineProperty(Tone.PitchShift.prototype,'windowSize',{get:function get(){return this._windowSize;},set:function set(size){this._windowSize=this.toSeconds(size);this.pitch=this._pitch;}});/**
		 *  Clean up.
		 *  @return  {Tone.PitchShift}  this
		 */Tone.PitchShift.prototype.dispose=function(){Tone.FeedbackEffect.prototype.dispose.call(this);this._frequency.dispose();this._frequency=null;this._delayA.disconnect();this._delayA=null;this._delayB.disconnect();this._delayB=null;this._lfoA.dispose();this._lfoA=null;this._lfoB.dispose();this._lfoB=null;this._crossFade.dispose();this._crossFade=null;this._crossFadeLFO.dispose();this._crossFadeLFO=null;this._writable('delayTime');this._feedbackDelay.dispose();this._feedbackDelay=null;this.delayTime=null;return this;};return Tone.PitchShift;});Module(function(Tone){/**
		 *  @class Wrapper around the native BufferSourceNode.
		 *  @extends {Tone.AudioNode}
		 *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play
		 *  @param  {Function}  onload  The callback to invoke when the
		 *                               buffer is done playing.
		 */Tone.BufferSource=function(){var options=Tone.defaults(arguments,['buffer','onload'],Tone.BufferSource);Tone.AudioNode.call(this,options);/**
			 *  The callback to invoke after the
			 *  buffer source is done playing.
			 *  @type  {Function}
			 */this.onended=options.onended;/**
			 *  The time that the buffer was started.
			 *  @type  {Number}
			 *  @private
			 */this._startTime=-1;/**
			 *  An additional flag if the actual BufferSourceNode
			 *  has been started. b/c stopping an unstarted buffer
			 *  will throw it into an invalid state
			 *  @type  {Boolean}
			 *  @private
			 */this._sourceStarted=false;/**
			 *  Flag if the source has already been stopped
			 *  @type  {Boolean}
			 *  @private
			 */this._sourceStopped=false;/**
			 *  The time that the buffer is scheduled to stop.
			 *  @type  {Number}
			 *  @private
			 */this._stopTime=-1;/**
			 *  The gain node which envelopes the BufferSource
			 *  @type  {Tone.Gain}
			 *  @private
			 */this._gainNode=this.output=new Tone.Gain();/**
			 *  The buffer source
			 *  @type  {AudioBufferSourceNode}
			 *  @private
			 */this._source=this.context.createBufferSource();this._source.connect(this._gainNode);this._source.onended=this._onended.bind(this);/**
			 * The private buffer instance
			 * @type {Tone.Buffer}
			 * @private
			 */this._buffer=new Tone.Buffer(options.buffer,options.onload);/**
			 *  The playbackRate of the buffer
			 *  @type {Positive}
			 *  @signal
			 */this.playbackRate=new Tone.Param(this._source.playbackRate,Tone.Type.Positive);/**
			 *  The fadeIn time of the amplitude envelope.
			 *  @type {Time}
			 */this.fadeIn=options.fadeIn;/**
			 *  The fadeOut time of the amplitude envelope.
			 *  @type {Time}
			 */this.fadeOut=options.fadeOut;/**
			 * The curve applied to the fades, either "linear" or "exponential"
			 * @type {String}
			 */this.curve=options.curve;/**
			 *  The value that the buffer ramps to
			 *  @type {Gain}
			 *  @private
			 */this._gain=1;/**
			 * The onended timeout
			 * @type {Number}
			 * @private
			 */this._onendedTimeout=-1;//set some values initially
this.loop=options.loop;this.loopStart=options.loopStart;this.loopEnd=options.loopEnd;this.playbackRate.value=options.playbackRate;};Tone.extend(Tone.BufferSource,Tone.AudioNode);/**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */Tone.BufferSource.defaults={'onended':Tone.noOp,'onload':Tone.noOp,'loop':false,'loopStart':0,'loopEnd':0,'fadeIn':0,'fadeOut':0,'curve':'linear','playbackRate':1};/**
		 *  Returns the playback state of the source, either "started" or "stopped".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.BufferSource#
		 *  @name state
		 */Object.defineProperty(Tone.BufferSource.prototype,'state',{get:function get(){return this.getStateAtTime(this.now());}});/**
		 *  Get the playback state at the given time
		 *  @param  {Time}  time  The time to test the state at
		 *  @return  {Tone.State}  The playback state. 
		 */Tone.BufferSource.prototype.getStateAtTime=function(time){time=this.toSeconds(time);if(this._startTime!==-1&&time>=this._startTime&&!this._sourceStopped){return Tone.State.Started;}else{return Tone.State.Stopped;}};/**
		 *  Start the buffer
		 *  @param  {Time} [startTime=now] When the player should start.
		 *  @param  {Time} [offset=0] The offset from the beginning of the sample
		 *                                 to start at.
		 *  @param  {Time=} duration How long the sample should play. If no duration
		 *                                is given, it will default to the full length
		 *                                of the sample (minus any offset)
		 *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.
		 *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.
		 *  @return  {Tone.BufferSource}  this
		 */Tone.BufferSource.prototype.start=function(time,offset,duration,gain,fadeInTime){if(this._startTime!==-1){throw new Error('Tone.BufferSource can only be started once.');}if(!this.buffer.loaded){throw new Error('Tone.BufferSource: buffer is either not set or not loaded.');}time=this.toSeconds(time);//if it's a loop the default offset is the loopstart point
if(this.loop){offset=Tone.defaultArg(offset,this.loopStart);}else{//otherwise the default offset is 0
offset=Tone.defaultArg(offset,0);}offset=this.toSeconds(offset);gain=Tone.defaultArg(gain,1);this._gain=gain;fadeInTime=this.toSeconds(Tone.defaultArg(fadeInTime,this.fadeIn));this.fadeIn=fadeInTime;if(fadeInTime>0){this._gainNode.gain.setValueAtTime(0,time);if(this.curve==='linear'){this._gainNode.gain.linearRampToValueAtTime(this._gain,time+fadeInTime);}else{this._gainNode.gain.exponentialApproachValueAtTime(this._gain,time,fadeInTime);}}else{this._gainNode.gain.setValueAtTime(gain,time);}this._startTime=time;var computedDur=this.toSeconds(Tone.defaultArg(duration,this.buffer.duration-offset%this.buffer.duration));computedDur=Math.max(computedDur,0);if(Tone.isDefined(duration)){//clip the duration when not looping
if(!this.loop){computedDur=Math.min(computedDur,this.buffer.duration-offset%this.buffer.duration);}this.stop(time+computedDur,this.fadeOut);}//start the buffer source
if(this.loop){//modify the offset if it's greater than the loop time
var loopEnd=this.loopEnd||this.buffer.duration;var loopStart=this.loopStart;var loopDuration=loopEnd-loopStart;//move the offset back
if(offset>=loopEnd){offset=(offset-loopStart)%loopDuration+loopStart;}}this._source.buffer=this.buffer.get();this._source.loopEnd=this.loopEnd||this.buffer.duration;if(offset<this.buffer.duration){this._sourceStarted=true;this._source.start(time,offset);}return this;};/**
		 *  Stop the buffer. Optionally add a ramp time to fade the
		 *  buffer out.
		 *  @param  {Time=}  time         The time the buffer should stop.
		 *  @param  {Time=}  fadeOutTime  How long the gain should fade out for
		 *  @return  {Tone.BufferSource}  this
		 */Tone.BufferSource.prototype.stop=function(time,fadeOutTime){if(!this.buffer.loaded){throw new Error('Tone.BufferSource: buffer is either not set or not loaded.');}if(this._sourceStopped){return;}time=this.toSeconds(time);//if the event has already been scheduled, clear it
if(this._stopTime!==-1){this.cancelStop();}//stop if it's schedule before the start time
if(time<=this._startTime){this._gainNode.gain.cancelScheduledValues(time);this._gainNode.gain.value=0;return this;}time=Math.max(this._startTime+this.fadeIn+this.sampleTime,time);//cancel the previous curve
this._gainNode.gain.cancelScheduledValues(time);this._stopTime=time;//the fadeOut time
fadeOutTime=this.toSeconds(Tone.defaultArg(fadeOutTime,this.fadeOut));var heldDuration=time-this._startTime-this.fadeIn-this.sampleTime;if(!this.loop){//make sure the fade does not go beyond the length of the buffer
heldDuration=Math.min(heldDuration,this.buffer.duration);}fadeOutTime=Math.min(heldDuration,fadeOutTime);var startFade=time-fadeOutTime;if(fadeOutTime>this.sampleTime){this._gainNode.gain.setValueAtTime(this._gain,startFade);if(this.curve==='linear'){this._gainNode.gain.linearRampToValueAtTime(0,time);}else{this._gainNode.gain.exponentialApproachValueAtTime(0,startFade,fadeOutTime);}}else{this._gainNode.gain.setValueAtTime(0,time);}Tone.context.clearTimeout(this._onendedTimeout);this._onendedTimeout=Tone.context.setTimeout(this._onended.bind(this),this._stopTime-this.now());return this;};/**
		 *  Cancel a scheduled stop event
		 *  @return  {Tone.BufferSource}  this
		 */Tone.BufferSource.prototype.cancelStop=function(){if(this._startTime!==-1&&!this._sourceStopped){//cancel the stop envelope
var fadeInTime=this.toSeconds(this.fadeIn);this._gainNode.gain.cancelScheduledValues(this._startTime+fadeInTime+this.sampleTime);this._gainNode.gain.setValueAtTime(1,Math.max(this.now(),this._startTime+fadeInTime+this.sampleTime));this.context.clearTimeout(this._onendedTimeout);this._stopTime=-1;}return this;};/**
		 *  Internal callback when the buffer is ended.
		 *  Invokes `onended` and disposes the node.
		 *  @private
		 */Tone.BufferSource.prototype._onended=function(){if(!this._sourceStopped){this._sourceStopped=true;//allow additional time for the exponential curve to fully decay
var additionalTail=this.curve==='exponential'?this.fadeOut*2:0;if(this._sourceStarted&&this._stopTime!==-1){this._source.stop(this._stopTime+additionalTail);}this.onended(this);}};/**
		 * If loop is true, the loop will start at this position.
		 * @memberOf Tone.BufferSource#
		 * @type {Time}
		 * @name loopStart
		 */Object.defineProperty(Tone.BufferSource.prototype,'loopStart',{get:function get(){return this._source.loopStart;},set:function set(loopStart){this._source.loopStart=this.toSeconds(loopStart);}});/**
		 * If loop is true, the loop will end at this position.
		 * @memberOf Tone.BufferSource#
		 * @type {Time}
		 * @name loopEnd
		 */Object.defineProperty(Tone.BufferSource.prototype,'loopEnd',{get:function get(){return this._source.loopEnd;},set:function set(loopEnd){this._source.loopEnd=this.toSeconds(loopEnd);}});/**
		 * The audio buffer belonging to the player.
		 * @memberOf Tone.BufferSource#
		 * @type {Tone.Buffer}
		 * @name buffer
		 */Object.defineProperty(Tone.BufferSource.prototype,'buffer',{get:function get(){return this._buffer;},set:function set(buffer){this._buffer.set(buffer);}});/**
		 * If the buffer should loop once it's over.
		 * @memberOf Tone.BufferSource#
		 * @type {Boolean}
		 * @name loop
		 */Object.defineProperty(Tone.BufferSource.prototype,'loop',{get:function get(){return this._source.loop;},set:function set(loop){this._source.loop=loop;this.cancelStop();}});/**
		 *  Clean up.
		 *  @return  {Tone.BufferSource}  this
		 */Tone.BufferSource.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this.onended=null;this._source.onended=null;this._source.disconnect();this._source=null;this._gainNode.dispose();this._gainNode=null;this._buffer.dispose();this._buffer=null;this._startTime=-1;this.playbackRate=null;Tone.context.clearTimeout(this._onendedTimeout);return this;};return Tone.BufferSource;});Module(function(Tone){/**
		 *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.
		 *          Tone.Noise supports the noise types: "pink", "white", and "brown". Read more about
		 *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).
		 *
		 *  @constructor
		 *  @extends {Tone.Source}
		 *  @param {string} type the noise type (white|pink|brown)
		 *  @example
		 * //initialize the noise and start
		 * var noise = new Tone.Noise("pink").start();
		 *
		 * //make an autofilter to shape the noise
		 * var autoFilter = new Tone.AutoFilter({
		 * 	"frequency" : "8m",
		 * 	"min" : 800,
		 * 	"max" : 15000
		 * }).connect(Tone.Master);
		 *
		 * //connect the noise
		 * noise.connect(autoFilter);
		 * //start the autofilter LFO
		 * autoFilter.start()
		 */Tone.Noise=function(){var options=Tone.defaults(arguments,['type'],Tone.Noise);Tone.Source.call(this,options);/**
			 *  @private
			 *  @type {AudioBufferSourceNode}
			 */this._source=null;/**
			 *  the buffer
			 *  @private
			 *  @type {AudioBuffer}
			 */this._type=options.type;/**
			 *  The playback rate of the noise. Affects
			 *  the "frequency" of the noise.
			 *  @type {Positive}
			 *  @signal
			 */this._playbackRate=options.playbackRate;};Tone.extend(Tone.Noise,Tone.Source);/**
		 *  the default parameters
		 *
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.Noise.defaults={'type':'white','playbackRate':1};/**
		 * The type of the noise. Can be "white", "brown", or "pink".
		 * @memberOf Tone.Noise#
		 * @type {string}
		 * @name type
		 * @example
		 * noise.type = "white";
		 */Object.defineProperty(Tone.Noise.prototype,'type',{get:function get(){return this._type;},set:function set(type){if(this._type!==type){if(type in _noiseBuffers){this._type=type;//if it's playing, stop and restart it
if(this.state===Tone.State.Started){var now=this.now();this._stop(now);this._start(now);}}else{throw new TypeError('Tone.Noise: invalid type: '+type);}}}});/**
		 *  The playback rate of the noise. Affects
		 *  the "frequency" of the noise.
		 *  @type {Positive}
		 *  @signal
		 */Object.defineProperty(Tone.Noise.prototype,'playbackRate',{get:function get(){return this._playbackRate;},set:function set(rate){this._playbackRate=rate;if(this._source){this._source.playbackRate.value=rate;}}});/**
		 *  internal start method
		 *
		 *  @param {Time} time
		 *  @private
		 */Tone.Noise.prototype._start=function(time){var buffer=_noiseBuffers[this._type];this._source=new Tone.BufferSource(buffer).connect(this.output);this._source.loop=true;this._source.playbackRate.value=this._playbackRate;this._source.start(this.toSeconds(time),Math.random()*(buffer.duration-0.001));};/**
		 *  internal stop method
		 *
		 *  @param {Time} time
		 *  @private
		 */Tone.Noise.prototype._stop=function(time){if(this._source){this._source.stop(this.toSeconds(time));this._source=null;}};/**
		 * Restarts the noise.
		 * @param  {[type]} time [description]
		 * @return {[type]}      [description]
		 */Tone.Noise.prototype.restart=function(time){//TODO could be optimized by cancelling the buffer source 'stop'
//stop and restart
this._stop(time);this._start(time);};/**
		 *  Clean up.
		 *  @returns {Tone.Noise} this
		 */Tone.Noise.prototype.dispose=function(){Tone.Source.prototype.dispose.call(this);if(this._source!==null){this._source.disconnect();this._source=null;}this._buffer=null;return this;};///////////////////////////////////////////////////////////////////////////
// THE BUFFERS
///////////////////////////////////////////////////////////////////////////
//Noise buffer stats
var bufferLength=44100*5;var channels=2;/**
		 *	The noise arrays. Generated on initialization.
		 *  borrowed heavily from https://github.com/zacharydenton/noise.js
		 *  (c) 2013 Zach Denton (MIT)
		 *  @static
		 *  @private
		 *  @type {Array}
		 */var _noiseArrays={'pink':function(){var buffer=[];for(var channelNum=0;channelNum<channels;channelNum++){var channel=new Float32Array(bufferLength);buffer[channelNum]=channel;var b0,b1,b2,b3,b4,b5,b6;b0=b1=b2=b3=b4=b5=b6=0;for(var i=0;i<bufferLength;i++){var white=Math.random()*2-1;b0=0.99886*b0+white*0.0555179;b1=0.99332*b1+white*0.0750759;b2=0.969*b2+white*0.153852;b3=0.8665*b3+white*0.3104856;b4=0.55*b4+white*0.5329522;b5=-0.7616*b5-white*0.016898;channel[i]=b0+b1+b2+b3+b4+b5+b6+white*0.5362;channel[i]*=0.11;// (roughly) compensate for gain
b6=white*0.115926;}}return buffer;}(),'brown':function(){var buffer=[];for(var channelNum=0;channelNum<channels;channelNum++){var channel=new Float32Array(bufferLength);buffer[channelNum]=channel;var lastOut=0;for(var i=0;i<bufferLength;i++){var white=Math.random()*2-1;channel[i]=(lastOut+0.02*white)/1.02;lastOut=channel[i];channel[i]*=3.5;// (roughly) compensate for gain
}}return buffer;}(),'white':function(){var buffer=[];for(var channelNum=0;channelNum<channels;channelNum++){var channel=new Float32Array(bufferLength);buffer[channelNum]=channel;for(var i=0;i<bufferLength;i++){channel[i]=Math.random()*2-1;}}return buffer;}()};/**
		 *	static noise buffers
		 *  @static
		 *  @private
		 *  @type {Tone.Buffer}
		 */var _noiseBuffers={};//create the Tone.Buffers
function createBuffers(){for(var type in _noiseArrays){_noiseBuffers[type]=new Tone.Buffer().fromArray(_noiseArrays[type]);}}//create the noise buffers
Tone.getContext(createBuffers);Tone.Context.on('init',createBuffers);return Tone.Noise;});Module(function(Tone){/**
		 *  @class Simple convolution created with decaying noise.
		 *  		Generates an Impulse Response Buffer
		 * 			with Tone.Offline then feeds the IR into ConvolverNode.
		 * 			Note: the Reverb will not make any sound until [generate](#generate)
		 * 			has been invoked and resolved.
		 *
		 * 			Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).
		 * 			Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.
		 *
		 *  @extends {Tone.Convolver}
		 *  @param {Time=} decay The amount of time it will reverberate for.
		 */Tone.Reverb=function(){var options=Tone.defaults(arguments,['decay'],Tone.Reverb);Tone.Effect.call(this,options);/**
			 *  Convolver node
			 *  @type {ConvolverNode}
			 *  @private
			 */this._convolver=this.context.createConvolver();/**
			 * The duration of the reverb
			 * @type {Time}
			 */this.decay=options.decay;/**
			 * The amount of time before the reverb is fully
			 * ramped in.
			 * @type {Time}
			 */this.preDelay=options.preDelay;this.connectEffect(this._convolver);};Tone.extend(Tone.Reverb,Tone.Effect);/**
		 * The defaults
		 * @type {Object}
		 * @static
		 */Tone.Reverb.defaults={'decay':1.5,'preDelay':0.01};/**
		 * Generate the Impulse Response. Returns a promise while the IR is being
		 * generated.
		 * @return {Promise<Tone.Reverb>} Promise which returns this object.
		 */Tone.Reverb.prototype.generate=function(){return Tone.Offline(function(){//create a noise burst which decays over the duration
var noiseL=new Tone.Noise();var noiseR=new Tone.Noise();var merge=new Tone.Merge();noiseL.connect(merge.left);noiseR.connect(merge.right);var gainNode=new Tone.Gain().toMaster();merge.connect(gainNode);noiseL.start(0);noiseR.start(0);//short fade in
gainNode.gain.setValueAtTime(0,0);gainNode.gain.linearRampToValueAtTime(1,this.preDelay);//decay
gainNode.gain.exponentialApproachValueAtTime(0,this.preDelay,this.decay-this.preDelay);}.bind(this),this.decay).then(function(buffer){this._convolver.buffer=buffer.get();return this;}.bind(this));};/**
		 *  Clean up.
		 *  @return  {Tone.Reverb}  this
		 */Tone.Reverb.prototype.dispose=function(){Tone.Effect.prototype.dispose.call(this);this._convolver.disconnect();this._convolver=null;return this;};return Tone.Reverb;});Module(function(Tone){/**
		 *  @class Base class for stereo feedback effects where the effectReturn
		 *         is fed back into the same channel.
		 *
		 *	@constructor
		 *	@extends {Tone.StereoEffect}
		 */Tone.StereoFeedbackEffect=function(){var options=Tone.defaults(arguments,['feedback'],Tone.FeedbackEffect);Tone.StereoEffect.call(this,options);/**
			 *  controls the amount of feedback
			 *  @type {NormalRange}
			 *  @signal
			 */this.feedback=new Tone.Signal(options.feedback,Tone.Type.NormalRange);/**
			 *  the left side feeback
			 *  @type {Tone.Gain}
			 *  @private
			 */this._feedbackL=new Tone.Gain();/**
			 *  the right side feeback
			 *  @type {Tone.Gain}
			 *  @private
			 */this._feedbackR=new Tone.Gain();//connect it up
this.effectReturnL.chain(this._feedbackL,this.effectSendL);this.effectReturnR.chain(this._feedbackR,this.effectSendR);this.feedback.fan(this._feedbackL.gain,this._feedbackR.gain);this._readOnly(['feedback']);};Tone.extend(Tone.StereoFeedbackEffect,Tone.StereoEffect);/**
		 *  clean up
		 *  @returns {Tone.StereoFeedbackEffect} this
		 */Tone.StereoFeedbackEffect.prototype.dispose=function(){Tone.StereoEffect.prototype.dispose.call(this);this._writable(['feedback']);this.feedback.dispose();this.feedback=null;this._feedbackL.dispose();this._feedbackL=null;this._feedbackR.dispose();this._feedbackR=null;return this;};return Tone.StereoFeedbackEffect;});Module(function(Tone){/**
		 *  @class Applies a width factor to the mid/side seperation.
		 *         0 is all mid and 1 is all side.
		 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
		 *         <br><br>
		 *         <code>
		 *         Mid *= 2*(1-width)<br>
		 *         Side *= 2*width
		 *         </code>
		 *
		 *  @extends {Tone.MidSideEffect}
		 *  @constructor
		 *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.
		 */Tone.StereoWidener=function(){var options=Tone.defaults(arguments,['width'],Tone.StereoWidener);Tone.MidSideEffect.call(this,options);/**
			 *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.
			 *  @type {NormalRange}
			 *  @signal
			 */this.width=new Tone.Signal(options.width,Tone.Type.NormalRange);this._readOnly(['width']);/**
			 * Two times the (1-width) for the mid channel
			 * @type {Tone.Multiply}
			 * @private
			 */this._twoTimesWidthMid=new Tone.Multiply(2);/**
			 * Two times the width for the side channel
			 * @type {Tone.Multiply}
			 * @private
			 */this._twoTimesWidthSide=new Tone.Multiply(2);/**
			 *  Mid multiplier
			 *  @type {Tone.Multiply}
			 *  @private
			 */this._midMult=new Tone.Multiply();this._twoTimesWidthMid.connect(this._midMult,0,1);this.midSend.chain(this._midMult,this.midReturn);/**
			 * 1 - width
			 * @type {Tone}
			 */this._oneMinusWidth=new Tone.Subtract();this._oneMinusWidth.connect(this._twoTimesWidthMid);this.context.getConstant(1).connect(this._oneMinusWidth,0,0);this.width.connect(this._oneMinusWidth,0,1);/**
			 *  Side multiplier
			 *  @type {Tone.Multiply}
			 *  @private
			 */this._sideMult=new Tone.Multiply();this.width.connect(this._twoTimesWidthSide);this._twoTimesWidthSide.connect(this._sideMult,0,1);this.sideSend.chain(this._sideMult,this.sideReturn);};Tone.extend(Tone.StereoWidener,Tone.MidSideEffect);/**
		 *  the default values
		 *  @static
		 *  @type {Object}
		 */Tone.StereoWidener.defaults={'width':0.5};/**
		 *  Clean up.
		 *  @returns {Tone.StereoWidener} this
		 */Tone.StereoWidener.prototype.dispose=function(){Tone.MidSideEffect.prototype.dispose.call(this);this._writable(['width']);this.width.dispose();this.width=null;this._midMult.dispose();this._midMult=null;this._sideMult.dispose();this._sideMult=null;this._twoTimesWidthMid.dispose();this._twoTimesWidthMid=null;this._twoTimesWidthSide.dispose();this._twoTimesWidthSide=null;this._oneMinusWidth.dispose();this._oneMinusWidth=null;return this;};return Tone.StereoWidener;});Module(function(Tone){/**
		 *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.
		 *         The type, frequency, and depth of the LFO is controllable.
		 *
		 *  @extends {Tone.StereoEffect}
		 *  @constructor
		 *  @param {Frequency} [frequency] The rate of the effect.
		 *  @param {NormalRange} [depth] The depth of the effect.
		 *  @example
		 * //create a tremolo and start it's LFO
		 * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();
		 * //route an oscillator through the tremolo and start it
		 * var oscillator = new Tone.Oscillator().connect(tremolo).start();
		 */Tone.Tremolo=function(){var options=Tone.defaults(arguments,['frequency','depth'],Tone.Tremolo);Tone.StereoEffect.call(this,options);/**
			 *  The tremelo LFO in the left channel
			 *  @type  {Tone.LFO}
			 *  @private
			 */this._lfoL=new Tone.LFO({'phase':options.spread,'min':1,'max':0});/**
			 *  The tremelo LFO in the left channel
			 *  @type  {Tone.LFO}
			 *  @private
			 */this._lfoR=new Tone.LFO({'phase':options.spread,'min':1,'max':0});/**
			 *  Where the gain is multiplied
			 *  @type  {Tone.Gain}
			 *  @private
			 */this._amplitudeL=new Tone.Gain();/**
			 *  Where the gain is multiplied
			 *  @type  {Tone.Gain}
			 *  @private
			 */this._amplitudeR=new Tone.Gain();/**
			 *  The frequency of the tremolo.
			 *  @type  {Frequency}
			 *  @signal
			 */this.frequency=new Tone.Signal(options.frequency,Tone.Type.Frequency);/**
			 *  The depth of the effect. A depth of 0, has no effect
			 *  on the amplitude, and a depth of 1 makes the amplitude
			 *  modulate fully between 0 and 1.
			 *  @type  {NormalRange}
			 *  @signal
			 */this.depth=new Tone.Signal(options.depth,Tone.Type.NormalRange);this._readOnly(['frequency','depth']);this.effectSendL.chain(this._amplitudeL,this.effectReturnL);this.effectSendR.chain(this._amplitudeR,this.effectReturnR);this._lfoL.connect(this._amplitudeL.gain);this._lfoR.connect(this._amplitudeR.gain);this.frequency.fan(this._lfoL.frequency,this._lfoR.frequency);this.depth.fan(this._lfoR.amplitude,this._lfoL.amplitude);this.type=options.type;this.spread=options.spread;};Tone.extend(Tone.Tremolo,Tone.StereoEffect);/**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.Tremolo.defaults={'frequency':10,'type':'sine','depth':0.5,'spread':180};/**
		 * Start the tremolo.
		 * @param {Time} [time=now] When the tremolo begins.
		 * @returns {Tone.Tremolo} this
		 */Tone.Tremolo.prototype.start=function(time){this._lfoL.start(time);this._lfoR.start(time);return this;};/**
		 * Stop the tremolo.
		 * @param {Time} [time=now] When the tremolo stops.
		 * @returns {Tone.Tremolo} this
		 */Tone.Tremolo.prototype.stop=function(time){this._lfoL.stop(time);this._lfoR.stop(time);return this;};/**
		 * Sync the effect to the transport.
		 * @param {Time} [delay=0] Delay time before starting the effect after the
		 *                              Transport has started.
		 * @returns {Tone.AutoFilter} this
		 */Tone.Tremolo.prototype.sync=function(delay){this._lfoL.sync(delay);this._lfoR.sync(delay);Tone.Transport.syncSignal(this.frequency);return this;};/**
		 * Unsync the filter from the transport
		 * @returns {Tone.Tremolo} this
		 */Tone.Tremolo.prototype.unsync=function(){this._lfoL.unsync();this._lfoR.unsync();Tone.Transport.unsyncSignal(this.frequency);return this;};/**
		 * The Tremolo's oscillator type.
		 * @memberOf Tone.Tremolo#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.Tremolo.prototype,'type',{get:function get(){return this._lfoL.type;},set:function set(type){this._lfoL.type=type;this._lfoR.type=type;}});/**
		 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
		 * When set to 180, LFO's will be panned hard left and right respectively.
		 * @memberOf Tone.Tremolo#
		 * @type {Degrees}
		 * @name spread
		 */Object.defineProperty(Tone.Tremolo.prototype,'spread',{get:function get(){return this._lfoR.phase-this._lfoL.phase;//180
},set:function set(spread){this._lfoL.phase=90-spread/2;this._lfoR.phase=spread/2+90;}});/**
		 *  clean up
		 *  @returns {Tone.Tremolo} this
		 */Tone.Tremolo.prototype.dispose=function(){Tone.StereoEffect.prototype.dispose.call(this);this._writable(['frequency','depth']);this._lfoL.dispose();this._lfoL=null;this._lfoR.dispose();this._lfoR=null;this._amplitudeL.dispose();this._amplitudeL=null;this._amplitudeR.dispose();this._amplitudeR=null;this.frequency=null;this.depth=null;return this;};return Tone.Tremolo;});Module(function(Tone){/**
		 *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO
		 *         modulates the delayTime of the delay, causing the pitch to rise
		 *         and fall. 
		 *  @extends {Tone.Effect}
		 *  @param {Frequency} frequency The frequency of the vibrato.
		 *  @param {NormalRange} depth The amount the pitch is modulated.
		 */Tone.Vibrato=function(){var options=Tone.defaults(arguments,['frequency','depth'],Tone.Vibrato);Tone.Effect.call(this,options);/**
			 *  The delay node used for the vibrato effect
			 *  @type {Tone.Delay}
			 *  @private
			 */this._delayNode=new Tone.Delay(0,options.maxDelay);/**
			 *  The LFO used to control the vibrato
			 *  @type {Tone.LFO}
			 *  @private
			 */this._lfo=new Tone.LFO({'type':options.type,'min':0,'max':options.maxDelay,'frequency':options.frequency,'phase':-90//offse the phase so the resting position is in the center
}).start().connect(this._delayNode.delayTime);/**
			 *  The frequency of the vibrato
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=this._lfo.frequency;/**
			 *  The depth of the vibrato. 
			 *  @type {NormalRange}
			 *  @signal
			 */this.depth=this._lfo.amplitude;this.depth.value=options.depth;this._readOnly(['frequency','depth']);this.effectSend.chain(this._delayNode,this.effectReturn);};Tone.extend(Tone.Vibrato,Tone.Effect);/**
		 *  The defaults
		 *  @type  {Object}
		 *  @const
		 */Tone.Vibrato.defaults={'maxDelay':0.005,'frequency':5,'depth':0.1,'type':'sine'};/**
		 * Type of oscillator attached to the Vibrato.
		 * @memberOf Tone.Vibrato#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.Vibrato.prototype,'type',{get:function get(){return this._lfo.type;},set:function set(type){this._lfo.type=type;}});/**
		 *  Clean up.
		 *  @returns {Tone.Vibrato} this
		 */Tone.Vibrato.prototype.dispose=function(){Tone.Effect.prototype.dispose.call(this);this._delayNode.dispose();this._delayNode=null;this._lfo.dispose();this._lfo=null;this._writable(['frequency','depth']);this.frequency=null;this.depth=null;};return Tone.Vibrato;});Module(function(Tone){/**
		 *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable
		 *          callback for a single or repeatable events along the timeline.
		 *
		 *  @extends {Tone}
		 *  @param {function} callback The callback to invoke at the time.
		 *  @param {*} value The value or values which should be passed to
		 *                      the callback function on invocation.
		 *  @example
		 * var chord = new Tone.Event(function(time, chord){
		 * 	//the chord as well as the exact time of the event
		 * 	//are passed in as arguments to the callback function
		 * }, ["D4", "E4", "F4"]);
		 * //start the chord at the beginning of the transport timeline
		 * chord.start();
		 * //loop it every measure for 8 measures
		 * chord.loop = 8;
		 * chord.loopEnd = "1m";
		 */Tone.Event=function(){var options=Tone.defaults(arguments,['callback','value'],Tone.Event);Tone.call(this);/**
			 *  Loop value
			 *  @type  {Boolean|Positive}
			 *  @private
			 */this._loop=options.loop;/**
			 *  The callback to invoke.
			 *  @type  {Function}
			 */this.callback=options.callback;/**
			 *  The value which is passed to the
			 *  callback function.
			 *  @type  {*}
			 *  @private
			 */this.value=options.value;/**
			 *  When the note is scheduled to start.
			 *  @type  {Number}
			 *  @private
			 */this._loopStart=this.toTicks(options.loopStart);/**
			 *  When the note is scheduled to start.
			 *  @type  {Number}
			 *  @private
			 */this._loopEnd=this.toTicks(options.loopEnd);/**
			 *  Tracks the scheduled events
			 *  @type {Tone.TimelineState}
			 *  @private
			 */this._state=new Tone.TimelineState(Tone.State.Stopped);/**
			 *  The playback speed of the note. A speed of 1
			 *  is no change.
			 *  @private
			 *  @type {Positive}
			 */this._playbackRate=1;/**
			 *  A delay time from when the event is scheduled to start
			 *  @type {Ticks}
			 *  @private
			 */this._startOffset=0;/**
			 *  private holder of probability value
			 *  @type {NormalRange}
			 *  @private
			 */this._probability=options.probability;/**
			 *  the amount of variation from the
			 *  given time.
			 *  @type {Boolean|Time}
			 *  @private
			 */this._humanize=options.humanize;/**
			 *  If mute is true, the callback won't be
			 *  invoked.
			 *  @type {Boolean}
			 */this.mute=options.mute;//set the initial values
this.playbackRate=options.playbackRate;};Tone.extend(Tone.Event);/**
		 *  The default values
		 *  @type  {Object}
		 *  @const
		 */Tone.Event.defaults={'callback':Tone.noOp,'loop':false,'loopEnd':'1m','loopStart':0,'playbackRate':1,'value':null,'probability':1,'mute':false,'humanize':false};/**
		 *  Reschedule all of the events along the timeline
		 *  with the updated values.
		 *  @param {Time} after Only reschedules events after the given time.
		 *  @return  {Tone.Event}  this
		 *  @private
		 */Tone.Event.prototype._rescheduleEvents=function(after){//if no argument is given, schedules all of the events
after=Tone.defaultArg(after,-1);this._state.forEachFrom(after,function(event){var duration;if(event.state===Tone.State.Started){if(Tone.isDefined(event.id)){Tone.Transport.clear(event.id);}var startTick=event.time+Math.round(this.startOffset/this._playbackRate);if(this._loop){duration=Infinity;if(Tone.isNumber(this._loop)){duration=this._loop*this._getLoopDuration();}var nextEvent=this._state.getAfter(startTick);if(nextEvent!==null){duration=Math.min(duration,nextEvent.time-startTick);}if(duration!==Infinity){//schedule a stop since it's finite duration
this._state.setStateAtTime(Tone.State.Stopped,startTick+duration+1);duration=Tone.Ticks(duration);}var interval=Tone.Ticks(this._getLoopDuration());event.id=Tone.Transport.scheduleRepeat(this._tick.bind(this),interval,Tone.Ticks(startTick),duration);}else{event.id=Tone.Transport.schedule(this._tick.bind(this),Tone.Ticks(startTick));}}}.bind(this));return this;};/**
		 *  Returns the playback state of the note, either "started" or "stopped".
		 *  @type {String}
		 *  @readOnly
		 *  @memberOf Tone.Event#
		 *  @name state
		 */Object.defineProperty(Tone.Event.prototype,'state',{get:function get(){return this._state.getValueAtTime(Tone.Transport.ticks);}});/**
		 *  The start from the scheduled start time
		 *  @type {Ticks}
		 *  @memberOf Tone.Event#
		 *  @name startOffset
		 *  @private
		 */Object.defineProperty(Tone.Event.prototype,'startOffset',{get:function get(){return this._startOffset;},set:function set(offset){this._startOffset=offset;}});/**
		 *  The probability of the notes being triggered.
		 *  @memberOf Tone.Event#
		 *  @type {NormalRange}
		 *  @name probability
		 */Object.defineProperty(Tone.Event.prototype,'probability',{get:function get(){return this._probability;},set:function set(prob){this._probability=prob;}});/**
		 *  If set to true, will apply small random variation
		 *  to the callback time. If the value is given as a time, it will randomize
		 *  by that amount.
		 *  @example
		 * event.humanize = true;
		 *  @type {Boolean|Time}
		 *  @name humanize
		 */Object.defineProperty(Tone.Event.prototype,'humanize',{get:function get(){return this._humanize;},set:function set(variation){this._humanize=variation;}});/**
		 *  Start the note at the given time.
		 *  @param  {TimelinePosition}  time  When the note should start.
		 *  @return  {Tone.Event}  this
		 */Tone.Event.prototype.start=function(time){time=this.toTicks(time);if(this._state.getValueAtTime(time)===Tone.State.Stopped){this._state.add({'state':Tone.State.Started,'time':time,'id':undefined});this._rescheduleEvents(time);}return this;};/**
		 *  Stop the Event at the given time.
		 *  @param  {TimelinePosition}  time  When the note should stop.
		 *  @return  {Tone.Event}  this
		 */Tone.Event.prototype.stop=function(time){this.cancel(time);time=this.toTicks(time);if(this._state.getValueAtTime(time)===Tone.State.Started){this._state.setStateAtTime(Tone.State.Stopped,time);var previousEvent=this._state.getBefore(time);var reschedulTime=time;if(previousEvent!==null){reschedulTime=previousEvent.time;}this._rescheduleEvents(reschedulTime);}return this;};/**
		 *  Cancel all scheduled events greater than or equal to the given time
		 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
		 *  @return  {Tone.Event}  this
		 */Tone.Event.prototype.cancel=function(time){time=Tone.defaultArg(time,-Infinity);time=this.toTicks(time);this._state.forEachFrom(time,function(event){Tone.Transport.clear(event.id);});this._state.cancel(time);return this;};/**
		 *  The callback function invoker. Also
		 *  checks if the Event is done playing
		 *  @param  {Number}  time  The time of the event in seconds
		 *  @private
		 */Tone.Event.prototype._tick=function(time){var ticks=Tone.Transport.getTicksAtTime(time);if(!this.mute&&this._state.getValueAtTime(ticks)===Tone.State.Started){if(this.probability<1&&Math.random()>this.probability){return;}if(this.humanize){var variation=0.02;if(!Tone.isBoolean(this.humanize)){variation=this.toSeconds(this.humanize);}time+=(Math.random()*2-1)*variation;}this.callback(time,this.value);}};/**
		 *  Get the duration of the loop.
		 *  @return  {Ticks}
		 *  @private
		 */Tone.Event.prototype._getLoopDuration=function(){return Math.round((this._loopEnd-this._loopStart)/this._playbackRate);};/**
		 *  If the note should loop or not
		 *  between Tone.Event.loopStart and
		 *  Tone.Event.loopEnd. An integer
		 *  value corresponds to the number of
		 *  loops the Event does after it starts.
		 *  @memberOf Tone.Event#
		 *  @type {Boolean|Positive}
		 *  @name loop
		 */Object.defineProperty(Tone.Event.prototype,'loop',{get:function get(){return this._loop;},set:function set(loop){this._loop=loop;this._rescheduleEvents();}});/**
		 * 	The playback rate of the note. Defaults to 1.
		 *  @memberOf Tone.Event#
		 *  @type {Positive}
		 *  @name playbackRate
		 *  @example
		 * note.loop = true;
		 * //repeat the note twice as fast
		 * note.playbackRate = 2;
		 */Object.defineProperty(Tone.Event.prototype,'playbackRate',{get:function get(){return this._playbackRate;},set:function set(rate){this._playbackRate=rate;this._rescheduleEvents();}});/**
		 *  The loopEnd point is the time the event will loop
		 *  if Tone.Event.loop is true.
		 *  @memberOf Tone.Event#
		 *  @type {Time}
		 *  @name loopEnd
		 */Object.defineProperty(Tone.Event.prototype,'loopEnd',{get:function get(){return Tone.Ticks(this._loopEnd).toSeconds();},set:function set(loopEnd){this._loopEnd=this.toTicks(loopEnd);if(this._loop){this._rescheduleEvents();}}});/**
		 *  The time when the loop should start.
		 *  @memberOf Tone.Event#
		 *  @type {Time}
		 *  @name loopStart
		 */Object.defineProperty(Tone.Event.prototype,'loopStart',{get:function get(){return Tone.Ticks(this._loopStart).toSeconds();},set:function set(loopStart){this._loopStart=this.toTicks(loopStart);if(this._loop){this._rescheduleEvents();}}});/**
		 *  The current progress of the loop interval.
		 *  Returns 0 if the event is not started yet or
		 *  it is not set to loop.
		 *  @memberOf Tone.Event#
		 *  @type {NormalRange}
		 *  @name progress
		 *  @readOnly
		 */Object.defineProperty(Tone.Event.prototype,'progress',{get:function get(){if(this._loop){var ticks=Tone.Transport.ticks;var lastEvent=this._state.get(ticks);if(lastEvent!==null&&lastEvent.state===Tone.State.Started){var loopDuration=this._getLoopDuration();var progress=(ticks-lastEvent.time)%loopDuration;return progress/loopDuration;}else{return 0;}}else{return 0;}}});/**
		 *  Clean up
		 *  @return  {Tone.Event}  this
		 */Tone.Event.prototype.dispose=function(){this.cancel();this._state.dispose();this._state=null;this.callback=null;this.value=null;};return Tone.Event;});Module(function(Tone){/**
		 *  @class Tone.Loop creates a looped callback at the 
		 *         specified interval. The callback can be 
		 *         started, stopped and scheduled along
		 *         the Transport's timeline. 
		 *  @example
		 * var loop = new Tone.Loop(function(time){
		 * 	//triggered every eighth note. 
		 * 	console.log(time);
		 * }, "8n").start(0);
		 * Tone.Transport.start();
		 *  @extends {Tone}
		 *  @param {Function} callback The callback to invoke with the event.
		 *  @param {Time} interval The time between successive callback calls. 
		 */Tone.Loop=function(){var options=Tone.defaults(arguments,['callback','interval'],Tone.Loop);Tone.call(this);/**
			 *  The event which produces the callbacks
			 */this._event=new Tone.Event({'callback':this._tick.bind(this),'loop':true,'loopEnd':options.interval,'playbackRate':options.playbackRate,'probability':options.probability});/**
			 *  The callback to invoke with the next event in the pattern
			 *  @type {Function}
			 */this.callback=options.callback;//set the iterations
this.iterations=options.iterations;};Tone.extend(Tone.Loop);/**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */Tone.Loop.defaults={'interval':'4n','callback':Tone.noOp,'playbackRate':1,'iterations':Infinity,'probability':true,'mute':false};/**
		 *  Start the loop at the specified time along the Transport's
		 *  timeline.
		 *  @param  {TimelinePosition=}  time  When to start the Loop.
		 *  @return  {Tone.Loop}  this
		 */Tone.Loop.prototype.start=function(time){this._event.start(time);return this;};/**
		 *  Stop the loop at the given time.
		 *  @param  {TimelinePosition=}  time  When to stop the Arpeggio
		 *  @return  {Tone.Loop}  this
		 */Tone.Loop.prototype.stop=function(time){this._event.stop(time);return this;};/**
		 *  Cancel all scheduled events greater than or equal to the given time
		 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
		 *  @return  {Tone.Loop}  this
		 */Tone.Loop.prototype.cancel=function(time){this._event.cancel(time);return this;};/**
		 *  Internal function called when the notes should be called
		 *  @param  {Number}  time  The time the event occurs
		 *  @private
		 */Tone.Loop.prototype._tick=function(time){this.callback(time);};/**
		 *  The state of the Loop, either started or stopped.
		 *  @memberOf Tone.Loop#
		 *  @type {String}
		 *  @name state
		 *  @readOnly
		 */Object.defineProperty(Tone.Loop.prototype,'state',{get:function get(){return this._event.state;}});/**
		 *  The progress of the loop as a value between 0-1. 0, when
		 *  the loop is stopped or done iterating. 
		 *  @memberOf Tone.Loop#
		 *  @type {NormalRange}
		 *  @name progress
		 *  @readOnly
		 */Object.defineProperty(Tone.Loop.prototype,'progress',{get:function get(){return this._event.progress;}});/**
		 *  The time between successive callbacks. 
		 *  @example
		 * loop.interval = "8n"; //loop every 8n
		 *  @memberOf Tone.Loop#
		 *  @type {Time}
		 *  @name interval
		 */Object.defineProperty(Tone.Loop.prototype,'interval',{get:function get(){return this._event.loopEnd;},set:function set(interval){this._event.loopEnd=interval;}});/**
		 *  The playback rate of the loop. The normal playback rate is 1 (no change). 
		 *  A `playbackRate` of 2 would be twice as fast. 
		 *  @memberOf Tone.Loop#
		 *  @type {Time}
		 *  @name playbackRate
		 */Object.defineProperty(Tone.Loop.prototype,'playbackRate',{get:function get(){return this._event.playbackRate;},set:function set(rate){this._event.playbackRate=rate;}});/**
		 *  Random variation +/-0.01s to the scheduled time. 
		 *  Or give it a time value which it will randomize by.
		 *  @type {Boolean|Time}
		 *  @memberOf Tone.Loop#
		 *  @name humanize
		 */Object.defineProperty(Tone.Loop.prototype,'humanize',{get:function get(){return this._event.humanize;},set:function set(variation){this._event.humanize=variation;}});/**
		 *  The probably of the callback being invoked.
		 *  @memberOf Tone.Loop#
		 *  @type {NormalRange}
		 *  @name probability
		 */Object.defineProperty(Tone.Loop.prototype,'probability',{get:function get(){return this._event.probability;},set:function set(prob){this._event.probability=prob;}});/**
		 *  Muting the Loop means that no callbacks are invoked.
		 *  @memberOf Tone.Loop#
		 *  @type {Boolean}
		 *  @name mute
		 */Object.defineProperty(Tone.Loop.prototype,'mute',{get:function get(){return this._event.mute;},set:function set(mute){this._event.mute=mute;}});/**
		 *  The number of iterations of the loop. The default
		 *  value is Infinity (loop forever).
		 *  @memberOf Tone.Loop#
		 *  @type {Positive}
		 *  @name iterations
		 */Object.defineProperty(Tone.Loop.prototype,'iterations',{get:function get(){if(this._event.loop===true){return Infinity;}else{return this._event.loop;}},set:function set(iters){if(iters===Infinity){this._event.loop=true;}else{this._event.loop=iters;}}});/**
		 *  Clean up
		 *  @return  {Tone.Loop}  this
		 */Tone.Loop.prototype.dispose=function(){this._event.dispose();this._event=null;this.callback=null;};return Tone.Loop;});Module(function(Tone){/**
		 *  @class Tone.Part is a collection Tone.Events which can be
		 *         started/stopped and looped as a single unit.
		 *
		 *  @extends {Tone.Event}
		 *  @param {Function} callback The callback to invoke on each event
		 *  @param {Array} events the array of events
		 *  @example
		 * var part = new Tone.Part(function(time, note){
		 * 	//the notes given as the second element in the array
		 * 	//will be passed in as the second argument
		 * 	synth.triggerAttackRelease(note, "8n", time);
		 * }, [[0, "C2"], ["0:2", "C3"], ["0:3:2", "G2"]]);
		 *  @example
		 * //use an array of objects as long as the object has a "time" attribute
		 * var part = new Tone.Part(function(time, value){
		 * 	//the value is an object which contains both the note and the velocity
		 * 	synth.triggerAttackRelease(value.note, "8n", time, value.velocity);
		 * }, [{"time" : 0, "note" : "C3", "velocity": 0.9},
		 * 	   {"time" : "0:2", "note" : "C4", "velocity": 0.5}
		 * ]).start(0);
		 */Tone.Part=function(){var options=Tone.defaults(arguments,['callback','events'],Tone.Part);Tone.Event.call(this,options);/**
			 *  An array of Objects.
			 *  @type  {Array}
			 *  @private
			 */this._events=[];//add the events
for(var i=0;i<options.events.length;i++){if(Array.isArray(options.events[i])){this.add(options.events[i][0],options.events[i][1]);}else{this.add(options.events[i]);}}};Tone.extend(Tone.Part,Tone.Event);/**
		 *  The default values
		 *  @type  {Object}
		 *  @const
		 */Tone.Part.defaults={'callback':Tone.noOp,'loop':false,'loopEnd':'1m','loopStart':0,'playbackRate':1,'probability':1,'humanize':false,'mute':false,'events':[]};/**
		 *  Start the part at the given time.
		 *  @param  {TransportTime}  time    When to start the part.
		 *  @param  {Time=}  offset  The offset from the start of the part
		 *                           to begin playing at.
		 *  @return  {Tone.Part}  this
		 */Tone.Part.prototype.start=function(time,offset){var ticks=this.toTicks(time);if(this._state.getValueAtTime(ticks)!==Tone.State.Started){if(this._loop){offset=Tone.defaultArg(offset,this._loopStart);}else{offset=Tone.defaultArg(offset,0);}offset=this.toTicks(offset);this._state.add({'state':Tone.State.Started,'time':ticks,'offset':offset});this._forEach(function(event){this._startNote(event,ticks,offset);});}return this;};/**
		 *  Start the event in the given event at the correct time given
		 *  the ticks and offset and looping.
		 *  @param  {Tone.Event}  event
		 *  @param  {Ticks}  ticks
		 *  @param  {Ticks}  offset
		 *  @private
		 */Tone.Part.prototype._startNote=function(event,ticks,offset){ticks-=offset;if(this._loop){if(event.startOffset>=this._loopStart&&event.startOffset<this._loopEnd){if(event.startOffset<offset){//start it on the next loop
ticks+=this._getLoopDuration();}event.start(Tone.Ticks(ticks));}else if(event.startOffset<this._loopStart&&event.startOffset>=offset){event.loop=false;event.start(Tone.Ticks(ticks));}}else if(event.startOffset>=offset){event.start(Tone.Ticks(ticks));}};/**
		 *  The start from the scheduled start time
		 *  @type {Ticks}
		 *  @memberOf Tone.Part#
		 *  @name startOffset
		 *  @private
		 */Object.defineProperty(Tone.Part.prototype,'startOffset',{get:function get(){return this._startOffset;},set:function set(offset){this._startOffset=offset;this._forEach(function(event){event.startOffset+=this._startOffset;});}});/**
		 *  Stop the part at the given time.
		 *  @param  {TimelinePosition}  time  When to stop the part.
		 *  @return  {Tone.Part}  this
		 */Tone.Part.prototype.stop=function(time){var ticks=this.toTicks(time);this._state.cancel(ticks);this._state.setStateAtTime(Tone.State.Stopped,ticks);this._forEach(function(event){event.stop(time);});return this;};/**
		 *  Get/Set an Event's value at the given time.
		 *  If a value is passed in and no event exists at
		 *  the given time, one will be created with that value.
		 *  If two events are at the same time, the first one will
		 *  be returned.
		 *  @example
		 * part.at("1m"); //returns the part at the first measure
		 *
		 * part.at("2m", "C2"); //set the value at "2m" to C2.
		 * //if an event didn't exist at that time, it will be created.
		 *  @param {TransportTime} time The time of the event to get or set.
		 *  @param {*=} value If a value is passed in, the value of the
		 *                    event at the given time will be set to it.
		 *  @return {Tone.Event} the event at the time
		 */Tone.Part.prototype.at=function(time,value){time=Tone.TransportTime(time);var tickTime=Tone.Ticks(1).toSeconds();for(var i=0;i<this._events.length;i++){var event=this._events[i];if(Math.abs(time.toTicks()-event.startOffset)<tickTime){if(Tone.isDefined(value)){event.value=value;}return event;}}//if there was no event at that time, create one
if(Tone.isDefined(value)){this.add(time,value);//return the new event
return this._events[this._events.length-1];}else{return null;}};/**
		 *  Add a an event to the part.
		 *  @param {Time} time The time the note should start.
		 *                            If an object is passed in, it should
		 *                            have a 'time' attribute and the rest
		 *                            of the object will be used as the 'value'.
		 *  @param  {Tone.Event|*}  value
		 *  @returns {Tone.Part} this
		 *  @example
		 * part.add("1m", "C#+11");
		 */Tone.Part.prototype.add=function(time,value){//extract the parameters
if(time.hasOwnProperty('time')){value=time;time=value.time;}time=this.toTicks(time);var event;if(value instanceof Tone.Event){event=value;event.callback=this._tick.bind(this);}else{event=new Tone.Event({'callback':this._tick.bind(this),'value':value});}//the start offset
event.startOffset=time;//initialize the values
event.set({'loopEnd':this.loopEnd,'loopStart':this.loopStart,'loop':this.loop,'humanize':this.humanize,'playbackRate':this.playbackRate,'probability':this.probability});this._events.push(event);//start the note if it should be played right now
this._restartEvent(event);return this;};/**
		 *  Restart the given event
		 *  @param  {Tone.Event}  event
		 *  @private
		 */Tone.Part.prototype._restartEvent=function(event){this._state.forEach(function(stateEvent){if(stateEvent.state===Tone.State.Started){this._startNote(event,stateEvent.time,stateEvent.offset);}else{//stop the note
event.stop(Tone.Ticks(stateEvent.time));}}.bind(this));};/**
		 *  Remove an event from the part. Will recursively iterate
		 *  into nested parts to find the event.
		 *  @param {Time} time The time of the event
		 *  @param {*} value Optionally select only a specific event value
		 *  @return  {Tone.Part}  this
		 */Tone.Part.prototype.remove=function(time,value){//extract the parameters
if(time.hasOwnProperty('time')){value=time;time=value.time;}time=this.toTicks(time);for(var i=this._events.length-1;i>=0;i--){var event=this._events[i];if(event instanceof Tone.Part){event.remove(time,value);}else if(event.startOffset===time){if(Tone.isUndef(value)||Tone.isDefined(value)&&event.value===value){this._events.splice(i,1);event.dispose();}}}return this;};/**
		 *  Remove all of the notes from the group.
		 *  @return  {Tone.Part}  this
		 */Tone.Part.prototype.removeAll=function(){this._forEach(function(event){event.dispose();});this._events=[];return this;};/**
		 *  Cancel scheduled state change events: i.e. "start" and "stop".
		 *  @param {TimelinePosition} after The time after which to cancel the scheduled events.
		 *  @return  {Tone.Part}  this
		 */Tone.Part.prototype.cancel=function(after){this._forEach(function(event){event.cancel(after);});this._state.cancel(this.toTicks(after));return this;};/**
		 *  Iterate over all of the events
		 *  @param {Function} callback
		 *  @param {Object} ctx The context
		 *  @private
		 */Tone.Part.prototype._forEach=function(callback,ctx){if(this._events){ctx=Tone.defaultArg(ctx,this);for(var i=this._events.length-1;i>=0;i--){var e=this._events[i];if(e instanceof Tone.Part){e._forEach(callback,ctx);}else{callback.call(ctx,e);}}}return this;};/**
		 *  Set the attribute of all of the events
		 *  @param  {String}  attr  the attribute to set
		 *  @param  {*}  value      The value to set it to
		 *  @private
		 */Tone.Part.prototype._setAll=function(attr,value){this._forEach(function(event){event[attr]=value;});};/**
		 *  Internal tick method
		 *  @param  {Number}  time  The time of the event in seconds
		 *  @private
		 */Tone.Part.prototype._tick=function(time,value){if(!this.mute){this.callback(time,value);}};/**
		 *  Determine if the event should be currently looping
		 *  given the loop boundries of this Part.
		 *  @param  {Tone.Event}  event  The event to test
		 *  @private
		 */Tone.Part.prototype._testLoopBoundries=function(event){if(event.startOffset<this._loopStart||event.startOffset>=this._loopEnd){event.cancel(0);}else if(event.state===Tone.State.Stopped){//reschedule it if it's stopped
this._restartEvent(event);}};/**
		 *  The probability of the notes being triggered.
		 *  @memberOf Tone.Part#
		 *  @type {NormalRange}
		 *  @name probability
		 */Object.defineProperty(Tone.Part.prototype,'probability',{get:function get(){return this._probability;},set:function set(prob){this._probability=prob;this._setAll('probability',prob);}});/**
		 *  If set to true, will apply small random variation
		 *  to the callback time. If the value is given as a time, it will randomize
		 *  by that amount.
		 *  @example
		 * event.humanize = true;
		 *  @type {Boolean|Time}
		 *  @name humanize
		 */Object.defineProperty(Tone.Part.prototype,'humanize',{get:function get(){return this._humanize;},set:function set(variation){this._humanize=variation;this._setAll('humanize',variation);}});/**
		 *  If the part should loop or not
		 *  between Tone.Part.loopStart and
		 *  Tone.Part.loopEnd. An integer
		 *  value corresponds to the number of
		 *  loops the Part does after it starts.
		 *  @memberOf Tone.Part#
		 *  @type {Boolean|Positive}
		 *  @name loop
		 *  @example
		 * //loop the part 8 times
		 * part.loop = 8;
		 */Object.defineProperty(Tone.Part.prototype,'loop',{get:function get(){return this._loop;},set:function set(loop){this._loop=loop;this._forEach(function(event){event._loopStart=this._loopStart;event._loopEnd=this._loopEnd;event.loop=loop;this._testLoopBoundries(event);});}});/**
		 *  The loopEnd point determines when it will
		 *  loop if Tone.Part.loop is true.
		 *  @memberOf Tone.Part#
		 *  @type {Time}
		 *  @name loopEnd
		 */Object.defineProperty(Tone.Part.prototype,'loopEnd',{get:function get(){return Tone.Ticks(this._loopEnd).toSeconds();},set:function set(loopEnd){this._loopEnd=this.toTicks(loopEnd);if(this._loop){this._forEach(function(event){event.loopEnd=loopEnd;this._testLoopBoundries(event);});}}});/**
		 *  The loopStart point determines when it will
		 *  loop if Tone.Part.loop is true.
		 *  @memberOf Tone.Part#
		 *  @type {Time}
		 *  @name loopStart
		 */Object.defineProperty(Tone.Part.prototype,'loopStart',{get:function get(){return Tone.Ticks(this._loopStart).toSeconds();},set:function set(loopStart){this._loopStart=this.toTicks(loopStart);if(this._loop){this._forEach(function(event){event.loopStart=this.loopStart;this._testLoopBoundries(event);});}}});/**
		 * 	The playback rate of the part
		 *  @memberOf Tone.Part#
		 *  @type {Positive}
		 *  @name playbackRate
		 */Object.defineProperty(Tone.Part.prototype,'playbackRate',{get:function get(){return this._playbackRate;},set:function set(rate){this._playbackRate=rate;this._setAll('playbackRate',rate);}});/**
		 * 	The number of scheduled notes in the part.
		 *  @memberOf Tone.Part#
		 *  @type {Positive}
		 *  @name length
		 *  @readOnly
		 */Object.defineProperty(Tone.Part.prototype,'length',{get:function get(){return this._events.length;}});/**
		 *  Clean up
		 *  @return  {Tone.Part}  this
		 */Tone.Part.prototype.dispose=function(){this.removeAll();this._state.dispose();this._state=null;this.callback=null;this._events=null;return this;};return Tone.Part;});Module(function(Tone){/**
		 *  @class Tone.Pattern arpeggiates between the given notes
		 *         in a number of patterns. See Tone.CtrlPattern for
		 *         a full list of patterns.
		 *  @example
		 * var pattern = new Tone.Pattern(function(time, note){
		 *   //the order of the notes passed in depends on the pattern
		 * }, ["C2", "D4", "E5", "A6"], "upDown");
		 *  @extends {Tone.Loop}
		 *  @param {Function} callback The callback to invoke with the
		 *                             event.
		 *  @param {Array} values The values to arpeggiate over.
		 */Tone.Pattern=function(){var options=Tone.defaults(arguments,['callback','values','pattern'],Tone.Pattern);Tone.Loop.call(this,options);/**
			 *  The pattern manager
			 *  @type {Tone.CtrlPattern}
			 *  @private
			 */this._pattern=new Tone.CtrlPattern({'values':options.values,'type':options.pattern,'index':options.index});};Tone.extend(Tone.Pattern,Tone.Loop);/**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */Tone.Pattern.defaults={'pattern':Tone.CtrlPattern.Type.Up,'callback':Tone.noOp,'values':[]};/**
		 *  Internal function called when the notes should be called
		 *  @param  {Number}  time  The time the event occurs
		 *  @private
		 */Tone.Pattern.prototype._tick=function(time){this.callback(time,this._pattern.value);this._pattern.next();};/**
		 *  The current index in the values array.
		 *  @memberOf Tone.Pattern#
		 *  @type {Positive}
		 *  @name index
		 */Object.defineProperty(Tone.Pattern.prototype,'index',{get:function get(){return this._pattern.index;},set:function set(i){this._pattern.index=i;}});/**
		 *  The array of events.
		 *  @memberOf Tone.Pattern#
		 *  @type {Array}
		 *  @name values
		 */Object.defineProperty(Tone.Pattern.prototype,'values',{get:function get(){return this._pattern.values;},set:function set(vals){this._pattern.values=vals;}});/**
		 *  The current value of the pattern.
		 *  @memberOf Tone.Pattern#
		 *  @type {*}
		 *  @name value
		 *  @readOnly
		 */Object.defineProperty(Tone.Pattern.prototype,'value',{get:function get(){return this._pattern.value;}});/**
		 *  The pattern type. See Tone.CtrlPattern for the full list of patterns.
		 *  @memberOf Tone.Pattern#
		 *  @type {String}
		 *  @name pattern
		 */Object.defineProperty(Tone.Pattern.prototype,'pattern',{get:function get(){return this._pattern.type;},set:function set(pattern){this._pattern.type=pattern;}});/**
		 *  Clean up
		 *  @return  {Tone.Pattern}  this
		 */Tone.Pattern.prototype.dispose=function(){Tone.Loop.prototype.dispose.call(this);this._pattern.dispose();this._pattern=null;};return Tone.Pattern;});Module(function(Tone){/**
		 *  @class A sequence is an alternate notation of a part. Instead
		 *         of passing in an array of [time, event] pairs, pass
		 *         in an array of events which will be spaced at the
		 *         given subdivision. Sub-arrays will subdivide that beat
		 *         by the number of items are in the array.
		 *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)
		 *  @param  {Function}  callback  The callback to invoke with every note
		 *  @param  {Array}    events  The sequence
		 *  @param  {Time} subdivision  The subdivision between which events are placed.
		 *  @extends {Tone.Part}
		 *  @example
		 * var seq = new Tone.Sequence(function(time, note){
		 * 	console.log(note);
		 * //straight quater notes
		 * }, ["C4", "E4", "G4", "A4"], "4n");
		 *  @example
		 * var seq = new Tone.Sequence(function(time, note){
		 * 	console.log(note);
		 * //subdivisions are given as subarrays
		 * }, ["C4", ["E4", "D4", "E4"], "G4", ["A4", "G4"]]);
		 */Tone.Sequence=function(){var options=Tone.defaults(arguments,['callback','events','subdivision'],Tone.Sequence);//remove the events
var events=options.events;delete options.events;Tone.Part.call(this,options);/**
			 *  The subdivison of each note
			 *  @type  {Ticks}
			 *  @private
			 */this._subdivision=this.toTicks(options.subdivision);//if no time was passed in, the loop end is the end of the cycle
if(Tone.isUndef(options.loopEnd)&&Tone.isDefined(events)){this._loopEnd=events.length*this._subdivision;}//defaults to looping
this._loop=true;//add all of the events
if(Tone.isDefined(events)){for(var i=0;i<events.length;i++){this.add(i,events[i]);}}};Tone.extend(Tone.Sequence,Tone.Part);/**
		 *  The default values.
		 *  @type  {Object}
		 */Tone.Sequence.defaults={'subdivision':'4n'};/**
		 *  The subdivision of the sequence. This can only be
		 *  set in the constructor. The subdivision is the
		 *  interval between successive steps.
		 *  @type {Time}
		 *  @memberOf Tone.Sequence#
		 *  @name subdivision
		 *  @readOnly
		 */Object.defineProperty(Tone.Sequence.prototype,'subdivision',{get:function get(){return Tone.Ticks(this._subdivision).toSeconds();}});/**
		 *  Get/Set an index of the sequence. If the index contains a subarray,
		 *  a Tone.Sequence representing that sub-array will be returned.
		 *  @example
		 * var sequence = new Tone.Sequence(playNote, ["E4", "C4", "F#4", ["A4", "Bb3"]])
		 * sequence.at(0)// => returns "E4"
		 * //set a value
		 * sequence.at(0, "G3");
		 * //get a nested sequence
		 * sequence.at(3).at(1)// => returns "Bb3"
		 * @param {Positive} index The index to get or set
		 * @param {*} value Optionally pass in the value to set at the given index.
		 */Tone.Sequence.prototype.at=function(index,value){//if the value is an array,
if(Tone.isArray(value)){//remove the current event at that index
this.remove(index);}//call the parent's method
return Tone.Part.prototype.at.call(this,this._indexTime(index),value);};/**
		 *  Add an event at an index, if there's already something
		 *  at that index, overwrite it. If `value` is an array,
		 *  it will be parsed as a subsequence.
		 *  @param {Number} index The index to add the event to
		 *  @param {*} value The value to add at that index
		 *  @returns {Tone.Sequence} this
		 */Tone.Sequence.prototype.add=function(index,value){if(value===null){return this;}if(Tone.isArray(value)){//make a subsequence and add that to the sequence
var subSubdivision=Math.round(this._subdivision/value.length);value=new Tone.Sequence(this._tick.bind(this),value,Tone.Ticks(subSubdivision));}Tone.Part.prototype.add.call(this,this._indexTime(index),value);return this;};/**
		 *  Remove a value from the sequence by index
		 *  @param {Number} index The index of the event to remove
		 *  @returns {Tone.Sequence} this
		 */Tone.Sequence.prototype.remove=function(index,value){Tone.Part.prototype.remove.call(this,this._indexTime(index),value);return this;};/**
		 *  Get the time of the index given the Sequence's subdivision
		 *  @param  {Number}  index
		 *  @return  {Time}  The time of that index
		 *  @private
		 */Tone.Sequence.prototype._indexTime=function(index){if(index instanceof Tone.TransportTime){return index;}else{return Tone.Ticks(index*this._subdivision+this.startOffset).toSeconds();}};/**
		 *  Clean up.
		 *  @return {Tone.Sequence} this
		 */Tone.Sequence.prototype.dispose=function(){Tone.Part.prototype.dispose.call(this);return this;};return Tone.Sequence;});Module(function(Tone){/**
		 *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,
		 *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is
		 *         a square and only odd-numbered harmonics are present. At all other widths
		 *         even-numbered harmonics are present. Read more
		 *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).
		 *
		 *  @constructor
		 *  @extends {Tone.Source}
		 *  @param {Frequency} [frequency] The frequency of the oscillator
		 *  @param {NormalRange} [width] The width of the pulse
		 *  @example
		 * var pulse = new Tone.PulseOscillator("E5", 0.4).toMaster().start();
		 */Tone.PulseOscillator=function(){var options=Tone.defaults(arguments,['frequency','width'],Tone.Oscillator);Tone.Source.call(this,options);/**
			 *  The width of the pulse.
			 *  @type {NormalRange}
			 *  @signal
			 */this.width=new Tone.Signal(options.width,Tone.Type.NormalRange);/**
			 *  gate the width amount
			 *  @type {Tone.Gain}
			 *  @private
			 */this._widthGate=new Tone.Gain();/**
			 *  the sawtooth oscillator
			 *  @type {Tone.Oscillator}
			 *  @private
			 */this._sawtooth=new Tone.Oscillator({frequency:options.frequency,detune:options.detune,type:'sawtooth',phase:options.phase});/**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=this._sawtooth.frequency;/**
			 *  The detune in cents.
			 *  @type {Cents}
			 *  @signal
			 */this.detune=this._sawtooth.detune;/**
			 *  Threshold the signal to turn it into a square
			 *  @type {Tone.WaveShaper}
			 *  @private
			 */this._thresh=new Tone.WaveShaper(function(val){if(val<0){return-1;}else{return 1;}});//connections
this._sawtooth.chain(this._thresh,this.output);this.width.chain(this._widthGate,this._thresh);this._readOnly(['width','frequency','detune']);};Tone.extend(Tone.PulseOscillator,Tone.Source);/**
		 *  The default parameters.
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.PulseOscillator.defaults={'frequency':440,'detune':0,'phase':0,'width':0.2};/**
		 *  start the oscillator
		 *  @param  {Time} time
		 *  @private
		 */Tone.PulseOscillator.prototype._start=function(time){time=this.toSeconds(time);this._sawtooth.start(time);this._widthGate.gain.setValueAtTime(1,time);};/**
		 *  stop the oscillator
		 *  @param  {Time} time
		 *  @private
		 */Tone.PulseOscillator.prototype._stop=function(time){time=this.toSeconds(time);this._sawtooth.stop(time);//the width is still connected to the output.
//that needs to be stopped also
this._widthGate.gain.setValueAtTime(0,time);};/**
		 *  restart the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */Tone.PulseOscillator.prototype.restart=function(time){this._sawtooth.restart(time);};/**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.PulseOscillator#
		 * @type {Degrees}
		 * @name phase
		 */Object.defineProperty(Tone.PulseOscillator.prototype,'phase',{get:function get(){return this._sawtooth.phase;},set:function set(phase){this._sawtooth.phase=phase;}});/**
		 * The type of the oscillator. Always returns "pulse".
		 * @readOnly
		 * @memberOf Tone.PulseOscillator#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.PulseOscillator.prototype,'type',{get:function get(){return'pulse';}});/**
		 * The partials of the waveform. Cannot set partials for this waveform type
		 * @memberOf Tone.PulseOscillator#
		 * @type {Array}
		 * @name partials
		 * @private
		 */Object.defineProperty(Tone.PulseOscillator.prototype,'partials',{get:function get(){return[];}});/**
		 *  Clean up method.
		 *  @return {Tone.PulseOscillator} this
		 */Tone.PulseOscillator.prototype.dispose=function(){Tone.Source.prototype.dispose.call(this);this._sawtooth.dispose();this._sawtooth=null;this._writable(['width','frequency','detune']);this.width.dispose();this.width=null;this._widthGate.dispose();this._widthGate=null;this._thresh.dispose();this._thresh=null;this.frequency=null;this.detune=null;return this;};return Tone.PulseOscillator;});Module(function(Tone){/**
		 *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator
		 *         at the modulationFrequency. This has the effect of continuously
		 *         changing the timbre of the oscillator by altering the harmonics
		 *         generated.
		 *
		 *  @extends {Tone.Source}
		 *  @constructor
		 *  @param {Frequency} frequency The starting frequency of the oscillator.
		 *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.
		 *  @example
		 *  var pwm = new Tone.PWMOscillator("Ab3", 0.3).toMaster().start();
		 */Tone.PWMOscillator=function(){var options=Tone.defaults(arguments,['frequency','modulationFrequency'],Tone.PWMOscillator);Tone.Source.call(this,options);/**
			 *  the pulse oscillator
			 *  @type {Tone.PulseOscillator}
			 *  @private
			 */this._pulse=new Tone.PulseOscillator(options.modulationFrequency);//change the pulse oscillator type
this._pulse._sawtooth.type='sine';/**
			 *  the modulator
			 *  @type {Tone.Oscillator}
			 *  @private
			 */this._modulator=new Tone.Oscillator({'frequency':options.frequency,'detune':options.detune,'phase':options.phase});/**
			 *  Scale the oscillator so it doesn't go silent
			 *  at the extreme values.
			 *  @type {Tone.Multiply}
			 *  @private
			 */this._scale=new Tone.Multiply(2);/**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=this._modulator.frequency;/**
			 *  The detune of the oscillator.
			 *  @type {Cents}
			 *  @signal
			 */this.detune=this._modulator.detune;/**
			 *  The modulation rate of the oscillator.
			 *  @type {Frequency}
			 *  @signal
			 */this.modulationFrequency=this._pulse.frequency;//connections
this._modulator.chain(this._scale,this._pulse.width);this._pulse.connect(this.output);this._readOnly(['modulationFrequency','frequency','detune']);};Tone.extend(Tone.PWMOscillator,Tone.Source);/**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */Tone.PWMOscillator.defaults={'frequency':440,'detune':0,'phase':0,'modulationFrequency':0.4};/**
		 *  start the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */Tone.PWMOscillator.prototype._start=function(time){time=this.toSeconds(time);this._modulator.start(time);this._pulse.start(time);};/**
		 *  stop the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */Tone.PWMOscillator.prototype._stop=function(time){time=this.toSeconds(time);this._modulator.stop(time);this._pulse.stop(time);};/**
		 *  restart the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */Tone.PWMOscillator.prototype.restart=function(time){this._modulator.restart(time);this._pulse.restart(time);};/**
		 * The type of the oscillator. Always returns "pwm".
		 * @readOnly
		 * @memberOf Tone.PWMOscillator#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.PWMOscillator.prototype,'type',{get:function get(){return'pwm';}});/**
		 * The partials of the waveform. Cannot set partials for this waveform type
		 * @memberOf Tone.PWMOscillator#
		 * @type {Array}
		 * @name partials
		 * @private
		 */Object.defineProperty(Tone.PWMOscillator.prototype,'partials',{get:function get(){return[];}});/**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.PWMOscillator#
		 * @type {number}
		 * @name phase
		 */Object.defineProperty(Tone.PWMOscillator.prototype,'phase',{get:function get(){return this._modulator.phase;},set:function set(phase){this._modulator.phase=phase;}});/**
		 *  Clean up.
		 *  @return {Tone.PWMOscillator} this
		 */Tone.PWMOscillator.prototype.dispose=function(){Tone.Source.prototype.dispose.call(this);this._pulse.dispose();this._pulse=null;this._scale.dispose();this._scale=null;this._modulator.dispose();this._modulator=null;this._writable(['modulationFrequency','frequency','detune']);this.frequency=null;this.detune=null;this.modulationFrequency=null;return this;};return Tone.PWMOscillator;});Module(function(Tone){/**
		 *  @class Tone.FMOscillator
		 *
		 *  @extends {Tone.Source}
		 *  @constructor
		 *  @param {Frequency} frequency The starting frequency of the oscillator.
		 *  @param {String} type The type of the carrier oscillator.
		 *  @param {String} modulationType The type of the modulator oscillator.
		 *  @example
		 * //a sine oscillator frequency-modulated by a square wave
		 * var fmOsc = new Tone.FMOscillator("Ab3", "sine", "square").toMaster().start();
		 */Tone.FMOscillator=function(){var options=Tone.defaults(arguments,['frequency','type','modulationType'],Tone.FMOscillator);Tone.Source.call(this,options);/**
			 *  The carrier oscillator
			 *  @type {Tone.Oscillator}
			 *  @private
			 */this._carrier=new Tone.Oscillator(options.frequency,options.type);/**
			 *  The oscillator's frequency
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=new Tone.Signal(options.frequency,Tone.Type.Frequency);/**
			 *  The detune control signal.
			 *  @type {Cents}
			 *  @signal
			 */this.detune=this._carrier.detune;this.detune.value=options.detune;/**
			 *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the
			 *  ratio of the frequency of the modulating signal (mf) to the amplitude of the
			 *  modulating signal (ma) -- as in ma/mf.
			 *	@type {Positive}
			 *	@signal
			 */this.modulationIndex=new Tone.Multiply(options.modulationIndex);this.modulationIndex.units=Tone.Type.Positive;/**
			 *  The modulating oscillator
			 *  @type  {Tone.Oscillator}
			 *  @private
			 */this._modulator=new Tone.Oscillator(options.frequency,options.modulationType);/**
			 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.
			 *  A harmonicity of 1 gives both oscillators the same frequency.
			 *  Harmonicity = 2 means a change of an octave.
			 *  @type {Positive}
			 *  @signal
			 *  @example
			 * //pitch the modulator an octave below carrier
			 * synth.harmonicity.value = 0.5;
			 */this.harmonicity=new Tone.Multiply(options.harmonicity);this.harmonicity.units=Tone.Type.Positive;/**
			 *  the node where the modulation happens
			 *  @type {Tone.Gain}
			 *  @private
			 */this._modulationNode=new Tone.Gain(0);//connections
this.frequency.connect(this._carrier.frequency);this.frequency.chain(this.harmonicity,this._modulator.frequency);this.frequency.chain(this.modulationIndex,this._modulationNode);this._modulator.connect(this._modulationNode.gain);this._modulationNode.connect(this._carrier.frequency);this._carrier.connect(this.output);this.detune.connect(this._modulator.detune);this.phase=options.phase;this._readOnly(['modulationIndex','frequency','detune','harmonicity']);};Tone.extend(Tone.FMOscillator,Tone.Source);/**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */Tone.FMOscillator.defaults={'frequency':440,'detune':0,'phase':0,'modulationIndex':2,'modulationType':'square','harmonicity':1};/**
		 *  start the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */Tone.FMOscillator.prototype._start=function(time){this._modulator.start(time);this._carrier.start(time);};/**
		 *  stop the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */Tone.FMOscillator.prototype._stop=function(time){this._modulator.stop(time);this._carrier.stop(time);};/**
		 *  stop the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */Tone.FMOscillator.prototype.restart=function(time){this._modulator.restart(time);this._carrier.restart(time);};/**
		 * The type of the carrier oscillator
		 * @memberOf Tone.FMOscillator#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.FMOscillator.prototype,'type',{get:function get(){return this._carrier.type;},set:function set(type){this._carrier.type=type;}});/**
		 * The type of the modulator oscillator
		 * @memberOf Tone.FMOscillator#
		 * @type {String}
		 * @name modulationType
		 */Object.defineProperty(Tone.FMOscillator.prototype,'modulationType',{get:function get(){return this._modulator.type;},set:function set(type){this._modulator.type=type;}});/**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.FMOscillator#
		 * @type {number}
		 * @name phase
		 */Object.defineProperty(Tone.FMOscillator.prototype,'phase',{get:function get(){return this._carrier.phase;},set:function set(phase){this._carrier.phase=phase;this._modulator.phase=phase;}});/**
		 * The partials of the carrier waveform. A partial represents
		 * the amplitude at a harmonic. The first harmonic is the
		 * fundamental frequency, the second is the octave and so on
		 * following the harmonic series.
		 * Setting this value will automatically set the type to "custom".
		 * The value is an empty array when the type is not "custom".
		 * @memberOf Tone.FMOscillator#
		 * @type {Array}
		 * @name partials
		 * @example
		 * osc.partials = [1, 0.2, 0.01];
		 */Object.defineProperty(Tone.FMOscillator.prototype,'partials',{get:function get(){return this._carrier.partials;},set:function set(partials){this._carrier.partials=partials;}});/**
		 *  Clean up.
		 *  @return {Tone.FMOscillator} this
		 */Tone.FMOscillator.prototype.dispose=function(){Tone.Source.prototype.dispose.call(this);this._writable(['modulationIndex','frequency','detune','harmonicity']);this.frequency.dispose();this.frequency=null;this.detune=null;this.harmonicity.dispose();this.harmonicity=null;this._carrier.dispose();this._carrier=null;this._modulator.dispose();this._modulator=null;this._modulationNode.dispose();this._modulationNode=null;this.modulationIndex.dispose();this.modulationIndex=null;return this;};return Tone.FMOscillator;});Module(function(Tone){/**
		 *  @class Tone.AMOscillator
		 *
		 *  @extends {Tone.Oscillator}
		 *  @constructor
		 *  @param {Frequency} frequency The starting frequency of the oscillator.
		 *  @param {String} type The type of the carrier oscillator.
		 *  @param {String} modulationType The type of the modulator oscillator.
		 *  @example
		 * //a sine oscillator frequency-modulated by a square wave
		 * var fmOsc = new Tone.AMOscillator("Ab3", "sine", "square").toMaster().start();
		 */Tone.AMOscillator=function(){var options=Tone.defaults(arguments,['frequency','type','modulationType'],Tone.AMOscillator);Tone.Source.call(this,options);/**
			 *  The carrier oscillator
			 *  @type {Tone.Oscillator}
			 *  @private
			 */this._carrier=new Tone.Oscillator(options.frequency,options.type);/**
			 *  The oscillator's frequency
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=this._carrier.frequency;/**
			 *  The detune control signal.
			 *  @type {Cents}
			 *  @signal
			 */this.detune=this._carrier.detune;this.detune.value=options.detune;/**
			 *  The modulating oscillator
			 *  @type  {Tone.Oscillator}
			 *  @private
			 */this._modulator=new Tone.Oscillator(options.frequency,options.modulationType);/**
			 *  convert the -1,1 output to 0,1
			 *  @type {Tone.AudioToGain}
			 *  @private
			 */this._modulationScale=new Tone.AudioToGain();/**
			 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.
			 *  A harmonicity of 1 gives both oscillators the same frequency.
			 *  Harmonicity = 2 means a change of an octave.
			 *  @type {Positive}
			 *  @signal
			 *  @example
			 * //pitch the modulator an octave below carrier
			 * synth.harmonicity.value = 0.5;
			 */this.harmonicity=new Tone.Multiply(options.harmonicity);this.harmonicity.units=Tone.Type.Positive;/**
			 *  the node where the modulation happens
			 *  @type {Tone.Gain}
			 *  @private
			 */this._modulationNode=new Tone.Gain(0);//connections
this.frequency.chain(this.harmonicity,this._modulator.frequency);this.detune.connect(this._modulator.detune);this._modulator.chain(this._modulationScale,this._modulationNode.gain);this._carrier.chain(this._modulationNode,this.output);this.phase=options.phase;this._readOnly(['frequency','detune','harmonicity']);};Tone.extend(Tone.AMOscillator,Tone.Oscillator);/**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */Tone.AMOscillator.defaults={'frequency':440,'detune':0,'phase':0,'modulationType':'square','harmonicity':1};/**
		 *  start the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */Tone.AMOscillator.prototype._start=function(time){this._modulator.start(time);this._carrier.start(time);};/**
		 *  stop the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */Tone.AMOscillator.prototype._stop=function(time){this._modulator.stop(time);this._carrier.stop(time);};/**
		 *  restart the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */Tone.AMOscillator.prototype.restart=function(time){this._modulator.restart(time);this._carrier.restart(time);};/**
		 * The type of the carrier oscillator
		 * @memberOf Tone.AMOscillator#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.AMOscillator.prototype,'type',{get:function get(){return this._carrier.type;},set:function set(type){this._carrier.type=type;}});/**
		 * The type of the modulator oscillator
		 * @memberOf Tone.AMOscillator#
		 * @type {string}
		 * @name modulationType
		 */Object.defineProperty(Tone.AMOscillator.prototype,'modulationType',{get:function get(){return this._modulator.type;},set:function set(type){this._modulator.type=type;}});/**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.AMOscillator#
		 * @type {number}
		 * @name phase
		 */Object.defineProperty(Tone.AMOscillator.prototype,'phase',{get:function get(){return this._carrier.phase;},set:function set(phase){this._carrier.phase=phase;this._modulator.phase=phase;}});/**
		 * The partials of the carrier waveform. A partial represents
		 * the amplitude at a harmonic. The first harmonic is the
		 * fundamental frequency, the second is the octave and so on
		 * following the harmonic series.
		 * Setting this value will automatically set the type to "custom".
		 * The value is an empty array when the type is not "custom".
		 * @memberOf Tone.AMOscillator#
		 * @type {Array}
		 * @name partials
		 * @example
		 * osc.partials = [1, 0.2, 0.01];
		 */Object.defineProperty(Tone.AMOscillator.prototype,'partials',{get:function get(){return this._carrier.partials;},set:function set(partials){this._carrier.partials=partials;}});/**
		 *  Clean up.
		 *  @return {Tone.AMOscillator} this
		 */Tone.AMOscillator.prototype.dispose=function(){Tone.Source.prototype.dispose.call(this);this._writable(['frequency','detune','harmonicity']);this.frequency=null;this.detune=null;this.harmonicity.dispose();this.harmonicity=null;this._carrier.dispose();this._carrier=null;this._modulator.dispose();this._modulator=null;this._modulationNode.dispose();this._modulationNode=null;this._modulationScale.dispose();this._modulationScale=null;return this;};return Tone.AMOscillator;});Module(function(Tone){/**
		 *  @class Tone.FatOscillator
		 *
		 *  @extends {Tone.Source}
		 *  @constructor
		 *  @param {Frequency} frequency The starting frequency of the oscillator.
		 *  @param {String} type The type of the carrier oscillator.
		 *  @param {String} modulationType The type of the modulator oscillator.
		 *  @example
		 * //a sine oscillator frequency-modulated by a square wave
		 * var fmOsc = new Tone.FatOscillator("Ab3", "sine", "square").toMaster().start();
		 */Tone.FatOscillator=function(){var options=Tone.defaults(arguments,['frequency','type','spread'],Tone.FatOscillator);Tone.Source.call(this,options);/**
			 *  The oscillator's frequency
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=new Tone.Signal(options.frequency,Tone.Type.Frequency);/**
			 *  The detune control signal.
			 *  @type {Cents}
			 *  @signal
			 */this.detune=new Tone.Signal(options.detune,Tone.Type.Cents);/**
			 *  The array of oscillators
			 *  @type {Array}
			 *  @private
			 */this._oscillators=[];/**
			 *  The total spread of the oscillators
			 *  @type  {Cents}
			 *  @private
			 */this._spread=options.spread;/**
			 *  The type of the oscillator
			 *  @type {String}
			 *  @private
			 */this._type=options.type;/**
			 *  The phase of the oscillators
			 *  @type {Degrees}
			 *  @private
			 */this._phase=options.phase;/**
			 *  The partials array
			 *  @type {Array}
			 *  @private
			 */this._partials=Tone.defaultArg(options.partials,[]);//set the count initially
this.count=options.count;this._readOnly(['frequency','detune']);};Tone.extend(Tone.FatOscillator,Tone.Source);/**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */Tone.FatOscillator.defaults={'frequency':440,'detune':0,'phase':0,'spread':20,'count':3,'type':'sawtooth'};/**
		 *  start the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */Tone.FatOscillator.prototype._start=function(time){time=this.toSeconds(time);this._forEach(function(osc){osc.start(time);});};/**
		 *  stop the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */Tone.FatOscillator.prototype._stop=function(time){time=this.toSeconds(time);this._forEach(function(osc){osc.stop(time);});};/**
		 *  restart the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */Tone.FatOscillator.prototype.restart=function(time){time=this.toSeconds(time);this._forEach(function(osc){osc.restart(time);});};/**
		 *  Iterate over all of the oscillators
		 *  @param  {Function}  iterator  The iterator function
		 *  @private
		 */Tone.FatOscillator.prototype._forEach=function(iterator){for(var i=0;i<this._oscillators.length;i++){iterator.call(this,this._oscillators[i],i);}};/**
		 * The type of the carrier oscillator
		 * @memberOf Tone.FatOscillator#
		 * @type {string}
		 * @name type
		 */Object.defineProperty(Tone.FatOscillator.prototype,'type',{get:function get(){return this._type;},set:function set(type){this._type=type;this._forEach(function(osc){osc.type=type;});}});/**
		 * The detune spread between the oscillators. If "count" is
		 * set to 3 oscillators and the "spread" is set to 40,
		 * the three oscillators would be detuned like this: [-20, 0, 20]
		 * for a total detune spread of 40 cents.
		 * @memberOf Tone.FatOscillator#
		 * @type {Cents}
		 * @name spread
		 */Object.defineProperty(Tone.FatOscillator.prototype,'spread',{get:function get(){return this._spread;},set:function set(spread){this._spread=spread;if(this._oscillators.length>1){var start=-spread/2;var step=spread/(this._oscillators.length-1);this._forEach(function(osc,i){osc.detune.value=start+step*i;});}}});/**
		 * The number of detuned oscillators
		 * @memberOf Tone.FatOscillator#
		 * @type {Number}
		 * @name count
		 */Object.defineProperty(Tone.FatOscillator.prototype,'count',{get:function get(){return this._oscillators.length;},set:function set(count){count=Math.max(count,1);if(this._oscillators.length!==count){// var partials = this.partials;
// var type = this.type;
//dispose the previous oscillators
this._forEach(function(osc){osc.dispose();});this._oscillators=[];for(var i=0;i<count;i++){var osc=new Tone.Oscillator();if(this.type===Tone.Oscillator.Type.Custom){osc.partials=this._partials;}else{osc.type=this._type;}osc.phase=this._phase;osc.volume.value=-6-count*1.1;this.frequency.connect(osc.frequency);this.detune.connect(osc.detune);osc.connect(this.output);this._oscillators[i]=osc;}//set the spread
this.spread=this._spread;if(this.state===Tone.State.Started){this._forEach(function(osc){osc.start();});}}}});/**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.FatOscillator#
		 * @type {Number}
		 * @name phase
		 */Object.defineProperty(Tone.FatOscillator.prototype,'phase',{get:function get(){return this._phase;},set:function set(phase){this._phase=phase;this._forEach(function(osc){osc.phase=phase;});}});/**
		 * The partials of the carrier waveform. A partial represents
		 * the amplitude at a harmonic. The first harmonic is the
		 * fundamental frequency, the second is the octave and so on
		 * following the harmonic series.
		 * Setting this value will automatically set the type to "custom".
		 * The value is an empty array when the type is not "custom".
		 * @memberOf Tone.FatOscillator#
		 * @type {Array}
		 * @name partials
		 * @example
		 * osc.partials = [1, 0.2, 0.01];
		 */Object.defineProperty(Tone.FatOscillator.prototype,'partials',{get:function get(){return this._partials;},set:function set(partials){this._partials=partials;this._type=Tone.Oscillator.Type.Custom;this._forEach(function(osc){osc.partials=partials;});}});/**
		 *  Clean up.
		 *  @return {Tone.FatOscillator} this
		 */Tone.FatOscillator.prototype.dispose=function(){Tone.Source.prototype.dispose.call(this);this._writable(['frequency','detune']);this.frequency.dispose();this.frequency=null;this.detune.dispose();this.detune=null;this._forEach(function(osc){osc.dispose();});this._oscillators=null;this._partials=null;return this;};return Tone.FatOscillator;});Module(function(Tone){/**
		 *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,
		 *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator
		 *         into one class. The oscillator class can be changed by setting the `type`.
		 *         `omniOsc.type = "pwm"` will set it to the Tone.PWMOscillator. Prefixing
		 *         any of the basic types ("sine", "square4", etc.) with "fm", "am", or "fat"
		 *         will use the FMOscillator, AMOscillator or FatOscillator respectively.
		 *         For example: `omniOsc.type = "fatsawtooth"` will create set the oscillator
		 *         to a FatOscillator of type "sawtooth".
		 *
		 *  @extends {Tone.Source}
		 *  @constructor
		 *  @param {Frequency} frequency The initial frequency of the oscillator.
		 *  @param {String} type The type of the oscillator.
		 *  @example
		 *  var omniOsc = new Tone.OmniOscillator("C#4", "pwm");
		 */Tone.OmniOscillator=function(){var options=Tone.defaults(arguments,['frequency','type'],Tone.OmniOscillator);Tone.Source.call(this,options);/**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=new Tone.Signal(options.frequency,Tone.Type.Frequency);/**
			 *  The detune control
			 *  @type {Cents}
			 *  @signal
			 */this.detune=new Tone.Signal(options.detune,Tone.Type.Cents);/**
			 *  the type of the oscillator source
			 *  @type {String}
			 *  @private
			 */this._sourceType=undefined;/**
			 *  the oscillator
			 *  @type {Tone.Oscillator}
			 *  @private
			 */this._oscillator=null;//set the oscillator
this.type=options.type;this._readOnly(['frequency','detune']);//set the options
this.set(options);};Tone.extend(Tone.OmniOscillator,Tone.Source);/**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */Tone.OmniOscillator.defaults={'frequency':440,'detune':0,'type':'sine','phase':0};/**
		 *  @enum {String}
		 *  @private
		 */var OmniOscType={Pulse:'PulseOscillator',PWM:'PWMOscillator',Osc:'Oscillator',FM:'FMOscillator',AM:'AMOscillator',Fat:'FatOscillator'};/**
		 *  start the oscillator
		 *  @param {Time} [time=now] the time to start the oscillator
		 *  @private
		 */Tone.OmniOscillator.prototype._start=function(time){this._oscillator.start(time);};/**
		 *  start the oscillator
		 *  @param {Time} [time=now] the time to start the oscillator
		 *  @private
		 */Tone.OmniOscillator.prototype._stop=function(time){this._oscillator.stop(time);};Tone.OmniOscillator.prototype.restart=function(time){this._oscillator.restart(time);};/**
		 * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or
		 * prefix the basic types with "fm", "am", or "fat" to use the FMOscillator, AMOscillator or FatOscillator
		 * types. The oscillator could also be set to "pwm" or "pulse". All of the parameters of the
		 * oscillator's class are accessible when the oscillator is set to that type, but throws an error
		 * when it's not.
		 *
		 * @memberOf Tone.OmniOscillator#
		 * @type {String}
		 * @name type
		 * @example
		 * omniOsc.type = "pwm";
		 * //modulationFrequency is parameter which is available
		 * //only when the type is "pwm".
		 * omniOsc.modulationFrequency.value = 0.5;
		 * @example
		 * //an square wave frequency modulated by a sawtooth
		 * omniOsc.type = "fmsquare";
		 * omniOsc.modulationType = "sawtooth";
		 */Object.defineProperty(Tone.OmniOscillator.prototype,'type',{get:function get(){var prefix='';if(this._sourceType===OmniOscType.FM){prefix='fm';}else if(this._sourceType===OmniOscType.AM){prefix='am';}else if(this._sourceType===OmniOscType.Fat){prefix='fat';}return prefix+this._oscillator.type;},set:function set(type){if(type.substr(0,2)==='fm'){this._createNewOscillator(OmniOscType.FM);this._oscillator.type=type.substr(2);}else if(type.substr(0,2)==='am'){this._createNewOscillator(OmniOscType.AM);this._oscillator.type=type.substr(2);}else if(type.substr(0,3)==='fat'){this._createNewOscillator(OmniOscType.Fat);this._oscillator.type=type.substr(3);}else if(type==='pwm'){this._createNewOscillator(OmniOscType.PWM);}else if(type==='pulse'){this._createNewOscillator(OmniOscType.Pulse);}else{this._createNewOscillator(OmniOscType.Osc);this._oscillator.type=type;}}});/**
		 * The partials of the waveform. A partial represents
		 * the amplitude at a harmonic. The first harmonic is the
		 * fundamental frequency, the second is the octave and so on
		 * following the harmonic series.
		 * Setting this value will automatically set the type to "custom".
		 * The value is an empty array when the type is not "custom".
		 * This is not available on "pwm" and "pulse" oscillator types.
		 * @memberOf Tone.OmniOscillator#
		 * @type {Array}
		 * @name partials
		 * @example
		 * osc.partials = [1, 0.2, 0.01];
		 */Object.defineProperty(Tone.OmniOscillator.prototype,'partials',{get:function get(){return this._oscillator.partials;},set:function set(partials){this._oscillator.partials=partials;}});/**
		 *  Set a member/attribute of the oscillator.
		 *  @param {Object|String} params
		 *  @param {number=} value
		 *  @param {Time=} rampTime
		 *  @returns {Tone.OmniOscillator} this
		 */Tone.OmniOscillator.prototype.set=function(params,value){//make sure the type is set first
if(params==='type'){this.type=value;}else if(Tone.isObject(params)&&params.hasOwnProperty('type')){this.type=params.type;}//then set the rest
Tone.prototype.set.apply(this,arguments);return this;};/**
		 *  connect the oscillator to the frequency and detune signals
		 *  @private
		 */Tone.OmniOscillator.prototype._createNewOscillator=function(oscType){if(oscType!==this._sourceType){this._sourceType=oscType;var OscillatorConstructor=Tone[oscType];//short delay to avoid clicks on the change
var now=this.now();if(this._oscillator!==null){var oldOsc=this._oscillator;oldOsc.stop(now);//dispose the old one
this.context.setTimeout(function(){oldOsc.dispose();oldOsc=null;},this.blockTime);}this._oscillator=new OscillatorConstructor();this.frequency.connect(this._oscillator.frequency);this.detune.connect(this._oscillator.detune);this._oscillator.connect(this.output);if(this.state===Tone.State.Started){this._oscillator.start(now);}}};/**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.OmniOscillator#
		 * @type {Degrees}
		 * @name phase
		 */Object.defineProperty(Tone.OmniOscillator.prototype,'phase',{get:function get(){return this._oscillator.phase;},set:function set(phase){this._oscillator.phase=phase;}});/**
		 * The width of the oscillator (only if the oscillator is set to "pulse")
		 * @memberOf Tone.OmniOscillator#
		 * @type {NormalRange}
		 * @signal
		 * @name width
		 * @example
		 * var omniOsc = new Tone.OmniOscillator(440, "pulse");
		 * //can access the width attribute only if type === "pulse"
		 * omniOsc.width.value = 0.2;
		 */Object.defineProperty(Tone.OmniOscillator.prototype,'width',{get:function get(){if(this._sourceType===OmniOscType.Pulse){return this._oscillator.width;}}});/**
		 * The number of detuned oscillators
		 * @memberOf Tone.OmniOscillator#
		 * @type {Number}
		 * @name count
		 */Object.defineProperty(Tone.OmniOscillator.prototype,'count',{get:function get(){if(this._sourceType===OmniOscType.Fat){return this._oscillator.count;}},set:function set(count){if(this._sourceType===OmniOscType.Fat){this._oscillator.count=count;}}});/**
		 * The detune spread between the oscillators. If "count" is
		 * set to 3 oscillators and the "spread" is set to 40,
		 * the three oscillators would be detuned like this: [-20, 0, 20]
		 * for a total detune spread of 40 cents. See Tone.FatOscillator
		 * for more info.
		 * @memberOf Tone.OmniOscillator#
		 * @type {Cents}
		 * @name spread
		 */Object.defineProperty(Tone.OmniOscillator.prototype,'spread',{get:function get(){if(this._sourceType===OmniOscType.Fat){return this._oscillator.spread;}},set:function set(spread){if(this._sourceType===OmniOscType.Fat){this._oscillator.spread=spread;}}});/**
		 * The type of the modulator oscillator. Only if the oscillator
		 * is set to "am" or "fm" types. see. Tone.AMOscillator or Tone.FMOscillator
		 * for more info.
		 * @memberOf Tone.OmniOscillator#
		 * @type {String}
		 * @name modulationType
		 */Object.defineProperty(Tone.OmniOscillator.prototype,'modulationType',{get:function get(){if(this._sourceType===OmniOscType.FM||this._sourceType===OmniOscType.AM){return this._oscillator.modulationType;}},set:function set(mType){if(this._sourceType===OmniOscType.FM||this._sourceType===OmniOscType.AM){this._oscillator.modulationType=mType;}}});/**
		 * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the
		 * ratio of the frequency of the modulating signal (mf) to the amplitude of the
		 * modulating signal (ma) -- as in ma/mf.
		 * See Tone.FMOscillator for more info.
		 * @type {Positive}
		 * @signal
		 * @name modulationIndex
		 */Object.defineProperty(Tone.OmniOscillator.prototype,'modulationIndex',{get:function get(){if(this._sourceType===OmniOscType.FM){return this._oscillator.modulationIndex;}}});/**
		 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.
		 *  A harmonicity of 1 gives both oscillators the same frequency.
		 *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator
		 *  for more info.
		 *  @memberOf Tone.OmniOscillator#
		 *  @signal
		 *  @type {Positive}
		 *  @name harmonicity
		 */Object.defineProperty(Tone.OmniOscillator.prototype,'harmonicity',{get:function get(){if(this._sourceType===OmniOscType.FM||this._sourceType===OmniOscType.AM){return this._oscillator.harmonicity;}}});/**
		 * The modulationFrequency Signal of the oscillator
		 * (only if the oscillator type is set to pwm). See
		 * Tone.PWMOscillator for more info.
		 * @memberOf Tone.OmniOscillator#
		 * @type {Frequency}
		 * @signal
		 * @name modulationFrequency
		 * @example
		 * var omniOsc = new Tone.OmniOscillator(440, "pwm");
		 * //can access the modulationFrequency attribute only if type === "pwm"
		 * omniOsc.modulationFrequency.value = 0.2;
		 */Object.defineProperty(Tone.OmniOscillator.prototype,'modulationFrequency',{get:function get(){if(this._sourceType===OmniOscType.PWM){return this._oscillator.modulationFrequency;}}});/**
		 *  Clean up.
		 *  @return {Tone.OmniOscillator} this
		 */Tone.OmniOscillator.prototype.dispose=function(){Tone.Source.prototype.dispose.call(this);this._writable(['frequency','detune']);this.detune.dispose();this.detune=null;this.frequency.dispose();this.frequency=null;this._oscillator.dispose();this._oscillator=null;this._sourceType=null;return this;};return Tone.OmniOscillator;});Module(function(Tone){/**
		 *  @class  Base-class for all instruments
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 */Tone.Instrument=function(options){//get the defaults
options=Tone.defaultArg(options,Tone.Instrument.defaults);Tone.AudioNode.call(this);/**
			 *  The output and volume triming node
			 *  @type  {Tone.Volume}
			 *  @private
			 */this._volume=this.output=new Tone.Volume(options.volume);/**
			 * The volume of the output in decibels.
			 * @type {Decibels}
			 * @signal
			 * @example
			 * source.volume.value = -6;
			 */this.volume=this._volume.volume;this._readOnly('volume');/**
			 * Keep track of all events scheduled to the transport
			 * when the instrument is 'synced'
			 * @type {Array<Number>}
			 * @private
			 */this._scheduledEvents=[];};Tone.extend(Tone.Instrument,Tone.AudioNode);/**
		 *  the default attributes
		 *  @type {object}
		 */Tone.Instrument.defaults={/** the volume of the output in decibels */'volume':0};/**
		 *  @abstract
		 *  @param {string|number} note the note to trigger
		 *  @param {Time} [time=now] the time to trigger the ntoe
		 *  @param {number} [velocity=1] the velocity to trigger the note
		 */Tone.Instrument.prototype.triggerAttack=Tone.noOp;/**
		 *  @abstract
		 *  @param {Time} [time=now] when to trigger the release
		 */Tone.Instrument.prototype.triggerRelease=Tone.noOp;/**
		 * Sync the instrument to the Transport. All subsequent calls of
		 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
		 * will be scheduled along the transport.
		 * @example
		 * instrument.sync()
		 * //schedule 3 notes when the transport first starts
		 * instrument.triggerAttackRelease('C4', '8n', 0)
		 * instrument.triggerAttackRelease('E4', '8n', '8n')
		 * instrument.triggerAttackRelease('G4', '8n', '4n')
		 * //start the transport to hear the notes
		 * Transport.start()
		 * @returns {Tone.Instrument} this
		 */Tone.Instrument.prototype.sync=function(){this._syncMethod('triggerAttack',1);this._syncMethod('triggerRelease',0);return this;};/**
		 * Wrap the given method so that it can be synchronized
		 * @param {String} method Which method to wrap and sync
		 * @param  {Number} timePosition What position the time argument appears in
		 * @private
		 */Tone.Instrument.prototype._syncMethod=function(method,timePosition){var originalMethod=this['_original_'+method]=this[method];this[method]=function(){var args=Array.prototype.slice.call(arguments);var time=args[timePosition];var id=Tone.Transport.schedule(function(t){args[timePosition]=t;originalMethod.apply(this,args);}.bind(this),time);this._scheduledEvents.push(id);}.bind(this);};/**
		 * Unsync the instrument from the Transport
		 * @returns {Tone.Instrument} this
		 */Tone.Instrument.prototype.unsync=function(){this._scheduledEvents.forEach(function(id){Tone.Transport.clear(id);});this._scheduledEvents=[];if(this._original_triggerAttack){this.triggerAttack=this._original_triggerAttack;this.triggerRelease=this._original_triggerRelease;}return this;};/**
		 *  Trigger the attack and then the release after the duration.
		 *  @param  {Frequency} note     The note to trigger.
		 *  @param  {Time} duration How long the note should be held for before
		 *                          triggering the release. This value must be greater than 0.
		 *  @param {Time} [time=now]  When the note should be triggered.
		 *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.
		 *  @returns {Tone.Instrument} this
		 *  @example
		 * //trigger "C4" for the duration of an 8th note
		 * synth.triggerAttackRelease("C4", "8n");
		 */Tone.Instrument.prototype.triggerAttackRelease=function(note,duration,time,velocity){time=this.toSeconds(time);duration=this.toSeconds(duration);this.triggerAttack(note,time,velocity);this.triggerRelease(time+duration);return this;};/**
		 *  clean up
		 *  @returns {Tone.Instrument} this
		 */Tone.Instrument.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._volume.dispose();this._volume=null;this._writable(['volume']);this.volume=null;this.unsync();this._scheduledEvents=null;return this;};return Tone.Instrument;});Module(function(Tone){/**
		 *  @class  This is an abstract base class for other monophonic instruments to 
		 *          extend. IMPORTANT: It does not make any sound on its own and
		 *          shouldn't be directly instantiated.
		 *
		 *  @constructor
		 *  @abstract
		 *  @extends {Tone.Instrument}
		 */Tone.Monophonic=function(options){//get the defaults
options=Tone.defaultArg(options,Tone.Monophonic.defaults);Tone.Instrument.call(this,options);/**
			 *  The glide time between notes. 
			 *  @type {Time}
			 */this.portamento=options.portamento;};Tone.extend(Tone.Monophonic,Tone.Instrument);/**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.Monophonic.defaults={'portamento':0};/**
		 *  Trigger the attack of the note optionally with a given velocity. 
		 *  
		 *  
		 *  @param  {Frequency} note     The note to trigger.
		 *  @param  {Time} [time=now]     When the note should start.
		 *  @param  {number} [velocity=1] velocity The velocity scaler 
		 *                                determines how "loud" the note 
		 *                                will be triggered.
		 *  @returns {Tone.Monophonic} this
		 *  @example
		 * synth.triggerAttack("C4");
		 *  @example
		 * //trigger the note a half second from now at half velocity
		 * synth.triggerAttack("C4", "+0.5", 0.5);
		 */Tone.Monophonic.prototype.triggerAttack=function(note,time,velocity){time=this.toSeconds(time);this._triggerEnvelopeAttack(time,velocity);this.setNote(note,time);return this;};/**
		 *  Trigger the release portion of the envelope
		 *  @param  {Time} [time=now] If no time is given, the release happens immediatly
		 *  @returns {Tone.Monophonic} this
		 *  @example
		 * synth.triggerRelease();
		 */Tone.Monophonic.prototype.triggerRelease=function(time){time=this.toSeconds(time);this._triggerEnvelopeRelease(time);return this;};/**
		 *  override this method with the actual method
		 *  @abstract
		 *  @private
		 */Tone.Monophonic.prototype._triggerEnvelopeAttack=function(){};/**
		 *  override this method with the actual method
		 *  @abstract
		 *  @private
		 */Tone.Monophonic.prototype._triggerEnvelopeRelease=function(){};/**
		 *  Get the level of the output at the given time. Measures
		 *  the envelope(s) value at the time. 
		 *  @param {Time} time The time to query the envelope value
		 *  @return {NormalRange} The output level between 0-1
		 */Tone.Monophonic.prototype.getLevelAtTime=function(time){time=this.toSeconds(time);return this.envelope.getValueAtTime(time);};/**
		 *  Set the note at the given time. If no time is given, the note
		 *  will set immediately. 
		 *  @param {Frequency} note The note to change to.
		 *  @param  {Time} [time=now] The time when the note should be set. 
		 *  @returns {Tone.Monophonic} this
		 * @example
		 * //change to F#6 in one quarter note from now.
		 * synth.setNote("F#6", "+4n");
		 * @example
		 * //change to Bb4 right now
		 * synth.setNote("Bb4");
		 */Tone.Monophonic.prototype.setNote=function(note,time){time=this.toSeconds(time);if(this.portamento>0&&this.getLevelAtTime(time)>0.05){var portTime=this.toSeconds(this.portamento);this.frequency.exponentialRampTo(note,portTime,time);}else{this.frequency.setValueAtTime(note,time);}return this;};return Tone.Monophonic;});Module(function(Tone){/**
		 *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator
		 *          routed through a Tone.AmplitudeEnvelope.
		 *          <img src="https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231">
		 *
		 *  @constructor
		 *  @extends {Tone.Monophonic}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 *  @example
		 * var synth = new Tone.Synth().toMaster();
		 * synth.triggerAttackRelease("C4", "8n");
		 */Tone.Synth=function(options){//get the defaults
options=Tone.defaultArg(options,Tone.Synth.defaults);Tone.Monophonic.call(this,options);/**
			 *  The oscillator.
			 *  @type {Tone.OmniOscillator}
			 */this.oscillator=new Tone.OmniOscillator(options.oscillator);/**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=this.oscillator.frequency;/**
			 *  The detune control.
			 *  @type {Cents}
			 *  @signal
			 */this.detune=this.oscillator.detune;/**
			 *  The amplitude envelope.
			 *  @type {Tone.AmplitudeEnvelope}
			 */this.envelope=new Tone.AmplitudeEnvelope(options.envelope);//connect the oscillators to the output
this.oscillator.chain(this.envelope,this.output);this._readOnly(['oscillator','frequency','detune','envelope']);};Tone.extend(Tone.Synth,Tone.Monophonic);/**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */Tone.Synth.defaults={'oscillator':{'type':'triangle'},'envelope':{'attack':0.005,'decay':0.1,'sustain':0.3,'release':1}};/**
		 *  start the attack portion of the envelope
		 *  @param {Time} [time=now] the time the attack should start
		 *  @param {number} [velocity=1] the velocity of the note (0-1)
		 *  @returns {Tone.Synth} this
		 *  @private
		 */Tone.Synth.prototype._triggerEnvelopeAttack=function(time,velocity){//the envelopes
this.envelope.triggerAttack(time,velocity);this.oscillator.start(time);//if there is no release portion, stop the oscillator
if(this.envelope.sustain===0){this.oscillator.stop(time+this.envelope.attack+this.envelope.decay);}return this;};/**
		 *  start the release portion of the envelope
		 *  @param {Time} [time=now] the time the release should start
		 *  @returns {Tone.Synth} this
		 *  @private
		 */Tone.Synth.prototype._triggerEnvelopeRelease=function(time){time=this.toSeconds(time);this.envelope.triggerRelease(time);this.oscillator.stop(time+this.envelope.release);return this;};/**
		 *  clean up
		 *  @returns {Tone.Synth} this
		 */Tone.Synth.prototype.dispose=function(){Tone.Monophonic.prototype.dispose.call(this);this._writable(['oscillator','frequency','detune','envelope']);this.oscillator.dispose();this.oscillator=null;this.envelope.dispose();this.envelope=null;this.frequency=null;this.detune=null;return this;};return Tone.Synth;});Module(function(Tone){/**
		 *  @class  AMSynth uses the output of one Tone.Synth to modulate the
		 *          amplitude of another Tone.Synth. The harmonicity (the ratio between
		 *          the two signals) affects the timbre of the output signal greatly.
		 *          Read more about Amplitude Modulation Synthesis on
		 *          [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).
		 *          <img src="https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457">
		 *
		 *  @constructor
		 *  @extends {Tone.Monophonic}
		 *  @param {Object} [options] the options available for the synth
		 *                            see defaults below
		 *  @example
		 * var synth = new Tone.AMSynth().toMaster();
		 * synth.triggerAttackRelease("C4", "4n");
		 */Tone.AMSynth=function(options){options=Tone.defaultArg(options,Tone.AMSynth.defaults);Tone.Monophonic.call(this,options);/**
			 *  The carrier voice.
			 *  @type {Tone.Synth}
			 *  @private
			 */this._carrier=new Tone.Synth();this._carrier.volume.value=-10;/**
			 *  The carrier's oscillator
			 *  @type {Tone.Oscillator}
			 */this.oscillator=this._carrier.oscillator;/**
			 *  The carrier's envelope
			 *  @type {Tone.AmplitudeEnvelope}
			 */this.envelope=this._carrier.envelope.set(options.envelope);/**
			 *  The modulator voice.
			 *  @type {Tone.Synth}
			 *  @private
			 */this._modulator=new Tone.Synth();this._modulator.volume.value=-10;/**
			 *  The modulator's oscillator which is applied
			 *  to the amplitude of the oscillator
			 *  @type {Tone.Oscillator}
			 */this.modulation=this._modulator.oscillator.set(options.modulation);/**
			 *  The modulator's envelope
			 *  @type {Tone.AmplitudeEnvelope}
			 */this.modulationEnvelope=this._modulator.envelope.set(options.modulationEnvelope);/**
			 *  The frequency.
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=new Tone.Signal(440,Tone.Type.Frequency);/**
			 *  The detune in cents
			 *  @type {Cents}
			 *  @signal
			 */this.detune=new Tone.Signal(options.detune,Tone.Type.Cents);/**
			 *  Harmonicity is the ratio between the two voices. A harmonicity of
			 *  1 is no change. Harmonicity = 2 means a change of an octave.
			 *  @type {Positive}
			 *  @signal
			 *  @example
			 * //pitch voice1 an octave below voice0
			 * synth.harmonicity.value = 0.5;
			 */this.harmonicity=new Tone.Multiply(options.harmonicity);this.harmonicity.units=Tone.Type.Positive;/**
			 *  convert the -1,1 output to 0,1
			 *  @type {Tone.AudioToGain}
			 *  @private
			 */this._modulationScale=new Tone.AudioToGain();/**
			 *  the node where the modulation happens
			 *  @type {Tone.Gain}
			 *  @private
			 */this._modulationNode=new Tone.Gain();//control the two voices frequency
this.frequency.connect(this._carrier.frequency);this.frequency.chain(this.harmonicity,this._modulator.frequency);this.detune.fan(this._carrier.detune,this._modulator.detune);this._modulator.chain(this._modulationScale,this._modulationNode.gain);this._carrier.chain(this._modulationNode,this.output);this._readOnly(['frequency','harmonicity','oscillator','envelope','modulation','modulationEnvelope','detune']);};Tone.extend(Tone.AMSynth,Tone.Monophonic);/**
		 *  @static
		 *  @type {Object}
		 */Tone.AMSynth.defaults={'harmonicity':3,'detune':0,'oscillator':{'type':'sine'},'envelope':{'attack':0.01,'decay':0.01,'sustain':1,'release':0.5},'modulation':{'type':'square'},'modulationEnvelope':{'attack':0.5,'decay':0,'sustain':1,'release':0.5}};/**
		 *  trigger the attack portion of the note
		 *
		 *  @param  {Time} [time=now] the time the note will occur
		 *  @param {NormalRange} [velocity=1] the velocity of the note
		 *  @private
		 *  @returns {Tone.AMSynth} this
		 */Tone.AMSynth.prototype._triggerEnvelopeAttack=function(time,velocity){//the port glide
time=this.toSeconds(time);//the envelopes
this._carrier._triggerEnvelopeAttack(time,velocity);this._modulator._triggerEnvelopeAttack(time);return this;};/**
		 *  trigger the release portion of the note
		 *
		 *  @param  {Time} [time=now] the time the note will release
		 *  @private
		 *  @returns {Tone.AMSynth} this
		 */Tone.AMSynth.prototype._triggerEnvelopeRelease=function(time){this._carrier._triggerEnvelopeRelease(time);this._modulator._triggerEnvelopeRelease(time);return this;};/**
		 *  clean up
		 *  @returns {Tone.AMSynth} this
		 */Tone.AMSynth.prototype.dispose=function(){Tone.Monophonic.prototype.dispose.call(this);this._writable(['frequency','harmonicity','oscillator','envelope','modulation','modulationEnvelope','detune']);this._carrier.dispose();this._carrier=null;this._modulator.dispose();this._modulator=null;this.frequency.dispose();this.frequency=null;this.detune.dispose();this.detune=null;this.harmonicity.dispose();this.harmonicity=null;this._modulationScale.dispose();this._modulationScale=null;this._modulationNode.dispose();this._modulationNode=null;this.oscillator=null;this.envelope=null;this.modulationEnvelope=null;this.modulation=null;return this;};return Tone.AMSynth;});Module(function(Tone){/**
		 *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.
		 *          The amplitude of the Tone.Oscillator and the cutoff frequency of the
		 *          Tone.Filter are controlled by Tone.Envelopes.
		 *          <img src="https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240">
		 *
		 *  @constructor
		 *  @extends {Tone.Monophonic}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 *  @example
		 * var synth = new Tone.MonoSynth({
		 * 	"oscillator" : {
		 * 		"type" : "square"
		 *  },
		 *  "envelope" : {
		 *  	"attack" : 0.1
		 *  }
		 * }).toMaster();
		 * synth.triggerAttackRelease("C4", "8n");
		 */Tone.MonoSynth=function(options){//get the defaults
options=Tone.defaultArg(options,Tone.MonoSynth.defaults);Tone.Monophonic.call(this,options);/**
			 *  The oscillator.
			 *  @type {Tone.OmniOscillator}
			 */this.oscillator=new Tone.OmniOscillator(options.oscillator);/**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=this.oscillator.frequency;/**
			 *  The detune control.
			 *  @type {Cents}
			 *  @signal
			 */this.detune=this.oscillator.detune;/**
			 *  The filter.
			 *  @type {Tone.Filter}
			 */this.filter=new Tone.Filter(options.filter);/**
			 *  The filter envelope.
			 *  @type {Tone.FrequencyEnvelope}
			 */this.filterEnvelope=new Tone.FrequencyEnvelope(options.filterEnvelope);/**
			 *  The amplitude envelope.
			 *  @type {Tone.AmplitudeEnvelope}
			 */this.envelope=new Tone.AmplitudeEnvelope(options.envelope);//connect the oscillators to the output
this.oscillator.chain(this.filter,this.envelope,this.output);//connect the filter envelope
this.filterEnvelope.connect(this.filter.frequency);this._readOnly(['oscillator','frequency','detune','filter','filterEnvelope','envelope']);};Tone.extend(Tone.MonoSynth,Tone.Monophonic);/**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */Tone.MonoSynth.defaults={'frequency':'C4','detune':0,'oscillator':{'type':'square'},'filter':{'Q':6,'type':'lowpass','rolloff':-24},'envelope':{'attack':0.005,'decay':0.1,'sustain':0.9,'release':1},'filterEnvelope':{'attack':0.06,'decay':0.2,'sustain':0.5,'release':2,'baseFrequency':200,'octaves':7,'exponent':2}};/**
		 *  start the attack portion of the envelope
		 *  @param {Time} [time=now] the time the attack should start
		 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
		 *  @returns {Tone.MonoSynth} this
		 *  @private
		 */Tone.MonoSynth.prototype._triggerEnvelopeAttack=function(time,velocity){time=this.toSeconds(time);//the envelopes
this.envelope.triggerAttack(time,velocity);this.filterEnvelope.triggerAttack(time);this.oscillator.start(time);if(this.envelope.sustain===0){this.oscillator.stop(time+this.envelope.attack+this.envelope.decay);}return this;};/**
		 *  start the release portion of the envelope
		 *  @param {Time} [time=now] the time the release should start
		 *  @returns {Tone.MonoSynth} this
		 *  @private
		 */Tone.MonoSynth.prototype._triggerEnvelopeRelease=function(time){this.envelope.triggerRelease(time);this.filterEnvelope.triggerRelease(time);this.oscillator.stop(time+this.envelope.release);return this;};/**
		 *  clean up
		 *  @returns {Tone.MonoSynth} this
		 */Tone.MonoSynth.prototype.dispose=function(){Tone.Monophonic.prototype.dispose.call(this);this._writable(['oscillator','frequency','detune','filter','filterEnvelope','envelope']);this.oscillator.dispose();this.oscillator=null;this.envelope.dispose();this.envelope=null;this.filterEnvelope.dispose();this.filterEnvelope=null;this.filter.dispose();this.filter=null;this.frequency=null;this.detune=null;return this;};return Tone.MonoSynth;});Module(function(Tone){/**
		 *  @class  Tone.DuoSynth is a monophonic synth composed of two
		 *          MonoSynths run in parallel with control over the
		 *          frequency ratio between the two voices and vibrato effect.
		 *          <img src="https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448">
		 *
		 *  @constructor
		 *  @extends {Tone.Monophonic}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 *  @example
		 * var duoSynth = new Tone.DuoSynth().toMaster();
		 * duoSynth.triggerAttackRelease("C4", "2n");
		 */Tone.DuoSynth=function(options){options=Tone.defaultArg(options,Tone.DuoSynth.defaults);Tone.Monophonic.call(this,options);/**
			 *  the first voice
			 *  @type {Tone.MonoSynth}
			 */this.voice0=new Tone.MonoSynth(options.voice0);this.voice0.volume.value=-10;/**
			 *  the second voice
			 *  @type {Tone.MonoSynth}
			 */this.voice1=new Tone.MonoSynth(options.voice1);this.voice1.volume.value=-10;/**
			 *  The vibrato LFO.
			 *  @type {Tone.LFO}
			 *  @private
			 */this._vibrato=new Tone.LFO(options.vibratoRate,-50,50);this._vibrato.start();/**
			 * the vibrato frequency
			 * @type {Frequency}
			 * @signal
			 */this.vibratoRate=this._vibrato.frequency;/**
			 *  the vibrato gain
			 *  @type {Tone.Gain}
			 *  @private
			 */this._vibratoGain=new Tone.Gain(options.vibratoAmount,Tone.Type.Positive);/**
			 * The amount of vibrato
			 * @type {Positive}
			 * @signal
			 */this.vibratoAmount=this._vibratoGain.gain;/**
			 *  the frequency control
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=new Tone.Signal(440,Tone.Type.Frequency);/**
			 *  Harmonicity is the ratio between the two voices. A harmonicity of
			 *  1 is no change. Harmonicity = 2 means a change of an octave.
			 *  @type {Positive}
			 *  @signal
			 *  @example
			 * //pitch voice1 an octave below voice0
			 * duoSynth.harmonicity.value = 0.5;
			 */this.harmonicity=new Tone.Multiply(options.harmonicity);this.harmonicity.units=Tone.Type.Positive;//control the two voices frequency
this.frequency.connect(this.voice0.frequency);this.frequency.chain(this.harmonicity,this.voice1.frequency);this._vibrato.connect(this._vibratoGain);this._vibratoGain.fan(this.voice0.detune,this.voice1.detune);this.voice0.connect(this.output);this.voice1.connect(this.output);this._readOnly(['voice0','voice1','frequency','vibratoAmount','vibratoRate']);};Tone.extend(Tone.DuoSynth,Tone.Monophonic);/**
		 *  @static
		 *  @type {Object}
		 */Tone.DuoSynth.defaults={'vibratoAmount':0.5,'vibratoRate':5,'harmonicity':1.5,'voice0':{'volume':-10,'portamento':0,'oscillator':{'type':'sine'},'filterEnvelope':{'attack':0.01,'decay':0,'sustain':1,'release':0.5},'envelope':{'attack':0.01,'decay':0,'sustain':1,'release':0.5}},'voice1':{'volume':-10,'portamento':0,'oscillator':{'type':'sine'},'filterEnvelope':{'attack':0.01,'decay':0,'sustain':1,'release':0.5},'envelope':{'attack':0.01,'decay':0,'sustain':1,'release':0.5}}};/**
		 *  start the attack portion of the envelopes
		 *
		 *  @param {Time} [time=now] the time the attack should start
		 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
		 *  @returns {Tone.DuoSynth} this
		 *  @private
		 */Tone.DuoSynth.prototype._triggerEnvelopeAttack=function(time,velocity){time=this.toSeconds(time);this.voice0._triggerEnvelopeAttack(time,velocity);this.voice1._triggerEnvelopeAttack(time,velocity);return this;};/**
		 *  start the release portion of the envelopes
		 *
		 *  @param {Time} [time=now] the time the release should start
		 *  @returns {Tone.DuoSynth} this
		 *  @private
		 */Tone.DuoSynth.prototype._triggerEnvelopeRelease=function(time){this.voice0._triggerEnvelopeRelease(time);this.voice1._triggerEnvelopeRelease(time);return this;};/**
		 *  Get the level of the output at the given time. Measures
		 *  the envelope(s) value at the time. 
		 *  @param {Time} time The time to query the envelope value
		 *  @return {NormalRange} The output level between 0-1
		 */Tone.DuoSynth.prototype.getLevelAtTime=function(time){return(this.voice0.getLevelAtTime(time)+this.voice1.getLevelAtTime(time))/2;};/**
		 *  clean up
		 *  @returns {Tone.DuoSynth} this
		 */Tone.DuoSynth.prototype.dispose=function(){Tone.Monophonic.prototype.dispose.call(this);this._writable(['voice0','voice1','frequency','vibratoAmount','vibratoRate']);this.voice0.dispose();this.voice0=null;this.voice1.dispose();this.voice1=null;this.frequency.dispose();this.frequency=null;this._vibratoGain.dispose();this._vibratoGain=null;this._vibrato=null;this.harmonicity.dispose();this.harmonicity=null;this.vibratoAmount.dispose();this.vibratoAmount=null;this.vibratoRate=null;return this;};return Tone.DuoSynth;});Module(function(Tone){/**
		 *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates
		 *          the frequency of a second Tone.Synth. A lot of spectral content
		 *          can be explored using the modulationIndex parameter. Read more about
		 *          frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).
		 *          <img src="https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462">
		 *
		 *  @constructor
		 *  @extends {Tone.Monophonic}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 *  @example
		 * var fmSynth = new Tone.FMSynth().toMaster();
		 * fmSynth.triggerAttackRelease("C5", "4n");
		 */Tone.FMSynth=function(options){options=Tone.defaultArg(options,Tone.FMSynth.defaults);Tone.Monophonic.call(this,options);/**
			 *  The carrier voice.
			 *  @type {Tone.Synth}
			 *  @private
			 */this._carrier=new Tone.Synth(options.carrier);this._carrier.volume.value=-10;/**
			 *  The carrier's oscillator
			 *  @type {Tone.Oscillator}
			 */this.oscillator=this._carrier.oscillator;/**
			 *  The carrier's envelope
			 *  @type {Tone.Oscillator}
			 */this.envelope=this._carrier.envelope.set(options.envelope);/**
			 *  The modulator voice.
			 *  @type {Tone.Synth}
			 *  @private
			 */this._modulator=new Tone.Synth(options.modulator);this._modulator.volume.value=-10;/**
			 *  The modulator's oscillator which is applied
			 *  to the amplitude of the oscillator
			 *  @type {Tone.Oscillator}
			 */this.modulation=this._modulator.oscillator.set(options.modulation);/**
			 *  The modulator's envelope
			 *  @type {Tone.Oscillator}
			 */this.modulationEnvelope=this._modulator.envelope.set(options.modulationEnvelope);/**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */this.frequency=new Tone.Signal(440,Tone.Type.Frequency);/**
			 *  The detune in cents
			 *  @type {Cents}
			 *  @signal
			 */this.detune=new Tone.Signal(options.detune,Tone.Type.Cents);/**
			 *  Harmonicity is the ratio between the two voices. A harmonicity of
			 *  1 is no change. Harmonicity = 2 means a change of an octave.
			 *  @type {Positive}
			 *  @signal
			 *  @example
			 * //pitch voice1 an octave below voice0
			 * synth.harmonicity.value = 0.5;
			 */this.harmonicity=new Tone.Multiply(options.harmonicity);this.harmonicity.units=Tone.Type.Positive;/**
			 *  The modulation index which essentially the depth or amount of the modulation. It is the
			 *  ratio of the frequency of the modulating signal (mf) to the amplitude of the
			 *  modulating signal (ma) -- as in ma/mf.
			 *	@type {Positive}
			 *	@signal
			 */this.modulationIndex=new Tone.Multiply(options.modulationIndex);this.modulationIndex.units=Tone.Type.Positive;/**
			 *  the node where the modulation happens
			 *  @type {GainNode}
			 *  @private
			 */this._modulationNode=new Tone.Gain(0);//control the two voices frequency
this.frequency.connect(this._carrier.frequency);this.frequency.chain(this.harmonicity,this._modulator.frequency);this.frequency.chain(this.modulationIndex,this._modulationNode);this.detune.fan(this._carrier.detune,this._modulator.detune);this._modulator.connect(this._modulationNode.gain);this._modulationNode.connect(this._carrier.frequency);this._carrier.connect(this.output);this._readOnly(['frequency','harmonicity','modulationIndex','oscillator','envelope','modulation','modulationEnvelope','detune']);};Tone.extend(Tone.FMSynth,Tone.Monophonic);/**
		 *  @static
		 *  @type {Object}
		 */Tone.FMSynth.defaults={'harmonicity':3,'modulationIndex':10,'detune':0,'oscillator':{'type':'sine'},'envelope':{'attack':0.01,'decay':0.01,'sustain':1,'release':0.5},'modulation':{'type':'square'},'modulationEnvelope':{'attack':0.5,'decay':0,'sustain':1,'release':0.5}};/**
		 * 	trigger the attack portion of the note
		 *
		 *  @param  {Time} [time=now] the time the note will occur
		 *  @param {number} [velocity=1] the velocity of the note
		 *  @returns {Tone.FMSynth} this
		 *  @private
		 */Tone.FMSynth.prototype._triggerEnvelopeAttack=function(time,velocity){time=this.toSeconds(time);//the envelopes
this._carrier._triggerEnvelopeAttack(time,velocity);this._modulator._triggerEnvelopeAttack(time);return this;};/**
		 *  trigger the release portion of the note
		 *
		 *  @param  {Time} [time=now] the time the note will release
		 *  @returns {Tone.FMSynth} this
		 *  @private
		 */Tone.FMSynth.prototype._triggerEnvelopeRelease=function(time){time=this.toSeconds(time);this._carrier._triggerEnvelopeRelease(time);this._modulator._triggerEnvelopeRelease(time);return this;};/**
		 *  clean up
		 *  @returns {Tone.FMSynth} this
		 */Tone.FMSynth.prototype.dispose=function(){Tone.Monophonic.prototype.dispose.call(this);this._writable(['frequency','harmonicity','modulationIndex','oscillator','envelope','modulation','modulationEnvelope','detune']);this._carrier.dispose();this._carrier=null;this._modulator.dispose();this._modulator=null;this.frequency.dispose();this.frequency=null;this.detune.dispose();this.detune=null;this.modulationIndex.dispose();this.modulationIndex=null;this.harmonicity.dispose();this.harmonicity=null;this._modulationNode.dispose();this._modulationNode=null;this.oscillator=null;this.envelope=null;this.modulationEnvelope=null;this.modulation=null;return this;};return Tone.FMSynth;});Module(function(Tone){/**
		 *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator
		 *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator
		 *          is routed through a Tone.AmplitudeEnvelope to the output. The drum
		 *          quality of the sound comes from the frequency envelope applied
		 *          during Tone.MembraneSynth.triggerAttack(note). The frequency envelope
		 *          starts at <code>note * .octaves</code> and ramps to <code>note</code>
		 *          over the duration of <code>.pitchDecay</code>.
		 *
		 *  @constructor
		 *  @extends {Tone.Instrument}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 *  @example
		 * var synth = new Tone.MembraneSynth().toMaster();
		 * synth.triggerAttackRelease("C2", "8n");
		 */Tone.MembraneSynth=function(options){options=Tone.defaultArg(options,Tone.MembraneSynth.defaults);Tone.Instrument.call(this,options);/**
			 *  The oscillator.
			 *  @type {Tone.OmniOscillator}
			 */this.oscillator=new Tone.OmniOscillator(options.oscillator);/**
			 *  The amplitude envelope.
			 *  @type {Tone.AmplitudeEnvelope}
			 */this.envelope=new Tone.AmplitudeEnvelope(options.envelope);/**
			 *  The number of octaves the pitch envelope ramps.
			 *  @type {Positive}
			 */this.octaves=options.octaves;/**
			 *  The amount of time the frequency envelope takes.
			 *  @type {Time}
			 */this.pitchDecay=options.pitchDecay;this.oscillator.chain(this.envelope,this.output);this._readOnly(['oscillator','envelope']);};Tone.extend(Tone.MembraneSynth,Tone.Instrument);/**
		 *  @static
		 *  @type {Object}
		 */Tone.MembraneSynth.defaults={'pitchDecay':0.05,'octaves':10,'oscillator':{'type':'sine'},'envelope':{'attack':0.001,'decay':0.4,'sustain':0.01,'release':1.4,'attackCurve':'exponential'}};/**
		 *  Trigger the note at the given time with the given velocity.
		 *
		 *  @param  {Frequency} note     the note
		 *  @param  {Time} [time=now]     the time, if not given is now
		 *  @param  {number} [velocity=1] velocity defaults to 1
		 *  @returns {Tone.MembraneSynth} this
		 *  @example
		 *  kick.triggerAttack(60);
		 */Tone.MembraneSynth.prototype.triggerAttack=function(note,time,velocity){time=this.toSeconds(time);note=this.toFrequency(note);var maxNote=note*this.octaves;this.oscillator.frequency.setValueAtTime(maxNote,time);this.oscillator.frequency.exponentialRampToValueAtTime(note,time+this.toSeconds(this.pitchDecay));this.envelope.triggerAttack(time,velocity);this.oscillator.start(time);return this;};/**
		 *  Trigger the release portion of the note.
		 *
		 *  @param  {Time} [time=now] the time the note will release
		 *  @returns {Tone.MembraneSynth} this
		 */Tone.MembraneSynth.prototype.triggerRelease=function(time){time=this.toSeconds(time);this.envelope.triggerRelease(time);this.oscillator.stop(time+this.envelope.release);return this;};/**
		 *  Clean up.
		 *  @returns {Tone.MembraneSynth} this
		 */Tone.MembraneSynth.prototype.dispose=function(){Tone.Instrument.prototype.dispose.call(this);this._writable(['oscillator','envelope']);this.oscillator.dispose();this.oscillator=null;this.envelope.dispose();this.envelope=null;return this;};return Tone.MembraneSynth;});Module(function(Tone){/**
		 *  Inharmonic ratio of frequencies based on the Roland TR-808
		 *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model
		 *  @private
		 *  @static
		 *  @type {Array}
		 */var inharmRatios=[1,1.483,1.932,2.546,2.63,3.897];/**
		 *  @class  A highly inharmonic and spectrally complex source with a highpass filter
		 *          and amplitude envelope which is good for making metalophone sounds. Based
		 *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).
		 *          Inspiration from [Sound on Sound](https://web.archive.org/web/20160610143924/https://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).
		 *
		 *  @constructor
		 *  @extends {Tone.Instrument}
		 *  @param {Object} [options] The options availble for the synth
		 *                             see defaults below
		 */Tone.MetalSynth=function(options){options=Tone.defaultArg(options,Tone.MetalSynth.defaults);Tone.Instrument.call(this,options);/**
			 *  The frequency of the cymbal
			 *  @type  {Frequency}
			 *  @signal
			 */this.frequency=new Tone.Signal(options.frequency,Tone.Type.Frequency);/**
			 *  The array of FMOscillators
			 *  @type  {Array}
			 *  @private
			 */this._oscillators=[];/**
			 *  The frequency multipliers
			 *  @type {Array}
			 *  @private
			 */this._freqMultipliers=[];/**
			 *  The amplitude for the body
			 *  @type {Tone.Gain}
			 *  @private
			 */this._amplitue=new Tone.Gain(0).connect(this.output);/**
			 *  highpass the output
			 *  @type {Tone.Filter}
			 *  @private
			 */this._highpass=new Tone.Filter({'type':'highpass','Q':-3.0102999566398125}).connect(this._amplitue);/**
			 *  The number of octaves the highpass
			 *  filter frequency ramps
			 *  @type {Number}
			 *  @private
			 */this._octaves=options.octaves;/**
			 *  Scale the body envelope
			 *  for the bandpass
			 *  @type {Tone.Scale}
			 *  @private
			 */this._filterFreqScaler=new Tone.Scale(options.resonance,7000);/**
			 *  The envelope which is connected both to the
			 *  amplitude and highpass filter's cutoff frequency
			 *  @type  {Tone.Envelope}
			 */this.envelope=new Tone.Envelope({'attack':options.envelope.attack,'attackCurve':'linear','decay':options.envelope.decay,'sustain':0,'release':options.envelope.release}).chain(this._filterFreqScaler,this._highpass.frequency);this.envelope.connect(this._amplitue.gain);for(var i=0;i<inharmRatios.length;i++){var osc=new Tone.FMOscillator({'type':'square','modulationType':'square','harmonicity':options.harmonicity,'modulationIndex':options.modulationIndex});osc.connect(this._highpass);this._oscillators[i]=osc;var mult=new Tone.Multiply(inharmRatios[i]);this._freqMultipliers[i]=mult;this.frequency.chain(mult,osc.frequency);}//set the octaves
this.octaves=options.octaves;};Tone.extend(Tone.MetalSynth,Tone.Instrument);/**
		 *  default values
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.MetalSynth.defaults={'frequency':200,'envelope':{'attack':0.001,'decay':1.4,'release':0.2},'harmonicity':5.1,'modulationIndex':32,'resonance':4000,'octaves':1.5};/**
		 *  Trigger the attack.
		 *  @param  {Time}  time      When the attack should be triggered.
		 *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.
		 *  @return  {Tone.MetalSynth}  this
		 */Tone.MetalSynth.prototype.triggerAttack=function(time,vel){time=this.toSeconds(time);vel=Tone.defaultArg(vel,1);this.envelope.triggerAttack(time,vel);this._oscillators.forEach(function(osc){osc.start(time);});//if the sustain is 0, stop the oscillator as well
if(this.envelope.sustain===0){this._oscillators.forEach(function(osc){osc.stop(time+this.envelope.attack+this.envelope.decay);}.bind(this));}return this;};/**
		 *  Trigger the release of the envelope.
		 *  @param  {Time}  time      When the release should be triggered.
		 *  @return  {Tone.MetalSynth}  this
		 */Tone.MetalSynth.prototype.triggerRelease=function(time){time=this.toSeconds(time);this.envelope.triggerRelease(time);this._oscillators.forEach(function(osc){osc.stop(time+this.envelope.release);}.bind(this));return this;};/**
		 * Sync the instrument to the Transport. All subsequent calls of
		 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
		 * will be scheduled along the transport.
		 * @example
		 * synth.sync()
		 * //schedule 3 notes when the transport first starts
		 * synth.triggerAttackRelease('8n', 0)
		 * synth.triggerAttackRelease('8n', '8n')
		 * synth.triggerAttackRelease('8n', '4n')
		 * //start the transport to hear the notes
		 * Transport.start()
		 * @returns {Tone.Instrument} this
		 */Tone.MetalSynth.prototype.sync=function(){this._syncMethod('triggerAttack',0);this._syncMethod('triggerRelease',0);return this;};/**
		 *  Trigger the attack and release of the envelope after the given
		 *  duration.
		 *  @param  {Time}  duration  The duration before triggering the release
		 *  @param  {Time}  time      When the attack should be triggered.
		 *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.
		 *  @return  {Tone.MetalSynth}  this
		 */Tone.MetalSynth.prototype.triggerAttackRelease=function(duration,time,velocity){time=this.toSeconds(time);duration=this.toSeconds(duration);this.triggerAttack(time,velocity);this.triggerRelease(time+duration);return this;};/**
		 *  The modulationIndex of the oscillators which make up the source.
		 *  see Tone.FMOscillator.modulationIndex
		 *  @memberOf Tone.MetalSynth#
		 *  @type {Positive}
		 *  @name  modulationIndex
		 */Object.defineProperty(Tone.MetalSynth.prototype,'modulationIndex',{get:function get(){return this._oscillators[0].modulationIndex.value;},set:function set(val){for(var i=0;i<this._oscillators.length;i++){this._oscillators[i].modulationIndex.value=val;}}});/**
		 *  The harmonicity of the oscillators which make up the source.
		 *  see Tone.FMOscillator.harmonicity
		 *  @memberOf Tone.MetalSynth#
		 *  @type {Positive}
		 *  @name  harmonicity
		 */Object.defineProperty(Tone.MetalSynth.prototype,'harmonicity',{get:function get(){return this._oscillators[0].harmonicity.value;},set:function set(val){for(var i=0;i<this._oscillators.length;i++){this._oscillators[i].harmonicity.value=val;}}});/**
		 *  The frequency of the highpass filter attached to the envelope
		 *  @memberOf Tone.MetalSynth#
		 *  @type {Frequency}
		 *  @name  resonance
		 */Object.defineProperty(Tone.MetalSynth.prototype,'resonance',{get:function get(){return this._filterFreqScaler.min;},set:function set(val){this._filterFreqScaler.min=val;this.octaves=this._octaves;}});/**
		 *  The number of octaves above the "resonance" frequency
		 *  that the filter ramps during the attack/decay envelope
		 *  @memberOf Tone.MetalSynth#
		 *  @type {Number}
		 *  @name  octaves
		 */Object.defineProperty(Tone.MetalSynth.prototype,'octaves',{get:function get(){return this._octaves;},set:function set(octs){this._octaves=octs;this._filterFreqScaler.max=this._filterFreqScaler.min*Math.pow(2,octs);}});/**
		 *  Clean up
		 *  @returns {Tone.MetalSynth} this
		 */Tone.MetalSynth.prototype.dispose=function(){Tone.Instrument.prototype.dispose.call(this);for(var i=0;i<this._oscillators.length;i++){this._oscillators[i].dispose();this._freqMultipliers[i].dispose();}this._oscillators=null;this._freqMultipliers=null;this.frequency.dispose();this.frequency=null;this._filterFreqScaler.dispose();this._filterFreqScaler=null;this._amplitue.dispose();this._amplitue=null;this.envelope.dispose();this.envelope=null;this._highpass.dispose();this._highpass=null;};return Tone.MetalSynth;});Module(function(Tone){/**
		 *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter),
		 *          and two envelopes (Tone.Envelop). One envelope controls the amplitude
		 *          of the noise and the other is controls the cutoff frequency of the filter.
		 *          <img src="https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242">
		 *
		 *  @constructor
		 *  @extends {Tone.Instrument}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 * @example
		 * var noiseSynth = new Tone.NoiseSynth().toMaster();
		 * noiseSynth.triggerAttackRelease("8n");
		 */Tone.NoiseSynth=function(options){//get the defaults
options=Tone.defaultArg(options,Tone.NoiseSynth.defaults);Tone.Instrument.call(this,options);/**
			 *  The noise source.
			 *  @type {Tone.Noise}
			 *  @example
			 * noiseSynth.set("noise.type", "brown");
			 */this.noise=new Tone.Noise();/**
			 *  The amplitude envelope.
			 *  @type {Tone.AmplitudeEnvelope}
			 */this.envelope=new Tone.AmplitudeEnvelope(options.envelope);//connect the noise to the output
this.noise.chain(this.envelope,this.output);this._readOnly(['noise','envelope']);};Tone.extend(Tone.NoiseSynth,Tone.Instrument);/**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */Tone.NoiseSynth.defaults={'noise':{'type':'white'},'envelope':{'attack':0.005,'decay':0.1,'sustain':0}};/**
		 *  Start the attack portion of the envelopes. Unlike other
		 *  instruments, Tone.NoiseSynth doesn't have a note.
		 *  @param {Time} [time=now] the time the attack should start
		 *  @param {number} [velocity=1] the velocity of the note (0-1)
		 *  @returns {Tone.NoiseSynth} this
		 *  @example
		 * noiseSynth.triggerAttack();
		 */Tone.NoiseSynth.prototype.triggerAttack=function(time,velocity){//the envelopes
this.envelope.triggerAttack(time,velocity);//start the noise
this.noise.start(time);if(this.envelope.sustain===0){this.noise.stop(time=this.envelope.attack+this.envelope.decay);}return this;};/**
		 *  Start the release portion of the envelopes.
		 *  @param {Time} [time=now] the time the release should start
		 *  @returns {Tone.NoiseSynth} this
		 */Tone.NoiseSynth.prototype.triggerRelease=function(time){this.envelope.triggerRelease(time);this.noise.stop(time+this.envelope.release);return this;};/**
		 * Sync the instrument to the Transport. All subsequent calls of
		 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
		 * will be scheduled along the transport.
		 * @example
		 * synth.sync()
		 * //schedule 3 notes when the transport first starts
		 * synth.triggerAttackRelease('8n', 0)
		 * synth.triggerAttackRelease('8n', '8n')
		 * synth.triggerAttackRelease('8n', '4n')
		 * //start the transport to hear the notes
		 * Transport.start()
		 * @returns {Tone.Instrument} this
		 */Tone.NoiseSynth.prototype.sync=function(){this._syncMethod('triggerAttack',0);this._syncMethod('triggerRelease',0);return this;};/**
		 *  Trigger the attack and then the release.
		 *  @param  {Time} duration the duration of the note
		 *  @param  {Time} [time=now]     the time of the attack
		 *  @param  {number} [velocity=1] the velocity
		 *  @returns {Tone.NoiseSynth} this
		 */Tone.NoiseSynth.prototype.triggerAttackRelease=function(duration,time,velocity){time=this.toSeconds(time);duration=this.toSeconds(duration);this.triggerAttack(time,velocity);this.triggerRelease(time+duration);return this;};/**
		 *  Clean up.
		 *  @returns {Tone.NoiseSynth} this
		 */Tone.NoiseSynth.prototype.dispose=function(){Tone.Instrument.prototype.dispose.call(this);this._writable(['noise','envelope']);this.noise.dispose();this.noise=null;this.envelope.dispose();this.envelope=null;return this;};return Tone.NoiseSynth;});Module(function(Tone){/**
		 *  @class Karplus-String string synthesis. Often out of tune.
		 *         Will change when the AudioWorkerNode is available across
		 *         browsers.
		 *
		 *  @constructor
		 *  @extends {Tone.Instrument}
		 *  @param {Object} [options] see the defaults
		 *  @example
		 * var plucky = new Tone.PluckSynth().toMaster();
		 * plucky.triggerAttack("C4");
		 */Tone.PluckSynth=function(options){options=Tone.defaultArg(options,Tone.PluckSynth.defaults);Tone.Instrument.call(this,options);/**
			 *  @type {Tone.Noise}
			 *  @private
			 */this._noise=new Tone.Noise('pink');/**
			 *  The amount of noise at the attack.
			 *  Nominal range of [0.1, 20]
			 *  @type {number}
			 */this.attackNoise=options.attackNoise;/**
			 *  the LFCF
			 *  @type {Tone.LowpassCombFilter}
			 *  @private
			 */this._lfcf=new Tone.LowpassCombFilter({'resonance':options.resonance,'dampening':options.dampening});/**
			 *  The resonance control.
			 *  @type {NormalRange}
			 *  @signal
			 */this.resonance=this._lfcf.resonance;/**
			 *  The dampening control. i.e. the lowpass filter frequency of the comb filter
			 *  @type {Frequency}
			 *  @signal
			 */this.dampening=this._lfcf.dampening;//connections
this._noise.connect(this._lfcf);this._lfcf.connect(this.output);this._readOnly(['resonance','dampening']);};Tone.extend(Tone.PluckSynth,Tone.Instrument);/**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.PluckSynth.defaults={'attackNoise':1,'dampening':4000,'resonance':0.7};/**
		 *  Trigger the note.
		 *  @param {Frequency} note The note to trigger.
		 *  @param {Time} [time=now] When the note should be triggered.
		 *  @returns {Tone.PluckSynth} this
		 */Tone.PluckSynth.prototype.triggerAttack=function(note,time){note=this.toFrequency(note);time=this.toSeconds(time);var delayAmount=1/note;this._lfcf.delayTime.setValueAtTime(delayAmount,time);this._noise.start(time);this._noise.stop(time+delayAmount*this.attackNoise);return this;};/**
		 *  Clean up.
		 *  @returns {Tone.PluckSynth} this
		 */Tone.PluckSynth.prototype.dispose=function(){Tone.Instrument.prototype.dispose.call(this);this._noise.dispose();this._lfcf.dispose();this._noise=null;this._lfcf=null;this._writable(['resonance','dampening']);this.dampening=null;this.resonance=null;return this;};return Tone.PluckSynth;});Module(function(Tone){/**
		 *  @class  Tone.PolySynth handles voice creation and allocation for any
		 *          instruments passed in as the second paramter. PolySynth is
		 *          not a synthesizer by itself, it merely manages voices of
		 *          one of the other types of synths, allowing any of the
		 *          monophonic synthesizers to be polyphonic.
		 *
		 *  @constructor
		 *  @extends {Tone.Instrument}
		 *  @param {number|Object} [polyphony=4] The number of voices to create
		 *  @param {function} [voice=Tone.Synth] The constructor of the voices
		 *                                            uses Tone.Synth by default.
		 *  @example
		 * //a polysynth composed of 6 Voices of Synth
		 * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();
		 * //set the attributes using the set interface
		 * synth.set("detune", -1200);
		 * //play a chord
		 * synth.triggerAttackRelease(["C4", "E4", "A4"], "4n");
		 */Tone.PolySynth=function(){var options=Tone.defaults(arguments,['polyphony','voice'],Tone.PolySynth);Tone.Instrument.call(this,options);options=Tone.defaultArg(options,Tone.Instrument.defaults);//max polyphony
options.polyphony=Math.min(Tone.PolySynth.MAX_POLYPHONY,options.polyphony);/**
			 *  the array of voices
			 *  @type {Array}
			 */this.voices=new Array(options.polyphony);/**
			 *  The queue of voices with data about last trigger
			 *  and the triggered note
			 *  @private
			 *  @type {Array}
			 */this._triggers=new Array(options.polyphony);/**
			 *  The detune in cents
			 *  @type {Cents}
			 *  @signal
			 */this.detune=new Tone.Signal(options.detune,Tone.Type.Cents);this._readOnly('detune');//create the voices
for(var i=0;i<options.polyphony;i++){var v=new options.voice(arguments[2],arguments[3]);if(!(v instanceof Tone.Monophonic)){throw new Error('Synth constructor must be instance of Tone.Monophonic');}this.voices[i]=v;v.connect(this.output);if(v.hasOwnProperty('detune')){this.detune.connect(v.detune);}this._triggers[i]={release:-1,note:null,voice:v};}};Tone.extend(Tone.PolySynth,Tone.Instrument);/**
		 *  the defaults
		 *  @const
		 *  @static
		 *  @type {Object}
		 */Tone.PolySynth.defaults={'polyphony':4,'volume':0,'detune':0,'voice':Tone.Synth};/**
		 *  Trigger the attack portion of the note
		 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
		 *                                  Frequency or an array of frequencies.
		 *  @param  {Time} [time=now]  The start time of the note.
		 *  @param {number} [velocity=1] The velocity of the note.
		 *  @returns {Tone.PolySynth} this
		 *  @example
		 * //trigger a chord immediately with a velocity of 0.2
		 * poly.triggerAttack(["Ab3", "C4", "F5"], undefined, 0.2);
		 */Tone.PolySynth.prototype.triggerAttack=function(notes,time,velocity){if(!Array.isArray(notes)){notes=[notes];}time=this.toSeconds(time);for(var i=0;i<notes.length;i++){var val=notes[i];//trigger the oldest voice
var oldest=this._triggers[0];for(var j=1;j<this._triggers.length;j++){if(this._triggers[j].release<oldest.release){oldest=this._triggers[j];}}oldest.release=Infinity;oldest.note=JSON.stringify(val);oldest.voice.triggerAttack(val,time,velocity);}return this;};/**
		 *  Trigger the attack and release after the specified duration
		 *
		 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
		 *                                  Frequency or an array of frequencies.
		 *  @param  {Time} duration the duration of the note
		 *  @param  {Time} [time=now]     if no time is given, defaults to now
		 *  @param  {number} [velocity=1] the velocity of the attack (0-1)
		 *  @returns {Tone.PolySynth} this
		 *  @example
		 * //trigger a chord for a duration of a half note
		 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], "2n");
		 *  @example
		 * //can pass in an array of durations as well
		 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], ["2n", "4n", "4n"]);
		 */Tone.PolySynth.prototype.triggerAttackRelease=function(notes,duration,time,velocity){time=this.toSeconds(time);this.triggerAttack(notes,time,velocity);if(Tone.isArray(duration)&&Tone.isArray(notes)){for(var i=0;i<notes.length;i++){var d=duration[Math.min(i,duration.length-1)];this.triggerRelease(notes[i],time+this.toSeconds(d));}}else{this.triggerRelease(notes,time+this.toSeconds(duration));}return this;};/**
		 *  Trigger the release of the note. Unlike monophonic instruments,
		 *  a note (or array of notes) needs to be passed in as the first argument.
		 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
		 *                                  Frequency or an array of frequencies.
		 *  @param  {Time} [time=now]  When the release will be triggered.
		 *  @returns {Tone.PolySynth} this
		 *  @example
		 * poly.triggerRelease(["Ab3", "C4", "F5"], "+2n");
		 */Tone.PolySynth.prototype.triggerRelease=function(notes,time){if(!Array.isArray(notes)){notes=[notes];}time=this.toSeconds(time);for(var i=0;i<notes.length;i++){//get the voice
var stringified=JSON.stringify(notes[i]);for(var v=0;v<this._triggers.length;v++){var desc=this._triggers[v];if(desc.note===stringified&&desc.release>time){desc.voice.triggerRelease(time);desc.release=time;}}}return this;};/**
		 * Sync the instrument to the Transport. All subsequent calls of
		 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
		 * will be scheduled along the transport.
		 * @example
		 * synth.sync()
		 * //schedule 3 notes when the transport first starts
		 * synth.triggerAttackRelease('8n', 0)
		 * synth.triggerAttackRelease('8n', '8n')
		 * synth.triggerAttackRelease('8n', '4n')
		 * //start the transport to hear the notes
		 * Transport.start()
		 * @returns {Tone.Instrument} this
		 */Tone.PolySynth.prototype.sync=function(){this._syncMethod('triggerAttack',1);this._syncMethod('triggerRelease',1);return this;};/**
		 *  Set a member/attribute of the voices.
		 *  @param {Object|string} params
		 *  @param {number=} value
		 *  @param {Time=} rampTime
		 *  @returns {Tone.PolySynth} this
		 *  @example
		 * poly.set({
		 * 	"filter" : {
		 * 		"type" : "highpass"
		 * 	},
		 * 	"envelope" : {
		 * 		"attack" : 0.25
		 * 	}
		 * });
		 */Tone.PolySynth.prototype.set=function(params,value,rampTime){for(var i=0;i<this.voices.length;i++){this.voices[i].set(params,value,rampTime);}return this;};/**
		 *  Get the synth's attributes. Given no arguments get
		 *  will return all available object properties and their corresponding
		 *  values. Pass in a single attribute to retrieve or an array
		 *  of attributes. The attribute strings can also include a "."
		 *  to access deeper properties.
		 *  @param {Array=} params the parameters to get, otherwise will return
		 *  					   all available.
		 */Tone.PolySynth.prototype.get=function(params){return this.voices[0].get(params);};/**
		 *  Trigger the release portion of all the currently active voices.
		 *  @param {Time} [time=now] When the notes should be released.
		 *  @return {Tone.PolySynth} this
		 */Tone.PolySynth.prototype.releaseAll=function(time){time=this.toSeconds(time);for(var i=0;i<this._triggers.length;i++){var desc=this._triggers[i];if(desc.release>time){desc.release=time;desc.voice.triggerRelease(time);}}return this;};/**
		 *  Clean up.
		 *  @returns {Tone.PolySynth} this
		 */Tone.PolySynth.prototype.dispose=function(){Tone.Instrument.prototype.dispose.call(this);for(var i=0;i<this.voices.length;i++){this.voices[i].dispose();this.voices[i]=null;}this._writable('detune');this.detune.dispose();this.detune=null;this.voices=null;this._triggers=null;return this;};/**
		 *  The maximum number of notes that can be allocated
		 *  to a polysynth.
		 *  @type  {Number}
		 *  @static
		 */Tone.PolySynth.MAX_POLYPHONY=20;return Tone.PolySynth;});Module(function(Tone){/**
		 * @class Automatically interpolates between a set of pitched samples. Pass in an object which maps the note's pitch or midi value to the url, then you can trigger the attack and release of that note like other instruments. By automatically repitching the samples, it is possible to play pitches which were not explicitly included which can save loading time.
		 *        For sample or buffer playback where repitching is not necessary, use [Tone.Player](https://tonejs.github.io/docs/Player).
		 * @param {Object} samples An object of samples mapping either Midi
		 *                         Note Numbers or Scientific Pitch Notation
		 *                         to the url of that sample.
		 * @param {Function=} onload The callback to invoke when all of the samples are loaded.
		 * @param {String=} baseUrl The root URL of all of the samples, which is prepended to all the URLs.
		 * @example
		 * var sampler = new Tone.Sampler({
		 * 	"C3" : "path/to/C3.mp3",
		 * 	"D#3" : "path/to/Dsharp3.mp3",
		 * 	"F#3" : "path/to/Fsharp3.mp3",
		 * 	"A3" : "path/to/A3.mp3",
		 * }, function(){
		 * 	//sampler will repitch the closest sample
		 * 	sampler.triggerAttack("D3")
		 * })
		 * @extends {Tone.Instrument}
		 */Tone.Sampler=function(urls){// shift arguments over one. Those are the remainder of the options
var args=Array.prototype.slice.call(arguments);args.shift();var options=Tone.defaults(args,['onload','baseUrl'],Tone.Sampler);Tone.Instrument.call(this,options);var urlMap={};for(var note in urls){if(Tone.isNote(note)){//convert the note name to MIDI
var mid=Tone.Frequency(note).toMidi();urlMap[mid]=urls[note];}else if(!isNaN(parseFloat(note))){//otherwise if it's numbers assume it's midi
urlMap[note]=urls[note];}else{throw new Error('Tone.Sampler: url keys must be the note\'s pitch');}}/**
			 * The stored and loaded buffers
			 * @type {Tone.Buffers}
			 * @private
			 */this._buffers=new Tone.Buffers(urlMap,options.onload,options.baseUrl);/**
			 * The object of all currently playing BufferSources
			 * @type {Object}
			 * @private
			 */this._activeSources={};/**
			 * The envelope applied to the beginning of the sample.
			 * @type {Time}
			 */this.attack=options.attack;/**
			 * The envelope applied to the end of the envelope.
			 * @type {Time}
			 */this.release=options.release;};Tone.extend(Tone.Sampler,Tone.Instrument);/**
		 * The defaults
		 * @const
		 * @type {Object}
		 */Tone.Sampler.defaults={attack:0,release:0.1,onload:Tone.noOp,baseUrl:''};/**
		 * Returns the difference in steps between the given midi note at the closets sample.
		 * @param  {Midi} midi
		 * @return {Interval}
		 * @private
		 */Tone.Sampler.prototype._findClosest=function(midi){//searches within 8 octaves of the given midi note
var MAX_INTERVAL=96;var interval=0;while(interval<MAX_INTERVAL){// check above and below
if(this._buffers.has(midi+interval)){return-interval;}else if(this._buffers.has(midi-interval)){return interval;}interval++;}return null;};/**
		 * @param  {Frequency} note     The note to play
		 * @param  {Time=} time     When to play the note
		 * @param  {NormalRange=} velocity The velocity to play the sample back.
		 * @return {Tone.Sampler}          this
		 */Tone.Sampler.prototype.triggerAttack=function(note,time,velocity){var midi=Tone.Frequency(note).toMidi();// find the closest note pitch
var difference=this._findClosest(midi);if(difference!==null){var closestNote=midi-difference;var buffer=this._buffers.get(closestNote);// play that note
var source=new Tone.BufferSource({'buffer':buffer,'playbackRate':Tone.intervalToFrequencyRatio(difference),'fadeIn':this.attack,'fadeOut':this.release,'curve':'exponential'}).connect(this.output);source.start(time,0,buffer.duration,velocity);// add it to the active sources
if(!Tone.isArray(this._activeSources[midi])){this._activeSources[midi]=[];}this._activeSources[midi].push({note:midi,source:source});}return this;};/**
		 * @param  {Frequency} note     The note to release.
		 * @param  {Time=} time     	When to release the note.
		 * @return {Tone.Sampler}	this
		 */Tone.Sampler.prototype.triggerRelease=function(note,time){var midi=Tone.Frequency(note).toMidi();// find the note
if(this._activeSources[midi]&&this._activeSources[midi].length){var source=this._activeSources[midi].shift().source;time=this.toSeconds(time);source.stop(time+this.release,this.release);}return this;};/**
		 * Release all currently active notes.
		 * @param  {Time=} time     	When to release the notes.
		 * @return {Tone.Sampler}	this
		 */Tone.Sampler.prototype.releaseAll=function(time){time=this.toSeconds(time);for(var note in this._activeSources){var sources=this._activeSources[note];while(sources.length){var source=sources.shift().source;source.stop(time+this.release,this.release);}}return this;};/**
		 * Sync the instrument to the Transport. All subsequent calls of
		 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
		 * will be scheduled along the transport.
		 * @example
		 * synth.sync()
		 * //schedule 3 notes when the transport first starts
		 * synth.triggerAttackRelease('8n', 0)
		 * synth.triggerAttackRelease('8n', '8n')
		 * synth.triggerAttackRelease('8n', '4n')
		 * //start the transport to hear the notes
		 * Transport.start()
		 * @returns {Tone.Instrument} this
		 */Tone.Sampler.prototype.sync=function(){this._syncMethod('triggerAttack',1);this._syncMethod('triggerRelease',1);return this;};/**
		 * Invoke the attack phase, then after the duration, invoke the release.
		 * @param  {Frequency} note     The note to play
		 * @param  {Time} duration The time the note should be held
		 * @param  {Time=} time     When to start the attack
		 * @param  {NormalRange} [velocity=1] The velocity of the attack
		 * @return {Tone.Sampler}          this
		 */Tone.Sampler.prototype.triggerAttackRelease=function(note,duration,time,velocity){time=this.toSeconds(time);duration=this.toSeconds(duration);this.triggerAttack(note,time,velocity);this.triggerRelease(note,time+duration);return this;};/**
		 *  Add a note to the sampler.
		 *  @param  {Note|Midi}   note      The buffer's pitch.
		 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,
		 *                                                 or a buffer which will be added
		 *                                                 with the given name.
		 *  @param  {Function=}  callback  The callback to invoke
		 *                                 when the url is loaded.
		 */Tone.Sampler.prototype.add=function(note,url,callback){if(Tone.isNote(note)){//convert the note name to MIDI
var mid=Tone.Frequency(note).toMidi();this._buffers.add(mid,url,callback);}else if(!isNaN(parseFloat(note))){//otherwise if it's numbers assume it's midi
this._buffers.add(note,url,callback);}else{throw new Error('Tone.Sampler: note must be the note\'s pitch. Instead got '+note);}};/**
		 * If the buffers are loaded or not
		 * @memberOf Tone.Sampler#
		 * @type {Boolean}
		 * @name loaded
		 * @readOnly
		 */Object.defineProperty(Tone.Sampler.prototype,'loaded',{get:function get(){return this._buffers.loaded;}});/**
		 * Clean up
		 * @return {Tone.Sampler} this
		 */Tone.Sampler.prototype.dispose=function(){Tone.Instrument.prototype.dispose.call(this);this._buffers.dispose();this._buffers=null;for(var midi in this._activeSources){this._activeSources[midi].forEach(function(event){event.source.dispose();});}this._activeSources=null;return this;};return Tone.Sampler;});Module(function(Tone){if(Tone.supported){if(!OscillatorNode.prototype.setPeriodicWave){OscillatorNode.prototype.setPeriodicWave=OscillatorNode.prototype.setWaveTable;}if(!AudioContext.prototype.createPeriodicWave){AudioContext.prototype.createPeriodicWave=AudioContext.prototype.createWaveTable;}}});Module(function(Tone){/**
		 *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. 
		 *         See also Tone.AudioToGain. 
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @example
		 * var g2a = new Tone.GainToAudio();
		 */Tone.GainToAudio=function(){Tone.SignalBase.call(this);/**
			 *  @type {WaveShaperNode}
			 *  @private
			 */this._norm=this.input=this.output=new Tone.WaveShaper(function(x){return Math.abs(x)*2-1;});};Tone.extend(Tone.GainToAudio,Tone.SignalBase);/**
		 *  clean up
		 *  @returns {Tone.GainToAudio} this
		 */Tone.GainToAudio.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._norm.dispose();this._norm=null;return this;};return Tone.GainToAudio;});Module(function(Tone){/**
		 *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @param {number} inputMin the min input value
		 *  @param {number} inputMax the max input value
		 *  @example
		 * var norm = new Tone.Normalize(2, 4);
		 * var sig = new Tone.Signal(3).connect(norm);
		 * //output of norm is 0.5. 
		 */Tone.Normalize=function(inputMin,inputMax){Tone.SignalBase.call(this);/**
			 *  the min input value
			 *  @type {number}
			 *  @private
			 */this._inputMin=Tone.defaultArg(inputMin,0);/**
			 *  the max input value
			 *  @type {number}
			 *  @private
			 */this._inputMax=Tone.defaultArg(inputMax,1);/**
			 *  subtract the min from the input
			 *  @type {Tone.Add}
			 *  @private
			 */this._sub=this.input=new Tone.Add(0);/**
			 *  divide by the difference between the input and output
			 *  @type {Tone.Multiply}
			 *  @private
			 */this._div=this.output=new Tone.Multiply(1);this._sub.connect(this._div);this._setRange();};Tone.extend(Tone.Normalize,Tone.SignalBase);/**
		 * The minimum value the input signal will reach.
		 * @memberOf Tone.Normalize#
		 * @type {number}
		 * @name min
		 */Object.defineProperty(Tone.Normalize.prototype,'min',{get:function get(){return this._inputMin;},set:function set(min){this._inputMin=min;this._setRange();}});/**
		 * The maximum value the input signal will reach.
		 * @memberOf Tone.Normalize#
		 * @type {number}
		 * @name max
		 */Object.defineProperty(Tone.Normalize.prototype,'max',{get:function get(){return this._inputMax;},set:function set(max){this._inputMax=max;this._setRange();}});/**
		 *  set the values
		 *  @private
		 */Tone.Normalize.prototype._setRange=function(){this._sub.value=-this._inputMin;this._div.value=1/(this._inputMax-this._inputMin);};/**
		 *  clean up
		 *  @returns {Tone.Normalize} this
		 */Tone.Normalize.prototype.dispose=function(){Tone.SignalBase.prototype.dispose.call(this);this._sub.dispose();this._sub=null;this._div.dispose();this._div=null;return this;};return Tone.Normalize;});Module(function(Tone){/**
		 * @class Tone.TransportTimelineSignal extends Tone.Signal, but adds the ability to synchronize the signal to the signal to the Tone.Transport
		 * @extends {Tone.Signal}
		 */Tone.TransportTimelineSignal=function(){Tone.Signal.apply(this,arguments);/**
			 * The real signal output
			 * @type {Tone.Signal}
			 * @private
			 */this.output=this._outputSig=new Tone.Signal(this._initialValue);/**
			 * Keep track of the last value. (small optimization)
			 * @private
			 * @type {Number}
			 */this._lastVal=this.value;/**
			 * The event id of the tick update loop
			 * @private
			 * @type {Number}
			 */this._synced=Tone.Transport.scheduleRepeat(this._onTick.bind(this),'1i');/**
			 * A bound version of the anchor value methods
			 * @type {Function}
			 * @private
			 */this._bindAnchorValue=this._anchorValue.bind(this);Tone.Transport.on('start stop pause',this._bindAnchorValue);this._events.memory=Infinity;};Tone.extend(Tone.TransportTimelineSignal,Tone.Signal);/**
		 * Callback which is invoked every tick.
		 * @private
		 * @param  {Number} time
		 * @return {Tone.TransportTimelineSignal}      this
		 */Tone.TransportTimelineSignal.prototype._onTick=function(time){var val=this.getValueAtTime(Tone.Transport.seconds);if(this._lastVal!==val){this._lastVal=val;//approximate ramp curves with linear ramps
this._outputSig.linearRampToValueAtTime(val,time);}};/**
		 * Anchor the value at the start and stop of the Transport
		 * @param  {Number} time The time of the event
		 * @return {Tone.TransportTimelineSignal}      this
		 * @private
		 */Tone.TransportTimelineSignal.prototype._anchorValue=function(time){var val=this.getValueAtTime(Tone.Transport.seconds);this._lastVal=val;this._outputSig.cancelScheduledValues(time);this._outputSig.setValueAtTime(val,time);return this;};/**
		 *  Get the scheduled value at the given time. This will
		 *  return the unconverted (raw) value.
		 *  @param  {TransportTime}  time  The time in seconds.
		 *  @return  {Number}  The scheduled value at the given time.
		 */Tone.TransportTimelineSignal.prototype.getValueAtTime=function(time){time=Tone.TransportTime(time);return Tone.Signal.prototype.getValueAtTime.call(this,time);};/**
		 * Set the output of the signal at the given time
		 * @param  {Number} value The value to change to at the given time
		 * @param  {TransportTime} time  The time to change the signal
		 * @return {Tone.TransportTimelineSignal}       this
		 */Tone.TransportTimelineSignal.prototype.setValueAtTime=function(value,time){time=Tone.TransportTime(time);Tone.Signal.prototype.setValueAtTime.call(this,value,time);return this;};/**
		 * Linear ramp to the given value from the previous scheduled point to the given value
		 * @param  {Number} value The value to change to at the given time
		 * @param  {TransportTime} time  The time to change the signal
		 * @return {Tone.TransportTimelineSignal}       this
		 */Tone.TransportTimelineSignal.prototype.linearRampToValueAtTime=function(value,time){time=Tone.TransportTime(time);Tone.Signal.prototype.linearRampToValueAtTime.call(this,value,time);return this;};/**
		 * Exponential ramp to the given value from the previous scheduled point to the given value
		 * @param  {Number} value The value to change to at the given time
		 * @param  {TransportTime} time  The time to change the signal
		 * @return {Tone.TransportTimelineSignal}       this
		 */Tone.TransportTimelineSignal.prototype.exponentialRampToValueAtTime=function(value,time){time=Tone.TransportTime(time);Tone.Signal.prototype.exponentialRampToValueAtTime.call(this,value,time);return this;};/**
		 *  Start exponentially approaching the target value at the given time with
		 *  a rate having the given time constant.
		 *  @param {number} value
		 *  @param {TransportTime} startTime
		 *  @param {number} timeConstant
		 * @return {Tone.TransportTimelineSignal}       this
		 */Tone.TransportTimelineSignal.prototype.setTargetAtTime=function(value,startTime,timeConstant){startTime=Tone.TransportTime(startTime);Tone.Signal.prototype.setTargetAtTime.call(this,value,startTime,timeConstant);return this;};/**
		 *  Cancels all scheduled parameter changes with times greater than or
		 *  equal to startTime.
		 *  @param  {TransportTime} startTime
		 *  @returns {Tone.Param} this
		 */Tone.TransportTimelineSignal.prototype.cancelScheduledValues=function(startTime){startTime=Tone.TransportTime(startTime);Tone.Signal.prototype.cancelScheduledValues.call(this,startTime);return this;};/**
		 *  Set an array of arbitrary values starting at the given time for the given duration.
		 *  @param {Float32Array} values
		 *  @param {Time} startTime
		 *  @param {Time} duration
		 *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value
		 *  @returns {Tone.Signal} this
		 */Tone.TransportTimelineSignal.prototype.setValueCurveAtTime=function(values,startTime,duration,scaling){startTime=Tone.TransportTime(startTime);duration=Tone.TransportTime(duration);Tone.Signal.prototype.setValueCurveAtTime.call(this,values,startTime,duration,scaling);return this;};/**
		 *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except
		 *  it holds the automated value at time until the next automated event.
		 *  @param  {Time} time
		 *  @returns {Tone.TransportTimelineSignal} this
		 */Tone.TransportTimelineSignal.prototype.cancelAndHoldAtTime=function(time){return Tone.Signal.prototype.cancelAndHoldAtTime.call(this,Tone.TransportTime(time));};/**
		 * Dispose and disconnect
		 * @return {Tone.TransportTimelineSignal} this
		 */Tone.TransportTimelineSignal.prototype.dispose=function(){Tone.Transport.clear(this._synced);Tone.Transport.off('start stop pause',this._syncedCallback);this._events.cancel(0);Tone.Signal.prototype.dispose.call(this);this._outputSig.dispose();this._outputSig=null;};return Tone.TransportTimelineSignal;});Module(function(Tone){/**
		 * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).
		 *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the
		 *        amount of time each small chunk of audio is played for and the overlap is the
		 *        amount of crossfading transition time between successive grains.
		 * @extends {Tone.Source}
		 * @param {String|Tone.Buffer} url	The url to load, or the Tone.Buffer to play.
		 * @param {Function=} callback The callback to invoke after the url is loaded.
		 */Tone.GrainPlayer=function(){var options=Tone.defaults(arguments,['url','onload'],Tone.GrainPlayer);Tone.Source.call(this,options);/**
			 *  The audio buffer belonging to the player.
			 *  @type  {Tone.Buffer}
			 */this.buffer=new Tone.Buffer(options.url,options.onload);/**
			 *  Create a repeating tick to schedule
			 *  the grains.
			 *  @type  {Tone.Clock}
			 *  @private
			 */this._clock=new Tone.Clock(this._tick.bind(this),options.grainSize);/**
			 *  @type  {Number}
			 *  @private
			 */this._loopStart=0;/**
			 *  @type  {Number}
			 *  @private
			 */this._loopEnd=0;/**
			 * All of the currently playing BufferSources
			 * @type {Array}
			 * @private
			 */this._activeSources=[];/**
			 *  @type  {Number}
			 *  @private
			 */this._playbackRate=options.playbackRate;/**
			 *  @type  {Number}
			 *  @private
			 */this._grainSize=options.grainSize;/**
			 *  @private
			 *  @type {Number}
			 */this._overlap=options.overlap;/**
			 *  Adjust the pitch independently of the playbackRate.
			 *  @type  {Cents}
			 */this.detune=options.detune;//setup
this.overlap=options.overlap;this.loop=options.loop;this.playbackRate=options.playbackRate;this.grainSize=options.grainSize;this.loopStart=options.loopStart;this.loopEnd=options.loopEnd;this.reverse=options.reverse;this._clock.on('stop',this._onstop.bind(this));};Tone.extend(Tone.GrainPlayer,Tone.Source);/**
		 *  the default parameters
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.GrainPlayer.defaults={'onload':Tone.noOp,'overlap':0.1,'grainSize':0.2,'playbackRate':1,'detune':0,'loop':false,'loopStart':0,'loopEnd':0,'reverse':false};/**
		 *  Play the buffer at the given startTime. Optionally add an offset
		 *  and/or duration which will play the buffer from a position
		 *  within the buffer for the given duration.
		 *
		 *  @param  {Time} [startTime=now] When the player should start.
		 *  @param  {Time} [offset=0] The offset from the beginning of the sample
		 *                                 to start at.
		 *  @param  {Time=} duration How long the sample should play. If no duration
		 *                                is given, it will default to the full length
		 *                                of the sample (minus any offset)
		 *  @returns {Tone.GrainPlayer} this
		 *  @memberOf Tone.GrainPlayer#
		 *  @method start
		 *  @name start
		 */ /**
		 *  Internal start method
		 *  @param {Time} time
		 *  @param {Time} offset
		 *  @private
		 */Tone.GrainPlayer.prototype._start=function(time,offset,duration){offset=Tone.defaultArg(offset,0);offset=this.toSeconds(offset);time=this.toSeconds(time);this._offset=offset;this._clock.start(time);if(duration){this.stop(time+this.toSeconds(duration));}};/**
		 *  Internal start method
		 *  @param {Time} time
		 *  @private
		 */Tone.GrainPlayer.prototype._stop=function(time){this._clock.stop(time);};/**
		 * Invoked when the clock is stopped
		 * @param  {Number} time
		 * @private
		 */Tone.GrainPlayer.prototype._onstop=function(time){//stop the players
this._activeSources.forEach(function(source){source.stop(time,0);});};/**
		 *  Invoked on each clock tick. scheduled a new
		 *  grain at this time.
		 *  @param  {Time}  time
		 *  @private
		 */Tone.GrainPlayer.prototype._tick=function(time){var fadeIn=this._offset<this._overlap?0:this._overlap;var source=new Tone.BufferSource({'buffer':this.buffer,'fadeIn':fadeIn,'fadeOut':this._overlap,'loop':this.loop,'loopStart':this._loopStart,'loopEnd':this._loopEnd,'playbackRate':Tone.intervalToFrequencyRatio(this.detune/100)}).connect(this.output);source.start(time,this._offset);this._offset+=this.grainSize;source.stop(time+this.grainSize);//add it to the active sources
this._activeSources.push(source);//remove it when it's done
source.onended=function(){var index=this._activeSources.indexOf(source);if(index!==-1){this._activeSources.splice(index,1);}}.bind(this);};/**
		 *  Jump to a specific time and play it.
		 *  @param  {Time}  offset  The offset to jump to.
		 *  @param {Time=} time When to make the jump.
		 *  @return  {Tone.GrainPlayer}  this
		 */Tone.GrainPlayer.prototype.seek=function(offset,time){this._offset=this.toSeconds(offset);this._tick(this.toSeconds(time));return this;};/**
		 * The playback rate of the sample
		 * @memberOf Tone.GrainPlayer#
		 * @type {Positive}
		 * @name playbackRate
		 */Object.defineProperty(Tone.GrainPlayer.prototype,'playbackRate',{get:function get(){return this._playbackRate;},set:function set(rate){this._playbackRate=rate;this.grainSize=this._grainSize;}});/**
		 * The loop start time.
		 * @memberOf Tone.GrainPlayer#
		 * @type {Time}
		 * @name loopStart
		 */Object.defineProperty(Tone.GrainPlayer.prototype,'loopStart',{get:function get(){return this._loopStart;},set:function set(time){this._loopStart=this.toSeconds(time);}});/**
		 * The loop end time.
		 * @memberOf Tone.GrainPlayer#
		 * @type {Time}
		 * @name loopEnd
		 */Object.defineProperty(Tone.GrainPlayer.prototype,'loopEnd',{get:function get(){return this._loopEnd;},set:function set(time){this._loopEnd=this.toSeconds(time);}});/**
		 * The direction the buffer should play in
		 * @memberOf Tone.GrainPlayer#
		 * @type {boolean}
		 * @name reverse
		 */Object.defineProperty(Tone.GrainPlayer.prototype,'reverse',{get:function get(){return this.buffer.reverse;},set:function set(rev){this.buffer.reverse=rev;}});/**
		 * The size of each chunk of audio that the
		 * buffer is chopped into and played back at.
		 * @memberOf Tone.GrainPlayer#
		 * @type {Time}
		 * @name grainSize
		 */Object.defineProperty(Tone.GrainPlayer.prototype,'grainSize',{get:function get(){return this._grainSize;},set:function set(size){this._grainSize=this.toSeconds(size);this._clock.frequency.value=this._playbackRate/this._grainSize;}});/**
		 * This is the duration of the cross-fade between
		 * sucessive grains.
		 * @memberOf Tone.GrainPlayer#
		 * @type {Time}
		 * @name overlap
		 */Object.defineProperty(Tone.GrainPlayer.prototype,'overlap',{get:function get(){return this._overlap;},set:function set(time){this._overlap=this.toSeconds(time);}});/**
		 * Clean up
		 * @return {Tone.GrainPlayer} this
		 */Tone.GrainPlayer.prototype.dispose=function(){Tone.Source.prototype.dispose.call(this);this.buffer.dispose();this.buffer=null;this._clock.dispose();this._clock=null;this._activeSources.forEach(function(source){source.dispose();});this._activeSources=null;return this;};return Tone.GrainPlayer;});Module(function(Tone){/**
		 *  @class  Tone.Player is an audio file player with start, loop, and stop functions.
		 *
		 *  @constructor
		 *  @extends {Tone.Source}
		 *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from
		 *                                  which to load the AudioBuffer
		 *  @param {Function=} onload The function to invoke when the buffer is loaded.
		 *                            Recommended to use Tone.Buffer.on('load') instead.
		 *  @example
		 * var player = new Tone.Player("./path/to/sample.mp3").toMaster();
		 * //play as soon as the buffer is loaded
		 * player.autostart = true;
		 */Tone.Player=function(url){var options;if(url instanceof Tone.Buffer&&url.loaded){url=url.get();options=Tone.Player.defaults;}else{options=Tone.defaults(arguments,['url','onload'],Tone.Player);}Tone.Source.call(this,options);/**
			 *  If the file should play as soon
			 *  as the buffer is loaded.
			 *  @type {Boolean}
			 *  @example
			 * //will play as soon as it's loaded
			 * var player = new Tone.Player({
			 * 	"url" : "./path/to/sample.mp3",
			 * 	"autostart" : true,
			 * }).toMaster();
			 */this.autostart=options.autostart;/**
			 *  the buffer
			 *  @private
			 *  @type {Tone.Buffer}
			 */this._buffer=new Tone.Buffer({'url':options.url,'onload':this._onload.bind(this,options.onload),'reverse':options.reverse});if(url instanceof AudioBuffer){this._buffer.set(url);}/**
			 *  if the buffer should loop once it's over
			 *  @type {Boolean}
			 *  @private
			 */this._loop=options.loop;/**
			 *  if 'loop' is true, the loop will start at this position
			 *  @type {Time}
			 *  @private
			 */this._loopStart=options.loopStart;/**
			 *  if 'loop' is true, the loop will end at this position
			 *  @type {Time}
			 *  @private
			 */this._loopEnd=options.loopEnd;/**
			 *  the playback rate
			 *  @private
			 *  @type {Number}
			 */this._playbackRate=options.playbackRate;/**
			 *  All of the active buffer source nodes
			 *  @type {Array<Tone.BufferSource>}
			 *  @private
			 */this._activeSources=[];/**
			 *  The elapsed time counter.
			 *  @type {Tone.TickSource}
			 *  @private
			 */this._elapsedTime=new Tone.TickSource(options.playbackRate);/**
			 *  The fadeIn time of the amplitude envelope.
			 *  @type {Time}
			 */this.fadeIn=options.fadeIn;/**
			 *  The fadeOut time of the amplitude envelope.
			 *  @type {Time}
			 */this.fadeOut=options.fadeOut;};Tone.extend(Tone.Player,Tone.Source);/**
		 *  the default parameters
		 *  @static
		 *  @const
		 *  @type {Object}
		 */Tone.Player.defaults={'onload':Tone.noOp,'playbackRate':1,'loop':false,'autostart':false,'loopStart':0,'loopEnd':0,'retrigger':false,'reverse':false,'fadeIn':0,'fadeOut':0};/**
		 *  Load the audio file as an audio buffer.
		 *  Decodes the audio asynchronously and invokes
		 *  the callback once the audio buffer loads.
		 *  Note: this does not need to be called if a url
		 *  was passed in to the constructor. Only use this
		 *  if you want to manually load a new url.
		 * @param {string} url The url of the buffer to load.
		 *                     Filetype support depends on the
		 *                     browser.
		 *  @param  {Function=} callback The function to invoke once
		 *                               the sample is loaded.
		 *  @returns {Promise}
		 */Tone.Player.prototype.load=function(url,callback){return this._buffer.load(url,this._onload.bind(this,callback));};/**
		 * Internal callback when the buffer is loaded.
		 * @private
		 */Tone.Player.prototype._onload=function(callback){callback=Tone.defaultArg(callback,Tone.noOp);callback(this);if(this.autostart){this.start();}};/**
		 * Internal callback when the buffer is done playing.
		 * @private
		 */Tone.Player.prototype._onSourceEnd=function(source){var index=this._activeSources.indexOf(source);this._activeSources.splice(index,1);};/**
		 *  Play the buffer at the given startTime. Optionally add an offset
		 *  and/or duration which will play the buffer from a position
		 *  within the buffer for the given duration.
		 *
		 *  @param  {Time} [startTime=now] When the player should start.
		 *  @param  {Time} [offset=0] The offset from the beginning of the sample
		 *                                 to start at.
		 *  @param  {Time=} duration How long the sample should play. If no duration
		 *                                is given, it will default to the full length
		 *                                of the sample (minus any offset)
		 *  @returns {Tone.Player} this
		 *  @memberOf Tone.Player#
		 *  @method start
		 *  @name start
		 */ /**
		 *  Internal start method
		 *  @private
		 */Tone.Player.prototype._start=function(startTime,offset,duration){//if it's a loop the default offset is the loopstart point
if(this._loop){offset=Tone.defaultArg(offset,this._loopStart);}else{//otherwise the default offset is 0
offset=Tone.defaultArg(offset,0);}//compute the values in seconds
offset=this.toSeconds(offset);var computedDuration=Tone.defaultArg(duration,Math.max(this._buffer.duration-offset,0));computedDuration=this.toSeconds(computedDuration);startTime=this.toSeconds(startTime);//start the elapsed time counter
this._elapsedTime.start(startTime,offset);//make the source
var source=new Tone.BufferSource({'buffer':this._buffer,'loop':this._loop,'loopStart':this._loopStart,'loopEnd':this._loopEnd,'onended':this._onSourceEnd.bind(this),'playbackRate':this._playbackRate,'fadeIn':this.fadeIn,'fadeOut':this.fadeOut}).connect(this.output);//set the looping properties
if(!this._loop&&!this._synced){//if it's not looping, set the state change at the end of the sample
this._state.setStateAtTime(Tone.State.Stopped,startTime+computedDuration/this._playbackRate);}//add it to the array of active sources
this._activeSources.push(source);//start it
if(this._loop&&Tone.isUndef(duration)){source.start(startTime,offset);}else{source.start(startTime,offset,computedDuration);}return this;};/**
		 *  Stop playback.
		 *  @private
		 *  @param  {Time} [time=now]
		 *  @returns {Tone.Player} this
		 */Tone.Player.prototype._stop=function(time){time=this.toSeconds(time);this._elapsedTime.stop(time);this._activeSources.forEach(function(source){source.stop(time);});return this;};/**
		 * Stop and then restart the player from the beginning (or offset)
		 *  @param  {Time} [startTime=now] When the player should start.
		 *  @param  {Time} [offset=0] The offset from the beginning of the sample
		 *                                 to start at.
		 *  @param  {Time=} duration How long the sample should play. If no duration
		 *                                is given, it will default to the full length
		 *                                of the sample (minus any offset)
		 *  @returns {Tone.Player} this
		 */Tone.Player.prototype.restart=function(time,offset,duration){this._stop(time);this._start(time,offset,duration);return this;};/**
		 *  Seek to a specific time in the player's buffer. If the
		 *  source is no longer playing at that time, it will stop.
		 *  If you seek to a time that
		 *  @param {Time} offset The time to seek to.
		 *  @param {Time=} time The time for the seek event to occur.
		 *  @return {Tone.Player} this
		 *  @example
		 * source.start(0.2);
		 * source.stop(0.4);
		 */Tone.Player.prototype.seek=function(offset,time){time=this.toSeconds(time);if(this._state.getValueAtTime(time)===Tone.State.Started){offset=this.toSeconds(offset);// if it's currently playing, stop it
this._stop(time);//restart it at the given time
this._start(time,offset);}return this;};/**
		 *  Set the loop start and end. Will only loop if loop is
		 *  set to true.
		 *  @param {Time} loopStart The loop end time
		 *  @param {Time} loopEnd The loop end time
		 *  @returns {Tone.Player} this
		 *  @example
		 * //loop 0.1 seconds of the file.
		 * player.setLoopPoints(0.2, 0.3);
		 * player.loop = true;
		 */Tone.Player.prototype.setLoopPoints=function(loopStart,loopEnd){this.loopStart=loopStart;this.loopEnd=loopEnd;return this;};/**
		 * If loop is true, the loop will start at this position.
		 * @memberOf Tone.Player#
		 * @type {Time}
		 * @name loopStart
		 */Object.defineProperty(Tone.Player.prototype,'loopStart',{get:function get(){return this._loopStart;},set:function set(loopStart){this._loopStart=loopStart;//get the current source
this._activeSources.forEach(function(source){source.loopStart=loopStart;});}});/**
		 * If loop is true, the loop will end at this position.
		 * @memberOf Tone.Player#
		 * @type {Time}
		 * @name loopEnd
		 */Object.defineProperty(Tone.Player.prototype,'loopEnd',{get:function get(){return this._loopEnd;},set:function set(loopEnd){this._loopEnd=loopEnd;//get the current source
this._activeSources.forEach(function(source){source.loopEnd=loopEnd;});}});/**
		 * The audio buffer belonging to the player.
		 * @memberOf Tone.Player#
		 * @type {Tone.Buffer}
		 * @name buffer
		 */Object.defineProperty(Tone.Player.prototype,'buffer',{get:function get(){return this._buffer;},set:function set(buffer){this._buffer.set(buffer);}});/**
		 * If the buffer should loop once it's over.
		 * @memberOf Tone.Player#
		 * @type {Boolean}
		 * @name loop
		 */Object.defineProperty(Tone.Player.prototype,'loop',{get:function get(){return this._loop;},set:function set(loop){//if no change, do nothing
if(this._loop===loop){return;}this._loop=loop;var now=this.now();if(!loop){//stop the playback on the next cycle
this._stopAtNextIteration(now);}else{//remove the next stopEvent
var stopEvent=this._state.getNextState(Tone.State.Stopped,now);if(stopEvent){this._activeSources.forEach(function(source){source.loop=loop;});this._state.cancel(stopEvent.time);this._elapsedTime.cancel(stopEvent.time);}}}});/**
		 *  Schedules a stop event at the next full iteration. Used
		 *  for scheduling stop when the loop state or playbackRate changes
		 *  @param  {Number}  now  The current time
		 *  @private
		 */Tone.Player.prototype._stopAtNextIteration=function(now){if(this._state.getValueAtTime(now)===Tone.State.Started){var nextStop=this._state.getNextState(Tone.State.Stopped,now);var position=this._elapsedTime.getTicksAtTime(now);var iterations=Math.max(Math.ceil(position/this.buffer.duration),1);var stopTime=this._elapsedTime.getTimeOfTick(iterations*this.buffer.duration,nextStop?nextStop.time-this.sampleTime:Infinity);this.stop(stopTime);}};/**
		 * The playback speed. 1 is normal speed. This is not a signal because
		 * Safari and iOS currently don't support playbackRate as a signal.
		 * @memberOf Tone.Player#
		 * @type {Number}
		 * @name playbackRate
		 */Object.defineProperty(Tone.Player.prototype,'playbackRate',{get:function get(){return this._playbackRate;},set:function set(rate){this._playbackRate=rate;var now=this.now();this._elapsedTime.frequency.setValueAtTime(rate,now);//if it's not looping
if(!this._loop){this._stopAtNextIteration(now);}//set all the sources
this._activeSources.forEach(function(source){source.playbackRate.setValueAtTime(rate,now);});}});/**
		 * The current playback position of the buffer. 
		 * @memberOf Tone.Player#
		 * @type {Number}
		 * @name position
		 */Object.defineProperty(Tone.Player.prototype,'position',{get:function get(){var now=this.now();if(this._state.getValueAtTime(now)===Tone.State.Started&&this.loaded){var duration=this.buffer.duration;var position=this._elapsedTime.getTicksAtTime(now);return position%duration;}else{return 0;}}});/**
		 * The direction the buffer should play in
		 * @memberOf Tone.Player#
		 * @type {Boolean}
		 * @name reverse
		 */Object.defineProperty(Tone.Player.prototype,'reverse',{get:function get(){return this._buffer.reverse;},set:function set(rev){this._buffer.reverse=rev;}});/**
		 * If all the buffer is loaded
		 * @memberOf Tone.Player#
		 * @type {Boolean}
		 * @name loaded
		 * @readOnly
		 */Object.defineProperty(Tone.Player.prototype,'loaded',{get:function get(){return this._buffer.loaded;}});/**
		 *  Dispose and disconnect.
		 *  @return {Tone.Player} this
		 */Tone.Player.prototype.dispose=function(){//disconnect all of the players
this._activeSources.forEach(function(source){source.dispose();});this._activeSources=null;Tone.Source.prototype.dispose.call(this);this._buffer.dispose();this._buffer=null;this._elapsedTime.dispose();this._elapsedTime=null;return this;};return Tone.Player;});Module(function(Tone){/**
		 *  @class  Tone.Players combines multiple [Tone.Player](Player) objects.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Object} urls An object mapping a name to a url.
		 *  @param {function=} onload The function to invoke when all buffers are loaded.
		 */Tone.Players=function(urls){var args=Array.prototype.slice.call(arguments);args.shift();var options=Tone.defaults(args,['onload'],Tone.Players);Tone.call(this);/**
			 *  The output volume node
			 *  @type  {Tone.Volume}
			 *  @private
			 */this._volume=this.output=new Tone.Volume(options.volume);/**
			 * The volume of the output in decibels.
			 * @type {Decibels}
			 * @signal
			 * @example
			 * source.volume.value = -6;
			 */this.volume=this._volume.volume;this._readOnly('volume');//make the output explicitly stereo
this._volume.output.output.channelCount=2;this._volume.output.output.channelCountMode='explicit';//mute initially
this.mute=options.mute;/**
			 * The container of all of the players
			 * @type {Object}
			 * @private
			 */this._players={};/**
			 * The loading count
			 * @type {Number}
			 * @private
			 */this._loadingCount=0;/**
			 * private holder of the fadeIn time
			 * @type {Time}
			 * @private
			 */this._fadeIn=options.fadeIn;/**
			 * private holder of the fadeOut time
			 * @type {Time}
			 * @private
			 */this._fadeOut=options.fadeOut;//add all of the players
for(var name in urls){this._loadingCount++;this.add(name,urls[name],this._bufferLoaded.bind(this,options.onload));}};Tone.extend(Tone.Players,Tone.AudioNode);/**
		 * The default values
		 * @type {Object}
		 */Tone.Players.defaults={'volume':0,'mute':false,'onload':Tone.noOp,'fadeIn':0,'fadeOut':0};/**
		 *  A buffer was loaded. decrement the counter.
		 *  @param  {Function}  callback
		 *  @private
		 */Tone.Players.prototype._bufferLoaded=function(callback){this._loadingCount--;if(this._loadingCount===0&&callback){callback(this);}};/**
		 * Mute the output.
		 * @memberOf Tone.Source#
		 * @type {boolean}
		 * @name mute
		 * @example
		 * //mute the output
		 * source.mute = true;
		 */Object.defineProperty(Tone.Players.prototype,'mute',{get:function get(){return this._volume.mute;},set:function set(mute){this._volume.mute=mute;}});/**
		 * The fadeIn time of the amplitude envelope.
		 * @memberOf Tone.Source#
		 * @type {Time}
		 * @name fadeIn
		 */Object.defineProperty(Tone.Players.prototype,'fadeIn',{get:function get(){return this._fadeIn;},set:function set(fadeIn){this._fadeIn=fadeIn;this._forEach(function(player){player.fadeIn=fadeIn;});}});/**
		 * The fadeOut time of the amplitude envelope.
		 * @memberOf Tone.Source#
		 * @type {Time}
		 * @name fadeOut
		 */Object.defineProperty(Tone.Players.prototype,'fadeOut',{get:function get(){return this._fadeOut;},set:function set(fadeOut){this._fadeOut=fadeOut;this._forEach(function(player){player.fadeOut=fadeOut;});}});/**
		 * The state of the players object. Returns "started" if any of the players are playing.
		 * @memberOf Tone.Players#
		 * @type {String}
		 * @name state
		 * @readOnly
		 */Object.defineProperty(Tone.Players.prototype,'state',{get:function get(){var playing=false;this._forEach(function(player){playing=playing||player.state===Tone.State.Started;});return playing?Tone.State.Started:Tone.State.Stopped;}});/**
		 *  True if the buffers object has a buffer by that name.
		 *  @param  {String|Number}  name  The key or index of the
		 *                                 buffer.
		 *  @return  {Boolean}
		 */Tone.Players.prototype.has=function(name){return this._players.hasOwnProperty(name);};/**
		 *  Get a player by name.
		 *  @param  {String}  name  The players name as defined in
		 *                          the constructor object or `add` method.
		 *  @return  {Tone.Player}
		 */Tone.Players.prototype.get=function(name){if(this.has(name)){return this._players[name];}else{throw new Error('Tone.Players: no player named '+name);}};/**
		 * Iterate over all of the players
		 * @param  {Function} callback
		 * @return {Tone.Players}            this
		 * @private
		 */Tone.Players.prototype._forEach=function(callback){for(var playerName in this._players){callback(this._players[playerName],playerName);}return this;};/**
		 * If all the buffers are loaded or not
		 * @memberOf Tone.Players#
		 * @type {Boolean}
		 * @name loaded
		 * @readOnly
		 */Object.defineProperty(Tone.Players.prototype,'loaded',{get:function get(){var isLoaded=true;this._forEach(function(player){isLoaded=isLoaded&&player.loaded;});return isLoaded;}});/**
		 *  Add a player by name and url to the Players
		 *  @param  {String}    name      A unique name to give the player
		 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,
		 *                                                 or a buffer which will be added
		 *                                                 with the given name.
		 *  @param  {Function=}  callback  The callback to invoke
		 *                                 when the url is loaded.
		 */Tone.Players.prototype.add=function(name,url,callback){this._players[name]=new Tone.Player(url,callback).connect(this.output);this._players[name].fadeIn=this._fadeIn;this._players[name].fadeOut=this._fadeOut;return this;};/**
		 * Stop all of the players at the given time
		 * @param {Time} time The time to stop all of the players.
		 * @return {Tone.Players} this
		 */Tone.Players.prototype.stopAll=function(time){this._forEach(function(player){player.stop(time);});};/**
		 *  Dispose and disconnect.
		 *  @return {Tone.Players} this
		 */Tone.Players.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this._volume.dispose();this._volume=null;this._writable('volume');this.volume=null;this.output=null;this._forEach(function(player){player.dispose();});this._players=null;return this;};return Tone.Players;});Module(function(Tone){/**
		 *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up
		 *          and external microphone or audio input. Check
		 *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)
		 *          to see which browsers are supported. Access to an external input
		 *          is limited to secure (HTTPS) connections.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Decibels=} volume The level of the input
		 *  @example
		 * //list the inputs and open the third one
		 * var motu = new Tone.UserMedia();
		 *
		 * //opening the input asks the user to activate their mic
		 * motu.open().then(function(){
		 * 	//promise resolves when input is available
		 * });
		 */Tone.UserMedia=function(){var options=Tone.defaults(arguments,['volume'],Tone.UserMedia);Tone.AudioNode.call(this);/**
			 *  The MediaStreamNode
			 *  @type {MediaStreamAudioSourceNode}
			 *  @private
			 */this._mediaStream=null;/**
			 *  The media stream created by getUserMedia.
			 *  @type {LocalMediaStream}
			 *  @private
			 */this._stream=null;/**
			 *  The open device
			 *  @type  {MediaDeviceInfo}
			 *  @private
			 */this._device=null;/**
			 *  The output volume node
			 *  @type  {Tone.Volume}
			 *  @private
			 */this._volume=this.output=new Tone.Volume(options.volume);/**
			 * The volume of the output in decibels.
			 * @type {Decibels}
			 * @signal
			 * @example
			 * input.volume.value = -6;
			 */this.volume=this._volume.volume;this._readOnly('volume');this.mute=options.mute;};Tone.extend(Tone.UserMedia,Tone.AudioNode);/**
		 * the default parameters
		 * @type {Object}
		 */Tone.UserMedia.defaults={'volume':0,'mute':false};/**
		 *  Open the media stream. If a string is passed in, it is assumed
		 *  to be the label or id of the stream, if a number is passed in,
		 *  it is the input number of the stream.
		 *  @param  {String|Number} [labelOrId="default"] The label or id of the audio input media device.
		 *                                                With no argument, the default stream is opened.
		 *  @return {Promise} The promise is resolved when the stream is open.
		 */Tone.UserMedia.prototype.open=function(labelOrId){return Tone.UserMedia.enumerateDevices().then(function(devices){var device;if(Tone.isNumber(labelOrId)){device=devices[labelOrId];}else{device=devices.find(function(device){return device.label===labelOrId||device.deviceId===labelOrId;});//didn't find a matching device
if(!device&&devices.length>0){device=devices[0];}else if(!device&&Tone.isDefined(labelOrId)){throw new Error('Tone.UserMedia: no matching device: '+labelOrId);}}this._device=device;//do getUserMedia
var constraints={audio:{'echoCancellation':false,'sampleRate':this.context.sampleRate}};if(device){constraints.audio.deviceId=device.deviceId;}return navigator.mediaDevices.getUserMedia(constraints).then(function(stream){//start a new source only if the previous one is closed
if(!this._stream){this._stream=stream;//Wrap a MediaStreamSourceNode around the live input stream.
this._mediaStream=this.context.createMediaStreamSource(stream);//Connect the MediaStreamSourceNode to a gate gain node
this._mediaStream.connect(this.output);}return this;}.bind(this));}.bind(this));};/**
		 *  Close the media stream
		 *  @return {Tone.UserMedia} this
		 */Tone.UserMedia.prototype.close=function(){if(this._stream){this._stream.getAudioTracks().forEach(function(track){track.stop();});this._stream=null;//remove the old media stream
this._mediaStream.disconnect();this._mediaStream=null;}this._device=null;return this;};/**
		 *  Returns a promise which resolves with the list of audio input devices available.
		 *  @return {Promise} The promise that is resolved with the devices
		 *  @static
		 *  @example
		 * Tone.UserMedia.enumerateDevices().then(function(devices){
		 * 	console.log(devices)
		 * })
		 */Tone.UserMedia.enumerateDevices=function(){return navigator.mediaDevices.enumerateDevices().then(function(devices){return devices.filter(function(device){return device.kind==='audioinput';});});};/**
		 *  Returns the playback state of the source, "started" when the microphone is open
		 *  and "stopped" when the mic is closed.
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.UserMedia#
		 *  @name state
		 */Object.defineProperty(Tone.UserMedia.prototype,'state',{get:function get(){return this._stream&&this._stream.active?Tone.State.Started:Tone.State.Stopped;}});/**
		 * 	Returns an identifier for the represented device that is
		 * 	persisted across sessions. It is un-guessable by other applications and
		 * 	unique to the origin of the calling application. It is reset when the
		 * 	user clears cookies (for Private Browsing, a different identifier is
		 * 	used that is not persisted across sessions). Returns undefined when the
		 * 	device is not open.
		 *  @type {String}
		 *  @readOnly
		 *  @memberOf Tone.UserMedia#
		 *  @name deviceId
		 */Object.defineProperty(Tone.UserMedia.prototype,'deviceId',{get:function get(){if(this._device){return this._device.deviceId;}}});/**
		 * 	Returns a group identifier. Two devices have the
		 * 	same group identifier if they belong to the same physical device.
		 * 	Returns undefined when the device is not open.
		 *  @type {String}
		 *  @readOnly
		 *  @memberOf Tone.UserMedia#
		 *  @name groupId
		 */Object.defineProperty(Tone.UserMedia.prototype,'groupId',{get:function get(){if(this._device){return this._device.groupId;}}});/**
		 * 	Returns a label describing this device (for example "Built-in Microphone").
		 * 	Returns undefined when the device is not open or label is not available
		 * 	because of permissions.
		 *  @type {String}
		 *  @readOnly
		 *  @memberOf Tone.UserMedia#
		 *  @name groupId
		 */Object.defineProperty(Tone.UserMedia.prototype,'label',{get:function get(){if(this._device){return this._device.label;}}});/**
		 * Mute the output.
		 * @memberOf Tone.UserMedia#
		 * @type {boolean}
		 * @name mute
		 * @example
		 * //mute the output
		 * userMedia.mute = true;
		 */Object.defineProperty(Tone.UserMedia.prototype,'mute',{get:function get(){return this._volume.mute;},set:function set(mute){this._volume.mute=mute;}});/**
		 * Clean up.
		 * @return {Tone.UserMedia} this
		 */Tone.UserMedia.prototype.dispose=function(){Tone.AudioNode.prototype.dispose.call(this);this.close();this._writable('volume');this._volume.dispose();this._volume=null;this.volume=null;return this;};/**
		 *  If getUserMedia is supported by the browser.
		 *  @type  {Boolean}
		 *  @memberOf Tone.UserMedia#
		 *  @name supported
		 *  @static
		 *  @readOnly
		 */Object.defineProperty(Tone.UserMedia,'supported',{get:function get(){return Tone.isDefined(navigator.mediaDevices)&&Tone.isFunction(navigator.mediaDevices.getUserMedia);}});return Tone.UserMedia;});Module(function(Tone){/**
		 *  @class Tone.Midi is a primitive type for encoding Time values.
		 *         Tone.Midi can be constructed with or without the `new` keyword. Tone.Midi can be passed
		 *         into the parameter of any method which takes time as an argument.
		 *  @constructor
		 *  @extends {Tone.Frequency}
		 *  @param  {String|Number}  val    The time value.
		 *  @param  {String=}  units  The units of the value.
		 *  @example
		 * var t = Tone.Midi("4n");//a quarter note
		 */Tone.Midi=function(val,units){if(this instanceof Tone.Midi){Tone.Frequency.call(this,val,units);}else{return new Tone.Midi(val,units);}};Tone.extend(Tone.Midi,Tone.Frequency);/**
		 *  The default units if none are given.
		 *  @type {String}
		 *  @private
		 */Tone.Midi.prototype._defaultUnits='midi';/**
		 *  Returns the value of a frequency in the current units
		 *  @param {Frequency} freq
		 *  @return  {Number}
		 *  @private
		 */Tone.Midi.prototype._frequencyToUnits=function(freq){return Tone.Frequency.ftom(Tone.Frequency.prototype._frequencyToUnits.call(this,freq));};/**
		 *  Returns the value of a tick in the current time units
		 *  @param {Ticks} ticks
		 *  @return  {Number}
		 *  @private
		 */Tone.Midi.prototype._ticksToUnits=function(ticks){return Tone.Frequency.ftom(Tone.Frequency.prototype._ticksToUnits.call(this,ticks));};/**
		 *  Return the value of the beats in the current units
		 *  @param {Number} beats
		 *  @return  {Number}
		 *  @private
		 */Tone.Midi.prototype._beatsToUnits=function(beats){return Tone.Frequency.ftom(Tone.Frequency.prototype._beatsToUnits.call(this,beats));};/**
		 *  Returns the value of a second in the current units
		 *  @param {Seconds} seconds
		 *  @return  {Number}
		 *  @private
		 */Tone.Midi.prototype._secondsToUnits=function(seconds){return Tone.Frequency.ftom(Tone.Frequency.prototype._secondsToUnits.call(this,seconds));};/**
		 *  Return the value of the frequency as a MIDI note
		 *  @return  {MIDI}
		 *  @example
		 * Tone.Midi(60).toMidi(); //60
		 */Tone.Midi.prototype.toMidi=function(){return this.valueOf();};/**
		 *  Return the value of the frequency as a MIDI note
		 *  @return  {MIDI}
		 *  @example
		 * Tone.Midi(60).toMidi(); //60
		 */Tone.Midi.prototype.toFrequency=function(){return Tone.Frequency.mtof(this.toMidi());};/**
		 *  Transposes the frequency by the given number of semitones.
		 *  @param  {Interval}  interval
		 *  @return  {Tone.Frequency} A new transposed frequency
		 *  @example
		 * Tone.Frequency("A4").transpose(3); //"C5"
		 */Tone.Midi.prototype.transpose=function(interval){return new this.constructor(this.toMidi()+interval);};return Tone.Midi;});return Tone;});

/***/ }),

/***/ "./node_modules/underscore/underscore.js":
/*!***********************************************!*\
  !*** ./node_modules/underscore/underscore.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//     Underscore.js 1.9.1
//     http://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
(function () {
  // Baseline setup
  // --------------
  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self.self === self && self || (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global.global === global && global || this || {}; // Save the previous value of the `_` variable.

  var previousUnderscore = root._; // Save bytes in the minified (but not gzipped) version:

  var ArrayProto = Array.prototype,
      ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null; // Create quick reference variables for speed access to core prototypes.

  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty; // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.

  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create; // Naked function reference for surrogate-prototype-swapping.

  var Ctor = function Ctor() {}; // Create a safe reference to the Underscore object for use below.


  var _ = function _(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  }; // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)


  if ( true && !exports.nodeType) {
    if ( true && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }

    exports._ = _;
  } else {
    root._ = _;
  } // Current version.


  _.VERSION = '1.9.1'; // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.

  var optimizeCb = function optimizeCb(func, context, argCount) {
    if (context === void 0) return func;

    switch (argCount == null ? 3 : argCount) {
      case 1:
        return function (value) {
          return func.call(context, value);
        };
      // The 2-argument case is omitted because we’re not using it.

      case 3:
        return function (value, index, collection) {
          return func.call(context, value, index, collection);
        };

      case 4:
        return function (accumulator, value, index, collection) {
          return func.call(context, accumulator, value, index, collection);
        };
    }

    return function () {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee; // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.

  var cb = function cb(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  }; // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.


  _.iteratee = builtinIteratee = function builtinIteratee(value, context) {
    return cb(value, context, Infinity);
  }; // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".


  var restArguments = function restArguments(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function () {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;

      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }

      switch (startIndex) {
        case 0:
          return func.call(this, rest);

        case 1:
          return func.call(this, arguments[0], rest);

        case 2:
          return func.call(this, arguments[0], arguments[1], rest);
      }

      var args = Array(startIndex + 1);

      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }

      args[startIndex] = rest;
      return func.apply(this, args);
    };
  }; // An internal function for creating a new object that inherits from another.


  var baseCreate = function baseCreate(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor();
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function shallowProperty(key) {
    return function (obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function has(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  };

  var deepGet = function deepGet(obj, path) {
    var length = path.length;

    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }

    return length ? obj : void 0;
  }; // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094


  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');

  var isArrayLike = function isArrayLike(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  }; // Collection Functions
  // --------------------
  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.


  _.each = _.forEach = function (obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;

    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);

      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }

    return obj;
  }; // Return the results of applying the iteratee to each element.


  _.map = _.collect = function (obj, iteratee, context) {
    iteratee = cb(iteratee, context);

    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);

    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }

    return results;
  }; // Create a reducing function iterating left or right.


  var createReduce = function createReduce(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function reducer(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;

      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }

      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }

      return memo;
    };

    return function (obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  }; // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.


  _.reduce = _.foldl = _.inject = createReduce(1); // The right-associative version of reduce, also known as `foldr`.

  _.reduceRight = _.foldr = createReduce(-1); // Return the first value which passes a truth test. Aliased as `detect`.

  _.find = _.detect = function (obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  }; // Return all the elements that pass a truth test.
  // Aliased as `select`.


  _.filter = _.select = function (obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);

    _.each(obj, function (value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });

    return results;
  }; // Return all the elements for which a truth test fails.


  _.reject = function (obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  }; // Determine whether all of the elements match a truth test.
  // Aliased as `all`.


  _.every = _.all = function (obj, predicate, context) {
    predicate = cb(predicate, context);

    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;

    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }

    return true;
  }; // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.


  _.some = _.any = function (obj, predicate, context) {
    predicate = cb(predicate, context);

    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;

    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }

    return false;
  }; // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.


  _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  }; // Invoke a method (with arguments) on every item in a collection.


  _.invoke = restArguments(function (obj, path, args) {
    var contextPath, func;

    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }

    return _.map(obj, function (context) {
      var method = func;

      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }

        if (context == null) return void 0;
        method = context[path];
      }

      return method == null ? method : method.apply(context, args);
    });
  }); // Convenience version of a common use case of `map`: fetching a property.

  _.pluck = function (obj, key) {
    return _.map(obj, _.property(key));
  }; // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.


  _.where = function (obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  }; // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.


  _.findWhere = function (obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  }; // Return the maximum element (or element-based computation).


  _.max = function (obj, iteratee, context) {
    var result = -Infinity,
        lastComputed = -Infinity,
        value,
        computed;

    if (iteratee == null || typeof iteratee == 'number' && _typeof(obj[0]) != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);

      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];

        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);

      _.each(obj, function (v, index, list) {
        computed = iteratee(v, index, list);

        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }

    return result;
  }; // Return the minimum element (or element-based computation).


  _.min = function (obj, iteratee, context) {
    var result = Infinity,
        lastComputed = Infinity,
        value,
        computed;

    if (iteratee == null || typeof iteratee == 'number' && _typeof(obj[0]) != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);

      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];

        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);

      _.each(obj, function (v, index, list) {
        computed = iteratee(v, index, list);

        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }

    return result;
  }; // Shuffle a collection.


  _.shuffle = function (obj) {
    return _.sample(obj, Infinity);
  }; // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.


  _.sample = function (obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }

    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;

    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);

      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }

    return sample.slice(0, n);
  }; // Sort the object's values by a criterion produced by an iteratee.


  _.sortBy = function (obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function (value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function (left, right) {
      var a = left.criteria;
      var b = right.criteria;

      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }

      return left.index - right.index;
    }), 'value');
  }; // An internal function used for aggregate "group by" operations.


  var group = function group(behavior, partition) {
    return function (obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);

      _.each(obj, function (value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });

      return result;
    };
  }; // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.


  _.groupBy = group(function (result, value, key) {
    if (has(result, key)) result[key].push(value);else result[key] = [value];
  }); // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.

  _.indexBy = group(function (result, value, key) {
    result[key] = value;
  }); // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.

  _.countBy = group(function (result, value, key) {
    if (has(result, key)) result[key]++;else result[key] = 1;
  });
  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g; // Safely create a real, live array from anything iterable.

  _.toArray = function (obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);

    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }

    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  }; // Return the number of elements in an object.


  _.size = function (obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  }; // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.


  _.partition = group(function (result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true); // Array Functions
  // ---------------
  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.

  _.first = _.head = _.take = function (array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  }; // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.


  _.initial = function (array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  }; // Get the last element of an array. Passing **n** will return the last N
  // values in the array.


  _.last = function (array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  }; // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.


  _.rest = _.tail = _.drop = function (array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  }; // Trim out all falsy values from an array.


  _.compact = function (array) {
    return _.filter(array, Boolean);
  }; // Internal implementation of a recursive `flatten` function.


  var flatten = function flatten(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;

    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];

      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0,
              len = value.length;

          while (j < len) {
            output[idx++] = value[j++];
          }
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }

    return output;
  }; // Flatten out an array, either recursively (by default), or just one level.


  _.flatten = function (array, shallow) {
    return flatten(array, shallow, false);
  }; // Return a version of the array that does not contain the specified value(s).


  _.without = restArguments(function (array, otherArrays) {
    return _.difference(array, otherArrays);
  }); // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.

  _.uniq = _.unique = function (array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }

    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];

    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;

      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }

    return result;
  }; // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.


  _.union = restArguments(function (arrays) {
    return _.uniq(flatten(arrays, true, true));
  }); // Produce an array that contains every item shared between all the
  // passed-in arrays.

  _.intersection = function (array) {
    var result = [];
    var argsLength = arguments.length;

    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;

      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }

      if (j === argsLength) result.push(item);
    }

    return result;
  }; // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.


  _.difference = restArguments(function (array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function (value) {
      return !_.contains(rest, value);
    });
  }); // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.

  _.unzip = function (array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }

    return result;
  }; // Zip together multiple lists into a single array -- elements that share
  // an index go together.


  _.zip = restArguments(_.unzip); // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.

  _.object = function (list, values) {
    var result = {};

    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }

    return result;
  }; // Generator function to create the findIndex and findLastIndex functions.


  var createPredicateIndexFinder = function createPredicateIndexFinder(dir) {
    return function (array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;

      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }

      return -1;
    };
  }; // Returns the first index on an array-like that passes a predicate test.


  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1); // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.

  _.sortedIndex = function (array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0,
        high = getLength(array);

    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1;else high = mid;
    }

    return low;
  }; // Generator function to create the indexOf and lastIndexOf functions.


  var createIndexFinder = function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function (array, item, idx) {
      var i = 0,
          length = getLength(array);

      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }

      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }

      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }

      return -1;
    };
  }; // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.


  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex); // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).

  _.range = function (start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }

    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  }; // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.


  _.chunk = function (array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0,
        length = array.length;

    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }

    return result;
  }; // Function (ahem) Functions
  // ------------------
  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.


  var executeBound = function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  }; // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.


  _.bind = restArguments(function (func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function (callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  }); // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.

  _.partial = restArguments(function (func, boundArgs) {
    var placeholder = _.partial.placeholder;

    var bound = function bound() {
      var position = 0,
          length = boundArgs.length;
      var args = Array(length);

      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }

      while (position < arguments.length) {
        args.push(arguments[position++]);
      }

      return executeBound(func, bound, this, this, args);
    };

    return bound;
  });
  _.partial.placeholder = _; // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.

  _.bindAll = restArguments(function (obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');

    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  }); // Memoize an expensive function by storing its results.

  _.memoize = function (func, hasher) {
    var memoize = function memoize(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };

    memoize.cache = {};
    return memoize;
  }; // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.


  _.delay = restArguments(function (func, wait, args) {
    return setTimeout(function () {
      return func.apply(null, args);
    }, wait);
  }); // Defers a function, scheduling it to run after the current call stack has
  // cleared.

  _.defer = _.partial(_.delay, _, 1); // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.

  _.throttle = function (func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function later() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function throttled() {
      var now = _.now();

      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;

      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }

        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }

      return result;
    };

    throttled.cancel = function () {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  }; // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.


  _.debounce = function (func, wait, immediate) {
    var timeout, result;

    var later = function later(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function (args) {
      if (timeout) clearTimeout(timeout);

      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function () {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  }; // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.


  _.wrap = function (func, wrapper) {
    return _.partial(wrapper, func);
  }; // Returns a negated version of the passed-in predicate.


  _.negate = function (predicate) {
    return function () {
      return !predicate.apply(this, arguments);
    };
  }; // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.


  _.compose = function () {
    var args = arguments;
    var start = args.length - 1;
    return function () {
      var i = start;
      var result = args[start].apply(this, arguments);

      while (i--) {
        result = args[i].call(this, result);
      }

      return result;
    };
  }; // Returns a function that will only be executed on and after the Nth call.


  _.after = function (times, func) {
    return function () {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  }; // Returns a function that will only be executed up to (but not including) the Nth call.


  _.before = function (times, func) {
    var memo;
    return function () {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }

      if (times <= 1) func = null;
      return memo;
    };
  }; // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.


  _.once = _.partial(_.before, 2);
  _.restArguments = restArguments; // Object Functions
  // ----------------
  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.

  var hasEnumBug = !{
    toString: null
  }.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto; // Constructor is a special case.

    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];

      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }; // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.


  _.keys = function (obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];

    for (var key in obj) {
      if (has(obj, key)) keys.push(key);
    } // Ahem, IE < 9.


    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  }; // Retrieve all the property names of an object.


  _.allKeys = function (obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];

    for (var key in obj) {
      keys.push(key);
    } // Ahem, IE < 9.


    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  }; // Retrieve the values of an object's properties.


  _.values = function (obj) {
    var keys = _.keys(obj);

    var length = keys.length;
    var values = Array(length);

    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }

    return values;
  }; // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.


  _.mapObject = function (obj, iteratee, context) {
    iteratee = cb(iteratee, context);

    var keys = _.keys(obj),
        length = keys.length,
        results = {};

    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }

    return results;
  }; // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.


  _.pairs = function (obj) {
    var keys = _.keys(obj);

    var length = keys.length;
    var pairs = Array(length);

    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }

    return pairs;
  }; // Invert the keys and values of an object. The values must be serializable.


  _.invert = function (obj) {
    var result = {};

    var keys = _.keys(obj);

    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }

    return result;
  }; // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.


  _.functions = _.methods = function (obj) {
    var names = [];

    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }

    return names.sort();
  }; // An internal function for creating assigner functions.


  var createAssigner = function createAssigner(keysFunc, defaults) {
    return function (obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;

      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;

        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }

      return obj;
    };
  }; // Extend a given object with all the properties in passed-in object(s).


  _.extend = createAssigner(_.allKeys); // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)

  _.extendOwn = _.assign = createAssigner(_.keys); // Returns the first key on an object that passes a predicate test.

  _.findKey = function (obj, predicate, context) {
    predicate = cb(predicate, context);

    var keys = _.keys(obj),
        key;

    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  }; // Internal pick helper function to determine if `obj` has key `key`.


  var keyInObj = function keyInObj(value, key, obj) {
    return key in obj;
  }; // Return a copy of the object only containing the whitelisted properties.


  _.pick = restArguments(function (obj, keys) {
    var result = {},
        iteratee = keys[0];
    if (obj == null) return result;

    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }

    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }

    return result;
  }); // Return a copy of the object without the blacklisted properties.

  _.omit = restArguments(function (obj, keys) {
    var iteratee = keys[0],
        context;

    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);

      iteratee = function iteratee(value, key) {
        return !_.contains(keys, key);
      };
    }

    return _.pick(obj, iteratee, context);
  }); // Fill in a given object with default properties.

  _.defaults = createAssigner(_.allKeys, true); // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.

  _.create = function (prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  }; // Create a (shallow-cloned) duplicate of an object.


  _.clone = function (obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  }; // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.


  _.tap = function (obj, interceptor) {
    interceptor(obj);
    return obj;
  }; // Returns whether an object has a given set of `key:value` pairs.


  _.isMatch = function (object, attrs) {
    var keys = _.keys(attrs),
        length = keys.length;

    if (object == null) return !length;
    var obj = Object(object);

    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }

    return true;
  }; // Internal recursive comparison function for `isEqual`.


  var eq, deepEq;

  eq = function eq(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).

    if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.

    if (a !== a) return b !== b; // Exhaust primitive checks

    var type = _typeof(a);

    if (type !== 'function' && type !== 'object' && _typeof(b) != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  }; // Internal recursive comparison function for `isEqual`.


  deepEq = function deepEq(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped; // Compare `[[Class]]` names.

    var className = toString.call(a);
    if (className !== toString.call(b)) return false;

    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]': // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')

      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;

      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.

        return +a === 0 ? 1 / +a === 1 / b : +a === +b;

      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;

      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';

    if (!areArrays) {
      if (_typeof(a) != 'object' || _typeof(b) != 'object') return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.

      var aCtor = a.constructor,
          bCtor = b.constructor;

      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {
        return false;
      }
    } // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.


    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;

    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    } // Add the first object to the stack of traversed objects.


    aStack.push(a);
    bStack.push(b); // Recursively compare objects and arrays.

    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.

      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a),
          key;

      length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.

      if (_.keys(b).length !== length) return false;

      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    } // Remove the first object from the stack of traversed objects.


    aStack.pop();
    bStack.pop();
    return true;
  }; // Perform a deep comparison to check if two objects are equal.


  _.isEqual = function (a, b) {
    return eq(a, b);
  }; // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.


  _.isEmpty = function (obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  }; // Is a given value a DOM element?


  _.isElement = function (obj) {
    return !!(obj && obj.nodeType === 1);
  }; // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray


  _.isArray = nativeIsArray || function (obj) {
    return toString.call(obj) === '[object Array]';
  }; // Is a given variable an object?


  _.isObject = function (obj) {
    var type = _typeof(obj);

    return type === 'function' || type === 'object' && !!obj;
  }; // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.


  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function (name) {
    _['is' + name] = function (obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  }); // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.


  if (!_.isArguments(arguments)) {
    _.isArguments = function (obj) {
      return has(obj, 'callee');
    };
  } // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).


  var nodelist = root.document && root.document.childNodes;

  if ( true && (typeof Int8Array === "undefined" ? "undefined" : _typeof(Int8Array)) != 'object' && typeof nodelist != 'function') {
    _.isFunction = function (obj) {
      return typeof obj == 'function' || false;
    };
  } // Is a given object a finite number?


  _.isFinite = function (obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  }; // Is the given value `NaN`?


  _.isNaN = function (obj) {
    return _.isNumber(obj) && isNaN(obj);
  }; // Is a given value a boolean?


  _.isBoolean = function (obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  }; // Is a given value equal to null?


  _.isNull = function (obj) {
    return obj === null;
  }; // Is a given variable undefined?


  _.isUndefined = function (obj) {
    return obj === void 0;
  }; // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).


  _.has = function (obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }

    var length = path.length;

    for (var i = 0; i < length; i++) {
      var key = path[i];

      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }

      obj = obj[key];
    }

    return !!length;
  }; // Utility Functions
  // -----------------
  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.


  _.noConflict = function () {
    root._ = previousUnderscore;
    return this;
  }; // Keep the identity function around for default iteratees.


  _.identity = function (value) {
    return value;
  }; // Predicate-generating functions. Often useful outside of Underscore.


  _.constant = function (value) {
    return function () {
      return value;
    };
  };

  _.noop = function () {}; // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.


  _.property = function (path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }

    return function (obj) {
      return deepGet(obj, path);
    };
  }; // Generates a function for a given object that returns a given property.


  _.propertyOf = function (obj) {
    if (obj == null) {
      return function () {};
    }

    return function (path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  }; // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.


  _.matcher = _.matches = function (attrs) {
    attrs = _.extendOwn({}, attrs);
    return function (obj) {
      return _.isMatch(obj, attrs);
    };
  }; // Run a function **n** times.


  _.times = function (n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);

    for (var i = 0; i < n; i++) {
      accum[i] = iteratee(i);
    }

    return accum;
  }; // Return a random integer between min and max (inclusive).


  _.random = function (min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }

    return min + Math.floor(Math.random() * (max - min + 1));
  }; // A (possibly faster) way to get the current timestamp as an integer.


  _.now = Date.now || function () {
    return new Date().getTime();
  }; // List of HTML entities for escaping.


  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };

  var unescapeMap = _.invert(escapeMap); // Functions for escaping and unescaping strings to/from HTML interpolation.


  var createEscaper = function createEscaper(map) {
    var escaper = function escaper(match) {
      return map[match];
    }; // Regexes for identifying a key that needs to be escaped.


    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function (string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };

  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap); // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.

  _.result = function (obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;

    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }

    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];

      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }

      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }

    return obj;
  }; // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.


  var idCounter = 0;

  _.uniqueId = function (prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  }; // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.


  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  }; // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.

  var noMatch = /(.)^/; // Certain characters need to be escaped so that they can be put into a
  // string literal.

  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    "\u2028": 'u2028',
    "\u2029": 'u2029'
  };
  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function escapeChar(match) {
    return '\\' + escapes[match];
  }; // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.


  _.template = function (text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings); // Combine delimiters into one regular expression via alternation.

    var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g'); // Compile the template source, escaping string literals appropriately.

    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      } // Adobe VMs need the match returned to produce the correct offset.


      return match;
    });
    source += "';\n"; // If a variable is not specified, place data values in local scope.

    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
    source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + 'return __p;\n';
    var render;

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function template(data) {
      return render.call(this, data, _);
    }; // Provide the compiled source as a convenience for precompilation.


    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';
    return template;
  }; // Add a "chain" function. Start chaining a wrapped Underscore object.


  _.chain = function (obj) {
    var instance = _(obj);

    instance._chain = true;
    return instance;
  }; // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.
  // Helper function to continue chaining intermediate results.


  var chainResult = function chainResult(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  }; // Add your own custom functions to the Underscore object.


  _.mixin = function (obj) {
    _.each(_.functions(obj), function (name) {
      var func = _[name] = obj[name];

      _.prototype[name] = function () {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });

    return _;
  }; // Add all of the Underscore functions to the wrapper object.


  _.mixin(_); // Add all mutator Array functions to the wrapper.


  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
    var method = ArrayProto[name];

    _.prototype[name] = function () {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  }); // Add all accessor Array functions to the wrapper.


  _.each(['concat', 'join', 'slice'], function (name) {
    var method = ArrayProto[name];

    _.prototype[name] = function () {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  }); // Extracts the result from a wrapped and chained object.


  _.prototype.value = function () {
    return this._wrapped;
  }; // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.


  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function () {
    return String(this._wrapped);
  }; // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.


  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return _;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var Tone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Tone */ "./node_modules/Tone/build/Tone.js");
/* harmony import */ var Tone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(Tone__WEBPACK_IMPORTED_MODULE_0__);


var _ = __webpack_require__(/*! underscore */ "./node_modules/underscore/underscore.js");

var default_kit = __webpack_require__(/*! ../static/assets/kits/default_kit.json */ "./static/assets/kits/default_kit.json");

var hip_hop_kit = __webpack_require__(/*! ../static/assets/kits/hip_hop_kit.json */ "./static/assets/kits/hip_hop_kit.json");

Nexus.context = Tone__WEBPACK_IMPORTED_MODULE_0___default.a.context;
var keys = new Tone__WEBPACK_IMPORTED_MODULE_0___default.a.Players(to_url_map(default_kit.samples), {
  "onload": function onload() {// TODO: Activate UI!w
  },
  "volume": -10
}).toMaster();
var sequencer = new Nexus.Sequencer('#sequencer', {
  'size': [400, 100],
  'mode': 'toggle',
  'rows': 4,
  'columns': 16
});
var clear_pattern_btn = new Nexus.Button('#clear-pattern', {
  'size': [20, 20],
  'mode': 'aftertouch',
  'state': false
});
var random_pattern_btn = new Nexus.Button('#random-pattern', {
  'size': [20, 20],
  'mode': 'aftertouch',
  'state': false
});
var hip_hop_pattern_btn = new Nexus.TextButton("#hip-hop-pattern", {
  'size': [150, 50],
  'state': false,
  'text': 'HipHop!'
});
clear_pattern_btn.on('change', function (v) {
  sequencer.matrix.populate.all(0);
});
random_pattern_btn.on('change', function (v) {
  sequencer.matrix.populate.all([0.2, 0.5, 0.2, 0.8]);
});
hip_hop_pattern_btn.on('change', function (v) {
  // TODO: Load hip hop pattern!
  keys.dispose();
});
sequencer.on('step', function (v) {
  for (var i = 0; i < v.length; i++) {
    if (v[i] == 1) {
      // cell is alive!
      keys.get(i).start();
    }
  }
});
sequencer.start();
Tone__WEBPACK_IMPORTED_MODULE_0___default.a.Transport.start();

function to_url_map(array) {
  var idx = 0;
  var map = [];

  while (idx < array.length) {
    map[idx] = array[idx];
    idx++;
  }

  return map;
}

/***/ }),

/***/ "./static/assets/kits/default_kit.json":
/*!*********************************************!*\
  !*** ./static/assets/kits/default_kit.json ***!
  \*********************************************/
/*! exports provided: samples, sequence, default */
/***/ (function(module) {

module.exports = {"samples":["./static/assets/audio/kick.wav","./static/assets/audio/snare.wav","./static/assets/audio/closed_hat.wav","./static/assets/audio/open_hat.wav"],"sequence":[]};

/***/ }),

/***/ "./static/assets/kits/hip_hop_kit.json":
/*!*********************************************!*\
  !*** ./static/assets/kits/hip_hop_kit.json ***!
  \*********************************************/
/*! exports provided: samples, sequence, default */
/***/ (function(module) {

module.exports = {"samples":["./static/assets/audio/boom_bap_kick.wav","./static/assets/audio/boom_bap_snare.wav","./static/assets/audio/hihat.wav","./static/assets/audio/ride.wav"],"sequence":[]};

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL1RvbmUvYnVpbGQvVG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS91bmRlcnNjb3JlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwiVG9uZSIsIk1haW4iLCJmdW5jIiwiTW9kdWxlIiwiRXJyb3IiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNsYXNzTmFtZSIsImlzTGV0dGVyIiwibWF0Y2giLCJzYW1lQ29uc3RydWN0b3IiLCJjb25zdHJ1Y3RvciIsImlzRnVuY3Rpb24iLCJkaXNwb3NlIiwic2V0IiwicGFyYW1zIiwidmFsdWUiLCJyYW1wVGltZSIsImlzT2JqZWN0IiwiaXNTdHJpbmciLCJ0bXBPYmoiLCJwYXJhbUxvb3AiLCJhdHRyIiwicGFyZW50IiwiaW5kZXhPZiIsImF0dHJTcGxpdCIsInNwbGl0IiwiaSIsImxlbmd0aCIsInNwbGljZSIsImlubmVyUGFyYW0iLCJqb2luIiwicGFyYW0iLCJpc1VuZGVmIiwiU2lnbmFsIiwiUGFyYW0iLCJyYW1wVG8iLCJBdWRpb1BhcmFtIiwiVGltZUJhc2UiLCJnZXQiLCJfY29sbGVjdERlZmF1bHRzIiwicmV0Iiwic3ViUmV0IiwiaiIsInN1YkF0dHIiLCJpc0RlZmluZWQiLCJjb25zdHIiLCJkZWZhdWx0cyIsIk9iamVjdCIsImtleXMiLCJfc3VwZXIiLCJzdXBlckRlZnMiLCJwdXNoIiwidmFsdWVzIiwib3B0aW9ucyIsImRlZmF1bHRBcmciLCJnaXZlbiIsImZhbGxiYWNrIiwiZ2l2ZW5Qcm9wIiwiZmFsbGJhY2tQcm9wIiwiY29ubmVjdFNlcmllcyIsImN1cnJlbnRVbml0IiwiYXJndW1lbnRzIiwidG9Vbml0IiwiY29ubmVjdCIsInZhbCIsImlzTnVtYmVyIiwiYXJnIiwiY2FsbCIsImlzQm9vbGVhbiIsImlzQXJyYXkiLCJBcnJheSIsImlzTm90ZSIsInRlc3QiLCJub09wIiwiX3JlYWRPbmx5IiwicHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsIl93cml0YWJsZSIsIlN0YXRlIiwiU3RhcnRlZCIsIlN0b3BwZWQiLCJQYXVzZWQiLCJlcXVhbFBvd2VyU2NhbGUiLCJwZXJjZW50IiwicGlGYWN0b3IiLCJNYXRoIiwiUEkiLCJzaW4iLCJkYlRvR2FpbiIsImRiIiwicG93IiwiZ2FpblRvRGIiLCJnYWluIiwibG9nIiwiTE4xMCIsImludGVydmFsVG9GcmVxdWVuY3lSYXRpbyIsImludGVydmFsIiwibm93IiwiY29udGV4dCIsImV4dGVuZCIsImNoaWxkIiwiVGVtcENvbnN0cnVjdG9yIiwiYXVkaW9Db250ZXh0IiwiQ29udGV4dCIsImVtaXQiLCJzZXRDb250ZXh0IiwiY3R4Iiwic2FtcGxlUmF0ZSIsImhhc0F1ZGlvQ29udGV4dCIsIndpbmRvdyIsImhhc093blByb3BlcnR5IiwiaGFzUHJvbWlzZXMiLCJoYXNXb3JrZXJzIiwiZ2V0Q29udGV4dCIsInJlc29sdmUiLCJpbml0aWFsaXplZCIsInJlc0NhbGxiYWNrIiwib2ZmIiwib24iLCJ2ZXJzaW9uIiwiRW1pdHRlciIsIl9ldmVudHMiLCJldmVudCIsImNhbGxiYWNrIiwiZXZlbnRzIiwiZXZlbnROYW1lIiwib25jZSIsImJvdW5kQ2FsbGJhY2siLCJhcHBseSIsImJpbmQiLCJldiIsImV2ZW50TGlzdCIsImFyZ3MiLCJzbGljZSIsImxlbiIsIm1peGluIiwib2JqZWN0IiwiZnVuY3Rpb25zIiwiZW1pdHRlckZ1bmMiLCJUaW1lbGluZSIsIl90aW1lbGluZSIsIm1lbW9yeSIsIkluZmluaXR5IiwiYWRkIiwidGltZSIsInZhbHVlT2YiLCJpbmRleCIsIl9zZWFyY2giLCJkaWZmIiwicmVtb3ZlIiwiY29tcGFyYXRvciIsInBlZWsiLCJzaGlmdCIsImdldEFmdGVyIiwiZ2V0QmVmb3JlIiwiY2FuY2VsIiwiYWZ0ZXIiLCJjYW5jZWxCZWZvcmUiLCJwcmV2aW91c0V2ZW50IiwiYmVnaW5uaW5nIiwiZW5kIiwibWlkUG9pbnQiLCJmbG9vciIsIm5leHRFdmVudCIsInRlc3RFdmVudCIsIl9pdGVyYXRlIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJmb3JFYWNoIiwiZm9yRWFjaEJlZm9yZSIsImZvckVhY2hBZnRlciIsImZvckVhY2hCZXR3ZWVuIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsImZvckVhY2hGcm9tIiwiZm9yRWFjaEF0VGltZSIsInN1cHBvcnRlZCIsIk9mZmxpbmVBdWRpb0NvbnRleHQiLCJ3ZWJraXRPZmZsaW5lQXVkaW9Db250ZXh0Iiwic3RhcnRSZW5kZXJpbmciLCJQcm9taXNlIiwiX25hdGl2ZV9zdGFydFJlbmRlcmluZyIsImRvbmUiLCJvbmNvbXBsZXRlIiwiZSIsInJlbmRlcmVkQnVmZmVyIiwiQXVkaW9Db250ZXh0Iiwid2Via2l0QXVkaW9Db250ZXh0IiwiY2xvc2UiLCJzdXNwZW5kIiwicmVzdW1lIiwiY3JlYXRlR2FpbiIsImNyZWF0ZUdhaW5Ob2RlIiwiY3JlYXRlRGVsYXkiLCJjcmVhdGVEZWxheU5vZGUiLCJkZWNvZGVBdWRpb0RhdGFQcm9taXNlIiwib2ZmbGluZUNvbnRleHQiLCJhdWRpb0RhdGEiLCJVaW50MzJBcnJheSIsImJ1ZmZlciIsImRlY29kZUF1ZGlvRGF0YSIsIl9uYXRpdmVfZGVjb2RlQXVkaW9EYXRhIiwic3VjY2VzcyIsImVycm9yIiwiX2NvbnRleHQiLCJwcm9wIiwiX2RlZmluZVByb3BlcnR5IiwiX2xhdGVuY3lIaW50IiwibGF0ZW5jeUhpbnQiLCJfY29uc3RhbnRzIiwibG9va0FoZWFkIiwiX2NvbXB1dGVkVXBkYXRlSW50ZXJ2YWwiLCJfdGlja2VyIiwiVGlja2VyIiwiY2xvY2tTb3VyY2UiLCJ1cGRhdGVJbnRlcnZhbCIsIl90aW1lb3V0cyIsIl90aW1lb3V0SWRzIiwiX3RpbWVvdXRMb29wIiwiY3VycmVudFRpbWUiLCJyZWFkeSIsInN0YXRlIiwidGhlbiIsImdldENvbnN0YW50IiwiY3JlYXRlQnVmZmVyIiwiYXJyIiwiZ2V0Q2hhbm5lbERhdGEiLCJjb25zdGFudCIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsImNoYW5uZWxDb3VudCIsImNoYW5uZWxDb3VudE1vZGUiLCJsb29wIiwic3RhcnQiLCJzZXRUaW1lb3V0IiwiZm4iLCJ0aW1lb3V0IiwiaWQiLCJjbGVhclRpbWVvdXQiLCJ0eXBlIiwiaGludCIsImNvbiIsImRpc2Nvbm5lY3QiLCJfdHlwZSIsIl91cGRhdGVJbnRlcnZhbCIsIl9jYWxsYmFjayIsIl9jcmVhdGVDbG9jayIsIlR5cGUiLCJXb3JrZXIiLCJUaW1lb3V0IiwiT2ZmbGluZSIsIl9jcmVhdGVXb3JrZXIiLCJVUkwiLCJ3ZWJraXRVUkwiLCJibG9iIiwiQmxvYiIsInRvRml4ZWQiLCJibG9iVXJsIiwiY3JlYXRlT2JqZWN0VVJMIiwid29ya2VyIiwib25tZXNzYWdlIiwiX3dvcmtlciIsIl9jcmVhdGVUaW1lb3V0IiwiX3RpbWVvdXQiLCJtYXgiLCJwb3N0TWVzc2FnZSIsIl9kaXNwb3NlQ2xvY2siLCJ0ZXJtaW5hdGUiLCJuYXRpdmVDb25uZWN0IiwiQXVkaW9Ob2RlIiwibmF0aXZlRGlzY29ubmVjdCIsInRvbmVDb25uZWN0IiwiQiIsIm91dE51bSIsImluTnVtIiwiaW5wdXQiLCJ0b25lRGlzY29ubmVjdCIsIlRPTkVfU0lMRU5DRV9WRVJTSU9OX0xPR0dJTkciLCJjb25zb2xlIiwid2FybiIsImNyZWF0ZUluc091dHMiLCJpbnB1dHMiLCJvdXRwdXRzIiwib3V0cHV0IiwiYyIsIm0iLCJjaGFubmVsSW50ZXJwcmV0YXRpb24iLCJfb25Db25uZWN0IiwidW5pdCIsIm91dHB1dE51bSIsImlucHV0TnVtIiwiZGVzdGluYXRpb24iLCJjaGFpbiIsImZhbiIsIlNpZ25hbEJhc2UiLCJub2RlIiwib3V0cHV0TnVtYmVyIiwiaW5wdXROdW1iZXIiLCJfcGFyYW0iLCJjYW5jZWxTY2hlZHVsZWRWYWx1ZXMiLCJvdmVycmlkZGVuIiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImlzU2FmYXJpIiwiaW5jbHVkZXMiLCJXYXZlU2hhcGVyTm9kZSIsIl9pbnRlcm5hbE5vZGUiLCJfbmF0aXZlX2NyZWF0ZVdhdmVTaGFwZXIiLCJfY3VydmUiLCJjdXJ2ZSIsImFycmF5IiwiRmxvYXQzMkFycmF5IiwiY3JlYXRlV2F2ZVNoYXBlciIsIldhdmVTaGFwZXIiLCJtYXBwaW5nIiwiYnVmZmVyTGVuIiwiX3NoYXBlciIsImlzRmluaXRlIiwic2V0TWFwIiwibm9ybWFsaXplZCIsIm92ZXJzYW1wbGUiLCJvdmVyc2FtcGxpbmciLCJSYW5nZUVycm9yIiwidW5pdHMiLCJfdmFsIiwiX3VuaXRzIiwicGFyc2VGbG9hdCIsImNoYXJBdCIsIl9kZWZhdWx0VW5pdHMiLCJ0b1NlY29uZHMiLCJ0b1RpY2tzIiwidG9GcmVxdWVuY3kiLCJ0b01pZGkiLCJfZXhwcmVzc2lvbnMiLCJyZWdleHAiLCJtZXRob2QiLCJkb3QiLCJwYXJzZUludCIsInNjYWxhciIsIl9iZWF0c1RvVW5pdHMiLCJfZ2V0VGltZVNpZ25hdHVyZSIsIl90aWNrc1RvVW5pdHMiLCJfZnJlcXVlbmN5VG9Vbml0cyIsInEiLCJzIiwidG90YWwiLCJfc2Vjb25kc1RvVW5pdHMiLCJfZ2V0QnBtIiwiVHJhbnNwb3J0IiwiYnBtIiwidGltZVNpZ25hdHVyZSIsIl9nZXRQUFEiLCJQUFEiLCJfbm93IiwiZnJlcSIsImJlYXRzIiwic2Vjb25kcyIsInRpY2tzIiwiX25vQXJnIiwidHJpbSIsImV4cHIiLCJtYXRjaGluZyIsInRvU2FtcGxlcyIsInRvTWlsbGlzZWNvbmRzIiwiRnJlcXVlbmN5IiwiYXNzaWduIiwibXRvZiIsInBpdGNoIiwib2N0YXZlIiwibm90ZVRvU2NhbGVJbmRleCIsIm5vdGVOdW1iZXIiLCJ0cmFuc3Bvc2UiLCJoYXJtb25pemUiLCJpbnRlcnZhbHMiLCJtYXAiLCJmdG9tIiwidG9Ob3RlIiwibG9nMiIsIkE0Iiwicm91bmQiLCJub3RlTmFtZSIsInNjYWxlSW5kZXhUb05vdGUiLCJxdWFydGVyVGltZSIsInF1YXJ0ZXJzIiwibWlkaSIsImZyZXF1ZW5jeSIsIlRpbWUiLCJjYXB0dXJlIiwicXVhbnRUbyIsIm5leHRTdWJkaXZpc2lvbiIsInF1YW50aXplIiwic3ViZGl2Iiwic3ViZGl2aXNpb24iLCJtdWx0aXBsZSIsImlkZWFsIiwidG9Ob3RhdGlvbiIsInRlc3ROb3RhdGlvbnMiLCJwb3dlciIsImNsb3Nlc3QiLCJjbG9zZXN0U2Vjb25kcyIsIm5vdGF0aW9uIiwibm90YXRpb25TZWNvbmRzIiwiYWJzIiwidG9CYXJzQmVhdHNTaXh0ZWVudGhzIiwibWVhc3VyZXMiLCJzaXh0ZWVudGhzIiwicHJvZ3Jlc3MiLCJUcmFuc3BvcnRUaW1lIiwiRGVmYXVsdCIsIlRpY2tzIiwiTm9ybWFsUmFuZ2UiLCJBdWRpb1JhbmdlIiwiRGVjaWJlbHMiLCJJbnRlcnZhbCIsIkJQTSIsIlBvc2l0aXZlIiwiR2FpbiIsIkNlbnRzIiwiRGVncmVlcyIsIk1JREkiLCJCYXJzQmVhdHNTaXh0ZWVudGhzIiwiU2FtcGxlcyIsIkhlcnR6IiwiTm90ZSIsIk1pbGxpc2Vjb25kcyIsIlNlY29uZHMiLCJOb3RhdGlvbiIsImNvbnZlcnQiLCJ1bmRlZmluZWQiLCJfdG9Vbml0cyIsImdldFZhbHVlQXRUaW1lIiwiX2luaXRpYWxWYWx1ZSIsIl9mcm9tVW5pdHMiLCJzZXRWYWx1ZUF0VGltZSIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJtaW4iLCJfbWluT3V0cHV0IiwiQXV0b21hdGlvblR5cGUiLCJMaW5lYXIiLCJFeHBvbmVudGlhbCIsIlRhcmdldCIsIlNldFZhbHVlIiwiYmVmb3JlIiwiaW5pdGlhbFZhbHVlIiwiZGVmYXVsdFZhbHVlIiwicHJldmlvdXMiLCJwcmV2aW91c1ZhbCIsIl9leHBvbmVudGlhbEFwcHJvYWNoIiwiX2xpbmVhckludGVycG9sYXRlIiwiX2V4cG9uZW50aWFsSW50ZXJwb2xhdGUiLCJzZXRSYW1wUG9pbnQiLCJjdXJyZW50VmFsIiwiY2FuY2VsQW5kSG9sZEF0VGltZSIsImxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lIiwiZXhwb25lbnRpYWxSYW1wVG9WYWx1ZUF0VGltZSIsImV4cG9uZW50aWFsUmFtcFRvIiwibGluZWFyUmFtcFRvIiwidGFyZ2V0UmFtcFRvIiwiZXhwb25lbnRpYWxBcHByb2FjaFZhbHVlQXRUaW1lIiwidGltZUNvbnN0YW50Iiwic2V0VGFyZ2V0QXRUaW1lIiwic2V0VmFsdWVDdXJ2ZUF0VGltZSIsImR1cmF0aW9uIiwic2NhbGluZyIsInNlZ1RpbWUiLCJ2YWx1ZUF0VGltZSIsInQwIiwidjAiLCJ2MSIsInQiLCJleHAiLCJ0MSIsIk9mZmxpbmVDb250ZXh0IiwiY2hhbm5lbHMiLCJfZHVyYXRpb24iLCJfY3VycmVudFRpbWUiLCJyZW5kZXIiLCJibG9ja1RpbWUiLCJpc01vYmlsZVNhZmFyaSIsImJ1ZmZlclNvdXJjZSIsIl9uYXRpdmVfc3RhcnQiLCJfZ2Fpbk5vZGUiLCJjcmVhdGVDb25zdGFudFNvdXJjZSIsIkNvbnN0YW50U291cmNlTm9kZSIsIl9idWZmZXJTb3VyY2UiLCJnYWluTm9kZSIsIl9vdXRwdXQiLCJvZmZzZXQiLCJzdG9wIiwiX3Byb3hpZXMiLCJfc291cmNlU3RhcnRlZCIsIl9jb25zdGFudFNvdXJjZSIsIl9pc1BhcmFtIiwiX2FwcGx5QXV0b21hdGlvbnMiLCJfY29ubmVjdFByb3hpZXMiLCJwcm94eSIsImZyb20iLCJwcmV2aW91c01ldGhvZCIsInNpZ25hbCIsIlBvdyIsIl9leHAiLCJfZXhwU2NhbGVyIiwiX2V4cEZ1bmMiLCJFbnZlbG9wZSIsImF0dGFjayIsImRlY2F5Iiwic3VzdGFpbiIsInJlbGVhc2UiLCJfYXR0YWNrQ3VydmUiLCJfcmVsZWFzZUN1cnZlIiwiX3NpZyIsImF0dGFja0N1cnZlIiwicmVsZWFzZUN1cnZlIiwiSW4iLCJjdXJ2ZURlZiIsIk91dCIsInRyaWdnZXJBdHRhY2siLCJ2ZWxvY2l0eSIsIm9yaWdpbmFsQXR0YWNrIiwiY3VycmVudFZhbHVlIiwiYXR0YWNrUmF0ZSIsInJlbWFpbmluZ0Rpc3RhbmNlIiwicGVyY2VudENvbXBsZXRlIiwic2xpY2VJbmRleCIsInRyaWdnZXJSZWxlYXNlIiwidHJpZ2dlckF0dGFja1JlbGVhc2UiLCJfY3JlYXRlQ3VydmVzIiwiY3VydmVMZW4iLCJrIiwiY29zaW5lQ3VydmUiLCJyaXBwbGVDdXJ2ZSIsInJpcHBsZUN1cnZlRnJlcSIsInNpbmVXYXZlIiwic3RhaXJzQ3VydmUiLCJzdGVwcyIsImNlaWwiLCJzaW5lQ3VydmUiLCJjb3MiLCJib3VuY2VDdXJ2ZSIsImludmVydEN1cnZlIiwib3V0IiwicmV2ZXJzZUN1cnZlIiwicmV2ZXJzZSIsIkFtcGxpdHVkZUVudmVsb3BlIiwiQW5hbHlzZXJOb2RlIiwiZ2V0RmxvYXRUaW1lRG9tYWluRGF0YSIsInVpbnQ4IiwiVWludDhBcnJheSIsImdldEJ5dGVUaW1lRG9tYWluRGF0YSIsIkFuYWx5c2VyIiwiX2FuYWx5c2VyIiwiY3JlYXRlQW5hbHlzZXIiLCJfYnVmZmVyIiwic2l6ZSIsIldhdmVmb3JtIiwiRkZUIiwiZ2V0VmFsdWUiLCJnZXRGbG9hdEZyZXF1ZW5jeURhdGEiLCJmcmVxdWVuY3lCaW5Db3VudCIsImZmdFNpemUiLCJUeXBlRXJyb3IiLCJzbW9vdGhpbmdUaW1lQ29uc3RhbnQiLCJDb21wcmVzc29yIiwiX2NvbXByZXNzb3IiLCJjcmVhdGVEeW5hbWljc0NvbXByZXNzb3IiLCJ0aHJlc2hvbGQiLCJrbmVlIiwicmF0aW8iLCJBZGQiLCJfc3VtIiwiTXVsdGlwbHkiLCJfbXVsdCIsIk5lZ2F0ZSIsIl9tdWx0aXBseSIsIlN1YnRyYWN0IiwiX25lZyIsIkVxdWFsUG93ZXJHYWluIiwiX2VxUG93ZXIiLCJDcm9zc0ZhZGUiLCJpbml0aWFsRmFkZSIsImEiLCJiIiwiZmFkZSIsIl9lcXVhbFBvd2VyQSIsIl9lcXVhbFBvd2VyQiIsIl9vbmUiLCJfaW52ZXJ0IiwiRmlsdGVyIiwiX2ZpbHRlcnMiLCJkZXR1bmUiLCJRIiwiX3JvbGxvZmYiLCJyb2xsb2ZmIiwidHlwZXMiLCJwb3NzaWJpbGl0aWVzIiwiY2FzY2FkaW5nQ291bnQiLCJjb3VudCIsImZpbHRlciIsImNyZWF0ZUJpcXVhZEZpbHRlciIsImNvbm5lY3Rpb25DaGFpbiIsImNvbmNhdCIsIk11bHRpYmFuZFNwbGl0IiwibG93IiwiX2xvd01pZEZpbHRlciIsIm1pZCIsImhpZ2giLCJsb3dGcmVxdWVuY3kiLCJoaWdoRnJlcXVlbmN5IiwiRVEzIiwiX211bHRpYmFuZFNwbGl0IiwiX2xvd0dhaW4iLCJfbWlkR2FpbiIsIl9oaWdoR2FpbiIsIlNjYWxlIiwib3V0cHV0TWluIiwib3V0cHV0TWF4IiwiX291dHB1dE1pbiIsIl9vdXRwdXRNYXgiLCJfc2NhbGUiLCJfYWRkIiwiX3NldFJhbmdlIiwiU2NhbGVFeHAiLCJleHBvbmVudCIsIkRlbGF5IiwiX21heERlbGF5IiwibWF4RGVsYXkiLCJkZWxheVRpbWUiLCJfZGVsYXlOb2RlIiwiRmVlZGJhY2tDb21iRmlsdGVyIiwiX2RlbGF5IiwiX2ZlZWRiYWNrIiwicmVzb25hbmNlIiwiQWJzIiwiX2FicyIsIkZvbGxvd2VyIiwiX2ZpbHRlciIsIl9mcmVxdWVuY3lWYWx1ZXMiLCJfc3ViIiwiX2F0dGFjayIsIl9yZWxlYXNlIiwiX3NldEF0dGFja1JlbGVhc2UiLCJtaW5UaW1lIiwiU2NhbGVkRW52ZWxvcGUiLCJGcmVxdWVuY3lFbnZlbG9wZSIsIl9vY3RhdmVzIiwib2N0YXZlcyIsImJhc2VGcmVxdWVuY3kiLCJHcmVhdGVyVGhhblplcm8iLCJfdGhyZXNoIiwiR3JlYXRlclRoYW4iLCJfZ3R6IiwiR2F0ZSIsIl9mb2xsb3dlciIsIl9ndCIsInRocmVzaCIsImF0dGFja1RpbWUiLCJyZWxlYXNlVGltZSIsIlRpY2tTaWduYWwiLCJfd3JhcFNjaGVkdWxlTWV0aG9kcyIsInRpY2tzVW50aWxUaW1lIiwiX2dldFRpY2tzVW50aWxFdmVudCIsInByZXZFdmVudCIsInNlZ21lbnRzIiwicmFtcFZhbCIsInNlZ21lbnREdXIiLCJ2YWwwIiwidmFsMSIsInNhbXBsZVRpbWUiLCJnZXRUaWNrc0F0VGltZSIsImdldER1cmF0aW9uT2ZUaWNrcyIsImN1cnJlbnRUaWNrIiwiZ2V0VGltZU9mVGljayIsInRpY2siLCJkZWx0YSIsInNxcnQiLCJzb2wxIiwic29sMiIsInRpY2tzVG9UaW1lIiwid2hlbiIsInRpbWVUb1RpY2tzIiwic3RhcnRUaWNrcyIsImVuZFRpY2tzIiwiVGltZWxpbmVTdGF0ZSIsImluaXRpYWwiLCJfaW5pdGlhbCIsInNldFN0YXRlQXRUaW1lIiwiZ2V0TGFzdFN0YXRlIiwiZ2V0TmV4dFN0YXRlIiwiVGlja1NvdXJjZSIsIl9zdGF0ZSIsIl90aWNrT2Zmc2V0Iiwic2V0VGlja3NBdFRpbWUiLCJwYXVzZSIsInN0b3BFdmVudCIsInRtcEV2ZW50IiwibGFzdFN0YXRlIiwiZWxhcHNlZFRpY2tzIiwicGVyaW9kU3RhcnRUaW1lIiwib2Zmc2V0RXZlbnQiLCJnZXRTZWNvbmRzQXRUaW1lIiwiZWxhcHNlZFNlY29uZHMiLCJnZXRTdGF0ZUF0VGltZSIsImFic29sdXRlVGlja3MiLCJmb3JFYWNoVGlja0JldHdlZW4iLCJsYXN0U3RhdGVFdmVudCIsInRpY2tzQXRTdGFydCIsIm5leHRUaWNrVGltZSIsIkNsb2NrIiwiX25leHRUaWNrIiwiX3RpY2tTb3VyY2UiLCJfbGFzdFVwZGF0ZSIsIl9ib3VuZExvb3AiLCJfbG9vcCIsIkludGVydmFsVGltZWxpbmUiLCJfcm9vdCIsIl9sZW5ndGgiLCJJbnRlcnZhbE5vZGUiLCJpbnNlcnQiLCJ1cGRhdGVIZWlnaHQiLCJ1cGRhdGVNYXgiLCJfcmViYWxhbmNlIiwicmVzdWx0cyIsInNlYXJjaCIsIl9yZW1vdmVOb2RlIiwiX3NldFJvb3QiLCJfcmVwbGFjZU5vZGVJblBhcmVudCIsInJlcGxhY2VtZW50IiwiaXNMZWZ0Q2hpbGQiLCJsZWZ0IiwicmlnaHQiLCJiYWxhbmNlIiwiZ2V0QmFsYW5jZSIsInRlbXAiLCJfcm90YXRlTGVmdCIsInBpdm90Tm9kZSIsIl9yb3RhdGVSaWdodCIsImFsbE5vZGVzIiwidHJhdmVyc2UiLCJzZWFyY2hBZnRlciIsIl9sZWZ0IiwiX3JpZ2h0IiwiaGVpZ2h0IiwicG9pbnQiLCJUcmFuc3BvcnRFdmVudCIsIl9ldmVudElkIiwiX29uY2UiLCJpbnZva2UiLCJjbGVhciIsIlRyYW5zcG9ydFJlcGVhdEV2ZW50IiwiX2ludGVydmFsIiwiX2N1cnJlbnRJZCIsIl9uZXh0SWQiLCJfYm91bmRSZXN0YXJ0IiwiX3Jlc3RhcnQiLCJfY3JlYXRlRXZlbnRzIiwic2NoZWR1bGVPbmNlIiwiX2JvdW5kQ3JlYXRlRXZlbnRzIiwiX2xvb3BTdGFydCIsIl9sb29wRW5kIiwiX3BwcSIsIlRyYW5zcG9ydENvbnN0cnVjdG9yIiwiX2Nsb2NrIiwiX3Byb2Nlc3NUaWNrIiwiX2JpbmRDbG9ja0V2ZW50cyIsIl90aW1lU2lnbmF0dXJlIiwiX3NjaGVkdWxlZEV2ZW50cyIsIl9yZXBlYXRlZEV2ZW50cyIsIl9zeW5jZWRTaWduYWxzIiwiX3N3aW5nVGlja3MiLCJfc3dpbmdBbW91bnQiLCJ0aWNrVGltZSIsImFtb3VudCIsInNjaGVkdWxlIiwiX2FkZEV2ZW50Iiwic2NoZWR1bGVSZXBlYXQiLCJldmVudElkIiwiaXRlbSIsInRpbWVsaW5lIiwidG9nZ2xlIiwidGltZVNpZyIsInN0YXJ0UG9zaXRpb24iLCJlbmRQb3NpdGlvbiIsInNldExvb3BQb2ludHMiLCJsb29wU3RhcnQiLCJsb29wRW5kIiwicHBxIiwidHJhbnNwb3J0UG9zIiwicmVtYWluaW5nVGlja3MiLCJzeW5jU2lnbmFsIiwicmF0aW9TaWduYWwiLCJ1bnN5bmNTaWduYWwiLCJzeW5jZWRTaWduYWwiLCJWb2x1bWUiLCJ2b2x1bWUiLCJfdW5tdXRlZFZvbHVtZSIsIm11dGUiLCJNYXN0ZXIiLCJfdm9sdW1lIiwidG9NYXN0ZXIiLCJNYXN0ZXJDb25zdHJ1Y3RvciIsIlNvdXJjZSIsIl9zeW5jZWQiLCJfc2NoZWR1bGVkIiwiX3N0YXJ0IiwicmVzdGFydCIsIl9zdG9wIiwic2NoZWQiLCJfc3luY2VkU3RhcnQiLCJzeW5jIiwic3RhdGVFdmVudCIsInN0YXJ0T2Zmc2V0IiwiX3N5bmNlZFN0b3AiLCJ1bnN5bmMiLCJBdWRpb0J1ZmZlciIsImNvcHlUb0NoYW5uZWwiLCJzcmMiLCJjaGFuTnVtIiwiY2hhbm5lbCIsImNvcHlGcm9tQ2hhbm5lbCIsImRlc3QiLCJCdWZmZXIiLCJfcmV2ZXJzZWQiLCJfeGhyIiwiX29ubG9hZCIsInVybCIsIm9ubG9hZCIsImxvYWRlZCIsImxvYWQiLCJjYXRjaCIsIm9uZXJyb3IiLCJwcm9taXNlIiwiYnVmZiIsImVyciIsIl9yZW1vdmVGcm9tRG93bmxvYWRRdWV1ZSIsImFib3J0IiwibnVtYmVyT2ZDaGFubmVscyIsImZyb21BcnJheSIsImlzTXVsdGlkaW1lbnNpb25hbCIsInRvTW9ubyIsInRvQXJyYXkiLCJvdXRwdXRBcnJheSIsIm51bUNoYW5uZWxzIiwiY2hhbm5lbEFycmF5Iiwic2FtcGxlIiwic3RhcnRTYW1wbGVzIiwiZW5kU2FtcGxlcyIsInJldEJ1ZmZlciIsIl9yZXZlcnNlIiwicmV2IiwiX2Rvd25sb2FkUXVldWUiLCJiYXNlVXJsIiwiZnJvbVVybCIsInJlcXVlc3QiLCJtYXRjaGVzIiwiZXh0ZW5zaW9ucyIsImV4dGVuc2lvbiIsInN1cHBvcnRzVHlwZSIsInJlcGxhY2UiLCJvbkVycm9yIiwib25Qcm9ncmVzcyIsInRvdGFsUHJvZ3Jlc3MiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJyZXNwb25zZVR5cGUiLCJhZGRFdmVudExpc3RlbmVyIiwic3RhdHVzIiwicmVzcG9uc2UiLCJsZW5ndGhDb21wdXRhYmxlIiwic2VuZCIsImNhbmNlbERvd25sb2FkcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNhblBsYXlUeXBlIiwicmVtb3ZlRXZlbnRzIiwiZmFpbCIsIk9zY2lsbGF0b3JOb2RlIiwib25lbmRlZCIsIl9zdGFydFRpbWUiLCJfc3RvcFRpbWUiLCJfb3NjaWxsYXRvciIsImNyZWF0ZU9zY2lsbGF0b3IiLCJfZ2FpbiIsInNldFBlcmlvZGljV2F2ZSIsInBlcmlvZGljV2F2ZSIsImNhbmNlbFN0b3AiLCJPc2NpbGxhdG9yIiwiX3dhdmUiLCJfcGFydGlhbHMiLCJwYXJ0aWFscyIsIl9waGFzZSIsInBoYXNlIiwiU2luZSIsIlRyaWFuZ2xlIiwiU2F3dG9vdGgiLCJTcXVhcmUiLCJDdXN0b20iLCJzeW5jRnJlcXVlbmN5IiwidW5zeW5jRnJlcXVlbmN5IiwiaXNCYXNpY1R5cGUiLCJjb2VmcyIsIl9nZXRSZWFsSW1hZ2luYXJ5IiwiY3JlYXRlUGVyaW9kaWNXYXZlIiwicGVyaW9kaWNXYXZlU2l6ZSIsInJlYWwiLCJpbWFnIiwicGFydGlhbENvdW50IiwicGFydGlhbCIsImV4ZWMiLCJuIiwiX2ludmVyc2VGRlQiLCJzdW0iLCJfZ2V0SW5pdGlhbFZhbHVlIiwidHdvUGkiLCJBdWRpb1RvR2FpbiIsIl9ub3JtIiwieCIsIlplcm8iLCJMRk8iLCJhbXBsaXR1ZGUiLCJfc3RvcHBlZFNpZ25hbCIsIl96ZXJvcyIsIl9zdG9wcGVkVmFsdWUiLCJfYTJnIiwiX3NjYWxlciIsImN1cnJlbnRNaW4iLCJjdXJyZW50TWF4IiwiTGltaXRlciIsIkxvd3Bhc3NDb21iRmlsdGVyIiwiX2xvd3Bhc3MiLCJkYW1wZW5pbmciLCJNZXJnZSIsIl9tZXJnZXIiLCJjcmVhdGVDaGFubmVsTWVyZ2VyIiwiTWV0ZXIiLCJzbW9vdGhpbmciLCJnZXRMZXZlbCIsIlNwbGl0IiwiX3NwbGl0dGVyIiwiY3JlYXRlQ2hhbm5lbFNwbGl0dGVyIiwiTWlkU2lkZVNwbGl0IiwiX3NwbGl0IiwiX21pZEFkZCIsIlNRUlQxXzIiLCJfc2lkZVN1YnRyYWN0Iiwic2lkZSIsIk1pZFNpZGVNZXJnZSIsIl90aW1lc1R3b0xlZnQiLCJfdGltZXNUd29SaWdodCIsIl9tZXJnZSIsIk1pZFNpZGVDb21wcmVzc29yIiwiX21pZFNpZGVTcGxpdCIsIl9taWRTaWRlTWVyZ2UiLCJNb25vIiwiTXVsdGliYW5kQ29tcHJlc3NvciIsIlN0ZXJlb1Bhbm5lck5vZGUiLCJwYW4iLCJyaWdodFdhdmVTaGFwZXIiLCJsZWZ0V2F2ZVNoYXBlciIsImxlZnRHYWluIiwicmlnaHRHYWluIiwiemVybyIsIm1lcmdlIiwiY3JlYXRlU3RlcmVvUGFubmVyIiwiUGFubmVyIiwiaW5pdGlhbFBhbiIsIl9wYW5uZXIiLCJQYW5uZXIzRCIsImNyZWF0ZVBhbm5lciIsInBhbm5pbmdNb2RlbCIsIm1heERpc3RhbmNlIiwiZGlzdGFuY2VNb2RlbCIsImNvbmVPdXRlckdhaW4iLCJjb25lT3V0ZXJBbmdsZSIsImNvbmVJbm5lckFuZ2xlIiwicmVmRGlzdGFuY2UiLCJyb2xsb2ZmRmFjdG9yIiwiX29yaWVudGF0aW9uIiwib3JpZW50YXRpb25YIiwib3JpZW50YXRpb25ZIiwib3JpZW50YXRpb25aIiwiX3Bvc2l0aW9uIiwicG9zaXRpb25YIiwicG9zaXRpb25ZIiwicG9zaXRpb25aIiwiX3JhbXBUaW1lQ29uc3RhbnQiLCJzZXRQb3NpdGlvbiIsInkiLCJ6Iiwic2V0T3JpZW50YXRpb24iLCJwb3MiLCJfYWxpYXNQcm9wZXJ0eSIsIlBhblZvbCIsIlNvbG8iLCJfc29sb0JpbmQiLCJfc29sb2VkIiwic29sbyIsIl9pc1NvbG9lZCIsIl9hZGRTb2xvIiwiX3JlbW92ZVNvbG8iLCJfY3VycmVudFNvbG8iLCJfbm9Tb2xvcyIsIkN0cmxJbnRlcnBvbGF0ZSIsImxvd2VyUG9zaXRpb24iLCJsb3dlciIsInVwcGVyIiwiX2ludGVycG9sYXRlIiwicmV0QXJyYXkiLCJyZXRPYmoiLCJfdG9OdW1iZXIiLCJDdHJsTWFya292IiwibmV4dCIsImRpc3RyaWJ1dGlvbiIsIl9nZXRQcm9iRGlzdHJpYnV0aW9uIiwicmFuZCIsInJhbmRvbSIsImRpc3QiLCJjaG9zZW4iLCJuZWVkc05vcm1hbGl6aW5nIiwib3B0aW9uIiwicHJvYmFiaWxpdHkiLCJDdHJsUGF0dGVybiIsIl9zaHVmZmxlZCIsIl9kaXJlY3Rpb24iLCJVcCIsIkRvd24iLCJVcERvd24iLCJEb3duVXAiLCJBbHRlcm5hdGVVcCIsIkFsdGVybmF0ZURvd24iLCJSYW5kb20iLCJSYW5kb21XYWxrIiwiUmFuZG9tT25jZSIsIl9zaHVmZmxlVmFsdWVzIiwiY29weSIsInJhbmRWYWwiLCJDdHJsUmFuZG9tIiwiaW50ZWdlciIsIkJ1ZmZlcnMiLCJ1cmxzIiwiX2J1ZmZlcnMiLCJfbG9hZGluZ0NvdW50Iiwia2V5IiwiX2J1ZmZlckxvYWRlZCIsImhhcyIsIm5hbWUiLCJpc0xvYWRlZCIsImJ1ZmZOYW1lIiwiQnVzZXMiLCJjaGFubmVsTmFtZSIsInNlbmRLbm9iIiwicmVjZWl2ZSIsIkRyYXciLCJleHBpcmF0aW9uIiwiYW50aWNpcGF0aW9uIiwiX2JvdW5kRHJhd0xvb3AiLCJfZHJhd0xvb3AiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJMaXN0ZW5lciIsIkxpc3RlbmVyQ29uc3RydWN0b3IiLCJsaXN0ZW5lciIsInVwWCIsInVwWSIsInVwWiIsImZvcndhcmRYIiwiZm9yd2FyZFkiLCJmb3J3YXJkWiIsImF0dGVtcHRSZW5kZXIiLCJ0cmllcyIsIm9yaWdpbmFsQ29udGV4dCIsInJlbmRlclJldCIsIkVmZmVjdCIsIl9kcnlXZXQiLCJ3ZXQiLCJlZmZlY3RTZW5kIiwiZWZmZWN0UmV0dXJuIiwiY29ubmVjdEVmZmVjdCIsImVmZmVjdCIsIkF1dG9GaWx0ZXIiLCJfbGZvIiwiZGVwdGgiLCJkZWxheSIsIm9jdCIsIkF1dG9QYW5uZXIiLCJBdXRvV2FoIiwiZm9sbG93ZXIiLCJfc3dlZXBSYW5nZSIsIl9iYXNlRnJlcXVlbmN5IiwiX2lucHV0Qm9vc3QiLCJfYmFuZHBhc3MiLCJfcGVha2luZyIsIl9zZXRTd2VlcFJhbmdlIiwic2Vuc2l0aXZpdHkiLCJiYXNlRnJlcSIsInNlbnNpdGl2eSIsIk1vZHVsbyIsIm1vZHVsdXMiLCJfc3VidHJhY3QiLCJfbW9kU2lnbmFsIiwiX3NldFdhdmVTaGFwZXIiLCJtb2QiLCJCaXRDcnVzaGVyIiwiaW52U3RlcFNpemUiLCJiaXRzIiwiX21vZHVsbyIsIl9iaXRzIiwiQ2hlYnlzaGV2IiwiX29yZGVyIiwib3JkZXIiLCJfZ2V0Q29lZmZpY2llbnQiLCJkZWdyZWUiLCJtZW1vIiwiU3RlcmVvRWZmZWN0IiwiZWZmZWN0U2VuZEwiLCJlZmZlY3RTZW5kUiIsImVmZmVjdFJldHVybkwiLCJlZmZlY3RSZXR1cm5SIiwiQ2hvcnVzIiwiX2RlcHRoIiwiX2RlbGF5VGltZSIsIl9sZm9MIiwiX2xmb1IiLCJfZGVsYXlOb2RlTCIsIl9kZWxheU5vZGVSIiwic3ByZWFkIiwiZGV2aWF0aW9uIiwiQ29udm9sdmVyIiwiX2NvbnZvbHZlciIsImNyZWF0ZUNvbnZvbHZlciIsIkRpc3RvcnRpb24iLCJfZGlzdG9ydGlvbiIsImRpc3RvcnRpb24iLCJkZWciLCJGZWVkYmFja0VmZmVjdCIsIl9mZWVkYmFja0dhaW4iLCJmZWVkYmFjayIsIkZlZWRiYWNrRGVsYXkiLCJjb21iRmlsdGVyVHVuaW5ncyIsImFsbHBhc3NGaWx0ZXJGcmVxdWVuY2llcyIsIkZyZWV2ZXJiIiwicm9vbVNpemUiLCJfY29tYkZpbHRlcnMiLCJfYWxscGFzc0ZpbHRlcnNMIiwiX2FsbHBhc3NGaWx0ZXJzUiIsImwiLCJhbGxwYXNzTCIsInIiLCJhbGxwYXNzUiIsImxmcGYiLCJhbCIsImFyIiwiY2YiLCJjb21iRmlsdGVyRGVsYXlUaW1lcyIsImNvbWJGaWx0ZXJSZXNvbmFuY2VzIiwiYWxscGFzc0ZpbHRlckZyZXFzIiwiSkNSZXZlcmIiLCJfc2NhbGVSb29tU2l6ZSIsIl9hbGxwYXNzRmlsdGVycyIsIl9mZWVkYmFja0NvbWJGaWx0ZXJzIiwiYWYiLCJhbGxwYXNzIiwiZmJjZiIsImFwZiIsIk1pZFNpZGVFZmZlY3QiLCJtaWRTZW5kIiwic2lkZVNlbmQiLCJtaWRSZXR1cm4iLCJzaWRlUmV0dXJuIiwiUGhhc2VyIiwiX2ZpbHRlcnNMIiwiX21ha2VGaWx0ZXJzIiwic3RhZ2VzIiwiX2ZpbHRlcnNSIiwiY29ubmVjdFRvRnJlcSIsImZpbHRlcnMiLCJTdGVyZW9YRmVlZGJhY2tFZmZlY3QiLCJfZmVlZGJhY2tMUiIsIl9mZWVkYmFja1JMIiwiUGluZ1BvbmdEZWxheSIsIl9sZWZ0RGVsYXkiLCJtYXhEZWxheVRpbWUiLCJfcmlnaHREZWxheSIsIl9yaWdodFByZURlbGF5IiwiUGl0Y2hTaGlmdCIsIl9mcmVxdWVuY3kiLCJfZGVsYXlBIiwiX2xmb0EiLCJfZGVsYXlCIiwiX2xmb0IiLCJfY3Jvc3NGYWRlIiwiX2Nyb3NzRmFkZUxGTyIsIl9mZWVkYmFja0RlbGF5IiwiX3BpdGNoIiwiX3dpbmRvd1NpemUiLCJ3aW5kb3dTaXplIiwiZmFjdG9yIiwiQnVmZmVyU291cmNlIiwiX3NvdXJjZVN0b3BwZWQiLCJfc291cmNlIiwiX29uZW5kZWQiLCJwbGF5YmFja1JhdGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiX29uZW5kZWRUaW1lb3V0IiwiZmFkZUluVGltZSIsImNvbXB1dGVkRHVyIiwibG9vcER1cmF0aW9uIiwiZmFkZU91dFRpbWUiLCJoZWxkRHVyYXRpb24iLCJzdGFydEZhZGUiLCJhZGRpdGlvbmFsVGFpbCIsIk5vaXNlIiwiX3BsYXliYWNrUmF0ZSIsIl9ub2lzZUJ1ZmZlcnMiLCJyYXRlIiwiYnVmZmVyTGVuZ3RoIiwiX25vaXNlQXJyYXlzIiwiY2hhbm5lbE51bSIsImIwIiwiYjEiLCJiMiIsImIzIiwiYjQiLCJiNSIsImI2Iiwid2hpdGUiLCJsYXN0T3V0IiwiY3JlYXRlQnVmZmVycyIsIlJldmVyYiIsInByZURlbGF5IiwiZ2VuZXJhdGUiLCJub2lzZUwiLCJub2lzZVIiLCJTdGVyZW9GZWVkYmFja0VmZmVjdCIsIl9mZWVkYmFja0wiLCJfZmVlZGJhY2tSIiwiU3RlcmVvV2lkZW5lciIsIndpZHRoIiwiX3R3b1RpbWVzV2lkdGhNaWQiLCJfdHdvVGltZXNXaWR0aFNpZGUiLCJfbWlkTXVsdCIsIl9vbmVNaW51c1dpZHRoIiwiX3NpZGVNdWx0IiwiVHJlbW9sbyIsIl9hbXBsaXR1ZGVMIiwiX2FtcGxpdHVkZVIiLCJWaWJyYXRvIiwiRXZlbnQiLCJfc3RhcnRPZmZzZXQiLCJfcHJvYmFiaWxpdHkiLCJfaHVtYW5pemUiLCJodW1hbml6ZSIsIl9yZXNjaGVkdWxlRXZlbnRzIiwic3RhcnRUaWNrIiwiX2dldExvb3BEdXJhdGlvbiIsIl90aWNrIiwicHJvYiIsInZhcmlhdGlvbiIsInJlc2NoZWR1bFRpbWUiLCJsYXN0RXZlbnQiLCJMb29wIiwiX2V2ZW50IiwiaXRlcmF0aW9ucyIsIml0ZXJzIiwiUGFydCIsIl9mb3JFYWNoIiwiX3N0YXJ0Tm90ZSIsImF0IiwiX3Jlc3RhcnRFdmVudCIsInJlbW92ZUFsbCIsIl9zZXRBbGwiLCJfdGVzdExvb3BCb3VuZHJpZXMiLCJQYXR0ZXJuIiwiX3BhdHRlcm4iLCJwYXR0ZXJuIiwidmFscyIsIlNlcXVlbmNlIiwiX3N1YmRpdmlzaW9uIiwiX2luZGV4VGltZSIsInN1YlN1YmRpdmlzaW9uIiwiUHVsc2VPc2NpbGxhdG9yIiwiX3dpZHRoR2F0ZSIsIl9zYXd0b290aCIsIlBXTU9zY2lsbGF0b3IiLCJfcHVsc2UiLCJtb2R1bGF0aW9uRnJlcXVlbmN5IiwiX21vZHVsYXRvciIsIkZNT3NjaWxsYXRvciIsIl9jYXJyaWVyIiwibW9kdWxhdGlvbkluZGV4IiwibW9kdWxhdGlvblR5cGUiLCJoYXJtb25pY2l0eSIsIl9tb2R1bGF0aW9uTm9kZSIsIkFNT3NjaWxsYXRvciIsIl9tb2R1bGF0aW9uU2NhbGUiLCJGYXRPc2NpbGxhdG9yIiwiX29zY2lsbGF0b3JzIiwiX3NwcmVhZCIsIm9zYyIsIml0ZXJhdG9yIiwic3RlcCIsIk9tbmlPc2NpbGxhdG9yIiwiX3NvdXJjZVR5cGUiLCJPbW5pT3NjVHlwZSIsIlB1bHNlIiwiUFdNIiwiT3NjIiwiRk0iLCJBTSIsIkZhdCIsInByZWZpeCIsInN1YnN0ciIsIl9jcmVhdGVOZXdPc2NpbGxhdG9yIiwib3NjVHlwZSIsIk9zY2lsbGF0b3JDb25zdHJ1Y3RvciIsIm9sZE9zYyIsIm1UeXBlIiwiSW5zdHJ1bWVudCIsIl9zeW5jTWV0aG9kIiwidGltZVBvc2l0aW9uIiwib3JpZ2luYWxNZXRob2QiLCJfb3JpZ2luYWxfdHJpZ2dlckF0dGFjayIsIl9vcmlnaW5hbF90cmlnZ2VyUmVsZWFzZSIsIm5vdGUiLCJNb25vcGhvbmljIiwicG9ydGFtZW50byIsIl90cmlnZ2VyRW52ZWxvcGVBdHRhY2siLCJzZXROb3RlIiwiX3RyaWdnZXJFbnZlbG9wZVJlbGVhc2UiLCJnZXRMZXZlbEF0VGltZSIsImVudmVsb3BlIiwicG9ydFRpbWUiLCJTeW50aCIsIm9zY2lsbGF0b3IiLCJBTVN5bnRoIiwibW9kdWxhdGlvbiIsIm1vZHVsYXRpb25FbnZlbG9wZSIsIk1vbm9TeW50aCIsImZpbHRlckVudmVsb3BlIiwiRHVvU3ludGgiLCJ2b2ljZTAiLCJ2b2ljZTEiLCJfdmlicmF0byIsInZpYnJhdG9SYXRlIiwiX3ZpYnJhdG9HYWluIiwidmlicmF0b0Ftb3VudCIsIkZNU3ludGgiLCJjYXJyaWVyIiwibW9kdWxhdG9yIiwiTWVtYnJhbmVTeW50aCIsInBpdGNoRGVjYXkiLCJtYXhOb3RlIiwiaW5oYXJtUmF0aW9zIiwiTWV0YWxTeW50aCIsIl9mcmVxTXVsdGlwbGllcnMiLCJfYW1wbGl0dWUiLCJfaGlnaHBhc3MiLCJfZmlsdGVyRnJlcVNjYWxlciIsIm11bHQiLCJ2ZWwiLCJvY3RzIiwiTm9pc2VTeW50aCIsIm5vaXNlIiwiUGx1Y2tTeW50aCIsIl9ub2lzZSIsImF0dGFja05vaXNlIiwiX2xmY2YiLCJkZWxheUFtb3VudCIsIlBvbHlTeW50aCIsInBvbHlwaG9ueSIsIk1BWF9QT0xZUEhPTlkiLCJ2b2ljZXMiLCJfdHJpZ2dlcnMiLCJ2Iiwidm9pY2UiLCJub3RlcyIsIm9sZGVzdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkIiwic3RyaW5naWZpZWQiLCJkZXNjIiwicmVsZWFzZUFsbCIsIlNhbXBsZXIiLCJ1cmxNYXAiLCJpc05hTiIsIl9hY3RpdmVTb3VyY2VzIiwiX2ZpbmRDbG9zZXN0IiwiTUFYX0lOVEVSVkFMIiwiZGlmZmVyZW5jZSIsImNsb3Nlc3ROb3RlIiwic291cmNlIiwic291cmNlcyIsInNldFdhdmVUYWJsZSIsImNyZWF0ZVdhdmVUYWJsZSIsIkdhaW5Ub0F1ZGlvIiwiTm9ybWFsaXplIiwiaW5wdXRNaW4iLCJpbnB1dE1heCIsIl9pbnB1dE1pbiIsIl9pbnB1dE1heCIsIl9kaXYiLCJUcmFuc3BvcnRUaW1lbGluZVNpZ25hbCIsIl9vdXRwdXRTaWciLCJfbGFzdFZhbCIsIl9vblRpY2siLCJfYmluZEFuY2hvclZhbHVlIiwiX2FuY2hvclZhbHVlIiwiX3N5bmNlZENhbGxiYWNrIiwiR3JhaW5QbGF5ZXIiLCJncmFpblNpemUiLCJfZ3JhaW5TaXplIiwiX292ZXJsYXAiLCJvdmVybGFwIiwiX29uc3RvcCIsIl9vZmZzZXQiLCJzZWVrIiwiUGxheWVyIiwiYXV0b3N0YXJ0IiwiX2VsYXBzZWRUaW1lIiwiX29uU291cmNlRW5kIiwiY29tcHV0ZWREdXJhdGlvbiIsIl9zdG9wQXROZXh0SXRlcmF0aW9uIiwibmV4dFN0b3AiLCJwb3NpdGlvbiIsInN0b3BUaW1lIiwiUGxheWVycyIsIl9wbGF5ZXJzIiwiX2ZhZGVJbiIsIl9mYWRlT3V0IiwicGxheWVyIiwicGxheWluZyIsInBsYXllck5hbWUiLCJzdG9wQWxsIiwiVXNlck1lZGlhIiwiX21lZGlhU3RyZWFtIiwiX3N0cmVhbSIsIl9kZXZpY2UiLCJsYWJlbE9ySWQiLCJlbnVtZXJhdGVEZXZpY2VzIiwiZGV2aWNlcyIsImRldmljZSIsImZpbmQiLCJsYWJlbCIsImRldmljZUlkIiwiY29uc3RyYWludHMiLCJhdWRpbyIsIm1lZGlhRGV2aWNlcyIsImdldFVzZXJNZWRpYSIsInN0cmVhbSIsImNyZWF0ZU1lZGlhU3RyZWFtU291cmNlIiwiZ2V0QXVkaW9UcmFja3MiLCJ0cmFjayIsImtpbmQiLCJhY3RpdmUiLCJncm91cElkIiwiTWlkaSIsInNlbGYiLCJnbG9iYWwiLCJwcmV2aW91c1VuZGVyc2NvcmUiLCJfIiwiQXJyYXlQcm90byIsIk9ialByb3RvIiwiU3ltYm9sUHJvdG8iLCJTeW1ib2wiLCJuYXRpdmVJc0FycmF5IiwibmF0aXZlS2V5cyIsIm5hdGl2ZUNyZWF0ZSIsImNyZWF0ZSIsIkN0b3IiLCJvYmoiLCJfd3JhcHBlZCIsImV4cG9ydHMiLCJub2RlVHlwZSIsIm1vZHVsZSIsIlZFUlNJT04iLCJvcHRpbWl6ZUNiIiwiYXJnQ291bnQiLCJjb2xsZWN0aW9uIiwiYWNjdW11bGF0b3IiLCJidWlsdGluSXRlcmF0ZWUiLCJjYiIsIml0ZXJhdGVlIiwiaWRlbnRpdHkiLCJtYXRjaGVyIiwicmVzdEFyZ3VtZW50cyIsInN0YXJ0SW5kZXgiLCJyZXN0IiwiYmFzZUNyZWF0ZSIsInJlc3VsdCIsInNoYWxsb3dQcm9wZXJ0eSIsInBhdGgiLCJkZWVwR2V0IiwiTUFYX0FSUkFZX0lOREVYIiwiZ2V0TGVuZ3RoIiwiaXNBcnJheUxpa2UiLCJlYWNoIiwiY29sbGVjdCIsImN1cnJlbnRLZXkiLCJjcmVhdGVSZWR1Y2UiLCJkaXIiLCJyZWR1Y2VyIiwicmVkdWNlIiwiZm9sZGwiLCJpbmplY3QiLCJyZWR1Y2VSaWdodCIsImZvbGRyIiwiZGV0ZWN0IiwicHJlZGljYXRlIiwia2V5RmluZGVyIiwiZmluZEluZGV4IiwiZmluZEtleSIsInNlbGVjdCIsImxpc3QiLCJyZWplY3QiLCJuZWdhdGUiLCJldmVyeSIsImFsbCIsInNvbWUiLCJhbnkiLCJjb250YWlucyIsImluY2x1ZGUiLCJmcm9tSW5kZXgiLCJndWFyZCIsImNvbnRleHRQYXRoIiwicGx1Y2siLCJ3aGVyZSIsImF0dHJzIiwiZmluZFdoZXJlIiwibGFzdENvbXB1dGVkIiwiY29tcHV0ZWQiLCJzaHVmZmxlIiwiY2xvbmUiLCJsYXN0Iiwic29ydEJ5IiwiY3JpdGVyaWEiLCJzb3J0IiwiZ3JvdXAiLCJiZWhhdmlvciIsInBhcnRpdGlvbiIsImdyb3VwQnkiLCJpbmRleEJ5IiwiY291bnRCeSIsInJlU3RyU3ltYm9sIiwicGFzcyIsImZpcnN0IiwiaGVhZCIsInRha2UiLCJ0YWlsIiwiZHJvcCIsImNvbXBhY3QiLCJCb29sZWFuIiwiZmxhdHRlbiIsInNoYWxsb3ciLCJzdHJpY3QiLCJpZHgiLCJpc0FyZ3VtZW50cyIsIndpdGhvdXQiLCJvdGhlckFycmF5cyIsInVuaXEiLCJ1bmlxdWUiLCJpc1NvcnRlZCIsInNlZW4iLCJ1bmlvbiIsImFycmF5cyIsImludGVyc2VjdGlvbiIsImFyZ3NMZW5ndGgiLCJ1bnppcCIsInppcCIsImNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyIiwiZmluZExhc3RJbmRleCIsInNvcnRlZEluZGV4IiwiY3JlYXRlSW5kZXhGaW5kZXIiLCJwcmVkaWNhdGVGaW5kIiwibGFzdEluZGV4T2YiLCJyYW5nZSIsImNodW5rIiwiZXhlY3V0ZUJvdW5kIiwic291cmNlRnVuYyIsImJvdW5kRnVuYyIsImNhbGxpbmdDb250ZXh0IiwiYm91bmQiLCJjYWxsQXJncyIsImJvdW5kQXJncyIsInBsYWNlaG9sZGVyIiwiYmluZEFsbCIsIm1lbW9pemUiLCJoYXNoZXIiLCJjYWNoZSIsImFkZHJlc3MiLCJ3YWl0IiwiZGVmZXIiLCJ0aHJvdHRsZSIsImxhdGVyIiwibGVhZGluZyIsInRocm90dGxlZCIsInJlbWFpbmluZyIsInRyYWlsaW5nIiwiZGVib3VuY2UiLCJpbW1lZGlhdGUiLCJkZWJvdW5jZWQiLCJjYWxsTm93Iiwid3JhcCIsIndyYXBwZXIiLCJjb21wb3NlIiwidGltZXMiLCJoYXNFbnVtQnVnIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJub25FbnVtZXJhYmxlUHJvcHMiLCJjb2xsZWN0Tm9uRW51bVByb3BzIiwibm9uRW51bUlkeCIsInByb3RvIiwiYWxsS2V5cyIsIm1hcE9iamVjdCIsInBhaXJzIiwiaW52ZXJ0IiwibWV0aG9kcyIsIm5hbWVzIiwiY3JlYXRlQXNzaWduZXIiLCJrZXlzRnVuYyIsImV4dGVuZE93biIsImtleUluT2JqIiwicGljayIsIm9taXQiLCJTdHJpbmciLCJwcm9wcyIsInRhcCIsImludGVyY2VwdG9yIiwiaXNNYXRjaCIsImVxIiwiZGVlcEVxIiwiYVN0YWNrIiwiYlN0YWNrIiwiYXJlQXJyYXlzIiwiYUN0b3IiLCJiQ3RvciIsInBvcCIsImlzRXF1YWwiLCJpc0VtcHR5IiwiaXNFbGVtZW50Iiwibm9kZWxpc3QiLCJjaGlsZE5vZGVzIiwiSW50OEFycmF5IiwiaXNTeW1ib2wiLCJpc051bGwiLCJpc1VuZGVmaW5lZCIsIm5vQ29uZmxpY3QiLCJub29wIiwicHJvcGVydHlPZiIsImFjY3VtIiwiRGF0ZSIsImdldFRpbWUiLCJlc2NhcGVNYXAiLCJ1bmVzY2FwZU1hcCIsImNyZWF0ZUVzY2FwZXIiLCJlc2NhcGVyIiwidGVzdFJlZ2V4cCIsIlJlZ0V4cCIsInJlcGxhY2VSZWdleHAiLCJzdHJpbmciLCJlc2NhcGUiLCJ1bmVzY2FwZSIsImlkQ291bnRlciIsInVuaXF1ZUlkIiwidGVtcGxhdGVTZXR0aW5ncyIsImV2YWx1YXRlIiwiaW50ZXJwb2xhdGUiLCJub01hdGNoIiwiZXNjYXBlcyIsImVzY2FwZVJlZ0V4cCIsImVzY2FwZUNoYXIiLCJ0ZW1wbGF0ZSIsInRleHQiLCJzZXR0aW5ncyIsIm9sZFNldHRpbmdzIiwidmFyaWFibGUiLCJGdW5jdGlvbiIsImRhdGEiLCJhcmd1bWVudCIsImluc3RhbmNlIiwiX2NoYWluIiwiY2hhaW5SZXN1bHQiLCJ0b0pTT04iLCJnIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsInJlcXVpcmUiLCJkZWZhdWx0X2tpdCIsImhpcF9ob3Bfa2l0IiwiTmV4dXMiLCJ0b191cmxfbWFwIiwic2FtcGxlcyIsInNlcXVlbmNlciIsIlNlcXVlbmNlciIsImNsZWFyX3BhdHRlcm5fYnRuIiwiQnV0dG9uIiwicmFuZG9tX3BhdHRlcm5fYnRuIiwiaGlwX2hvcF9wYXR0ZXJuX2J0biIsIlRleHRCdXR0b24iLCJtYXRyaXgiLCJwb3B1bGF0ZSJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNB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Q0FBVjtBQUNBLE1BQUk3cEMsR0FBRyxHQUFHLEVBQVY7O0FBRUEsU0FBTTZwQyxHQUFHLEdBQUc3dEMsS0FBSyxDQUFDOVIsTUFBbEIsRUFBMEI7QUFDekI4VixPQUFHLENBQUM2cEMsR0FBRCxDQUFILEdBQVc3dEMsS0FBSyxDQUFDNnRDLEdBQUQsQ0FBaEI7QUFDQUEsT0FBRztBQUNIOztBQUVELFNBQU83cEMsR0FBUDtBQUNBLEMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvYnVpbGQvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2FwcC5qc1wiKTtcbiIsIihmdW5jdGlvbihyb290LCBmYWN0b3J5KXtcblxuXHQvL1VNRFxuXHRpZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRcdGRlZmluZShmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBmYWN0b3J5KCk7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIikge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuIFx0fSBlbHNlIHtcblx0XHRyb290LlRvbmUgPSBmYWN0b3J5KCk7XG5cdH1cblxufSh0aGlzLCBmdW5jdGlvbigpe1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFRvbmU7XG5cdC8vY29uc3RydWN0cyB0aGUgbWFpbiBUb25lIG9iamVjdFxuXHRmdW5jdGlvbiBNYWluKGZ1bmMpe1xuXHRcdFRvbmUgPSBmdW5jKCk7XG5cdH1cblx0Ly9pbnZva2VzIGVhY2ggb2YgdGhlIG1vZHVsZXMgd2l0aCB0aGUgbWFpbiBUb25lIG9iamVjdCBhcyB0aGUgYXJndW1lbnRcblx0ZnVuY3Rpb24gTW9kdWxlKGZ1bmMpe1xuXHRcdGZ1bmMoVG9uZSk7XG5cdH1cdC8qKlxuXHQgKiAgVG9uZS5qc1xuXHQgKiAgQGF1dGhvciBZb3RhbSBNYW5uXG5cdCAqICBAbGljZW5zZSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUIE1JVCBMaWNlbnNlXG5cdCAqICBAY29weXJpZ2h0IDIwMTQtMjAxOCBZb3RhbSBNYW5uXG5cdCAqL1xuXHRNYWluKGZ1bmN0aW9uICgpIHtcblx0ICAgIFxuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0VE9ORVxuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBUb25lIGlzIHRoZSBiYXNlIGNsYXNzIG9mIGFsbCBvdGhlciBjbGFzc2VzLlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKi9cblx0ICAgIHZhciBUb25lID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUb25lKSkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnN0cnVjdG9yIG5lZWRzIHRvIGJlIGNhbGxlZCB3aXRoIHRoZSBcXCduZXdcXCcga2V5d29yZCcpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUjXG5cdFx0ICogIEByZXR1cm5zIHtTdHJpbmd9IHJldHVybnMgdGhlIG5hbWUgb2YgdGhlIGNsYXNzIGFzIGEgc3RyaW5nXG5cdFx0ICovXG5cdCAgICBUb25lLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBjbGFzc05hbWUgaW4gVG9uZSkge1xuXHQgICAgICAgICAgICB2YXIgaXNMZXR0ZXIgPSBjbGFzc05hbWVbMF0ubWF0Y2goL15bQS1aXSQvKTtcblx0ICAgICAgICAgICAgdmFyIHNhbWVDb25zdHJ1Y3RvciA9IFRvbmVbY2xhc3NOYW1lXSA9PT0gdGhpcy5jb25zdHJ1Y3Rvcjtcblx0ICAgICAgICAgICAgaWYgKFRvbmUuaXNGdW5jdGlvbihUb25lW2NsYXNzTmFtZV0pICYmIGlzTGV0dGVyICYmIHNhbWVDb25zdHJ1Y3Rvcikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzTmFtZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gJ1RvbmUnO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZSNcblx0XHQgKiAgZGlzY29ubmVjdCBhbmQgZGlzcG9zZVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8vXHRHRVQvU0VUXG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8qKlxuXHRcdCAqICBTZXQgdGhlIHBhcmFtZXRlcnMgYXQgb25jZS4gRWl0aGVyIHBhc3MgaW4gYW5cblx0XHQgKiAgb2JqZWN0IG1hcHBpbmcgcGFyYW1ldGVycyB0byB2YWx1ZXMsIG9yIHRvIHNldCBhXG5cdFx0ICogIHNpbmdsZSBwYXJhbWV0ZXIsIGJ5IHBhc3NpbmcgaW4gYSBzdHJpbmcgYW5kIHZhbHVlLlxuXHRcdCAqICBUaGUgbGFzdCBhcmd1bWVudCBpcyBhbiBvcHRpb25hbCByYW1wIHRpbWUgd2hpY2hcblx0XHQgKiAgd2lsbCByYW1wIGFueSBzaWduYWwgdmFsdWVzIHRvIHRoZWlyIGRlc3RpbmF0aW9uIHZhbHVlXG5cdFx0ICogIG92ZXIgdGhlIGR1cmF0aW9uIG9mIHRoZSByYW1wVGltZS5cblx0XHQgKiAgQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBwYXJhbXNcblx0XHQgKiAgQHBhcmFtIHtOdW1iZXI9fSB2YWx1ZVxuXHRcdCAqICBAcGFyYW0ge1RpbWU9fSByYW1wVGltZVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZX0gdGhpc1xuXHRcdCAqICBAbWVtYmVyT2YgVG9uZSNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL3NldCB2YWx1ZXMgdXNpbmcgYW4gb2JqZWN0XG5cdFx0ICogZmlsdGVyLnNldCh7XG5cdFx0ICogXHRcImZyZXF1ZW5jeVwiIDogMzAwLFxuXHRcdCAqIFx0XCJ0eXBlXCIgOiBoaWdocGFzc1xuXHRcdCAqIH0pO1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIGZpbHRlci5zZXQoXCJ0eXBlXCIsIFwiaGlnaHBhc3NcIik7XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9yYW1wIHRvIHRoZSB2YWx1ZSAyMjAgb3ZlciAzIHNlY29uZHMuXG5cdFx0ICogb3NjaWxsYXRvci5zZXQoe1xuXHRcdCAqIFx0XCJmcmVxdWVuY3lcIiA6IDIyMFxuXHRcdCAqIH0sIDMpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHBhcmFtcywgdmFsdWUsIHJhbXBUaW1lKSB7XG5cdCAgICAgICAgaWYgKFRvbmUuaXNPYmplY3QocGFyYW1zKSkge1xuXHQgICAgICAgICAgICByYW1wVGltZSA9IHZhbHVlO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoVG9uZS5pc1N0cmluZyhwYXJhbXMpKSB7XG5cdCAgICAgICAgICAgIHZhciB0bXBPYmogPSB7fTtcblx0ICAgICAgICAgICAgdG1wT2JqW3BhcmFtc10gPSB2YWx1ZTtcblx0ICAgICAgICAgICAgcGFyYW1zID0gdG1wT2JqO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBwYXJhbUxvb3A6XG5cdCAgICAgICAgICAgIGZvciAodmFyIGF0dHIgaW4gcGFyYW1zKSB7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcmFtc1thdHRyXTtcblx0ICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzO1xuXHQgICAgICAgICAgICAgICAgaWYgKGF0dHIuaW5kZXhPZignLicpICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyU3BsaXQgPSBhdHRyLnNwbGl0KCcuJyk7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyU3BsaXQubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudFthdHRyU3BsaXRbaV1dO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgVG9uZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0clNwbGl0LnNwbGljZSgwLCBpICsgMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJQYXJhbSA9IGF0dHJTcGxpdC5qb2luKCcuJyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuc2V0KGlubmVyUGFyYW0sIHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHBhcmFtTG9vcDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBhdHRyID0gYXR0clNwbGl0W2F0dHJTcGxpdC5sZW5ndGggLSAxXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHZhciBwYXJhbSA9IHBhcmVudFthdHRyXTtcblx0ICAgICAgICAgICAgICAgIGlmIChUb25lLmlzVW5kZWYocGFyYW0pKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAoVG9uZS5TaWduYWwgJiYgcGFyYW0gaW5zdGFuY2VvZiBUb25lLlNpZ25hbCB8fCBUb25lLlBhcmFtICYmIHBhcmFtIGluc3RhbmNlb2YgVG9uZS5QYXJhbSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbS52YWx1ZSAhPT0gdmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFRvbmUuaXNVbmRlZihyYW1wVGltZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtLnZhbHVlID0gdmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5yYW1wVG8odmFsdWUsIHJhbXBUaW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW0gaW5zdGFuY2VvZiBBdWRpb1BhcmFtKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtLnZhbHVlICE9PSB2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS52YWx1ZSA9IHZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoVG9uZS5UaW1lQmFzZSAmJiBwYXJhbSBpbnN0YW5jZW9mIFRvbmUuVGltZUJhc2UpIHtcblx0ICAgICAgICAgICAgICAgICAgICBwYXJlbnRbYXR0cl0gPSB2YWx1ZTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW0gaW5zdGFuY2VvZiBUb25lKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcGFyYW0uc2V0KHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW0gIT09IHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcGFyZW50W2F0dHJdID0gdmFsdWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgR2V0IHRoZSBvYmplY3QncyBhdHRyaWJ1dGVzLiBHaXZlbiBubyBhcmd1bWVudHMgZ2V0XG5cdFx0ICogIHdpbGwgcmV0dXJuIGFsbCBhdmFpbGFibGUgb2JqZWN0IHByb3BlcnRpZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmdcblx0XHQgKiAgdmFsdWVzLiBQYXNzIGluIGEgc2luZ2xlIGF0dHJpYnV0ZSB0byByZXRyaWV2ZSBvciBhbiBhcnJheVxuXHRcdCAqICBvZiBhdHRyaWJ1dGVzLiBUaGUgYXR0cmlidXRlIHN0cmluZ3MgY2FuIGFsc28gaW5jbHVkZSBhIFwiLlwiXG5cdFx0ICogIHRvIGFjY2VzcyBkZWVwZXIgcHJvcGVydGllcy5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUjXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogb3NjLmdldCgpO1xuXHRcdCAqIC8vcmV0dXJucyB7XCJ0eXBlXCIgOiBcInNpbmVcIiwgXCJmcmVxdWVuY3lcIiA6IDQ0MCwgLi4uZXRjfVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIG9zYy5nZXQoXCJ0eXBlXCIpO1xuXHRcdCAqIC8vcmV0dXJucyB7IFwidHlwZVwiIDogXCJzaW5lXCJ9XG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiAvL3VzZSBkb3Qgbm90YXRpb24gdG8gYWNjZXNzIGRlZXAgcHJvcGVydGllc1xuXHRcdCAqIHN5bnRoLmdldChbXCJlbnZlbG9wZS5hdHRhY2tcIiwgXCJlbnZlbG9wZS5yZWxlYXNlXCJdKTtcblx0XHQgKiAvL3JldHVybnMge1wiZW52ZWxvcGVcIiA6IHtcImF0dGFja1wiIDogMC4yLCBcInJlbGVhc2VcIiA6IDAuNH19XG5cdFx0ICogIEBwYXJhbSB7QXJyYXk9fHN0cmluZ3x1bmRlZmluZWR9IHBhcmFtcyB0aGUgcGFyYW1ldGVycyB0byBnZXQsIG90aGVyd2lzZSB3aWxsIHJldHVyblxuXHRcdCAqICBcdFx0XHRcdFx0ICAgICAgICAgICAgICAgICAgYWxsIGF2YWlsYWJsZS5cblx0XHQgKiAgQHJldHVybnMge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcblx0ICAgICAgICBpZiAoVG9uZS5pc1VuZGVmKHBhcmFtcykpIHtcblx0ICAgICAgICAgICAgcGFyYW1zID0gdGhpcy5fY29sbGVjdERlZmF1bHRzKHRoaXMuY29uc3RydWN0b3IpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoVG9uZS5pc1N0cmluZyhwYXJhbXMpKSB7XG5cdCAgICAgICAgICAgIHBhcmFtcyA9IFtwYXJhbXNdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgcmV0ID0ge307XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGF0dHIgPSBwYXJhbXNbaV07XG5cdCAgICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzO1xuXHQgICAgICAgICAgICB2YXIgc3ViUmV0ID0gcmV0O1xuXHQgICAgICAgICAgICBpZiAoYXR0ci5pbmRleE9mKCcuJykgIT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYXR0clNwbGl0ID0gYXR0ci5zcGxpdCgnLicpO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhdHRyU3BsaXQubGVuZ3RoIC0gMTsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHN1YkF0dHIgPSBhdHRyU3BsaXRbal07XG5cdCAgICAgICAgICAgICAgICAgICAgc3ViUmV0W3N1YkF0dHJdID0gc3ViUmV0W3N1YkF0dHJdIHx8IHt9O1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YlJldCA9IHN1YlJldFtzdWJBdHRyXTtcblx0ICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnRbc3ViQXR0cl07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBhdHRyID0gYXR0clNwbGl0W2F0dHJTcGxpdC5sZW5ndGggLSAxXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgcGFyYW0gPSBwYXJlbnRbYXR0cl07XG5cdCAgICAgICAgICAgIGlmIChUb25lLmlzT2JqZWN0KHBhcmFtc1thdHRyXSkpIHtcblx0ICAgICAgICAgICAgICAgIHN1YlJldFthdHRyXSA9IHBhcmFtLmdldCgpO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKFRvbmUuU2lnbmFsICYmIHBhcmFtIGluc3RhbmNlb2YgVG9uZS5TaWduYWwpIHtcblx0ICAgICAgICAgICAgICAgIHN1YlJldFthdHRyXSA9IHBhcmFtLnZhbHVlO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKFRvbmUuUGFyYW0gJiYgcGFyYW0gaW5zdGFuY2VvZiBUb25lLlBhcmFtKSB7XG5cdCAgICAgICAgICAgICAgICBzdWJSZXRbYXR0cl0gPSBwYXJhbS52YWx1ZTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbSBpbnN0YW5jZW9mIEF1ZGlvUGFyYW0pIHtcblx0ICAgICAgICAgICAgICAgIHN1YlJldFthdHRyXSA9IHBhcmFtLnZhbHVlO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtIGluc3RhbmNlb2YgVG9uZSkge1xuXHQgICAgICAgICAgICAgICAgc3ViUmV0W2F0dHJdID0gcGFyYW0uZ2V0KCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoIVRvbmUuaXNGdW5jdGlvbihwYXJhbSkgJiYgVG9uZS5pc0RlZmluZWQocGFyYW0pKSB7XG5cdCAgICAgICAgICAgICAgICBzdWJSZXRbYXR0cl0gPSBwYXJhbTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gcmV0O1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBjb2xsZWN0IGFsbCBvZiB0aGUgZGVmYXVsdCBhdHRyaWJ1dGVzIGluIG9uZVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqICBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHIgdGhlIGNvbnN0cnVjdG9yIHRvIGZpbmQgdGhlIGRlZmF1bHRzIGZyb21cblx0XHQgKiAgQHJldHVybiB7QXJyYXl9IGFsbCBvZiB0aGUgYXR0cmlidXRlcyB3aGljaCBiZWxvbmcgdG8gdGhlIGNsYXNzXG5cdFx0ICovXG5cdCAgICBUb25lLnByb3RvdHlwZS5fY29sbGVjdERlZmF1bHRzID0gZnVuY3Rpb24gKGNvbnN0cikge1xuXHQgICAgICAgIHZhciByZXQgPSBbXTtcblx0ICAgICAgICBpZiAoVG9uZS5pc0RlZmluZWQoY29uc3RyLmRlZmF1bHRzKSkge1xuXHQgICAgICAgICAgICByZXQgPSBPYmplY3Qua2V5cyhjb25zdHIuZGVmYXVsdHMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoVG9uZS5pc0RlZmluZWQoY29uc3RyLl9zdXBlcikpIHtcblx0ICAgICAgICAgICAgdmFyIHN1cGVyRGVmcyA9IHRoaXMuX2NvbGxlY3REZWZhdWx0cyhjb25zdHIuX3N1cGVyKTtcblx0ICAgICAgICAgICAgLy9maWx0ZXIgb3V0IHJlcGVhdHNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdXBlckRlZnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChyZXQuaW5kZXhPZihzdXBlckRlZnNbaV0pID09PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKHN1cGVyRGVmc1tpXSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHJldDtcblx0ICAgIH07XG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8vXHRERUZBVUxUU1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgQG1lbWJlck9mIFRvbmVcblx0XHQgKiAgQHBhcmFtICB7QXJyYXl9ICB2YWx1ZXMgIFRoZSBhcmd1bWVudHMgYXJyYXlcblx0XHQgKiAgQHBhcmFtICB7QXJyYXl9ICBrZXlzICAgIFRoZSBuYW1lcyBvZiB0aGUgYXJndW1lbnRzXG5cdFx0ICogIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBjb25zdHIgVGhlIGNsYXNzIGNvbnN0cnVjdG9yXG5cdFx0ICogIEByZXR1cm4gIHtPYmplY3R9ICBBbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlICBkZWZhdWx0cyBiZXR3ZWVuIHRoZSBjbGFzcycgZGVmYXVsdHNcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgcGFzc2VkIGluIGFyZ3VtZW50cy5cblx0XHQgKi9cblx0ICAgIFRvbmUuZGVmYXVsdHMgPSBmdW5jdGlvbiAodmFsdWVzLCBrZXlzLCBjb25zdHIpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IHt9O1xuXHQgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAxICYmIFRvbmUuaXNPYmplY3QodmFsdWVzWzBdKSkge1xuXHQgICAgICAgICAgICBvcHRpb25zID0gdmFsdWVzWzBdO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgb3B0aW9uc1trZXlzW2ldXSA9IHZhbHVlc1tpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoVG9uZS5pc0RlZmluZWQoY29uc3RyLmRlZmF1bHRzKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gVG9uZS5kZWZhdWx0QXJnKG9wdGlvbnMsIGNvbnN0ci5kZWZhdWx0cyk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChUb25lLmlzT2JqZWN0KGNvbnN0cikpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuZGVmYXVsdEFyZyhvcHRpb25zLCBjb25zdHIpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgSWYgdGhlIGBnaXZlbmAgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZCwgdXNlIHRoZSBgZmFsbGJhY2tgLlxuXHRcdCAqICBJZiBib3RoIGBnaXZlbmAgYW5kIGBmYWxsYmFja2AgYXJlIG9iamVjdCBsaXRlcmFscywgaXQgd2lsbFxuXHRcdCAqICByZXR1cm4gYSBkZWVwIGNvcHkgd2hpY2ggaW5jbHVkZXMgYWxsIG9mIHRoZSBwYXJhbWV0ZXJzIGZyb20gYm90aFxuXHRcdCAqICBvYmplY3RzLiBJZiBhIHBhcmFtZXRlciBpcyB1bmRlZmluZWQgaW4gZ2l2ZW4sIGl0IHdpbGwgcmV0dXJuXG5cdFx0ICogIHRoZSBmYWxsYmFjayBwcm9wZXJ0eS5cblx0XHQgKiAgPGJyPjxicj5cblx0XHQgKiAgV0FSTklORzogaWYgb2JqZWN0IGlzIHNlbGYgcmVmZXJlbnRpYWwsIGl0IHdpbGwgZ28gaW50byBhbiBhblxuXHRcdCAqICBpbmZpbml0ZSByZWN1cnNpdmUgbG9vcC5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmVcblx0XHQgKiAgQHBhcmFtICB7Kn0gZ2l2ZW5cblx0XHQgKiAgQHBhcmFtICB7Kn0gZmFsbGJhY2tcblx0XHQgKiAgQHJldHVybiB7Kn1cblx0XHQgKi9cblx0ICAgIFRvbmUuZGVmYXVsdEFyZyA9IGZ1bmN0aW9uIChnaXZlbiwgZmFsbGJhY2spIHtcblx0ICAgICAgICBpZiAoVG9uZS5pc09iamVjdChnaXZlbikgJiYgVG9uZS5pc09iamVjdChmYWxsYmFjaykpIHtcblx0ICAgICAgICAgICAgdmFyIHJldCA9IHt9O1xuXHQgICAgICAgICAgICAvL21ha2UgYSBkZWVwIGNvcHkgb2YgdGhlIGdpdmVuIG9iamVjdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBnaXZlblByb3AgaW4gZ2l2ZW4pIHtcblx0ICAgICAgICAgICAgICAgIHJldFtnaXZlblByb3BdID0gVG9uZS5kZWZhdWx0QXJnKGZhbGxiYWNrW2dpdmVuUHJvcF0sIGdpdmVuW2dpdmVuUHJvcF0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGZvciAodmFyIGZhbGxiYWNrUHJvcCBpbiBmYWxsYmFjaykge1xuXHQgICAgICAgICAgICAgICAgcmV0W2ZhbGxiYWNrUHJvcF0gPSBUb25lLmRlZmF1bHRBcmcoZ2l2ZW5bZmFsbGJhY2tQcm9wXSwgZmFsbGJhY2tbZmFsbGJhY2tQcm9wXSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHJldDtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gVG9uZS5pc1VuZGVmKGdpdmVuKSA/IGZhbGxiYWNrIDogZ2l2ZW47XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9cdENPTk5FQ1RJT05TXG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8qKlxuXHRcdCAqICBjb25uZWN0IHRvZ2V0aGVyIGFsbCBvZiB0aGUgYXJndW1lbnRzIGluIHNlcmllc1xuXHRcdCAqICBAcGFyYW0gey4uLkF1ZGlvUGFyYW18VG9uZXxBdWRpb05vZGV9IG5vZGVzXG5cdFx0ICogIEByZXR1cm5zIHtUb25lfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZVxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICovXG5cdCAgICBUb25lLmNvbm5lY3RTZXJpZXMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGN1cnJlbnRVbml0ID0gYXJndW1lbnRzWzBdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciB0b1VuaXQgPSBhcmd1bWVudHNbaV07XG5cdCAgICAgICAgICAgIGN1cnJlbnRVbml0LmNvbm5lY3QodG9Vbml0KTtcblx0ICAgICAgICAgICAgY3VycmVudFVuaXQgPSB0b1VuaXQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBUb25lO1xuXHQgICAgfTtcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy8gVFlQRSBDSEVDS0lOR1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgVGVzdCBpZiB0aGUgYXJnIGlzIHVuZGVmaW5lZFxuXHRcdCAqICBAcGFyYW0geyp9IGFyZyB0aGUgYXJndW1lbnQgdG8gdGVzdFxuXHRcdCAqICBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgYXJnIGlzIHVuZGVmaW5lZFxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lXG5cdFx0ICovXG5cdCAgICBUb25lLmlzVW5kZWYgPSBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUZXN0IGlmIHRoZSBhcmcgaXMgbm90IHVuZGVmaW5lZFxuXHRcdCAqICBAcGFyYW0geyp9IGFyZyB0aGUgYXJndW1lbnQgdG8gdGVzdFxuXHRcdCAqICBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgYXJnIGlzIHVuZGVmaW5lZFxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lXG5cdFx0ICovXG5cdCAgICBUb25lLmlzRGVmaW5lZCA9IGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgICByZXR1cm4gIVRvbmUuaXNVbmRlZih2YWwpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUZXN0IGlmIHRoZSBhcmcgaXMgYSBmdW5jdGlvblxuXHRcdCAqICBAcGFyYW0geyp9IGFyZyB0aGUgYXJndW1lbnQgdG8gdGVzdFxuXHRcdCAqICBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgYXJnIGlzIGEgZnVuY3Rpb25cblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAbWVtYmVyT2YgVG9uZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5pc0Z1bmN0aW9uID0gZnVuY3Rpb24gKHZhbCkge1xuXHQgICAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUZXN0IGlmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlci5cblx0XHQgKiAgQHBhcmFtIHsqfSBhcmcgdGhlIGFyZ3VtZW50IHRvIHRlc3Rcblx0XHQgKiAgQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgdGhlIGFyZyBpcyBhIG51bWJlclxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lXG5cdFx0ICovXG5cdCAgICBUb25lLmlzTnVtYmVyID0gZnVuY3Rpb24gKGFyZykge1xuXHQgICAgICAgIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGVzdCBpZiB0aGUgZ2l2ZW4gYXJndW1lbnQgaXMgYW4gb2JqZWN0IGxpdGVyYWwgKGkuZS4gYHt9YCk7XG5cdFx0ICogIEBwYXJhbSB7Kn0gYXJnIHRoZSBhcmd1bWVudCB0byB0ZXN0XG5cdFx0ICogIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIHRoZSBhcmcgaXMgYW4gb2JqZWN0IGxpdGVyYWwuXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQG1lbWJlck9mIFRvbmVcblx0XHQgKi9cblx0ICAgIFRvbmUuaXNPYmplY3QgPSBmdW5jdGlvbiAoYXJnKSB7XG5cdCAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpID09PSAnW29iamVjdCBPYmplY3RdJyAmJiBhcmcuY29uc3RydWN0b3IgPT09IE9iamVjdDtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGVzdCBpZiB0aGUgYXJndW1lbnQgaXMgYSBib29sZWFuLlxuXHRcdCAqICBAcGFyYW0geyp9IGFyZyB0aGUgYXJndW1lbnQgdG8gdGVzdFxuXHRcdCAqICBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgYXJnIGlzIGEgYm9vbGVhblxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lXG5cdFx0ICovXG5cdCAgICBUb25lLmlzQm9vbGVhbiA9IGZ1bmN0aW9uIChhcmcpIHtcblx0ICAgICAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUZXN0IGlmIHRoZSBhcmd1bWVudCBpcyBhbiBBcnJheVxuXHRcdCAqICBAcGFyYW0geyp9IGFyZyB0aGUgYXJndW1lbnQgdG8gdGVzdFxuXHRcdCAqICBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgYXJnIGlzIGFuIGFycmF5XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQG1lbWJlck9mIFRvbmVcblx0XHQgKi9cblx0ICAgIFRvbmUuaXNBcnJheSA9IGZ1bmN0aW9uIChhcmcpIHtcblx0ICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUZXN0IGlmIHRoZSBhcmd1bWVudCBpcyBhIHN0cmluZy5cblx0XHQgKiAgQHBhcmFtIHsqfSBhcmcgdGhlIGFyZ3VtZW50IHRvIHRlc3Rcblx0XHQgKiAgQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgdGhlIGFyZyBpcyBhIHN0cmluZ1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lXG5cdFx0ICovXG5cdCAgICBUb25lLmlzU3RyaW5nID0gZnVuY3Rpb24gKGFyZykge1xuXHQgICAgICAgIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGVzdCBpZiB0aGUgYXJndW1lbnQgaXMgaW4gdGhlIGZvcm0gb2YgYSBub3RlIGluIHNjaWVudGlmaWMgcGl0Y2ggbm90YXRpb24uXG5cdFx0ICogIGUuZy4gXCJDNFwiXG5cdFx0ICogIEBwYXJhbSB7Kn0gYXJnIHRoZSBhcmd1bWVudCB0byB0ZXN0XG5cdFx0ICogIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIHRoZSBhcmcgaXMgYSBzdHJpbmdcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAbWVtYmVyT2YgVG9uZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5pc05vdGUgPSBmdW5jdGlvbiAoYXJnKSB7XG5cdCAgICAgICAgcmV0dXJuIFRvbmUuaXNTdHJpbmcoYXJnKSAmJiAvXihbYS1nXXsxfSg/OmJ8I3x4fGJiKT8pKC0/WzAtOV0rKS9pLnRlc3QoYXJnKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQW4gZW1wdHkgZnVuY3Rpb24uXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKi9cblx0ICAgIFRvbmUubm9PcCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgTWFrZSB0aGUgcHJvcGVydHkgbm90IHdyaXRhYmxlLiBJbnRlcm5hbCB1c2Ugb25seS5cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfSAgcHJvcGVydHkgIHRoZSBwcm9wZXJ0eSB0byBtYWtlIG5vdCB3cml0YWJsZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5wcm90b3R5cGUuX3JlYWRPbmx5ID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7XG5cdCAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcGVydHkpKSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydHkubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRPbmx5KHByb3BlcnR5W2ldKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eSwge1xuXHQgICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIE1ha2UgYW4gYXR0cmlidXRlIHdyaXRlYWJsZS4gSW50ZXJhbCB1c2Ugb25seS5cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfSAgcHJvcGVydHkgIHRoZSBwcm9wZXJ0eSB0byBtYWtlIHdyaXRhYmxlXG5cdFx0ICovXG5cdCAgICBUb25lLnByb3RvdHlwZS5fd3JpdGFibGUgPSBmdW5jdGlvbiAocHJvcGVydHkpIHtcblx0ICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wZXJ0eSkpIHtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0eS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fd3JpdGFibGUocHJvcGVydHlbaV0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BlcnR5LCB7IHdyaXRhYmxlOiB0cnVlIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBQb3NzaWJsZSBwbGF5IHN0YXRlcy5cblx0XHQgKiBAZW51bSB7U3RyaW5nfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5TdGF0ZSA9IHtcblx0ICAgICAgICBTdGFydGVkOiAnc3RhcnRlZCcsXG5cdCAgICAgICAgU3RvcHBlZDogJ3N0b3BwZWQnLFxuXHQgICAgICAgIFBhdXNlZDogJ3BhdXNlZCdcblx0ICAgIH07XG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8vIENPTlZFUlNJT05TXG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8qKlxuXHRcdCAqICBFcXVhbCBwb3dlciBnYWluIHNjYWxlLiBHb29kIGZvciBjcm9zcy1mYWRpbmcuXG5cdFx0ICogIEBwYXJhbSAge05vcm1hbFJhbmdlfSBwZXJjZW50ICgwLTEpXG5cdFx0ICogIEByZXR1cm4ge051bWJlcn0gICAgICAgICBvdXRwdXQgZ2FpbiAoMC0xKVxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lXG5cdFx0ICovXG5cdCAgICBUb25lLmVxdWFsUG93ZXJTY2FsZSA9IGZ1bmN0aW9uIChwZXJjZW50KSB7XG5cdCAgICAgICAgdmFyIHBpRmFjdG9yID0gMC41ICogTWF0aC5QSTtcblx0ICAgICAgICByZXR1cm4gTWF0aC5zaW4ocGVyY2VudCAqIHBpRmFjdG9yKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ29udmVydCBkZWNpYmVscyBpbnRvIGdhaW4uXG5cdFx0ICogIEBwYXJhbSAge0RlY2liZWxzfSBkYlxuXHRcdCAqICBAcmV0dXJuIHtOdW1iZXJ9XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQG1lbWJlck9mIFRvbmVcblx0XHQgKi9cblx0ICAgIFRvbmUuZGJUb0dhaW4gPSBmdW5jdGlvbiAoZGIpIHtcblx0ICAgICAgICByZXR1cm4gTWF0aC5wb3coMTAsIGRiIC8gMjApO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDb252ZXJ0IGdhaW4gdG8gZGVjaWJlbHMuXG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gZ2FpbiAoMC0xKVxuXHRcdCAqICBAcmV0dXJuIHtEZWNpYmVsc31cblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAbWVtYmVyT2YgVG9uZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5nYWluVG9EYiA9IGZ1bmN0aW9uIChnYWluKSB7XG5cdCAgICAgICAgcmV0dXJuIDIwICogKE1hdGgubG9nKGdhaW4pIC8gTWF0aC5MTjEwKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ29udmVydCBhbiBpbnRlcnZhbCAoaW4gc2VtaXRvbmVzKSB0byBhIGZyZXF1ZW5jeSByYXRpby5cblx0XHQgKiAgQHBhcmFtICB7SW50ZXJ2YWx9IGludGVydmFsIHRoZSBudW1iZXIgb2Ygc2VtaXRvbmVzIGFib3ZlIHRoZSBiYXNlIG5vdGVcblx0XHQgKiAgQHJldHVybiB7TnVtYmVyfSAgICAgICAgICB0aGUgZnJlcXVlbmN5IHJhdGlvXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQG1lbWJlck9mIFRvbmVcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB0b25lLmludGVydmFsVG9GcmVxdWVuY3lSYXRpbygwKTsgLy8gMVxuXHRcdCAqIHRvbmUuaW50ZXJ2YWxUb0ZyZXF1ZW5jeVJhdGlvKDEyKTsgLy8gMlxuXHRcdCAqIHRvbmUuaW50ZXJ2YWxUb0ZyZXF1ZW5jeVJhdGlvKC0xMik7IC8vIDAuNVxuXHRcdCAqL1xuXHQgICAgVG9uZS5pbnRlcnZhbFRvRnJlcXVlbmN5UmF0aW8gPSBmdW5jdGlvbiAoaW50ZXJ2YWwpIHtcblx0ICAgICAgICByZXR1cm4gTWF0aC5wb3coMiwgaW50ZXJ2YWwgLyAxMik7XG5cdCAgICB9O1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0VElNSU5HXG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm4gdGhlIGN1cnJlbnQgdGltZSBvZiB0aGUgQXVkaW9Db250ZXh0IGNsb2NrLlxuXHRcdCAqICBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBjdXJyZW50VGltZSBmcm9tIHRoZSBBdWRpb0NvbnRleHRcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUjXG5cdFx0ICovXG5cdCAgICBUb25lLnByb3RvdHlwZS5ub3cgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIFRvbmUuY29udGV4dC5ub3coKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJuIHRoZSBjdXJyZW50IHRpbWUgb2YgdGhlIEF1ZGlvQ29udGV4dCBjbG9jay5cblx0XHQgKiAgQHJldHVybiB7TnVtYmVyfSB0aGUgY3VycmVudFRpbWUgZnJvbSB0aGUgQXVkaW9Db250ZXh0XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQG1lbWJlck9mIFRvbmVcblx0XHQgKi9cblx0ICAgIFRvbmUubm93ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiBUb25lLmNvbnRleHQubm93KCk7XG5cdCAgICB9O1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0SU5IRVJJVEFOQ0Vcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLyoqXG5cdFx0ICogIGhhdmUgYSBjaGlsZCBpbmhlcml0IGFsbCBvZiBUb25lJ3MgKG9yIGEgcGFyZW50J3MpIHByb3RvdHlwZVxuXHRcdCAqICB0byBpbmhlcml0IHRoZSBwYXJlbnQncyBwcm9wZXJ0aWVzLCBtYWtlIHN1cmUgdG8gY2FsbFxuXHRcdCAqICBQYXJlbnQuY2FsbCh0aGlzKSBpbiB0aGUgY2hpbGQncyBjb25zdHJ1Y3RvclxuXHRcdCAqXG5cdFx0ICogIGJhc2VkIG9uIGNsb3N1cmUgbGlicmFyeSdzIGluaGVyaXQgZnVuY3Rpb25cblx0XHQgKlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZVxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBwYXJhbSAge0Z1bmN0aW9ufSBcdGNoaWxkXG5cdFx0ICogIEBwYXJhbSAge0Z1bmN0aW9uPX0gcGFyZW50IChvcHRpb25hbCkgcGFyZW50IHRvIGluaGVyaXQgZnJvbVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBubyBwYXJlbnQgaXMgc3VwcGxpZWQsIHRoZSBjaGlsZFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGluaGVyaXQgZnJvbSBUb25lXG5cdFx0ICovXG5cdCAgICBUb25lLmV4dGVuZCA9IGZ1bmN0aW9uIChjaGlsZCwgcGFyZW50KSB7XG5cdCAgICAgICAgaWYgKFRvbmUuaXNVbmRlZihwYXJlbnQpKSB7XG5cdCAgICAgICAgICAgIHBhcmVudCA9IFRvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZ1bmN0aW9uIFRlbXBDb25zdHJ1Y3RvcigpIHtcblx0ICAgICAgICB9XG5cdCAgICAgICAgVGVtcENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7XG5cdCAgICAgICAgY2hpbGQucHJvdG90eXBlID0gbmV3IFRlbXBDb25zdHJ1Y3RvcigpO1xuXHQgICAgICAgIC8qKiBAb3ZlcnJpZGUgKi9cblx0ICAgICAgICBjaGlsZC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjaGlsZDtcblx0ICAgICAgICBjaGlsZC5fc3VwZXIgPSBwYXJlbnQ7XG5cdCAgICB9O1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0Q09OVEVYVFxuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgUHJpdmF0ZSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBBdWRpb0NvbnRleHRcblx0XHQgKiAgQHR5cGUge0F1ZGlvQ29udGV4dH1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIHZhciBhdWRpb0NvbnRleHQgPSBudWxsO1xuXHQgICAgLyoqXG5cdFx0ICogIEEgc3RhdGljIHBvaW50ZXIgdG8gdGhlIGF1ZGlvIGNvbnRleHQgYWNjZXNzaWJsZSBhcyBUb25lLmNvbnRleHQuXG5cdFx0ICogIEB0eXBlIHtUb25lLkNvbnRleHR9XG5cdFx0ICogIEBuYW1lIGNvbnRleHRcblx0XHQgKiAgQG1lbWJlck9mIFRvbmVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLCAnY29udGV4dCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGF1ZGlvQ29udGV4dDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGNvbnRleHQpIHtcblx0ICAgICAgICAgICAgaWYgKFRvbmUuQ29udGV4dCAmJiBjb250ZXh0IGluc3RhbmNlb2YgVG9uZS5Db250ZXh0KSB7XG5cdCAgICAgICAgICAgICAgICBhdWRpb0NvbnRleHQgPSBjb250ZXh0O1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYXVkaW9Db250ZXh0ID0gbmV3IFRvbmUuQ29udGV4dChjb250ZXh0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvL2luaXRpYWxpemUgdGhlIG5ldyBhdWRpbyBjb250ZXh0XG5cdCAgICAgICAgICAgIFRvbmUuQ29udGV4dC5lbWl0KCdpbml0JywgYXVkaW9Db250ZXh0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgQXVkaW9Db250ZXh0XG5cdFx0ICogIEB0eXBlIHtUb25lLkNvbnRleHR9XG5cdFx0ICogIEBuYW1lIGNvbnRleHRcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUjXG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUucHJvdG90eXBlLCAnY29udGV4dCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuY29udGV4dDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUb25lIGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBhIGNvbnRleHQgb24gaW5pdCwgYnV0IGlmIHlvdSBhcmUgd29ya2luZ1xuXHRcdCAqICB3aXRoIG90aGVyIGxpYnJhcmllcyB3aGljaCBhbHNvIGNyZWF0ZSBhbiBBdWRpb0NvbnRleHQsIGl0IGNhbiBiZVxuXHRcdCAqICB1c2VmdWwgdG8gc2V0IHlvdXIgb3duLiBJZiB5b3UgYXJlIGdvaW5nIHRvIHNldCB5b3VyIG93biBjb250ZXh0LFxuXHRcdCAqICBiZSBzdXJlIHRvIGRvIGl0IGF0IHRoZSBzdGFydCBvZiB5b3VyIGNvZGUsIGJlZm9yZSBjcmVhdGluZyBhbnkgb2JqZWN0cy5cblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAcGFyYW0ge0F1ZGlvQ29udGV4dH0gY3R4IFRoZSBuZXcgYXVkaW8gY29udGV4dCB0byBzZXRcblx0XHQgKi9cblx0ICAgIFRvbmUuc2V0Q29udGV4dCA9IGZ1bmN0aW9uIChjdHgpIHtcblx0ICAgICAgICBUb25lLmNvbnRleHQgPSBjdHg7XG5cdCAgICB9O1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0QVRUUklCVVRFU1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgVGhlIG51bWJlciBvZiBzZWNvbmRzIG9mIDEgcHJvY2Vzc2luZyBibG9jayAoMTI4IHNhbXBsZXMpXG5cdFx0ICogIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogIEBuYW1lIGJsb2NrVGltZVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZVxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUucHJvdG90eXBlLCAnYmxvY2tUaW1lJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gMTI4IC8gdGhpcy5jb250ZXh0LnNhbXBsZVJhdGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGR1cmF0aW9uIGluIHNlY29uZHMgb2Ygb25lIHNhbXBsZS5cblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQG5hbWUgc2FtcGxlVGltZVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZVxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUucHJvdG90eXBlLCAnc2FtcGxlVGltZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIDEgLyB0aGlzLmNvbnRleHQuc2FtcGxlUmF0ZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBXaGV0aGVyIG9yIG5vdCBhbGwgdGhlIHRlY2hub2xvZ2llcyB0aGF0IFRvbmUuanMgcmVsaWVzIG9uIGFyZSBzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgYnJvd3Nlci5cblx0XHQgKiAgQHR5cGUge0Jvb2xlYW59XG5cdFx0ICogIEBuYW1lIHN1cHBvcnRlZFxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZVxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUsICdzdXBwb3J0ZWQnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBoYXNBdWRpb0NvbnRleHQgPSB3aW5kb3cuaGFzT3duUHJvcGVydHkoJ0F1ZGlvQ29udGV4dCcpIHx8IHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnd2Via2l0QXVkaW9Db250ZXh0Jyk7XG5cdCAgICAgICAgICAgIHZhciBoYXNQcm9taXNlcyA9IHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnUHJvbWlzZScpO1xuXHQgICAgICAgICAgICB2YXIgaGFzV29ya2VycyA9IHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnV29ya2VyJyk7XG5cdCAgICAgICAgICAgIHJldHVybiBoYXNBdWRpb0NvbnRleHQgJiYgaGFzUHJvbWlzZXMgJiYgaGFzV29ya2Vycztcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBCb29sZWFuIHZhbHVlIGlmIHRoZSBhdWRpbyBjb250ZXh0IGhhcyBiZWVuIGluaXRpYWxpemVkLlxuXHRcdCAqICBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiAgQG1lbWJlck9mIFRvbmVcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAbmFtZSBpbml0aWFsaXplZFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUsICdpbml0aWFsaXplZCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGF1ZGlvQ29udGV4dCAhPT0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBHZXQgdGhlIGNvbnRleHQgd2hlbiBpdCBiZWNvbWVzIGF2YWlsYWJsZVxuXHRcdCAqICBAcGFyYW0gIHtGdW5jdGlvbn0gIHJlc29sdmUgIENhbGxiYWNrIHdoZW4gdGhlIGNvbnRleHQgaXMgaW5pdGlhbGl6ZWRcblx0XHQgKiAgQHJldHVybiAge1RvbmV9XG5cdFx0ICovXG5cdCAgICBUb25lLmdldENvbnRleHQgPSBmdW5jdGlvbiAocmVzb2x2ZSkge1xuXHQgICAgICAgIGlmIChUb25lLmluaXRpYWxpemVkKSB7XG5cdCAgICAgICAgICAgIHJlc29sdmUoVG9uZS5jb250ZXh0KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgcmVzQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICByZXNvbHZlKFRvbmUuY29udGV4dCk7XG5cdCAgICAgICAgICAgICAgICBUb25lLkNvbnRleHQub2ZmKCdpbml0JywgcmVzQ2FsbGJhY2spO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICBUb25lLkNvbnRleHQub24oJ2luaXQnLCByZXNDYWxsYmFjayk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBUb25lO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSB2ZXJzaW9uIG51bWJlclxuXHRcdCAqIEB0eXBlIHtTdHJpbmd9XG5cdFx0ICogQHN0YXRpY1xuXHRcdCAqL1xuXHQgICAgVG9uZS52ZXJzaW9uID0gJ3IxMic7XG5cdCAgICByZXR1cm4gVG9uZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuRW1pdHRlciBnaXZlcyBjbGFzc2VzIHdoaWNoIGV4dGVuZCBpdFxuXHRcdCAqICAgICAgICAgdGhlIGFiaWxpdHkgdG8gbGlzdGVuIGZvciBhbmQgZW1pdCBldmVudHMuXG5cdFx0ICogICAgICAgICBJbnNwaXJhdGlvbiBhbmQgcmVmZXJlbmNlIGZyb20gSmVyb21lIEV0aWVubmUncyBbTWljcm9FdmVudF0oaHR0cHM6Ly9naXRodWIuY29tL2plcm9tZWV0aWVubmUvbWljcm9ldmVudC5qcykuXG5cdFx0ICogICAgICAgICBNSVQgKGMpIDIwMTEgSmVyb21lIEV0aWVubmUuXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmV9XG5cdFx0ICovXG5cdCAgICBUb25lLkVtaXR0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIENvbnRhaW5zIGFsbCBvZiB0aGUgZXZlbnRzLlxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKiAgQHR5cGUgIHtPYmplY3R9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9ldmVudHMgPSB7fTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkVtaXR0ZXIpO1xuXHQgICAgLyoqXG5cdFx0ICogIEJpbmQgYSBjYWxsYmFjayB0byBhIHNwZWNpZmljIGV2ZW50LlxuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmd9ICAgIGV2ZW50ICAgICBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gbGlzdGVuIGZvci5cblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb259ICBjYWxsYmFjayAgVGhlIGNhbGxiYWNrIHRvIGludm9rZSB3aGVuIHRoZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudCBpcyBlbWl0dGVkXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkVtaXR0ZXJ9ICAgIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XG5cdCAgICAgICAgLy9zcGxpdCB0aGUgZXZlbnRcblx0ICAgICAgICB2YXIgZXZlbnRzID0gZXZlbnQuc3BsaXQoL1xcVysvKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gZXZlbnRzW2ldO1xuXHQgICAgICAgICAgICBpZiAoIXRoaXMuX2V2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnROYW1lXSA9IFtdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdLnB1c2goY2FsbGJhY2spO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQmluZCBhIGNhbGxiYWNrIHdoaWNoIGlzIG9ubHkgaW52b2tlZCBvbmNlXG5cdFx0ICogIEBwYXJhbSAge1N0cmluZ30gICAgZXZlbnQgICAgIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gZm9yLlxuXHRcdCAqICBAcGFyYW0gIHtGdW5jdGlvbn0gIGNhbGxiYWNrICBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gdGhlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50IGlzIGVtaXR0ZWRcblx0XHQgKiAgQHJldHVybiAge1RvbmUuRW1pdHRlcn0gICAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xuXHQgICAgICAgIHZhciBib3VuZENhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvL2ludm9rZSB0aGUgY2FsbGJhY2tcblx0ICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICAgICAgdGhpcy5vZmYoZXZlbnQsIGJvdW5kQ2FsbGJhY2spO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKTtcblx0ICAgICAgICB0aGlzLm9uKGV2ZW50LCBib3VuZENhbGxiYWNrKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lci5cblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfSAgICBldmVudCAgICAgVGhlIGV2ZW50IHRvIHN0b3AgbGlzdGVuaW5nIHRvLlxuXHRcdCAqICBAcGFyYW0gIHtGdW5jdGlvbj19ICBjYWxsYmFjayAgVGhlIGNhbGxiYWNrIHdoaWNoIHdhcyBib3VuZCB0b1xuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZXZlbnQgd2l0aCBUb25lLkVtaXR0ZXIub24uXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIG5vIGNhbGxiYWNrIGlzIGdpdmVuLCBhbGwgY2FsbGJhY2tzXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cyBhcmUgcmVtb3ZlZC5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuRW1pdHRlcn0gICAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XG5cdCAgICAgICAgdmFyIGV2ZW50cyA9IGV2ZW50LnNwbGl0KC9cXFcrLyk7XG5cdCAgICAgICAgZm9yICh2YXIgZXYgPSAwOyBldiA8IGV2ZW50cy5sZW5ndGg7IGV2KyspIHtcblx0ICAgICAgICAgICAgZXZlbnQgPSBldmVudHNbZXZdO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fZXZlbnRzLmhhc093blByb3BlcnR5KGV2ZW50KSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKFRvbmUuaXNVbmRlZihjYWxsYmFjaykpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnRdID0gW107XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBldmVudExpc3QgPSB0aGlzLl9ldmVudHNbZXZlbnRdO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRMaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudExpc3RbaV0gPT09IGNhbGxiYWNrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudExpc3Quc3BsaWNlKGksIDEpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBJbnZva2UgYWxsIG9mIHRoZSBjYWxsYmFja3MgYm91bmQgdG8gdGhlIGV2ZW50XG5cdFx0ICogIHdpdGggYW55IGFyZ3VtZW50cyBwYXNzZWQgaW4uXG5cdFx0ICogIEBwYXJhbSAge1N0cmluZ30gIGV2ZW50ICBUaGUgbmFtZSBvZiB0aGUgZXZlbnQuXG5cdFx0ICogIEBwYXJhbSB7Kn0gYXJncy4uLiBUaGUgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGZ1bmN0aW9ucyBsaXN0ZW5pbmcuXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkVtaXR0ZXJ9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICBpZiAodGhpcy5fZXZlbnRzKSB7XG5cdCAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5zbGljZSgxKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX2V2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBldmVudExpc3QgPSB0aGlzLl9ldmVudHNbZXZlbnRdLnNsaWNlKDApO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV2ZW50TGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGV2ZW50TGlzdFtpXS5hcHBseSh0aGlzLCBhcmdzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQWRkIEVtaXR0ZXIgZnVuY3Rpb25zIChvbi9vZmYvZW1pdCkgdG8gdGhlIG9iamVjdFxuXHRcdCAqICBAcGFyYW0gIHtPYmplY3R8RnVuY3Rpb259ICBvYmplY3QgIFRoZSBvYmplY3Qgb3IgY2xhc3MgdG8gZXh0ZW5kLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5FbWl0dGVyfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5FbWl0dGVyLm1peGluID0gZnVuY3Rpb24gKG9iamVjdCkge1xuXHQgICAgICAgIHZhciBmdW5jdGlvbnMgPSBbXG5cdCAgICAgICAgICAgICdvbicsXG5cdCAgICAgICAgICAgICdvbmNlJyxcblx0ICAgICAgICAgICAgJ29mZicsXG5cdCAgICAgICAgICAgICdlbWl0J1xuXHQgICAgICAgIF07XG5cdCAgICAgICAgb2JqZWN0Ll9ldmVudHMgPSB7fTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmN0aW9uc1tpXTtcblx0ICAgICAgICAgICAgdmFyIGVtaXR0ZXJGdW5jID0gVG9uZS5FbWl0dGVyLnByb3RvdHlwZVtmdW5jXTtcblx0ICAgICAgICAgICAgb2JqZWN0W2Z1bmNdID0gZW1pdHRlckZ1bmM7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBUb25lLkVtaXR0ZXI7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkVtaXR0ZXJ9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkVtaXR0ZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX2V2ZW50cyA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuRW1pdHRlcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIEEgVGltZWxpbmUgY2xhc3MgZm9yIHNjaGVkdWxpbmcgYW5kIG1haW50YWluaW5nIHN0YXRlXG5cdFx0ICogICAgICAgICBhbG9uZyBhIHRpbWVsaW5lLiBBbGwgZXZlbnRzIG11c3QgaGF2ZSBhIFwidGltZVwiIHByb3BlcnR5LlxuXHRcdCAqICAgICAgICAgSW50ZXJuYWxseSwgZXZlbnRzIGFyZSBzdG9yZWQgaW4gdGltZSBvcmRlciBmb3IgZmFzdFxuXHRcdCAqICAgICAgICAgcmV0cmlldmFsLlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0XHQgKiAgQHBhcmFtIHtQb3NpdGl2ZX0gW21lbW9yeT1JbmZpbml0eV0gVGhlIG51bWJlciBvZiBwcmV2aW91cyBldmVudHMgdGhhdCBhcmUgcmV0YWluZWQuXG5cdFx0ICovXG5cdCAgICBUb25lLlRpbWVsaW5lID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFsnbWVtb3J5J10sIFRvbmUuVGltZWxpbmUpO1xuXHQgICAgICAgIFRvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYXJyYXkgb2Ygc2NoZWR1bGVkIHRpbWVsaW5lIGV2ZW50c1xuXHRcdFx0ICogIEB0eXBlICB7QXJyYXl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3RpbWVsaW5lID0gW107XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG1lbW9yeSBvZiB0aGUgdGltZWxpbmUsIGkuZS5cblx0XHRcdCAqICBob3cgbWFueSBldmVudHMgaW4gdGhlIHBhc3QgaXQgd2lsbCByZXRhaW5cblx0XHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm1lbW9yeSA9IG9wdGlvbnMubWVtb3J5O1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuVGltZWxpbmUpO1xuXHQgICAgLyoqXG5cdFx0ICogIHRoZSBkZWZhdWx0IHBhcmFtZXRlcnNcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAY29uc3Rcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZWxpbmUuZGVmYXVsdHMgPSB7ICdtZW1vcnknOiBJbmZpbml0eSB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIHRpbWVsaW5lLlxuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5UaW1lbGluZSNcblx0XHQgKiAgQG5hbWUgbGVuZ3RoXG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuVGltZWxpbmUucHJvdG90eXBlLCAnbGVuZ3RoJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZWxpbmUubGVuZ3RoO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIEluc2VydCBhbiBldmVudCBvYmplY3Qgb250byB0aGUgdGltZWxpbmUuIEV2ZW50cyBtdXN0IGhhdmUgYSBcInRpbWVcIiBhdHRyaWJ1dGUuXG5cdFx0ICogIEBwYXJhbSAge09iamVjdH0gIGV2ZW50ICBUaGUgZXZlbnQgb2JqZWN0IHRvIGluc2VydCBpbnRvIHRoZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlRpbWVsaW5lfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRpbWVsaW5lLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAvL3RoZSBldmVudCBuZWVkcyB0byBoYXZlIGEgdGltZSBhdHRyaWJ1dGVcblx0ICAgICAgICBpZiAoVG9uZS5pc1VuZGVmKGV2ZW50LnRpbWUpKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVG9uZS5UaW1lbGluZTogZXZlbnRzIG11c3QgaGF2ZSBhIHRpbWUgYXR0cmlidXRlJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGV2ZW50LnRpbWUgPSBldmVudC50aW1lLnZhbHVlT2YoKTtcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9zZWFyY2goZXZlbnQudGltZSk7XG5cdCAgICAgICAgdGhpcy5fdGltZWxpbmUuc3BsaWNlKGluZGV4ICsgMSwgMCwgZXZlbnQpO1xuXHQgICAgICAgIC8vaWYgdGhlIGxlbmd0aCBpcyBtb3JlIHRoYW4gdGhlIG1lbW9yeSwgcmVtb3ZlIHRoZSBwcmV2aW91cyBvbmVzXG5cdCAgICAgICAgaWYgKHRoaXMubGVuZ3RoID4gdGhpcy5tZW1vcnkpIHtcblx0ICAgICAgICAgICAgdmFyIGRpZmYgPSB0aGlzLmxlbmd0aCAtIHRoaXMubWVtb3J5O1xuXHQgICAgICAgICAgICB0aGlzLl90aW1lbGluZS5zcGxpY2UoMCwgZGlmZik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZW1vdmUgYW4gZXZlbnQgZnJvbSB0aGUgdGltZWxpbmUuXG5cdFx0ICogIEBwYXJhbSAge09iamVjdH0gIGV2ZW50ICBUaGUgZXZlbnQgb2JqZWN0IHRvIHJlbW92ZSBmcm9tIHRoZSBsaXN0LlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UaW1lbGluZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fdGltZWxpbmUuaW5kZXhPZihldmVudCk7XG5cdCAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuXHQgICAgICAgICAgICB0aGlzLl90aW1lbGluZS5zcGxpY2UoaW5kZXgsIDEpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgR2V0IHRoZSBuZWFyZXN0IGV2ZW50IHdob3NlIHRpbWUgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lICBUaGUgdGltZSB0byBxdWVyeS5cblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfSAgY29tcGFyYXRvciBXaGljaCB2YWx1ZSBpbiB0aGUgb2JqZWN0IHRvIGNvbXBhcmVcblx0XHQgKiAgQHJldHVybnMge09iamVjdH0gVGhlIGV2ZW50IG9iamVjdCBzZXQgYWZ0ZXIgdGhhdCB0aW1lLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRpbWUsIGNvbXBhcmF0b3IpIHtcblx0ICAgICAgICBjb21wYXJhdG9yID0gVG9uZS5kZWZhdWx0QXJnKGNvbXBhcmF0b3IsICd0aW1lJyk7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fc2VhcmNoKHRpbWUsIGNvbXBhcmF0b3IpO1xuXHQgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVsaW5lW2luZGV4XTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybiB0aGUgZmlyc3QgZXZlbnQgaW4gdGhlIHRpbWVsaW5lIHdpdGhvdXQgcmVtb3ZpbmcgaXRcblx0XHQgKiAgQHJldHVybnMge09iamVjdH0gVGhlIGZpcnN0IGV2ZW50IG9iamVjdFxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZS5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fdGltZWxpbmVbMF07XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybiB0aGUgZmlyc3QgZXZlbnQgaW4gdGhlIHRpbWVsaW5lIGFuZCByZW1vdmUgaXRcblx0XHQgKiAgQHJldHVybnMge09iamVjdH0gVGhlIGZpcnN0IGV2ZW50IG9iamVjdFxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZS5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVsaW5lLnNoaWZ0KCk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEdldCB0aGUgZXZlbnQgd2hpY2ggaXMgc2NoZWR1bGVkIGFmdGVyIHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lICBUaGUgdGltZSB0byBxdWVyeS5cblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfSAgY29tcGFyYXRvciBXaGljaCB2YWx1ZSBpbiB0aGUgb2JqZWN0IHRvIGNvbXBhcmVcblx0XHQgKiAgQHJldHVybnMge09iamVjdH0gVGhlIGV2ZW50IG9iamVjdCBhZnRlciB0aGUgZ2l2ZW4gdGltZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZS5wcm90b3R5cGUuZ2V0QWZ0ZXIgPSBmdW5jdGlvbiAodGltZSwgY29tcGFyYXRvcikge1xuXHQgICAgICAgIGNvbXBhcmF0b3IgPSBUb25lLmRlZmF1bHRBcmcoY29tcGFyYXRvciwgJ3RpbWUnKTtcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9zZWFyY2godGltZSwgY29tcGFyYXRvcik7XG5cdCAgICAgICAgaWYgKGluZGV4ICsgMSA8IHRoaXMuX3RpbWVsaW5lLmxlbmd0aCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZWxpbmVbaW5kZXggKyAxXTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEdldCB0aGUgZXZlbnQgYmVmb3JlIHRoZSBldmVudCBhdCB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgdGltZSAgVGhlIHRpbWUgdG8gcXVlcnkuXG5cdFx0ICogIEBwYXJhbSAge1N0cmluZ30gIGNvbXBhcmF0b3IgV2hpY2ggdmFsdWUgaW4gdGhlIG9iamVjdCB0byBjb21wYXJlXG5cdFx0ICogIEByZXR1cm5zIHtPYmplY3R9IFRoZSBldmVudCBvYmplY3QgYmVmb3JlIHRoZSBnaXZlbiB0aW1lXG5cdFx0ICovXG5cdCAgICBUb25lLlRpbWVsaW5lLnByb3RvdHlwZS5nZXRCZWZvcmUgPSBmdW5jdGlvbiAodGltZSwgY29tcGFyYXRvcikge1xuXHQgICAgICAgIGNvbXBhcmF0b3IgPSBUb25lLmRlZmF1bHRBcmcoY29tcGFyYXRvciwgJ3RpbWUnKTtcblx0ICAgICAgICB2YXIgbGVuID0gdGhpcy5fdGltZWxpbmUubGVuZ3RoO1xuXHQgICAgICAgIC8vaWYgaXQncyBhZnRlciB0aGUgbGFzdCBpdGVtLCByZXR1cm4gdGhlIGxhc3QgaXRlbVxuXHQgICAgICAgIGlmIChsZW4gPiAwICYmIHRoaXMuX3RpbWVsaW5lW2xlbiAtIDFdW2NvbXBhcmF0b3JdIDwgdGltZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZWxpbmVbbGVuIC0gMV07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX3NlYXJjaCh0aW1lLCBjb21wYXJhdG9yKTtcblx0ICAgICAgICBpZiAoaW5kZXggLSAxID49IDApIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVsaW5lW2luZGV4IC0gMV07XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDYW5jZWwgZXZlbnRzIGFmdGVyIHRoZSBnaXZlbiB0aW1lXG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIHRpbWUgIFRoZSB0aW1lIHRvIHF1ZXJ5LlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UaW1lbGluZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZS5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKGFmdGVyKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuX3RpbWVsaW5lLmxlbmd0aCA+IDEpIHtcblx0ICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fc2VhcmNoKGFmdGVyKTtcblx0ICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLl90aW1lbGluZVtpbmRleF0udGltZSA9PT0gYWZ0ZXIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvL2dldCB0aGUgZmlyc3QgaXRlbSB3aXRoIHRoYXQgdGltZVxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBpbmRleDsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVsaW5lW2ldLnRpbWUgPT09IGFmdGVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lbGluZSA9IHRoaXMuX3RpbWVsaW5lLnNsaWNlKDAsIGluZGV4KTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGltZWxpbmUgPSB0aGlzLl90aW1lbGluZS5zbGljZSgwLCBpbmRleCArIDEpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fdGltZWxpbmUgPSBbXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdGltZWxpbmUubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgICAgICAgIC8vdGhlIGZpcnN0IGl0ZW0ncyB0aW1lXG5cdCAgICAgICAgICAgIGlmICh0aGlzLl90aW1lbGluZVswXS50aW1lID49IGFmdGVyKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl90aW1lbGluZSA9IFtdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDYW5jZWwgZXZlbnRzIGJlZm9yZSBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgdGltZSAgVGhlIHRpbWUgdG8gY2FuY2VsIGJlZm9yZS5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuVGltZWxpbmV9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZWxpbmUucHJvdG90eXBlLmNhbmNlbEJlZm9yZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fc2VhcmNoKHRpbWUpO1xuXHQgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3RpbWVsaW5lID0gdGhpcy5fdGltZWxpbmUuc2xpY2UoaW5kZXggKyAxKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogUmV0dXJucyB0aGUgcHJldmlvdXMgZXZlbnQgaWYgdGhlcmUgaXMgb25lLiBudWxsIG90aGVyd2lzZVxuXHRcdCAqIEBwYXJhbSAge09iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHRvIGZpbmQgdGhlIHByZXZpb3VzIG9uZSBvZlxuXHRcdCAqIEByZXR1cm4ge09iamVjdH0gICAgICAgVGhlIGV2ZW50IHJpZ2h0IGJlZm9yZSB0aGUgZ2l2ZW4gZXZlbnRcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZWxpbmUucHJvdG90eXBlLnByZXZpb3VzRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl90aW1lbGluZS5pbmRleE9mKGV2ZW50KTtcblx0ICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl90aW1lbGluZVtpbmRleCAtIDFdO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgRG9lcyBhIGJpbmFyeSBzZWFyY2ggb24gdGhlIHRpbWVsaW5lIGFycmF5IGFuZCByZXR1cm5zIHRoZVxuXHRcdCAqICBuZWFyZXN0IGV2ZW50IGluZGV4IHdob3NlIHRpbWUgaXMgYWZ0ZXIgb3IgZXF1YWwgdG8gdGhlIGdpdmVuIHRpbWUuXG5cdFx0ICogIElmIGEgdGltZSBpcyBzZWFyY2hlZCBiZWZvcmUgdGhlIGZpcnN0IGluZGV4IGluIHRoZSB0aW1lbGluZSwgLTEgaXMgcmV0dXJuZWQuXG5cdFx0ICogIElmIHRoZSB0aW1lIGlzIGFmdGVyIHRoZSBlbmQsIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBpdGVtIGlzIHJldHVybmVkLlxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lXG5cdFx0ICogIEBwYXJhbSAge1N0cmluZ30gIGNvbXBhcmF0b3IgV2hpY2ggdmFsdWUgaW4gdGhlIG9iamVjdCB0byBjb21wYXJlXG5cdFx0ICogIEByZXR1cm4gIHtOdW1iZXJ9IHRoZSBpbmRleCBpbiB0aGUgdGltZWxpbmUgYXJyYXlcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZWxpbmUucHJvdG90eXBlLl9zZWFyY2ggPSBmdW5jdGlvbiAodGltZSwgY29tcGFyYXRvcikge1xuXHQgICAgICAgIGlmICh0aGlzLl90aW1lbGluZS5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgcmV0dXJuIC0xO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb21wYXJhdG9yID0gVG9uZS5kZWZhdWx0QXJnKGNvbXBhcmF0b3IsICd0aW1lJyk7XG5cdCAgICAgICAgdmFyIGJlZ2lubmluZyA9IDA7XG5cdCAgICAgICAgdmFyIGxlbiA9IHRoaXMuX3RpbWVsaW5lLmxlbmd0aDtcblx0ICAgICAgICB2YXIgZW5kID0gbGVuO1xuXHQgICAgICAgIGlmIChsZW4gPiAwICYmIHRoaXMuX3RpbWVsaW5lW2xlbiAtIDFdW2NvbXBhcmF0b3JdIDw9IHRpbWUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGxlbiAtIDE7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHdoaWxlIChiZWdpbm5pbmcgPCBlbmQpIHtcblx0ICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBtaWRwb2ludCBmb3Igcm91Z2hseSBlcXVhbCBwYXJ0aXRpb25cblx0ICAgICAgICAgICAgdmFyIG1pZFBvaW50ID0gTWF0aC5mbG9vcihiZWdpbm5pbmcgKyAoZW5kIC0gYmVnaW5uaW5nKSAvIDIpO1xuXHQgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLl90aW1lbGluZVttaWRQb2ludF07XG5cdCAgICAgICAgICAgIHZhciBuZXh0RXZlbnQgPSB0aGlzLl90aW1lbGluZVttaWRQb2ludCArIDFdO1xuXHQgICAgICAgICAgICBpZiAoZXZlbnRbY29tcGFyYXRvcl0gPT09IHRpbWUpIHtcblx0ICAgICAgICAgICAgICAgIC8vY2hvb3NlIHRoZSBsYXN0IG9uZSB0aGF0IGhhcyB0aGUgc2FtZSB0aW1lXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gbWlkUG9pbnQ7IGkgPCB0aGlzLl90aW1lbGluZS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0RXZlbnQgPSB0aGlzLl90aW1lbGluZVtpXTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGVzdEV2ZW50W2NvbXBhcmF0b3JdID09PSB0aW1lKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1pZFBvaW50ID0gaTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbWlkUG9pbnQ7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnRbY29tcGFyYXRvcl0gPCB0aW1lICYmIG5leHRFdmVudFtjb21wYXJhdG9yXSA+IHRpbWUpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBtaWRQb2ludDtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudFtjb21wYXJhdG9yXSA+IHRpbWUpIHtcblx0ICAgICAgICAgICAgICAgIC8vc2VhcmNoIGxvd2VyXG5cdCAgICAgICAgICAgICAgICBlbmQgPSBtaWRQb2ludDtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vc2VhcmNoIHVwcGVyXG5cdCAgICAgICAgICAgICAgICBiZWdpbm5pbmcgPSBtaWRQb2ludCArIDE7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIC0xO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBJbnRlcm5hbCBpdGVyYXRvci4gQXBwbGllcyBleHRyYSBzYWZldHkgY2hlY2tzIGZvclxuXHRcdCAqICByZW1vdmluZyBpdGVtcyBmcm9tIHRoZSBhcnJheS5cblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb259ICBjYWxsYmFja1xuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXI9fSAgICBsb3dlckJvdW5kXG5cdFx0ICogIEBwYXJhbSAge051bWJlcj19ICAgIHVwcGVyQm91bmRcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZWxpbmUucHJvdG90eXBlLl9pdGVyYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG5cdCAgICAgICAgbG93ZXJCb3VuZCA9IFRvbmUuZGVmYXVsdEFyZyhsb3dlckJvdW5kLCAwKTtcblx0ICAgICAgICB1cHBlckJvdW5kID0gVG9uZS5kZWZhdWx0QXJnKHVwcGVyQm91bmQsIHRoaXMuX3RpbWVsaW5lLmxlbmd0aCAtIDEpO1xuXHQgICAgICAgIHRoaXMuX3RpbWVsaW5lLnNsaWNlKGxvd2VyQm91bmQsIHVwcGVyQm91bmQgKyAxKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGV2ZW50KTtcblx0ICAgICAgICB9LmJpbmQodGhpcykpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBJdGVyYXRlIG92ZXIgZXZlcnl0aGluZyBpbiB0aGUgYXJyYXlcblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb259ICBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIHdpdGggZXZlcnkgaXRlbVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UaW1lbGluZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHQgICAgICAgIHRoaXMuX2l0ZXJhdGUoY2FsbGJhY2spO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBJdGVyYXRlIG92ZXIgZXZlcnl0aGluZyBpbiB0aGUgYXJyYXkgYXQgb3IgYmVmb3JlIHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lIFRoZSB0aW1lIHRvIGNoZWNrIGlmIGl0ZW1zIGFyZSBiZWZvcmVcblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb259ICBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIHdpdGggZXZlcnkgaXRlbVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UaW1lbGluZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZS5wcm90b3R5cGUuZm9yRWFjaEJlZm9yZSA9IGZ1bmN0aW9uICh0aW1lLCBjYWxsYmFjaykge1xuXHQgICAgICAgIC8vaXRlcmF0ZSBvdmVyIHRoZSBpdGVtcyBpbiByZXZlcnNlIHNvIHRoYXQgcmVtb3ZpbmcgYW4gaXRlbSBkb2Vzbid0IGJyZWFrIHRoaW5nc1xuXHQgICAgICAgIHZhciB1cHBlckJvdW5kID0gdGhpcy5fc2VhcmNoKHRpbWUpO1xuXHQgICAgICAgIGlmICh1cHBlckJvdW5kICE9PSAtMSkge1xuXHQgICAgICAgICAgICB0aGlzLl9pdGVyYXRlKGNhbGxiYWNrLCAwLCB1cHBlckJvdW5kKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEl0ZXJhdGUgb3ZlciBldmVyeXRoaW5nIGluIHRoZSBhcnJheSBhZnRlciB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgdGltZSBUaGUgdGltZSB0byBjaGVjayBpZiBpdGVtcyBhcmUgYmVmb3JlXG5cdFx0ICogIEBwYXJhbSAge0Z1bmN0aW9ufSAgY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGludm9rZSB3aXRoIGV2ZXJ5IGl0ZW1cblx0XHQgKiAgQHJldHVybnMge1RvbmUuVGltZWxpbmV9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZWxpbmUucHJvdG90eXBlLmZvckVhY2hBZnRlciA9IGZ1bmN0aW9uICh0aW1lLCBjYWxsYmFjaykge1xuXHQgICAgICAgIC8vaXRlcmF0ZSBvdmVyIHRoZSBpdGVtcyBpbiByZXZlcnNlIHNvIHRoYXQgcmVtb3ZpbmcgYW4gaXRlbSBkb2Vzbid0IGJyZWFrIHRoaW5nc1xuXHQgICAgICAgIHZhciBsb3dlckJvdW5kID0gdGhpcy5fc2VhcmNoKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX2l0ZXJhdGUoY2FsbGJhY2ssIGxvd2VyQm91bmQgKyAxKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgSXRlcmF0ZSBvdmVyIGV2ZXJ5dGhpbmcgaW4gdGhlIGFycmF5IGJldHdlZW4gdGhlIHN0YXJ0VGltZSBhbmQgZW5kVGltZS4gXG5cdFx0ICogIFRoZSB0aW1lcmFuZ2UgaXMgaW5jbHVzaXZlIG9mIHRoZSBzdGFydFRpbWUsIGJ1dCBleGNsdXNpdmUgb2YgdGhlIGVuZFRpbWUuIFxuXHRcdCAqICByYW5nZSA9IFtzdGFydFRpbWUsIGVuZFRpbWUpLiBcblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgc3RhcnRUaW1lIFRoZSB0aW1lIHRvIGNoZWNrIGlmIGl0ZW1zIGFyZSBiZWZvcmVcblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgZW5kVGltZSBUaGUgZW5kIG9mIHRoZSB0ZXN0IGludGVydmFsLiBcblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb259ICBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIHdpdGggZXZlcnkgaXRlbVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UaW1lbGluZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZS5wcm90b3R5cGUuZm9yRWFjaEJldHdlZW4gPSBmdW5jdGlvbiAoc3RhcnRUaW1lLCBlbmRUaW1lLCBjYWxsYmFjaykge1xuXHQgICAgICAgIHZhciBsb3dlckJvdW5kID0gdGhpcy5fc2VhcmNoKHN0YXJ0VGltZSk7XG5cdCAgICAgICAgdmFyIHVwcGVyQm91bmQgPSB0aGlzLl9zZWFyY2goZW5kVGltZSk7XG5cdCAgICAgICAgaWYgKGxvd2VyQm91bmQgIT09IC0xICYmIHVwcGVyQm91bmQgIT09IC0xKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl90aW1lbGluZVtsb3dlckJvdW5kXS50aW1lICE9PSBzdGFydFRpbWUpIHtcblx0ICAgICAgICAgICAgICAgIGxvd2VyQm91bmQgKz0gMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvL2V4Y2x1c2l2ZSBvZiB0aGUgZW5kIHRpbWVcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVsaW5lW3VwcGVyQm91bmRdLnRpbWUgPT09IGVuZFRpbWUpIHtcblx0ICAgICAgICAgICAgICAgIHVwcGVyQm91bmQgLT0gMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLl9pdGVyYXRlKGNhbGxiYWNrLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGxvd2VyQm91bmQgPT09IC0xKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2l0ZXJhdGUoY2FsbGJhY2ssIDAsIHVwcGVyQm91bmQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgSXRlcmF0ZSBvdmVyIGV2ZXJ5dGhpbmcgaW4gdGhlIGFycmF5IGF0IG9yIGFmdGVyIHRoZSBnaXZlbiB0aW1lLiBTaW1pbGFyIHRvXG5cdFx0ICogIGZvckVhY2hBZnRlciwgYnV0IGluY2x1ZGVzIHRoZSBpdGVtKHMpIGF0IHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lIFRoZSB0aW1lIHRvIGNoZWNrIGlmIGl0ZW1zIGFyZSBiZWZvcmVcblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb259ICBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIHdpdGggZXZlcnkgaXRlbVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UaW1lbGluZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZS5wcm90b3R5cGUuZm9yRWFjaEZyb20gPSBmdW5jdGlvbiAodGltZSwgY2FsbGJhY2spIHtcblx0ICAgICAgICAvL2l0ZXJhdGUgb3ZlciB0aGUgaXRlbXMgaW4gcmV2ZXJzZSBzbyB0aGF0IHJlbW92aW5nIGFuIGl0ZW0gZG9lc24ndCBicmVhayB0aGluZ3Ncblx0ICAgICAgICB2YXIgbG93ZXJCb3VuZCA9IHRoaXMuX3NlYXJjaCh0aW1lKTtcblx0ICAgICAgICAvL3dvcmsgYmFja3dhcmRzIHVudGlsIHRoZSBldmVudCB0aW1lIGlzIGxlc3MgdGhhbiB0aW1lXG5cdCAgICAgICAgd2hpbGUgKGxvd2VyQm91bmQgPj0gMCAmJiB0aGlzLl90aW1lbGluZVtsb3dlckJvdW5kXS50aW1lID49IHRpbWUpIHtcblx0ICAgICAgICAgICAgbG93ZXJCb3VuZC0tO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9pdGVyYXRlKGNhbGxiYWNrLCBsb3dlckJvdW5kICsgMSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEl0ZXJhdGUgb3ZlciBldmVyeXRoaW5nIGluIHRoZSBhcnJheSBhdCB0aGUgZ2l2ZW4gdGltZVxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lIFRoZSB0aW1lIHRvIGNoZWNrIGlmIGl0ZW1zIGFyZSBiZWZvcmVcblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb259ICBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIHdpdGggZXZlcnkgaXRlbVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UaW1lbGluZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZS5wcm90b3R5cGUuZm9yRWFjaEF0VGltZSA9IGZ1bmN0aW9uICh0aW1lLCBjYWxsYmFjaykge1xuXHQgICAgICAgIC8vaXRlcmF0ZSBvdmVyIHRoZSBpdGVtcyBpbiByZXZlcnNlIHNvIHRoYXQgcmVtb3ZpbmcgYW4gaXRlbSBkb2Vzbid0IGJyZWFrIHRoaW5nc1xuXHQgICAgICAgIHZhciB1cHBlckJvdW5kID0gdGhpcy5fc2VhcmNoKHRpbWUpO1xuXHQgICAgICAgIGlmICh1cHBlckJvdW5kICE9PSAtMSkge1xuXHQgICAgICAgICAgICB0aGlzLl9pdGVyYXRlKGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRpbWUgPT09IHRpbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGV2ZW50KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSwgMCwgdXBwZXJCb3VuZCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuVGltZWxpbmV9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRpbWVsaW5lLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl90aW1lbGluZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuVGltZWxpbmU7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIGlmIChUb25lLnN1cHBvcnRlZCkge1xuXHQgICAgICAgIGlmICghd2luZG93Lmhhc093blByb3BlcnR5KCdPZmZsaW5lQXVkaW9Db250ZXh0JykgJiYgd2luZG93Lmhhc093blByb3BlcnR5KCd3ZWJraXRPZmZsaW5lQXVkaW9Db250ZXh0JykpIHtcblx0ICAgICAgICAgICAgd2luZG93Lk9mZmxpbmVBdWRpb0NvbnRleHQgPSB3aW5kb3cud2Via2l0T2ZmbGluZUF1ZGlvQ29udGV4dDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9yZXR1cm5zIHByb21pc2U/XG5cdCAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgT2ZmbGluZUF1ZGlvQ29udGV4dCgxLCAxLCA0NDEwMCk7XG5cdCAgICAgICAgdmFyIHJldCA9IGNvbnRleHQuc3RhcnRSZW5kZXJpbmcoKTtcblx0ICAgICAgICBpZiAoIShyZXQgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuXHQgICAgICAgICAgICBPZmZsaW5lQXVkaW9Db250ZXh0LnByb3RvdHlwZS5fbmF0aXZlX3N0YXJ0UmVuZGVyaW5nID0gT2ZmbGluZUF1ZGlvQ29udGV4dC5wcm90b3R5cGUuc3RhcnRSZW5kZXJpbmc7XG5cdCAgICAgICAgICAgIE9mZmxpbmVBdWRpb0NvbnRleHQucHJvdG90eXBlLnN0YXJ0UmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChkb25lKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmNvbXBsZXRlID0gZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9uZShlLnJlbmRlcmVkQnVmZmVyKTtcblx0ICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX25hdGl2ZV9zdGFydFJlbmRlcmluZygpO1xuXHQgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIGlmIChUb25lLnN1cHBvcnRlZCkge1xuXHQgICAgICAgIGlmICghd2luZG93Lmhhc093blByb3BlcnR5KCdBdWRpb0NvbnRleHQnKSAmJiB3aW5kb3cuaGFzT3duUHJvcGVydHkoJ3dlYmtpdEF1ZGlvQ29udGV4dCcpKSB7XG5cdCAgICAgICAgICAgIHdpbmRvdy5BdWRpb0NvbnRleHQgPSB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0O1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvL25vdCBmdW5jdGlvbmFsbHkgZXF1aXZhbGVudCwgYnV0IG9ubHkgYW4gQVBJIHBsYWNlaG9sZGVyXG5cdCAgICAgICAgaWYgKCFBdWRpb0NvbnRleHQucHJvdG90eXBlLmNsb3NlKSB7XG5cdCAgICAgICAgICAgIEF1ZGlvQ29udGV4dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoVG9uZS5pc0Z1bmN0aW9uKHRoaXMuc3VzcGVuZCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnN1c3BlbmQoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9ub3QgZnVuY3Rpb25hbGx5IGVxdWl2YWxlbnRcblx0ICAgICAgICBpZiAoIUF1ZGlvQ29udGV4dC5wcm90b3R5cGUucmVzdW1lKSB7XG5cdCAgICAgICAgICAgIEF1ZGlvQ29udGV4dC5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvL2NyZWF0ZUdhaW5cblx0ICAgICAgICBpZiAoIUF1ZGlvQ29udGV4dC5wcm90b3R5cGUuY3JlYXRlR2FpbiAmJiBBdWRpb0NvbnRleHQucHJvdG90eXBlLmNyZWF0ZUdhaW5Ob2RlKSB7XG5cdCAgICAgICAgICAgIEF1ZGlvQ29udGV4dC5wcm90b3R5cGUuY3JlYXRlR2FpbiA9IEF1ZGlvQ29udGV4dC5wcm90b3R5cGUuY3JlYXRlR2Fpbk5vZGU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vY3JlYXRlRGVsYXlcblx0ICAgICAgICBpZiAoIUF1ZGlvQ29udGV4dC5wcm90b3R5cGUuY3JlYXRlRGVsYXkgJiYgQXVkaW9Db250ZXh0LnByb3RvdHlwZS5jcmVhdGVEZWxheU5vZGUpIHtcblx0ICAgICAgICAgICAgQXVkaW9Db250ZXh0LnByb3RvdHlwZS5jcmVhdGVEZWxheSA9IEF1ZGlvQ29udGV4dC5wcm90b3R5cGUuY3JlYXRlRGVsYXlOb2RlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvL3Rlc3QgZGVjb2RlQXVkaW9EYXRhIHJldHVybnMgYSBwcm9taXNlXG5cdCAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vaGF5b25hby93ZWItYXVkaW8tYXBpLXNoaW0vYmxvYi9tYXN0ZXIvc3JjL0F1ZGlvQ29udGV4dC5qc1xuXHQgICAgICAgIC8vIE1JVCBMaWNlbnNlIChjKSAyMDE1IEBtb2hheW9uYW9cblx0ICAgICAgICB2YXIgZGVjb2RlQXVkaW9EYXRhUHJvbWlzZSA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBvZmZsaW5lQ29udGV4dCA9IG5ldyBPZmZsaW5lQXVkaW9Db250ZXh0KDEsIDEsIDQ0MTAwKTtcblx0ICAgICAgICB2YXIgYXVkaW9EYXRhID0gbmV3IFVpbnQzMkFycmF5KFtcblx0ICAgICAgICAgICAgMTE3OTAxMTQxMCxcblx0ICAgICAgICAgICAgNDgsXG5cdCAgICAgICAgICAgIDExNjMyODA3MjcsXG5cdCAgICAgICAgICAgIDU0NDUwMTA5NCxcblx0ICAgICAgICAgICAgMTYsXG5cdCAgICAgICAgICAgIDEzMTA3Myxcblx0ICAgICAgICAgICAgNDQxMDAsXG5cdCAgICAgICAgICAgIDE3NjQwMCxcblx0ICAgICAgICAgICAgMTA0ODU4MCxcblx0ICAgICAgICAgICAgMTYzNTAxNzA2MCxcblx0ICAgICAgICAgICAgOCxcblx0ICAgICAgICAgICAgMCxcblx0ICAgICAgICAgICAgMCxcblx0ICAgICAgICAgICAgMCxcblx0ICAgICAgICAgICAgMFxuXHQgICAgICAgIF0pLmJ1ZmZlcjtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICB2YXIgcmV0ID0gb2ZmbGluZUNvbnRleHQuZGVjb2RlQXVkaW9EYXRhKGF1ZGlvRGF0YSk7XG5cdCAgICAgICAgICAgIGlmIChyZXQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG5cdCAgICAgICAgICAgICAgICBkZWNvZGVBdWRpb0RhdGFQcm9taXNlID0gdHJ1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgZGVjb2RlQXVkaW9EYXRhUHJvbWlzZSA9IGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIWRlY29kZUF1ZGlvRGF0YVByb21pc2UpIHtcblx0ICAgICAgICAgICAgQXVkaW9Db250ZXh0LnByb3RvdHlwZS5fbmF0aXZlX2RlY29kZUF1ZGlvRGF0YSA9IEF1ZGlvQ29udGV4dC5wcm90b3R5cGUuZGVjb2RlQXVkaW9EYXRhO1xuXHQgICAgICAgICAgICBBdWRpb0NvbnRleHQucHJvdG90eXBlLmRlY29kZUF1ZGlvRGF0YSA9IGZ1bmN0aW9uIChhdWRpb0RhdGEpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoc3VjY2VzcywgZXJyb3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9uYXRpdmVfZGVjb2RlQXVkaW9EYXRhKGF1ZGlvRGF0YSwgc3VjY2VzcywgZXJyb3IpO1xuXHQgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgV3JhcHBlciBhcm91bmQgdGhlIG5hdGl2ZSBBdWRpb0NvbnRleHQuXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkVtaXR0ZXJ9XG5cdFx0ICogIEBwYXJhbSB7QXVkaW9Db250ZXh0PX0gY29udGV4dCBvcHRpb25hbGx5IHBhc3MgaW4gYSBjb250ZXh0XG5cdFx0ICovXG5cdCAgICBUb25lLkNvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5FbWl0dGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWydjb250ZXh0J10sIFRvbmUuQ29udGV4dCk7XG5cdCAgICAgICAgaWYgKCFvcHRpb25zLmNvbnRleHQpIHtcblx0ICAgICAgICAgICAgb3B0aW9ucy5jb250ZXh0ID0gbmV3IHdpbmRvdy5BdWRpb0NvbnRleHQoKTtcblx0ICAgICAgICAgICAgaWYgKCFvcHRpb25zLmNvbnRleHQpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGNyZWF0ZSBBdWRpb0NvbnRleHQuIFBvc3NpYmx5IHRvbyBtYW55IEF1ZGlvQ29udGV4dHMgcnVubmluZyBhbHJlYWR5LicpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuX2NvbnRleHQgPSBvcHRpb25zLmNvbnRleHQ7XG5cdCAgICAgICAgLy8gZXh0ZW5kIGFsbCBvZiB0aGUgbWV0aG9kc1xuXHQgICAgICAgIGZvciAodmFyIHByb3AgaW4gdGhpcy5fY29udGV4dCkge1xuXHQgICAgICAgICAgICB0aGlzLl9kZWZpbmVQcm9wZXJ0eSh0aGlzLl9jb250ZXh0LCBwcm9wKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGRlZmF1bHQgbGF0ZW5jeSBoaW50XG5cdFx0XHQgKiAgQHR5cGUgIHtTdHJpbmd9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2xhdGVuY3lIaW50ID0gb3B0aW9ucy5sYXRlbmN5SGludDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBBbiBvYmplY3QgY29udGFpbmluZyBhbGwgb2YgdGhlIGNvbnN0YW50cyBBdWRpb0J1ZmZlclNvdXJjZU5vZGVzXG5cdFx0XHQgKiAgQHR5cGUgIHtPYmplY3R9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2NvbnN0YW50cyA9IHt9O1xuXHQgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAgICAgLy8gV09SS0VSXG5cdCAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW1vdW50IG9mIHRpbWUgZXZlbnRzIGFyZSBzY2hlZHVsZWRcblx0XHRcdCAqICBpbnRvIHRoZSBmdXR1cmVcblx0XHRcdCAqICBAdHlwZSAge051bWJlcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMubG9va0FoZWFkID0gb3B0aW9ucy5sb29rQWhlYWQ7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQSByZWZlcmVuY2UgdG8gdGhlIGFjdHVhbCBjb21wdXRlZCB1cGRhdGUgaW50ZXJ2YWxcblx0XHRcdCAqICBAdHlwZSAge051bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fY29tcHV0ZWRVcGRhdGVJbnRlcnZhbCA9IDA7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQSByZWxpYWJsZSBjYWxsYmFjayBtZXRob2Rcblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlICB7VGlja2VyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fdGlja2VyID0gbmV3IFRpY2tlcih0aGlzLmVtaXQuYmluZCh0aGlzLCAndGljaycpLCBvcHRpb25zLmNsb2NrU291cmNlLCBvcHRpb25zLnVwZGF0ZUludGVydmFsKTtcblx0ICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgICAgIC8vIFRJTUVPVVRTXG5cdCAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgICAgICAvKipcblx0XHRcdCAqICBBbGwgb2YgdGhlIHNldFRpbWVvdXQgZXZlbnRzLlxuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5UaW1lbGluZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fdGltZW91dHMgPSBuZXcgVG9uZS5UaW1lbGluZSgpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSB0aW1lb3V0IGlkIGNvdW50ZXJcblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtOdW1iZXJ9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl90aW1lb3V0SWRzID0gMDtcblx0ICAgICAgICB0aGlzLm9uKCd0aWNrJywgdGhpcy5fdGltZW91dExvb3AuYmluZCh0aGlzKSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5Db250ZXh0LCBUb25lLkVtaXR0ZXIpO1xuXHQgICAgVG9uZS5FbWl0dGVyLm1peGluKFRvbmUuQ29udGV4dCk7XG5cdCAgICAvKipcblx0XHQgKiBkZWZhdWx0c1xuXHRcdCAqIEBzdGF0aWNcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Db250ZXh0LmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdjbG9ja1NvdXJjZSc6ICd3b3JrZXInLFxuXHQgICAgICAgICdsYXRlbmN5SGludCc6ICdpbnRlcmFjdGl2ZScsXG5cdCAgICAgICAgJ2xvb2tBaGVhZCc6IDAuMSxcblx0ICAgICAgICAndXBkYXRlSW50ZXJ2YWwnOiAwLjAzXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIERlZmluZSBhIHByb3BlcnR5IG9uIHRoaXMgVG9uZS5Db250ZXh0LlxuXHRcdCAqICBUaGlzIGlzIHVzZWQgdG8gZXh0ZW5kIHRoZSBuYXRpdmUgQXVkaW9Db250ZXh0XG5cdFx0ICogIEBwYXJhbSAge0F1ZGlvQ29udGV4dH0gIGNvbnRleHRcblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfSAgcHJvcFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Db250ZXh0LnByb3RvdHlwZS5fZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAoY29udGV4dCwgcHJvcCkge1xuXHQgICAgICAgIGlmIChUb25lLmlzVW5kZWYodGhpc1twcm9wXSkpIHtcblx0ICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3AsIHtcblx0ICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dFtwcm9wXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dFtwcm9wXS5iaW5kKGNvbnRleHQpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0W3Byb3BdO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb250ZXh0W3Byb3BdID0gdmFsO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBjdXJyZW50IGF1ZGlvIGNvbnRleHQgdGltZVxuXHRcdCAqICBAcmV0dXJuICB7TnVtYmVyfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Db250ZXh0LnByb3RvdHlwZS5ub3cgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuY3VycmVudFRpbWUgKyB0aGlzLmxvb2tBaGVhZDtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUHJvbWlzZSB3aGljaCBpcyBpbnZva2VkIHdoZW4gdGhlIGNvbnRleHQgaXMgcnVubmluZy5cblx0XHQgKiAgVHJpZXMgdG8gcmVzdW1lIHRoZSBjb250ZXh0IGlmIGl0J3Mgbm90IHN0YXJ0ZWQuXG5cdFx0ICogIEByZXR1cm4gIHtQcm9taXNlfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Db250ZXh0LnByb3RvdHlwZS5yZWFkeSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGRvbmUpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnRleHQuc3RhdGUgPT09ICdydW5uaW5nJykge1xuXHQgICAgICAgICAgICAgICAgZG9uZSgpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fY29udGV4dC5yZXN1bWUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFByb21pc2Ugd2hpY2ggaXMgaW52b2tlZCB3aGVuIHRoZSBjb250ZXh0IGlzIHJ1bm5pbmcuXG5cdFx0ICogIFRyaWVzIHRvIHJlc3VtZSB0aGUgY29udGV4dCBpZiBpdCdzIG5vdCBzdGFydGVkLlxuXHRcdCAqICBAcmV0dXJuICB7UHJvbWlzZX1cblx0XHQgKi9cblx0ICAgIFRvbmUuQ29udGV4dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuY2xvc2UoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgVG9uZS5Db250ZXh0LmVtaXQoJ2Nsb3NlJywgdGhpcyk7XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgR2VuZXJhdGUgYSBsb29wZWQgYnVmZmVyIGF0IHNvbWUgY29uc3RhbnQgdmFsdWUuXG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIHZhbFxuXHRcdCAqICBAcmV0dXJuICB7QnVmZmVyU291cmNlTm9kZX1cblx0XHQgKi9cblx0ICAgIFRvbmUuQ29udGV4dC5wcm90b3R5cGUuZ2V0Q29uc3RhbnQgPSBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuX2NvbnN0YW50c1t2YWxdKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb25zdGFudHNbdmFsXTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5fY29udGV4dC5jcmVhdGVCdWZmZXIoMSwgMTI4LCB0aGlzLl9jb250ZXh0LnNhbXBsZVJhdGUpO1xuXHQgICAgICAgICAgICB2YXIgYXJyID0gYnVmZmVyLmdldENoYW5uZWxEYXRhKDApO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgYXJyW2ldID0gdmFsO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBjb25zdGFudCA9IHRoaXMuX2NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG5cdCAgICAgICAgICAgIGNvbnN0YW50LmNoYW5uZWxDb3VudCA9IDE7XG5cdCAgICAgICAgICAgIGNvbnN0YW50LmNoYW5uZWxDb3VudE1vZGUgPSAnZXhwbGljaXQnO1xuXHQgICAgICAgICAgICBjb25zdGFudC5idWZmZXIgPSBidWZmZXI7XG5cdCAgICAgICAgICAgIGNvbnN0YW50Lmxvb3AgPSB0cnVlO1xuXHQgICAgICAgICAgICBjb25zdGFudC5zdGFydCgwKTtcblx0ICAgICAgICAgICAgdGhpcy5fY29uc3RhbnRzW3ZhbF0gPSBjb25zdGFudDtcblx0ICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50O1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHByaXZhdGUgbG9vcCB3aGljaCBrZWVwcyB0cmFjayBvZiB0aGUgY29udGV4dCBzY2hlZHVsZWQgdGltZW91dHNcblx0XHQgKiAgSXMgaW52b2tlZCBmcm9tIHRoZSBjbG9jayBzb3VyY2Vcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuQ29udGV4dC5wcm90b3R5cGUuX3RpbWVvdXRMb29wID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub3cgPSB0aGlzLm5vdygpO1xuXHQgICAgICAgIHdoaWxlICh0aGlzLl90aW1lb3V0cyAmJiB0aGlzLl90aW1lb3V0cy5sZW5ndGggJiYgdGhpcy5fdGltZW91dHMucGVlaygpLnRpbWUgPD0gbm93KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3RpbWVvdXRzLnNoaWZ0KCkuY2FsbGJhY2soKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEEgc2V0VGltZW91dCB3aGljaCBpcyBnYXVyZW50ZWVkIGJ5IHRoZSBjbG9jayBzb3VyY2UuXG5cdFx0ICogIEFsc28gcnVucyBpbiB0aGUgb2ZmbGluZSBjb250ZXh0LlxuXHRcdCAqICBAcGFyYW0gIHtGdW5jdGlvbn0gIGZuICAgICAgIFRoZSBjYWxsYmFjayB0byBpbnZva2Vcblx0XHQgKiAgQHBhcmFtICB7U2Vjb25kc30gICAgdGltZW91dCAgVGhlIHRpbWVvdXQgaW4gc2Vjb25kc1xuXHRcdCAqICBAcmV0dXJucyB7TnVtYmVyfSBJRCB0byB1c2Ugd2hlbiBpbnZva2luZyBUb25lLkNvbnRleHQuY2xlYXJUaW1lb3V0XG5cdFx0ICovXG5cdCAgICBUb25lLkNvbnRleHQucHJvdG90eXBlLnNldFRpbWVvdXQgPSBmdW5jdGlvbiAoZm4sIHRpbWVvdXQpIHtcblx0ICAgICAgICB0aGlzLl90aW1lb3V0SWRzKys7XG5cdCAgICAgICAgdmFyIG5vdyA9IHRoaXMubm93KCk7XG5cdCAgICAgICAgdGhpcy5fdGltZW91dHMuYWRkKHtcblx0ICAgICAgICAgICAgY2FsbGJhY2s6IGZuLFxuXHQgICAgICAgICAgICB0aW1lOiBub3cgKyB0aW1lb3V0LFxuXHQgICAgICAgICAgICBpZDogdGhpcy5fdGltZW91dElkc1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybiB0aGlzLl90aW1lb3V0SWRzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhcnMgYSBwcmV2aW91c2x5IHNjaGVkdWxlZCB0aW1lb3V0IHdpdGggVG9uZS5jb250ZXh0LnNldFRpbWVvdXRcblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgaWQgIFRoZSBJRCByZXR1cm5lZCBmcm9tIHNldFRpbWVvdXRcblx0XHQgKiAgQHJldHVybiAge1RvbmUuQ29udGV4dH0gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQ29udGV4dC5wcm90b3R5cGUuY2xlYXJUaW1lb3V0ID0gZnVuY3Rpb24gKGlkKSB7XG5cdCAgICAgICAgdGhpcy5fdGltZW91dHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgaWYgKGV2ZW50LmlkID09PSBpZCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoZXZlbnQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEhvdyBvZnRlbiB0aGUgV2ViIFdvcmtlciBjYWxsYmFjayBpcyBpbnZva2VkLlxuXHRcdCAqICBUaGlzIG51bWJlciBjb3JyZXNwb25kcyB0byBob3cgcmVzcG9uc2l2ZSB0aGUgc2NoZWR1bGluZ1xuXHRcdCAqICBjYW4gYmUuIENvbnRleHQudXBkYXRlSW50ZXJ2YWwgKyBDb250ZXh0Lmxvb2tBaGVhZCBnaXZlcyB5b3UgdGhlXG5cdFx0ICogIHRvdGFsIGxhdGVuY3kgYmV0d2VlbiBzY2hlZHVsaW5nIGFuIGV2ZW50IGFuZCBoZWFyaW5nIGl0LlxuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5Db250ZXh0I1xuXHRcdCAqICBAbmFtZSB1cGRhdGVJbnRlcnZhbFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQ29udGV4dC5wcm90b3R5cGUsICd1cGRhdGVJbnRlcnZhbCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpY2tlci51cGRhdGVJbnRlcnZhbDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGludGVydmFsKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3RpY2tlci51cGRhdGVJbnRlcnZhbCA9IGludGVydmFsO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFdoYXQgdGhlIHNvdXJjZSBvZiB0aGUgY2xvY2sgaXMsIGVpdGhlciBcIndvcmtlclwiIChXZWIgV29ya2VyIFtkZWZhdWx0XSksXG5cdFx0ICogIFwidGltZW91dFwiIChzZXRUaW1lb3V0KSwgb3IgXCJvZmZsaW5lXCIgKG5vbmUpLlxuXHRcdCAqICBAdHlwZSB7U3RyaW5nfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5Db250ZXh0I1xuXHRcdCAqICBAbmFtZSBjbG9ja1NvdXJjZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQ29udGV4dC5wcm90b3R5cGUsICdjbG9ja1NvdXJjZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpY2tlci50eXBlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZSkge1xuXHQgICAgICAgICAgICB0aGlzLl90aWNrZXIudHlwZSA9IHR5cGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHR5cGUgb2YgcGxheWJhY2ssIHdoaWNoIGFmZmVjdHMgdHJhZGVvZmZzIGJldHdlZW4gYXVkaW9cblx0XHQgKiAgb3V0cHV0IGxhdGVuY3kgYW5kIHJlc3BvbnNpdmVuZXNzLlxuXHRcdCAqXG5cdFx0ICogIEluIGFkZGl0aW9uIHRvIHNldHRpbmcgdGhlIHZhbHVlIGluIHNlY29uZHMsIHRoZSBsYXRlbmN5SGludCBhbHNvXG5cdFx0ICogIGFjY2VwdHMgdGhlIHN0cmluZ3MgXCJpbnRlcmFjdGl2ZVwiIChwcmlvcml0aXplcyBsb3cgbGF0ZW5jeSksXG5cdFx0ICogIFwicGxheWJhY2tcIiAocHJpb3JpdGl6ZXMgc3VzdGFpbmVkIHBsYXliYWNrKSwgXCJiYWxhbmNlZFwiIChiYWxhbmNlc1xuXHRcdCAqICBsYXRlbmN5IGFuZCBwZXJmb3JtYW5jZSksIGFuZCBcImZhc3Rlc3RcIiAobG93ZXN0IGxhdGVuY3ksIG1pZ2h0IGdsaXRjaCBtb3JlIG9mdGVuKS5cblx0XHQgKiAgQHR5cGUge1N0cmluZ3xTZWNvbmRzfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5Db250ZXh0I1xuXHRcdCAqICBAbmFtZSBsYXRlbmN5SGludFxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vc2V0IHRoZSBsb29rQWhlYWQgdG8gMC4zIHNlY29uZHNcblx0XHQgKiBUb25lLmNvbnRleHQubGF0ZW5jeUhpbnQgPSAwLjM7XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Db250ZXh0LnByb3RvdHlwZSwgJ2xhdGVuY3lIaW50Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGF0ZW5jeUhpbnQ7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChoaW50KSB7XG5cdCAgICAgICAgICAgIHZhciBsb29rQWhlYWQgPSBoaW50O1xuXHQgICAgICAgICAgICB0aGlzLl9sYXRlbmN5SGludCA9IGhpbnQ7XG5cdCAgICAgICAgICAgIGlmIChUb25lLmlzU3RyaW5nKGhpbnQpKSB7XG5cdCAgICAgICAgICAgICAgICBzd2l0Y2ggKGhpbnQpIHtcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2ludGVyYWN0aXZlJzpcblx0ICAgICAgICAgICAgICAgICAgICBsb29rQWhlYWQgPSAwLjE7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGV4dC5sYXRlbmN5SGludCA9IGhpbnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlICdwbGF5YmFjayc6XG5cdCAgICAgICAgICAgICAgICAgICAgbG9va0FoZWFkID0gMC44O1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubGF0ZW5jeUhpbnQgPSBoaW50O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnYmFsYW5jZWQnOlxuXHQgICAgICAgICAgICAgICAgICAgIGxvb2tBaGVhZCA9IDAuMjU7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGV4dC5sYXRlbmN5SGludCA9IGhpbnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlICdmYXN0ZXN0Jzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0LmxhdGVuY3lIaW50ID0gJ2ludGVyYWN0aXZlJztcblx0ICAgICAgICAgICAgICAgICAgICBsb29rQWhlYWQgPSAwLjAxO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMubG9va0FoZWFkID0gbG9va0FoZWFkO1xuXHQgICAgICAgICAgICB0aGlzLnVwZGF0ZUludGVydmFsID0gbG9va0FoZWFkIC8gMztcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBVbmxpa2Ugb3RoZXIgZGlzcG9zZSBtZXRob2RzLCB0aGlzIHJldHVybnMgYSBQcm9taXNlXG5cdFx0ICogIHdoaWNoIGV4ZWN1dGVzIHdoZW4gdGhlIGNvbnRleHQgaXMgY2xvc2VkIGFuZCBkaXNwb3NlZFxuXHRcdCAqICBAcmV0dXJucyB7UHJvbWlzZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Db250ZXh0LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmNsb3NlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIFRvbmUuRW1pdHRlci5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB0aGlzLl90aWNrZXIuZGlzcG9zZSgpO1xuXHQgICAgICAgICAgICB0aGlzLl90aWNrZXIgPSBudWxsO1xuXHQgICAgICAgICAgICB0aGlzLl90aW1lb3V0cy5kaXNwb3NlKCk7XG5cdCAgICAgICAgICAgIHRoaXMuX3RpbWVvdXRzID0gbnVsbDtcblx0ICAgICAgICAgICAgZm9yICh2YXIgY29uIGluIHRoaXMuX2NvbnN0YW50cykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fY29uc3RhbnRzW2Nvbl0uZGlzY29ubmVjdCgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuX2NvbnN0YW50cyA9IG51bGw7XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBAY2xhc3MgQSBjbGFzcyB3aGljaCBwcm92aWRlcyBhIHJlbGlhYmxlIGNhbGxiYWNrIHVzaW5nIGVpdGhlclxuXHRcdCAqICAgICAgICBhIFdlYiBXb3JrZXIsIG9yIGlmIHRoYXQgaXNuJ3Qgc3VwcG9ydGVkLCBmYWxscyBiYWNrIHRvIHNldFRpbWVvdXQuXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIHZhciBUaWNrZXIgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHR5cGUsIHVwZGF0ZUludGVydmFsKSB7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBFaXRoZXIgXCJ3b3JrZXJcIiBvciBcInRpbWVvdXRcIlxuXHRcdFx0ICogQHR5cGUge1N0cmluZ31cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSB1cGRhdGUgaW50ZXJ2YWwgb2YgdGhlIHdvcmtlclxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl91cGRhdGVJbnRlcnZhbCA9IHVwZGF0ZUludGVydmFsO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIGNhbGxiYWNrIHRvIGludm9rZSBhdCByZWd1bGFyIGludGVydmFsc1xuXHRcdFx0ICogQHR5cGUge0Z1bmN0aW9ufVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2NhbGxiYWNrID0gVG9uZS5kZWZhdWx0QXJnKGNhbGxiYWNrLCBUb25lLm5vT3ApO1xuXHQgICAgICAgIC8vY3JlYXRlIHRoZSBjbG9jayBzb3VyY2UgZm9yIHRoZSBmaXJzdCB0aW1lXG5cdCAgICAgICAgdGhpcy5fY3JlYXRlQ2xvY2soKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBUaGUgcG9zc2libGUgdGlja2VyIHR5cGVzXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVGlja2VyLlR5cGUgPSB7XG5cdCAgICAgICAgV29ya2VyOiAnd29ya2VyJyxcblx0ICAgICAgICBUaW1lb3V0OiAndGltZW91dCcsXG5cdCAgICAgICAgT2ZmbGluZTogJ29mZmxpbmUnXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEdlbmVyYXRlIGEgd2ViIHdvcmtlclxuXHRcdCAqICBAcmV0dXJuICB7V2ViV29ya2VyfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVGlja2VyLnByb3RvdHlwZS5fY3JlYXRlV29ya2VyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8vVVJMIFNoaW1cblx0ICAgICAgICB3aW5kb3cuVVJMID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMO1xuXHQgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoWy8vdGhlIGluaXRpYWwgdGltZW91dCB0aW1lXG5cdCAgICAgICAgICAgICd2YXIgdGltZW91dFRpbWUgPSAnICsgKHRoaXMuX3VwZGF0ZUludGVydmFsICogMTAwMCkudG9GaXhlZCgxKSArICc7JyArIC8vb25tZXNzYWdlIGNhbGxiYWNrXG5cdCAgICAgICAgICAgICdzZWxmLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKG1zZyl7JyArICdcXHR0aW1lb3V0VGltZSA9IHBhcnNlSW50KG1zZy5kYXRhKTsnICsgJ307JyArIC8vdGhlIHRpY2sgZnVuY3Rpb24gd2hpY2ggcG9zdHMgYSBtZXNzYWdlXG5cdCAgICAgICAgICAgIC8vYW5kIHNjaGVkdWxlcyBhIG5ldyB0aWNrXG5cdCAgICAgICAgICAgICdmdW5jdGlvbiB0aWNrKCl7JyArICdcXHRzZXRUaW1lb3V0KHRpY2ssIHRpbWVvdXRUaW1lKTsnICsgJ1xcdHNlbGYucG9zdE1lc3NhZ2UoXFwndGlja1xcJyk7JyArICd9JyArIC8vY2FsbCB0aWNrIGluaXRpYWxseVxuXHQgICAgICAgICAgICAndGljaygpOyddKTtcblx0ICAgICAgICB2YXIgYmxvYlVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cdCAgICAgICAgdmFyIHdvcmtlciA9IG5ldyBXb3JrZXIoYmxvYlVybCk7XG5cdCAgICAgICAgd29ya2VyLm9ubWVzc2FnZSA9IHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fd29ya2VyID0gd29ya2VyO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIENyZWF0ZSBhIHRpbWVvdXQgbG9vcFxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUaWNrZXIucHJvdG90eXBlLl9jcmVhdGVUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY3JlYXRlVGltZW91dCgpO1xuXHQgICAgICAgICAgICB0aGlzLl9jYWxsYmFjaygpO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKSwgdGhpcy5fdXBkYXRlSW50ZXJ2YWwgKiAxMDAwKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBDcmVhdGUgdGhlIGNsb2NrIHNvdXJjZS5cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVGlja2VyLnByb3RvdHlwZS5fY3JlYXRlQ2xvY2sgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuX3R5cGUgPT09IFRpY2tlci5UeXBlLldvcmtlcikge1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlV29ya2VyKCk7XG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgICAgIC8vIHdvcmtlcnMgbm90IHN1cHBvcnRlZCwgZmFsbGJhY2sgdG8gdGltZW91dFxuXHQgICAgICAgICAgICAgICAgdGhpcy5fdHlwZSA9IFRpY2tlci5UeXBlLlRpbWVvdXQ7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVDbG9jaygpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmICh0aGlzLl90eXBlID09PSBUaWNrZXIuVHlwZS5UaW1lb3V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVRpbWVvdXQoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogQG1lbWJlck9mIFRpY2tlciNcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBuYW1lIHVwZGF0ZUludGVydmFsXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaWNrZXIucHJvdG90eXBlLCAndXBkYXRlSW50ZXJ2YWwnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl91cGRhdGVJbnRlcnZhbDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGludGVydmFsKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUludGVydmFsID0gTWF0aC5tYXgoaW50ZXJ2YWwsIDEyOCAvIDQ0MTAwKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3R5cGUgPT09IFRpY2tlci5UeXBlLldvcmtlcikge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fd29ya2VyLnBvc3RNZXNzYWdlKE1hdGgubWF4KGludGVydmFsICogMTAwMCwgMSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgdHlwZSBvZiB0aGUgdGlja2VyLCBlaXRoZXIgYSB3b3JrZXIgb3IgYSB0aW1lb3V0XG5cdFx0ICogQG1lbWJlck9mIFRpY2tlciNcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBuYW1lIHR5cGVcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRpY2tlci5wcm90b3R5cGUsICd0eXBlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHR5cGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZGlzcG9zZUNsb2NrKCk7XG5cdCAgICAgICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuXHQgICAgICAgICAgICB0aGlzLl9jcmVhdGVDbG9jaygpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogQ2xlYW4gdXAgdGhlIGN1cnJlbnQgY2xvY2sgc291cmNlXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRpY2tlci5wcm90b3R5cGUuX2Rpc3Bvc2VDbG9jayA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5fdGltZW91dCkge1xuXHQgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG5cdCAgICAgICAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3dvcmtlci50ZXJtaW5hdGUoKTtcblx0ICAgICAgICAgICAgdGhpcy5fd29ya2VyLm9ubWVzc2FnZSA9IG51bGw7XG5cdCAgICAgICAgICAgIHRoaXMuX3dvcmtlciA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIENsZWFuIHVwXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRpY2tlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLl9kaXNwb3NlQ2xvY2soKTtcblx0ICAgICAgICB0aGlzLl9jYWxsYmFjayA9IG51bGw7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFNoaW0gYWxsIGNvbm5lY3QvZGlzY29ubmVjdCBhbmQgc29tZSBkZXByZWNhdGVkIG1ldGhvZHMgd2hpY2ggYXJlIHN0aWxsIGluXG5cdFx0ICogIHNvbWUgb2xkZXIgaW1wbGVtZW50YXRpb25zLlxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5nZXRDb250ZXh0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbmF0aXZlQ29ubmVjdCA9IEF1ZGlvTm9kZS5wcm90b3R5cGUuY29ubmVjdDtcblx0ICAgICAgICB2YXIgbmF0aXZlRGlzY29ubmVjdCA9IEF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzY29ubmVjdDtcblx0ICAgICAgICAvL3JlcGxhY2UgdGhlIG9sZCBjb25uZWN0IG1ldGhvZFxuXHQgICAgICAgIGZ1bmN0aW9uIHRvbmVDb25uZWN0KEIsIG91dE51bSwgaW5OdW0pIHtcblx0ICAgICAgICAgICAgaWYgKEIuaW5wdXQpIHtcblx0ICAgICAgICAgICAgICAgIGluTnVtID0gVG9uZS5kZWZhdWx0QXJnKGluTnVtLCAwKTtcblx0ICAgICAgICAgICAgICAgIGlmIChUb25lLmlzQXJyYXkoQi5pbnB1dCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0KEIuaW5wdXRbaW5OdW1dKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdChCLmlucHV0LCBvdXROdW0sIGluTnVtKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKEIgaW5zdGFuY2VvZiBBdWRpb05vZGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlQ29ubmVjdC5jYWxsKHRoaXMsIEIsIG91dE51bSwgaW5OdW0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQjtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVDb25uZWN0LmNhbGwodGhpcywgQiwgb3V0TnVtKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEI7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXJyb3IgY29ubmVjdGluZyB0byBub2RlOiAnICsgQiArICdcXG4nICsgZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9yZXBsYWNlIHRoZSBvbGQgZGlzY29ubmVjdCBtZXRob2Rcblx0ICAgICAgICBmdW5jdGlvbiB0b25lRGlzY29ubmVjdChCLCBvdXROdW0sIGluTnVtKSB7XG5cdCAgICAgICAgICAgIGlmIChCICYmIEIuaW5wdXQgJiYgVG9uZS5pc0FycmF5KEIuaW5wdXQpKSB7XG5cdCAgICAgICAgICAgICAgICBpbk51bSA9IFRvbmUuZGVmYXVsdEFyZyhpbk51bSwgMCk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoQi5pbnB1dFtpbk51bV0sIG91dE51bSwgMCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoQiAmJiBCLmlucHV0KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoQi5pbnB1dCwgb3V0TnVtLCBpbk51bSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURpc2Nvbm5lY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Vycm9yIGRpc2Nvbm5lY3Rpbmcgbm9kZTogJyArIEIgKyAnXFxuJyArIGUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChBdWRpb05vZGUucHJvdG90eXBlLmNvbm5lY3QgIT09IHRvbmVDb25uZWN0KSB7XG5cdCAgICAgICAgICAgIEF1ZGlvTm9kZS5wcm90b3R5cGUuY29ubmVjdCA9IHRvbmVDb25uZWN0O1xuXHQgICAgICAgICAgICBBdWRpb05vZGUucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSB0b25lRGlzY29ubmVjdDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8vIHNldCB0aGUgYXVkaW8gY29udGV4dCBpbml0aWFsbHksIGFuZCBpZiBvbmUgaXMgbm90IGFscmVhZHkgY3JlYXRlZFxuXHQgICAgaWYgKFRvbmUuc3VwcG9ydGVkICYmICFUb25lLmluaXRpYWxpemVkKSB7XG5cdCAgICAgICAgVG9uZS5jb250ZXh0ID0gbmV3IFRvbmUuQ29udGV4dCgpO1xuXHQgICAgICAgIC8vIGxvZyBvbiBmaXJzdCBpbml0aWFsaXphdGlvblxuXHQgICAgICAgIC8vIGFsbG93IG9wdGlvbmFsIHNpbGVuY2luZyBvZiB0aGlzIGxvZ1xuXHQgICAgICAgIGlmICghd2luZG93LlRPTkVfU0lMRU5DRV9WRVJTSU9OX0xPR0dJTkcpIHtcblx0ICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0ICAgICAgICAgICAgY29uc29sZS5sb2coJyVjICogVG9uZS5qcyAnICsgVG9uZS52ZXJzaW9uICsgJyAqICcsICdiYWNrZ3JvdW5kOiAjMDAwOyBjb2xvcjogI2ZmZicpO1xuXHQgICAgICAgIH1cblx0ICAgIH0gZWxzZSBpZiAoIVRvbmUuc3VwcG9ydGVkKSB7XG5cdCAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0ICAgICAgICBjb25zb2xlLndhcm4oJ1RoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IFRvbmUuanMnKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBUb25lLkNvbnRleHQ7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgVG9uZS5BdWRpb05vZGUgaXMgdGhlIGJhc2UgY2xhc3MgZm9yIGNsYXNzZXMgd2hpY2ggcHJvY2VzcyBhdWRpby5cblx0XHQgKiAgICAgICAgIEF1ZGlvTm9kZXMgaGF2ZSBpbnB1dHMgYW5kIG91dHB1dHMuXG5cdFx0ICogIEBwYXJhbVx0e0F1ZGlvQ29udGV4dD19IGNvbnRleHRcdFRoZSBhdWRpbyBjb250ZXh0IHRvIHVzZSB3aXRoIHRoZSBjbGFzc1xuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0XHQgKi9cblx0ICAgIFRvbmUuQXVkaW9Ob2RlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvL3VzZSB0aGUgZGVmYXVsdCBjb250ZXh0IGlmIG9uZSBpcyBub3QgcGFzc2VkIGluXG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWydjb250ZXh0J10sIHsgJ2NvbnRleHQnOiBUb25lLmNvbnRleHQgfSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgQXVkaW9Db250ZXh0IG9mIHRoaXMgaW5zdGFuY2Vcblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKiBAdHlwZSB7QXVkaW9Db250ZXh0fVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fY29udGV4dCA9IG9wdGlvbnMuY29udGV4dDtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiBHZXQgdGhlIGF1ZGlvIGNvbnRleHQgYmVsb25naW5nIHRvIHRoaXMgaW5zdGFuY2UuXG5cdFx0ICogQHR5cGUge1RvbmUuQ29udGV4dH1cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5BdWRpb05vZGUjXG5cdFx0ICogQG5hbWUgY29udGV4dFxuXHRcdCAqIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZSwgJ2NvbnRleHQnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIENyZWF0ZSBpbnB1dCBhbmQgb3V0cHV0cyBmb3IgdGhpcyBvYmplY3QuXG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIFtpbnB1dD0wXSAgIFRoZSBudW1iZXIgb2YgaW5wdXRzXG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIFtvdXRwdXRzPTBdICBUaGUgbnVtYmVyIG9mIG91dHB1dHNcblx0XHQgKiAgQHJldHVybiAge1RvbmUuQXVkaW9Ob2RlfSAgdGhpc1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmNyZWF0ZUluc091dHMgPSBmdW5jdGlvbiAoaW5wdXRzLCBvdXRwdXRzKSB7XG5cdCAgICAgICAgaWYgKGlucHV0cyA9PT0gMSkge1xuXHQgICAgICAgICAgICB0aGlzLmlucHV0ID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGlucHV0cyA+IDEpIHtcblx0ICAgICAgICAgICAgdGhpcy5pbnB1dCA9IG5ldyBBcnJheShpbnB1dHMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAob3V0cHV0cyA9PT0gMSkge1xuXHQgICAgICAgICAgICB0aGlzLm91dHB1dCA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChvdXRwdXRzID4gMSkge1xuXHQgICAgICAgICAgICB0aGlzLm91dHB1dCA9IG5ldyBBcnJheShvdXRwdXRzKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIGNoYW5uZWxDb3VudCBpcyB0aGUgbnVtYmVyIG9mIGNoYW5uZWxzIHVzZWQgd2hlbiB1cC1taXhpbmcgYW5kIGRvd24tbWl4aW5nXG5cdFx0ICogIGNvbm5lY3Rpb25zIHRvIGFueSBpbnB1dHMgdG8gdGhlIG5vZGUuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDIgZXhjZXB0IGZvclxuXHRcdCAqICBzcGVjaWZpYyBub2RlcyB3aGVyZSBpdHMgdmFsdWUgaXMgc3BlY2lhbGx5IGRldGVybWluZWQuXG5cdFx0ICpcblx0XHQgKiAgQG1lbWJlcm9mIFRvbmUuQXVkaW9Ob2RlI1xuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbmFtZSBjaGFubmVsQ291bnRcblx0XHQgKiAgQHJlYWRPbmx5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLCAnY2hhbm5lbENvdW50Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXQuY2hhbm5lbENvdW50O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoYykge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXQuY2hhbm5lbENvdW50ID0gYztcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBjaGFubmVsQ291bnRNb2RlIGRldGVybWluZXMgaG93IGNoYW5uZWxzIHdpbGwgYmUgY291bnRlZCB3aGVuIHVwLW1peGluZyBhbmRcblx0XHQgKiAgZG93bi1taXhpbmcgY29ubmVjdGlvbnMgdG8gYW55IGlucHV0cyB0byB0aGUgbm9kZS5cblx0XHQgKiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgXCJtYXhcIi4gVGhpcyBhdHRyaWJ1dGUgaGFzIG5vIGVmZmVjdCBmb3Igbm9kZXMgd2l0aCBubyBpbnB1dHMuXG5cdFx0ICogIEBtZW1iZXJvZiBUb25lLkF1ZGlvTm9kZSNcblx0XHQgKiAgQHR5cGUge1N0cmluZ31cblx0XHQgKiAgQG5hbWUgY2hhbm5lbENvdW50TW9kZVxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUsICdjaGFubmVsQ291bnRNb2RlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXQuY2hhbm5lbENvdW50TW9kZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG0pIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMub3V0cHV0LmNoYW5uZWxDb3VudE1vZGUgPSBtO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIGNoYW5uZWxJbnRlcnByZXRhdGlvbiBkZXRlcm1pbmVzIGhvdyBpbmRpdmlkdWFsIGNoYW5uZWxzIHdpbGwgYmUgdHJlYXRlZFxuXHRcdCAqICB3aGVuIHVwLW1peGluZyBhbmQgZG93bi1taXhpbmcgY29ubmVjdGlvbnMgdG8gYW55IGlucHV0cyB0byB0aGUgbm9kZS5cblx0XHQgKiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgXCJzcGVha2Vyc1wiLlxuXHRcdCAqICBAbWVtYmVyb2YgVG9uZS5BdWRpb05vZGUjXG5cdFx0ICogIEB0eXBlIHtTdHJpbmd9XG5cdFx0ICogIEBuYW1lIGNoYW5uZWxJbnRlcnByZXRhdGlvblxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUsICdjaGFubmVsSW50ZXJwcmV0YXRpb24nLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLm91dHB1dC5jaGFubmVsSW50ZXJwcmV0YXRpb247XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLm91dHB1dC5jaGFubmVsSW50ZXJwcmV0YXRpb24gPSBpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBudW1iZXIgb2YgaW5wdXRzIGZlZWRpbmcgaW50byB0aGUgQXVkaW9Ob2RlLlxuXHRcdCAqICBGb3Igc291cmNlIG5vZGVzLCB0aGlzIHdpbGwgYmUgMC5cblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQG5hbWUgbnVtYmVyT2ZJbnB1dHNcblx0XHQgKiAgQG1lbWJlcm9mIFRvbmUuQXVkaW9Ob2RlI1xuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUsICdudW1iZXJPZklucHV0cycsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXQpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChUb25lLmlzQXJyYXkodGhpcy5pbnB1dCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC5sZW5ndGg7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgbnVtYmVyIG9mIG91dHB1dHMgY29taW5nIG91dCBvZiB0aGUgQXVkaW9Ob2RlLlxuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbmFtZSBudW1iZXJPZk91dHB1dHNcblx0XHQgKiAgQG1lbWJlcm9mIFRvbmUuQXVkaW9Ob2RlI1xuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUsICdudW1iZXJPZk91dHB1dHMnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm91dHB1dCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKFRvbmUuaXNBcnJheSh0aGlzLm91dHB1dCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXQubGVuZ3RoO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAwO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBDYWxsZWQgd2hlbiBhbiBhdWRpbyBwYXJhbSBjb25uZWN0cyB0byB0aGlzIG5vZGVcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLl9vbkNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIGNvbm5lY3QgdGhlIG91dHB1dCBvZiBhIFRvbmVOb2RlIHRvIGFuIEF1ZGlvUGFyYW0sIEF1ZGlvTm9kZSwgb3IgVG9uZU5vZGVcblx0XHQgKiAgQHBhcmFtICB7VG9uZSB8IEF1ZGlvUGFyYW0gfCBBdWRpb05vZGV9IHVuaXRcblx0XHQgKiAgQHBhcmFtIHtudW1iZXJ9IFtvdXRwdXROdW09MF0gb3B0aW9uYWxseSB3aGljaCBvdXRwdXQgdG8gY29ubmVjdCBmcm9tXG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyfSBbaW5wdXROdW09MF0gb3B0aW9uYWxseSB3aGljaCBpbnB1dCB0byBjb25uZWN0IHRvXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkF1ZGlvTm9kZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAodW5pdCwgb3V0cHV0TnVtLCBpbnB1dE51bSkge1xuXHQgICAgICAgIGlmICh1bml0Ll9vbkNvbm5lY3QpIHtcblx0ICAgICAgICAgICAgdW5pdC5fb25Db25uZWN0KHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoVG9uZS5pc0FycmF5KHRoaXMub3V0cHV0KSkge1xuXHQgICAgICAgICAgICBvdXRwdXROdW0gPSBUb25lLmRlZmF1bHRBcmcob3V0cHV0TnVtLCAwKTtcblx0ICAgICAgICAgICAgdGhpcy5vdXRwdXRbb3V0cHV0TnVtXS5jb25uZWN0KHVuaXQsIDAsIGlucHV0TnVtKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLm91dHB1dC5jb25uZWN0KHVuaXQsIG91dHB1dE51bSwgaW5wdXROdW0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgZGlzY29ubmVjdCB0aGUgb3V0cHV0XG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfEF1ZGlvTm9kZX0gb3V0cHV0IEVpdGhlciB0aGUgb3V0cHV0IGluZGV4IHRvIGRpc2Nvbm5lY3Rcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGhlIG91dHB1dCBpcyBhbiBhcnJheSwgb3IgdGhlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgdG8gZGlzY29ubmVjdCBmcm9tLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5BdWRpb05vZGV9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKGRlc3RpbmF0aW9uLCBvdXRwdXROdW0sIGlucHV0TnVtKSB7XG5cdCAgICAgICAgaWYgKFRvbmUuaXNBcnJheSh0aGlzLm91dHB1dCkpIHtcblx0ICAgICAgICAgICAgaWYgKFRvbmUuaXNOdW1iZXIoZGVzdGluYXRpb24pKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm91dHB1dFtkZXN0aW5hdGlvbl0uZGlzY29ubmVjdCgpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgb3V0cHV0TnVtID0gVG9uZS5kZWZhdWx0QXJnKG91dHB1dE51bSwgMCk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm91dHB1dFtvdXRwdXROdW1dLmRpc2Nvbm5lY3QoZGVzdGluYXRpb24sIDAsIGlucHV0TnVtKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMub3V0cHV0LmRpc2Nvbm5lY3QuYXBwbHkodGhpcy5vdXRwdXQsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDb25uZWN0IHRoZSBvdXRwdXQgb2YgdGhpcyBub2RlIHRvIHRoZSByZXN0IG9mIHRoZSBub2RlcyBpbiBzZXJpZXMuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogIC8vY29ubmVjdCBhIG5vZGUgdG8gYW4gZWZmZWN0LCBwYW5Wb2wgYW5kIHRoZW4gdG8gdGhlIG1hc3RlciBvdXRwdXRcblx0XHQgKiAgbm9kZS5jaGFpbihlZmZlY3QsIHBhblZvbCwgVG9uZS5NYXN0ZXIpO1xuXHRcdCAqICBAcGFyYW0gey4uLkF1ZGlvUGFyYW18VG9uZXxBdWRpb05vZGV9IG5vZGVzXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkF1ZGlvTm9kZX0gdGhpc1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmNoYWluID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBjdXJyZW50VW5pdCA9IHRoaXM7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIHRvVW5pdCA9IGFyZ3VtZW50c1tpXTtcblx0ICAgICAgICAgICAgY3VycmVudFVuaXQuY29ubmVjdCh0b1VuaXQpO1xuXHQgICAgICAgICAgICBjdXJyZW50VW5pdCA9IHRvVW5pdDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIGNvbm5lY3QgdGhlIG91dHB1dCBvZiB0aGlzIG5vZGUgdG8gdGhlIHJlc3Qgb2YgdGhlIG5vZGVzIGluIHBhcmFsbGVsLlxuXHRcdCAqICBAcGFyYW0gey4uLkF1ZGlvUGFyYW18VG9uZXxBdWRpb05vZGV9IG5vZGVzXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkF1ZGlvTm9kZX0gdGhpc1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmZhbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB0aGlzLmNvbm5lY3QoYXJndW1lbnRzW2ldKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgaWYgKHdpbmRvdy5BdWRpb05vZGUpIHtcblx0ICAgICAgICAvL2dpdmUgbmF0aXZlIG5vZGVzIGNoYWluIGFuZCBmYW4gbWV0aG9kc1xuXHQgICAgICAgIEF1ZGlvTm9kZS5wcm90b3R5cGUuY2hhaW4gPSBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuY2hhaW47XG5cdCAgICAgICAgQXVkaW9Ob2RlLnByb3RvdHlwZS5mYW4gPSBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZmFuO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdFx0ICogRGlzcG9zZSBhbmQgZGlzY29ubmVjdFxuXHRcdCAqIEByZXR1cm4ge1RvbmUuQXVkaW9Ob2RlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoVG9uZS5pc0RlZmluZWQodGhpcy5pbnB1dCkpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXQgaW5zdGFuY2VvZiBBdWRpb05vZGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuaW5wdXQgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoVG9uZS5pc0RlZmluZWQodGhpcy5vdXRwdXQpKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm91dHB1dCBpbnN0YW5jZW9mIEF1ZGlvTm9kZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5vdXRwdXQuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMub3V0cHV0ID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuQXVkaW9Ob2RlO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIEJhc2UgY2xhc3MgZm9yIGFsbCBTaWduYWxzLiBVc2VkIEludGVybmFsbHkuXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5TaWduYWxCYXNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5TaWduYWxCYXNlLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgV2hlbiBzaWduYWxzIGNvbm5lY3QgdG8gb3RoZXIgc2lnbmFscyBvciBBdWRpb1BhcmFtcyxcblx0XHQgKiAgdGhleSB0YWtlIG92ZXIgdGhlIG91dHB1dCB2YWx1ZSBvZiB0aGF0IHNpZ25hbCBvciBBdWRpb1BhcmFtLlxuXHRcdCAqICBGb3IgYWxsIG90aGVyIG5vZGVzLCB0aGUgYmVoYXZpb3IgaXMgdGhlIHNhbWUgYXMgYSBkZWZhdWx0IDxjb2RlPmNvbm5lY3Q8L2NvZGU+LlxuXHRcdCAqXG5cdFx0ICogIEBvdmVycmlkZVxuXHRcdCAqICBAcGFyYW0ge0F1ZGlvUGFyYW18QXVkaW9Ob2RlfFRvbmUuU2lnbmFsfFRvbmV9IG5vZGVcblx0XHQgKiAgQHBhcmFtIHtudW1iZXJ9IFtvdXRwdXROdW1iZXI9MF0gVGhlIG91dHB1dCBudW1iZXIgdG8gY29ubmVjdCBmcm9tLlxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gW2lucHV0TnVtYmVyPTBdIFRoZSBpbnB1dCBudW1iZXIgdG8gY29ubmVjdCB0by5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuU2lnbmFsQmFzZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5TaWduYWxCYXNlLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKG5vZGUsIG91dHB1dE51bWJlciwgaW5wdXROdW1iZXIpIHtcblx0ICAgICAgICAvL3plcm8gaXQgb3V0IHNvIHRoYXQgdGhlIHNpZ25hbCBjYW4gaGF2ZSBmdWxsIGNvbnRyb2xcblx0ICAgICAgICBpZiAoVG9uZS5TaWduYWwgJiYgVG9uZS5TaWduYWwgPT09IG5vZGUuY29uc3RydWN0b3IgfHwgVG9uZS5QYXJhbSAmJiBUb25lLlBhcmFtID09PSBub2RlLmNvbnN0cnVjdG9yKSB7XG5cdCAgICAgICAgICAgIC8vY2FuY2VsIGNoYW5nZXNcblx0ICAgICAgICAgICAgbm9kZS5fcGFyYW0uY2FuY2VsU2NoZWR1bGVkVmFsdWVzKDApO1xuXHQgICAgICAgICAgICAvL3Jlc2V0IHRoZSB2YWx1ZVxuXHQgICAgICAgICAgICBub2RlLl9wYXJhbS52YWx1ZSA9IDA7XG5cdCAgICAgICAgICAgIC8vbWFyayB0aGUgdmFsdWUgYXMgb3ZlcnJpZGRlblxuXHQgICAgICAgICAgICBub2RlLm92ZXJyaWRkZW4gPSB0cnVlO1xuXHQgICAgICAgIH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIEF1ZGlvUGFyYW0pIHtcblx0ICAgICAgICAgICAgbm9kZS5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMoMCk7XG5cdCAgICAgICAgICAgIG5vZGUudmFsdWUgPSAwO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuY29ubmVjdC5jYWxsKHRoaXMsIG5vZGUsIG91dHB1dE51bWJlciwgaW5wdXROdW1iZXIpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlNpZ25hbEJhc2U7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIGlmIChUb25lLnN1cHBvcnRlZCkge1xuXHQgICAgICAgIC8vZml4ZXMgc2FmYXJpIG9ubHkgYnVnIHdoaWNoIGlzIHN0aWxsIHByZXNlbnQgaW4gMTFcblx0ICAgICAgICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgdmFyIGlzU2FmYXJpID0gdWEuaW5jbHVkZXMoJ3NhZmFyaScpICYmICF1YS5pbmNsdWRlcygnY2hyb21lJyk7XG5cdCAgICAgICAgaWYgKGlzU2FmYXJpKSB7XG5cdCAgICAgICAgICAgIHZhciBXYXZlU2hhcGVyTm9kZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm5hbE5vZGUgPSB0aGlzLmlucHV0ID0gdGhpcy5vdXRwdXQgPSBjb250ZXh0Ll9uYXRpdmVfY3JlYXRlV2F2ZVNoYXBlcigpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fY3VydmUgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzLl9pbnRlcm5hbE5vZGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZpbmVQcm9wZXJ0eSh0aGlzLl9pbnRlcm5hbE5vZGUsIHByb3ApO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2F2ZVNoYXBlck5vZGUucHJvdG90eXBlLCAnY3VydmUnLCB7XG5cdCAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VydmU7XG5cdCAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoY3VydmUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJ2ZSA9IGN1cnZlO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoY3VydmUubGVuZ3RoICsgMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgYXJyYXkuc2V0KGN1cnZlLCAxKTtcblx0ICAgICAgICAgICAgICAgICAgICBhcnJheVswXSA9IGN1cnZlWzBdO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsTm9kZS5jdXJ2ZSA9IGFycmF5O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgV2F2ZVNoYXBlck5vZGUucHJvdG90eXBlLl9kZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChjb250ZXh0LCBwcm9wKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoVG9uZS5pc1VuZGVmKHRoaXNbcHJvcF0pKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3AsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRleHRbcHJvcF0gPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dFtwcm9wXS5iaW5kKGNvbnRleHQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dFtwcm9wXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0W3Byb3BdID0gdmFsO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIEF1ZGlvQ29udGV4dC5wcm90b3R5cGUuX25hdGl2ZV9jcmVhdGVXYXZlU2hhcGVyID0gQXVkaW9Db250ZXh0LnByb3RvdHlwZS5jcmVhdGVXYXZlU2hhcGVyO1xuXHQgICAgICAgICAgICBBdWRpb0NvbnRleHQucHJvdG90eXBlLmNyZWF0ZVdhdmVTaGFwZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFdhdmVTaGFwZXJOb2RlKHRoaXMpO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFdyYXBzIHRoZSBuYXRpdmUgV2ViIEF1ZGlvIEFQSVxuXHRcdCAqICAgICAgICAgW1dhdmVTaGFwZXJOb2RlXShodHRwOi8vd2ViYXVkaW8uZ2l0aHViLmlvL3dlYi1hdWRpby1hcGkvI3RoZS13YXZlc2hhcGVybm9kZS1pbnRlcmZhY2UpLlxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLlNpZ25hbEJhc2V9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAcGFyYW0ge2Z1bmN0aW9ufEFycmF5fE51bWJlcn0gbWFwcGluZyBUaGUgZnVuY3Rpb24gdXNlZCB0byBkZWZpbmUgdGhlIHZhbHVlcy5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBtYXBwaW5nIGZ1bmN0aW9uIHNob3VsZCB0YWtlIHR3byBhcmd1bWVudHM6XG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZmlyc3QgaXMgdGhlIHZhbHVlIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHNlY29uZCBpcyB0aGUgYXJyYXkgcG9zaXRpb24uXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXksIHRoYXQgYXJyYXkgd2lsbCBiZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0IGFzIHRoZSB3YXZlIHNoYXBpbmcgZnVuY3Rpb24uIFRoZSBpbnB1dFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsIGlzIGFuIEF1ZGlvUmFuZ2UgWy0xLCAxXSB2YWx1ZSBhbmQgdGhlIG91dHB1dFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsIGNhbiB0YWtlIG9uIGFueSBudW1lcmljYWwgdmFsdWVzLlxuXHRcdCAqXG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfSBbYnVmZmVyTGVuPTEwMjRdIFRoZSBsZW5ndGggb2YgdGhlIFdhdmVTaGFwZXJOb2RlIGJ1ZmZlci5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgdGltZXNUd28gPSBuZXcgVG9uZS5XYXZlU2hhcGVyKGZ1bmN0aW9uKHZhbCl7XG5cdFx0ICogXHRyZXR1cm4gdmFsICogMjtcblx0XHQgKiB9LCAyMDQ4KTtcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2Egd2F2ZXNoYXBlciBjYW4gYWxzbyBiZSBjb25zdHJ1Y3RlZCB3aXRoIGFuIGFycmF5IG9mIHZhbHVlc1xuXHRcdCAqIHZhciBpbnZlcnQgPSBuZXcgVG9uZS5XYXZlU2hhcGVyKFsxLCAtMV0pO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5XYXZlU2hhcGVyID0gZnVuY3Rpb24gKG1hcHBpbmcsIGJ1ZmZlckxlbikge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsQmFzZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSB3YXZlc2hhcGVyXG5cdFx0XHQgKiAgQHR5cGUge1dhdmVTaGFwZXJOb2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zaGFwZXIgPSB0aGlzLmlucHV0ID0gdGhpcy5vdXRwdXQgPSB0aGlzLmNvbnRleHQuY3JlYXRlV2F2ZVNoYXBlcigpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSB3YXZlc2hhcGVycyBjdXJ2ZVxuXHRcdFx0ICogIEB0eXBlIHtGbG9hdDMyQXJyYXl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2N1cnZlID0gbnVsbDtcblx0ICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtYXBwaW5nKSkge1xuXHQgICAgICAgICAgICB0aGlzLmN1cnZlID0gbWFwcGluZztcblx0ICAgICAgICB9IGVsc2UgaWYgKGlzRmluaXRlKG1hcHBpbmcpIHx8IFRvbmUuaXNVbmRlZihtYXBwaW5nKSkge1xuXHQgICAgICAgICAgICB0aGlzLl9jdXJ2ZSA9IG5ldyBGbG9hdDMyQXJyYXkoVG9uZS5kZWZhdWx0QXJnKG1hcHBpbmcsIDEwMjQpKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKFRvbmUuaXNGdW5jdGlvbihtYXBwaW5nKSkge1xuXHQgICAgICAgICAgICB0aGlzLl9jdXJ2ZSA9IG5ldyBGbG9hdDMyQXJyYXkoVG9uZS5kZWZhdWx0QXJnKGJ1ZmZlckxlbiwgMTAyNCkpO1xuXHQgICAgICAgICAgICB0aGlzLnNldE1hcChtYXBwaW5nKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5XYXZlU2hhcGVyLCBUb25lLlNpZ25hbEJhc2UpO1xuXHQgICAgLyoqXG5cdFx0ICogIFVzZXMgYSBtYXBwaW5nIGZ1bmN0aW9uIHRvIHNldCB0aGUgdmFsdWUgb2YgdGhlIGN1cnZlLlxuXHRcdCAqICBAcGFyYW0ge2Z1bmN0aW9ufSBtYXBwaW5nIFRoZSBmdW5jdGlvbiB1c2VkIHRvIGRlZmluZSB0aGUgdmFsdWVzLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBtYXBwaW5nIGZ1bmN0aW9uIHRha2UgdHdvIGFyZ3VtZW50czpcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZmlyc3QgaXMgdGhlIHZhbHVlIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggZ29lcyBmcm9tIC0xIHRvIDEgb3ZlciB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGN1cnZlIGFycmF5LiBUaGUgc2Vjb25kIGFyZ3VtZW50IGlzIHRoZSBhcnJheSBwb3NpdGlvbi5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuV2F2ZVNoYXBlcn0gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vbWFwIHRoZSBpbnB1dCBzaWduYWwgZnJvbSBbLTEsIDFdIHRvIFswLCAxMF1cblx0XHQgKiBzaGFwZXIuc2V0TWFwKGZ1bmN0aW9uKHZhbCwgaW5kZXgpe1xuXHRcdCAqIFx0cmV0dXJuICh2YWwgKyAxKSAqIDU7XG5cdFx0ICogfSlcblx0XHQgKi9cblx0ICAgIFRvbmUuV2F2ZVNoYXBlci5wcm90b3R5cGUuc2V0TWFwID0gZnVuY3Rpb24gKG1hcHBpbmcpIHtcblx0ICAgICAgICB2YXIgYXJyYXkgPSBuZXcgQXJyYXkodGhpcy5fY3VydmUubGVuZ3RoKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fY3VydmUubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWQgPSBpIC8gKGxlbiAtIDEpICogMiAtIDE7XG5cdCAgICAgICAgICAgIGFycmF5W2ldID0gbWFwcGluZyhub3JtYWxpemVkLCBpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5jdXJ2ZSA9IGFycmF5O1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBhcnJheSB0byBzZXQgYXMgdGhlIHdhdmVzaGFwZXIgY3VydmUuIEZvciBsaW5lYXIgY3VydmVzXG5cdFx0ICogYXJyYXkgbGVuZ3RoIGRvZXMgbm90IG1ha2UgbXVjaCBkaWZmZXJlbmNlLCBidXQgZm9yIGNvbXBsZXggY3VydmVzXG5cdFx0ICogbG9uZ2VyIGFycmF5cyB3aWxsIHByb3ZpZGUgc21vb3RoZXIgaW50ZXJwb2xhdGlvbi5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5XYXZlU2hhcGVyI1xuXHRcdCAqIEB0eXBlIHtBcnJheX1cblx0XHQgKiBAbmFtZSBjdXJ2ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuV2F2ZVNoYXBlci5wcm90b3R5cGUsICdjdXJ2ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NoYXBlci5jdXJ2ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG1hcHBpbmcpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY3VydmUgPSBuZXcgRmxvYXQzMkFycmF5KG1hcHBpbmcpO1xuXHQgICAgICAgICAgICB0aGlzLl9zaGFwZXIuY3VydmUgPSB0aGlzLl9jdXJ2ZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFNwZWNpZmllcyB3aGF0IHR5cGUgb2Ygb3ZlcnNhbXBsaW5nIChpZiBhbnkpIHNob3VsZCBiZSB1c2VkIHdoZW5cblx0XHQgKiBhcHBseWluZyB0aGUgc2hhcGluZyBjdXJ2ZS4gQ2FuIGVpdGhlciBiZSBcIm5vbmVcIiwgXCIyeFwiIG9yIFwiNHhcIi5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5XYXZlU2hhcGVyI1xuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQG5hbWUgb3ZlcnNhbXBsZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuV2F2ZVNoYXBlci5wcm90b3R5cGUsICdvdmVyc2FtcGxlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2hhcGVyLm92ZXJzYW1wbGU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChvdmVyc2FtcGxpbmcpIHtcblx0ICAgICAgICAgICAgaWYgKFtcblx0ICAgICAgICAgICAgICAgICAgICAnbm9uZScsXG5cdCAgICAgICAgICAgICAgICAgICAgJzJ4Jyxcblx0ICAgICAgICAgICAgICAgICAgICAnNHgnXG5cdCAgICAgICAgICAgICAgICBdLmluY2x1ZGVzKG92ZXJzYW1wbGluZykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3NoYXBlci5vdmVyc2FtcGxlID0gb3ZlcnNhbXBsaW5nO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RvbmUuV2F2ZVNoYXBlcjogb3ZlcnNhbXBsaW5nIG11c3QgYmUgZWl0aGVyIFxcJ25vbmVcXCcsIFxcJzJ4XFwnLCBvciBcXCc0eFxcJycpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLldhdmVTaGFwZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuV2F2ZVNoYXBlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlNpZ25hbEJhc2UucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9zaGFwZXIuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMuX3NoYXBlciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fY3VydmUgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLldhdmVTaGFwZXI7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgVG9uZS5UaW1lQmFzZSBpcyBhIGZsZXhpYmxlIGVuY29kaW5nIG9mIHRpbWVcblx0XHQgKiAgICAgICAgIHdoaWNoIGNhbiBiZSBldmFsdWF0ZWQgdG8gYW5kIGZyb20gYSBzdHJpbmcuXG5cdFx0ICogIEBleHRlbmRzIHtUb25lfVxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSAgdmFsICAgIFRoZSB0aW1lIHZhbHVlIGFzIGEgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmc9fSAgdW5pdHMgIFVuaXQgdmFsdWVzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogVG9uZS5UaW1lQmFzZSg0LCBcIm5cIilcblx0XHQgKiBUb25lLlRpbWVCYXNlKDIsIFwidFwiKVxuXHRcdCAqIFRvbmUuVGltZUJhc2UoXCIydFwiKVxuXHRcdCAqIFRvbmUuVGltZUJhc2UoXCIydFwiKSArIFRvbmUuVGltZUJhc2UoXCI0blwiKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZUJhc2UgPSBmdW5jdGlvbiAodmFsLCB1bml0cykge1xuXHQgICAgICAgIC8vYWxsb3dzIGl0IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGggb3Igd2l0aG91dCAnbmV3J1xuXHQgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgVG9uZS5UaW1lQmFzZSkge1xuXHQgICAgICAgICAgICAvKipcblx0XHRcdFx0ICogIFRoZSB2YWx1ZVxuXHRcdFx0XHQgKiAgQHR5cGUgIHtOdW1iZXJ8U3RyaW5nfFRvbmUuVGltZUJhc2V9XG5cdFx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0XHQgKi9cblx0ICAgICAgICAgICAgdGhpcy5fdmFsID0gdmFsO1xuXHQgICAgICAgICAgICAvKipcblx0XHRcdFx0ICogVGhlIHVuaXRzXG5cdFx0XHRcdCAqIEB0eXBlIHtTdHJpbmc/fVxuXHRcdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0XHQgKi9cblx0ICAgICAgICAgICAgdGhpcy5fdW5pdHMgPSB1bml0cztcblx0ICAgICAgICAgICAgLy90ZXN0IGlmIHRoZSB2YWx1ZSBpcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG51bWJlclxuXHQgICAgICAgICAgICBpZiAoVG9uZS5pc1VuZGVmKHRoaXMuX3VuaXRzKSAmJiBUb25lLmlzU3RyaW5nKHRoaXMuX3ZhbCkgJiYgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHQgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCh0aGlzLl92YWwpID09IHRoaXMuX3ZhbCAmJiB0aGlzLl92YWwuY2hhckF0KDApICE9PSAnKycpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3ZhbCA9IHBhcnNlRmxvYXQodGhpcy5fdmFsKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3VuaXRzID0gdGhpcy5fZGVmYXVsdFVuaXRzO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbCAmJiB2YWwuY29uc3RydWN0b3IgPT09IHRoaXMuY29uc3RydWN0b3IpIHtcblx0ICAgICAgICAgICAgICAgIC8vaWYgdGhleSdyZSB0aGUgc2FtZSB0eXBlLCBqdXN0IGNvcHkgdmFsdWVzIG92ZXJcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3ZhbCA9IHZhbC5fdmFsO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fdW5pdHMgPSB2YWwuX3VuaXRzO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIFRvbmUuVGltZUJhc2UpIHtcblx0ICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fZGVmYXVsdFVuaXRzKSB7XG5cdCAgICAgICAgICAgICAgICBjYXNlICdzJzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWwgPSB2YWwudG9TZWNvbmRzKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlICdpJzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWwgPSB2YWwudG9UaWNrcygpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnaHonOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbCA9IHZhbC50b0ZyZXF1ZW5jeSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnbWlkaSc6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsID0gdmFsLnRvTWlkaSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VucmVjb2duaXplZCBkZWZhdWx0IHVuaXRzICcgKyB0aGlzLl9kZWZhdWx0VW5pdHMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBUb25lLlRpbWVCYXNlKHZhbCwgdW5pdHMpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlRpbWVCYXNlKTtcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9cdEFCU1RSQUNUIFNZTlRBWCBUUkVFIFBBUlNFUlxuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgQWxsIHRoZSBwcmltYXJ5IGV4cHJlc3Npb25zLlxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqICBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZUJhc2UucHJvdG90eXBlLl9leHByZXNzaW9ucyA9IHtcblx0ICAgICAgICAnbic6IHtcblx0ICAgICAgICAgICAgcmVnZXhwOiAvXihcXGQrKW4oXFwuPykkL2ksXG5cdCAgICAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKHZhbHVlLCBkb3QpIHtcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHNjYWxhciA9IGRvdCA9PT0gJy4nID8gMS41IDogMTtcblx0ICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iZWF0c1RvVW5pdHModGhpcy5fZ2V0VGltZVNpZ25hdHVyZSgpKSAqIHNjYWxhcjtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JlYXRzVG9Vbml0cyg0IC8gdmFsdWUpICogc2NhbGFyO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblx0ICAgICAgICAndCc6IHtcblx0ICAgICAgICAgICAgcmVnZXhwOiAvXihcXGQrKXQkL2ksXG5cdCAgICAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iZWF0c1RvVW5pdHMoOCAvIChwYXJzZUludCh2YWx1ZSkgKiAzKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXHQgICAgICAgICdtJzoge1xuXHQgICAgICAgICAgICByZWdleHA6IC9eKFxcZCspbSQvaSxcblx0ICAgICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iZWF0c1RvVW5pdHMocGFyc2VJbnQodmFsdWUpICogdGhpcy5fZ2V0VGltZVNpZ25hdHVyZSgpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgJ2knOiB7XG5cdCAgICAgICAgICAgIHJlZ2V4cDogL14oXFxkKylpJC9pLFxuXHQgICAgICAgICAgICBtZXRob2Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpY2tzVG9Vbml0cyhwYXJzZUludCh2YWx1ZSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblx0ICAgICAgICAnaHonOiB7XG5cdCAgICAgICAgICAgIHJlZ2V4cDogL14oXFxkKyg/OlxcLlxcZCspPyloeiQvaSxcblx0ICAgICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mcmVxdWVuY3lUb1VuaXRzKHBhcnNlRmxvYXQodmFsdWUpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgJ3RyJzoge1xuXHQgICAgICAgICAgICByZWdleHA6IC9eKFxcZCsoPzpcXC5cXGQrKT8pOihcXGQrKD86XFwuXFxkKyk/KTo/KFxcZCsoPzpcXC5cXGQrKT8pPyQvLFxuXHQgICAgICAgICAgICBtZXRob2Q6IGZ1bmN0aW9uIChtLCBxLCBzKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgdG90YWwgPSAwO1xuXHQgICAgICAgICAgICAgICAgaWYgKG0gJiYgbSAhPT0gJzAnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdG90YWwgKz0gdGhpcy5fYmVhdHNUb1VuaXRzKHRoaXMuX2dldFRpbWVTaWduYXR1cmUoKSAqIHBhcnNlRmxvYXQobSkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHEgJiYgcSAhPT0gJzAnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdG90YWwgKz0gdGhpcy5fYmVhdHNUb1VuaXRzKHBhcnNlRmxvYXQocSkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHMgJiYgcyAhPT0gJzAnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdG90YWwgKz0gdGhpcy5fYmVhdHNUb1VuaXRzKHBhcnNlRmxvYXQocykgLyA0KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHJldHVybiB0b3RhbDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgJ3MnOiB7XG5cdCAgICAgICAgICAgIHJlZ2V4cDogL14oXFxkKyg/OlxcLlxcZCspPylzJC8sXG5cdCAgICAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2Vjb25kc1RvVW5pdHMocGFyc2VGbG9hdCh2YWx1ZSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblx0ICAgICAgICAnc2FtcGxlcyc6IHtcblx0ICAgICAgICAgICAgcmVnZXhwOiAvXihcXGQrKXNhbXBsZXMkLyxcblx0ICAgICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSkgLyB0aGlzLmNvbnRleHQuc2FtcGxlUmF0ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgJ2RlZmF1bHQnOiB7XG5cdCAgICAgICAgICAgIHJlZ2V4cDogL14oXFxkKyg/OlxcLlxcZCspPykkLyxcblx0ICAgICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9leHByZXNzaW9uc1t0aGlzLl9kZWZhdWx0VW5pdHNdLm1ldGhvZC5jYWxsKHRoaXMsIHZhbHVlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGRlZmF1bHQgdW5pdHMgaWYgbm9uZSBhcmUgZ2l2ZW4uXG5cdFx0ICogIEB0eXBlIHtTdHJpbmd9XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlRpbWVCYXNlLnByb3RvdHlwZS5fZGVmYXVsdFVuaXRzID0gJ3MnO1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0VFJBTlNQT1JUIEZBTExCQUNLU1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiBSZXR1cm4gdGhlIGJwbSwgb3IgMTIwIGlmIFRyYW5zcG9ydCBpcyBub3QgYXZhaWxhYmxlXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lQmFzZS5wcm90b3R5cGUuX2dldEJwbSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoVG9uZS5UcmFuc3BvcnQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuVHJhbnNwb3J0LmJwbS52YWx1ZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gMTIwO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBSZXR1cm4gdGhlIHRpbWVTaWduYXR1cmUgb3IgNCBpZiBUcmFuc3BvcnQgaXMgbm90IGF2YWlsYWJsZVxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZUJhc2UucHJvdG90eXBlLl9nZXRUaW1lU2lnbmF0dXJlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChUb25lLlRyYW5zcG9ydCkge1xuXHQgICAgICAgICAgICByZXR1cm4gVG9uZS5UcmFuc3BvcnQudGltZVNpZ25hdHVyZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gNDtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogUmV0dXJuIHRoZSBQUFEgb3IgMTkyIGlmIFRyYW5zcG9ydCBpcyBub3QgYXZhaWxhYmxlXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lQmFzZS5wcm90b3R5cGUuX2dldFBQUSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoVG9uZS5UcmFuc3BvcnQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuVHJhbnNwb3J0LlBQUTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gMTkyO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBSZXR1cm4gdGhlIGN1cnJlbnQgdGltZSBpbiB3aGljaGV2ZXIgY29udGV4dCBpcyByZWxldmFudFxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZUJhc2UucHJvdG90eXBlLl9ub3cgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMubm93KCk7XG5cdCAgICB9O1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0VU5JVCBDT05WRVJTSU9OU1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJucyB0aGUgdmFsdWUgb2YgYSBmcmVxdWVuY3kgaW4gdGhlIGN1cnJlbnQgdW5pdHNcblx0XHQgKiAgQHBhcmFtIHtGcmVxdWVuY3l9IGZyZXFcblx0XHQgKiAgQHJldHVybiAge051bWJlcn1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZUJhc2UucHJvdG90eXBlLl9mcmVxdWVuY3lUb1VuaXRzID0gZnVuY3Rpb24gKGZyZXEpIHtcblx0ICAgICAgICByZXR1cm4gMSAvIGZyZXE7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGJlYXRzIGluIHRoZSBjdXJyZW50IHVuaXRzXG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfSBiZWF0c1xuXHRcdCAqICBAcmV0dXJuICB7TnVtYmVyfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lQmFzZS5wcm90b3R5cGUuX2JlYXRzVG9Vbml0cyA9IGZ1bmN0aW9uIChiZWF0cykge1xuXHQgICAgICAgIHJldHVybiA2MCAvIHRoaXMuX2dldEJwbSgpICogYmVhdHM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybnMgdGhlIHZhbHVlIG9mIGEgc2Vjb25kIGluIHRoZSBjdXJyZW50IHVuaXRzXG5cdFx0ICogIEBwYXJhbSB7U2Vjb25kc30gc2Vjb25kc1xuXHRcdCAqICBAcmV0dXJuICB7TnVtYmVyfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lQmFzZS5wcm90b3R5cGUuX3NlY29uZHNUb1VuaXRzID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcblx0ICAgICAgICByZXR1cm4gc2Vjb25kcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJucyB0aGUgdmFsdWUgb2YgYSB0aWNrIGluIHRoZSBjdXJyZW50IHRpbWUgdW5pdHNcblx0XHQgKiAgQHBhcmFtIHtUaWNrc30gdGlja3Ncblx0XHQgKiAgQHJldHVybiAge051bWJlcn1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZUJhc2UucHJvdG90eXBlLl90aWNrc1RvVW5pdHMgPSBmdW5jdGlvbiAodGlja3MpIHtcblx0ICAgICAgICByZXR1cm4gdGlja3MgKiAodGhpcy5fYmVhdHNUb1VuaXRzKDEpIC8gdGhpcy5fZ2V0UFBRKCkpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFdpdGggbm8gYXJndW1lbnRzLCByZXR1cm4gJ25vdydcblx0XHQgKiAgQHJldHVybiAge051bWJlcn1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZUJhc2UucHJvdG90eXBlLl9ub0FyZyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fbm93KCk7XG5cdCAgICB9O1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0RVhQUkVTU0lPTlNcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLyoqXG5cdFx0ICogIEV2YWx1YXRlIHRoZSB0aW1lIHZhbHVlLiBSZXR1cm5zIHRoZSB0aW1lXG5cdFx0ICogIGluIHNlY29uZHMuXG5cdFx0ICogIEByZXR1cm4gIHtTZWNvbmRzfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lQmFzZS5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoVG9uZS5pc1VuZGVmKHRoaXMuX3ZhbCkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25vQXJnKCk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChUb25lLmlzU3RyaW5nKHRoaXMuX3ZhbCkgJiYgVG9uZS5pc1VuZGVmKHRoaXMuX3VuaXRzKSkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciB1bml0cyBpbiB0aGlzLl9leHByZXNzaW9ucykge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2V4cHJlc3Npb25zW3VuaXRzXS5yZWdleHAudGVzdCh0aGlzLl92YWwudHJpbSgpKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VuaXRzID0gdW5pdHM7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKFRvbmUuaXNEZWZpbmVkKHRoaXMuX3VuaXRzKSkge1xuXHQgICAgICAgICAgICB2YXIgZXhwciA9IHRoaXMuX2V4cHJlc3Npb25zW3RoaXMuX3VuaXRzXTtcblx0ICAgICAgICAgICAgdmFyIG1hdGNoaW5nID0gdGhpcy5fdmFsLnRvU3RyaW5nKCkudHJpbSgpLm1hdGNoKGV4cHIucmVnZXhwKTtcblx0ICAgICAgICAgICAgaWYgKG1hdGNoaW5nKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZXhwci5tZXRob2QuYXBwbHkodGhpcywgbWF0Y2hpbmcuc2xpY2UoMSkpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGV4cHIubWV0aG9kLmNhbGwodGhpcywgcGFyc2VGbG9hdCh0aGlzLl92YWwpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWw7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm4gdGhlIHZhbHVlIGluIHNlY29uZHNcblx0XHQgKiAgQHJldHVybiB7U2Vjb25kc31cblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZUJhc2UucHJvdG90eXBlLnRvU2Vjb25kcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybiB0aGUgdmFsdWUgaW4gaGVydHpcblx0XHQgKiAgQHJldHVybiB7RnJlcXVlbmN5fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lQmFzZS5wcm90b3R5cGUudG9GcmVxdWVuY3kgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIDEgLyB0aGlzLnRvU2Vjb25kcygpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm4gdGhlIHRpbWUgaW4gc2FtcGxlc1xuXHRcdCAqICBAcmV0dXJuICB7U2FtcGxlc31cblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZUJhc2UucHJvdG90eXBlLnRvU2FtcGxlcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy50b1NlY29uZHMoKSAqIHRoaXMuY29udGV4dC5zYW1wbGVSYXRlO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm4gdGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuXHRcdCAqICBAcmV0dXJuICB7TWlsbGlzZWNvbmRzfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lQmFzZS5wcm90b3R5cGUudG9NaWxsaXNlY29uZHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMudG9TZWNvbmRzKCkgKiAxMDAwO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJuIHtUb25lLlRpbWVCYXNlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRpbWVCYXNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX3ZhbCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fdW5pdHMgPSBudWxsO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlRpbWVCYXNlO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuRnJlcXVlbmN5IGlzIGEgcHJpbWl0aXZlIHR5cGUgZm9yIGVuY29kaW5nIEZyZXF1ZW5jeSB2YWx1ZXMuXG5cdFx0ICogICAgICAgICBFdmVudHVhbGx5IGFsbCB0aW1lIHZhbHVlcyBhcmUgZXZhbHVhdGVkIHRvIGhlcnR6XG5cdFx0ICogICAgICAgICB1c2luZyB0aGUgYGV2YWxgIG1ldGhvZC5cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLlRpbWVCYXNlfVxuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmd8TnVtYmVyfSAgdmFsICAgIFRoZSB0aW1lIHZhbHVlLlxuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmc9fSAgdW5pdHMgIFRoZSB1bml0cyBvZiB0aGUgdmFsdWUuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogVG9uZS5GcmVxdWVuY3koXCJDM1wiKSAvLyAyNjFcblx0XHQgKiBUb25lLkZyZXF1ZW5jeSgzOCwgXCJtaWRpXCIpIC8vXG5cdFx0ICogVG9uZS5GcmVxdWVuY3koXCJDM1wiKS50cmFuc3Bvc2UoNCk7XG5cdFx0ICovXG5cdCAgICBUb25lLkZyZXF1ZW5jeSA9IGZ1bmN0aW9uICh2YWwsIHVuaXRzKSB7XG5cdCAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBUb25lLkZyZXF1ZW5jeSkge1xuXHQgICAgICAgICAgICBUb25lLlRpbWVCYXNlLmNhbGwodGhpcywgdmFsLCB1bml0cyk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBUb25lLkZyZXF1ZW5jeSh2YWwsIHVuaXRzKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5GcmVxdWVuY3ksIFRvbmUuVGltZUJhc2UpO1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0QVVHTUVOVCBCQVNFIEVYUFJFU1NJT05TXG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIFRvbmUuRnJlcXVlbmN5LnByb3RvdHlwZS5fZXhwcmVzc2lvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBUb25lLlRpbWVCYXNlLnByb3RvdHlwZS5fZXhwcmVzc2lvbnMsIHtcblx0ICAgICAgICAnbWlkaSc6IHtcblx0ICAgICAgICAgICAgcmVnZXhwOiAvXihcXGQrKD86XFwuXFxkKyk/bWlkaSkvLFxuXHQgICAgICAgICAgICBtZXRob2Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RlZmF1bHRVbml0cyA9PT0gJ21pZGknKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gVG9uZS5GcmVxdWVuY3kubXRvZih2YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXHQgICAgICAgICdub3RlJzoge1xuXHQgICAgICAgICAgICByZWdleHA6IC9eKFthLWddezF9KD86YnwjfHh8YmIpPykoLT9bMC05XSspL2ksXG5cdCAgICAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKHBpdGNoLCBvY3RhdmUpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IG5vdGVUb1NjYWxlSW5kZXhbcGl0Y2gudG9Mb3dlckNhc2UoKV07XG5cdCAgICAgICAgICAgICAgICB2YXIgbm90ZU51bWJlciA9IGluZGV4ICsgKHBhcnNlSW50KG9jdGF2ZSkgKyAxKSAqIDEyO1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RlZmF1bHRVbml0cyA9PT0gJ21pZGknKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vdGVOdW1iZXI7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBUb25lLkZyZXF1ZW5jeS5tdG9mKG5vdGVOdW1iZXIpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblx0ICAgICAgICAndHInOiB7XG5cdCAgICAgICAgICAgIHJlZ2V4cDogL14oXFxkKyg/OlxcLlxcZCspPyk6KFxcZCsoPzpcXC5cXGQrKT8pOj8oXFxkKyg/OlxcLlxcZCspPyk/Lyxcblx0ICAgICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbiAobSwgcSwgcykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHRvdGFsID0gMTtcblx0ICAgICAgICAgICAgICAgIGlmIChtICYmIG0gIT09ICcwJykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRvdGFsICo9IHRoaXMuX2JlYXRzVG9Vbml0cyh0aGlzLl9nZXRUaW1lU2lnbmF0dXJlKCkgKiBwYXJzZUZsb2F0KG0pKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmIChxICYmIHEgIT09ICcwJykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRvdGFsICo9IHRoaXMuX2JlYXRzVG9Vbml0cyhwYXJzZUZsb2F0KHEpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmIChzICYmIHMgIT09ICcwJykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRvdGFsICo9IHRoaXMuX2JlYXRzVG9Vbml0cyhwYXJzZUZsb2F0KHMpIC8gNCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdG90YWw7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9cdEVYUFJFU1NJT05TXG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8qKlxuXHRcdCAqICBUcmFuc3Bvc2VzIHRoZSBmcmVxdWVuY3kgYnkgdGhlIGdpdmVuIG51bWJlciBvZiBzZW1pdG9uZXMuXG5cdFx0ICogIEBwYXJhbSAge0ludGVydmFsfSAgaW50ZXJ2YWxcblx0XHQgKiAgQHJldHVybiAge1RvbmUuRnJlcXVlbmN5fSBBIG5ldyB0cmFuc3Bvc2VkIGZyZXF1ZW5jeVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIFRvbmUuRnJlcXVlbmN5KFwiQTRcIikudHJhbnNwb3NlKDMpOyAvL1wiQzVcIlxuXHRcdCAqL1xuXHQgICAgVG9uZS5GcmVxdWVuY3kucHJvdG90eXBlLnRyYW5zcG9zZSA9IGZ1bmN0aW9uIChpbnRlcnZhbCkge1xuXHQgICAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLnZhbHVlT2YoKSAqIFRvbmUuaW50ZXJ2YWxUb0ZyZXF1ZW5jeVJhdGlvKGludGVydmFsKSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRha2VzIGFuIGFycmF5IG9mIHNlbWl0b25lIGludGVydmFscyBhbmQgcmV0dXJuc1xuXHRcdCAqICBhbiBhcnJheSBvZiBmcmVxdWVuY2llcyB0cmFuc3Bvc2VkIGJ5IHRob3NlIGludGVydmFscy5cblx0XHQgKiAgQHBhcmFtICB7QXJyYXl9ICBpbnRlcnZhbHNcblx0XHQgKiAgQHJldHVybiAge0FycmF5PFRvbmUuRnJlcXVlbmN5Pn0gUmV0dXJucyBhbiBhcnJheSBvZiBGcmVxdWVuY2llc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIFRvbmUuRnJlcXVlbmN5KFwiQTRcIikuaGFybW9uaXplKFswLCAzLCA3XSk7IC8vW1wiQTRcIiwgXCJDNVwiLCBcIkU1XCJdXG5cdFx0ICovXG5cdCAgICBUb25lLkZyZXF1ZW5jeS5wcm90b3R5cGUuaGFybW9uaXplID0gZnVuY3Rpb24gKGludGVydmFscykge1xuXHQgICAgICAgIHJldHVybiBpbnRlcnZhbHMubWFwKGZ1bmN0aW9uIChpbnRlcnZhbCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc3Bvc2UoaW50ZXJ2YWwpO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICB9O1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0VU5JVCBDT05WRVJTSU9OU1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZnJlcXVlbmN5IGFzIGEgTUlESSBub3RlXG5cdFx0ICogIEByZXR1cm4gIHtNSURJfVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIFRvbmUuRnJlcXVlbmN5KFwiQzRcIikudG9NaWRpKCk7IC8vNjBcblx0XHQgKi9cblx0ICAgIFRvbmUuRnJlcXVlbmN5LnByb3RvdHlwZS50b01pZGkgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIFRvbmUuRnJlcXVlbmN5LmZ0b20odGhpcy52YWx1ZU9mKCkpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmcmVxdWVuY3kgaW4gU2NpZW50aWZpYyBQaXRjaCBOb3RhdGlvblxuXHRcdCAqICBAcmV0dXJuICB7Tm90ZX1cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiBUb25lLkZyZXF1ZW5jeSg2OSwgXCJtaWRpXCIpLnRvTm90ZSgpOyAvL1wiQTRcIlxuXHRcdCAqL1xuXHQgICAgVG9uZS5GcmVxdWVuY3kucHJvdG90eXBlLnRvTm90ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgZnJlcSA9IHRoaXMudG9GcmVxdWVuY3koKTtcblx0ICAgICAgICB2YXIgbG9nID0gTWF0aC5sb2cyKGZyZXEgLyBUb25lLkZyZXF1ZW5jeS5BNCk7XG5cdCAgICAgICAgdmFyIG5vdGVOdW1iZXIgPSBNYXRoLnJvdW5kKDEyICogbG9nKSArIDU3O1xuXHQgICAgICAgIHZhciBvY3RhdmUgPSBNYXRoLmZsb29yKG5vdGVOdW1iZXIgLyAxMik7XG5cdCAgICAgICAgaWYgKG9jdGF2ZSA8IDApIHtcblx0ICAgICAgICAgICAgbm90ZU51bWJlciArPSAtMTIgKiBvY3RhdmU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBub3RlTmFtZSA9IHNjYWxlSW5kZXhUb05vdGVbbm90ZU51bWJlciAlIDEyXTtcblx0ICAgICAgICByZXR1cm4gbm90ZU5hbWUgKyBvY3RhdmUudG9TdHJpbmcoKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJuIHRoZSBkdXJhdGlvbiBvZiBvbmUgY3ljbGUgaW4gc2Vjb25kcy5cblx0XHQgKiAgQHJldHVybiAge1NlY29uZHN9XG5cdFx0ICovXG5cdCAgICBUb25lLkZyZXF1ZW5jeS5wcm90b3R5cGUudG9TZWNvbmRzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiAxIC8gVG9uZS5UaW1lQmFzZS5wcm90b3R5cGUudG9TZWNvbmRzLmNhbGwodGhpcyk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybiB0aGUgdmFsdWUgaW4gSGVydHpcblx0XHQgKiAgQHJldHVybiAge0ZyZXF1ZW5jeX1cblx0XHQgKi9cblx0ICAgIFRvbmUuRnJlcXVlbmN5LnByb3RvdHlwZS50b0ZyZXF1ZW5jeSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gVG9uZS5UaW1lQmFzZS5wcm90b3R5cGUudG9GcmVxdWVuY3kuY2FsbCh0aGlzKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJuIHRoZSBkdXJhdGlvbiBvZiBvbmUgY3ljbGUgaW4gdGlja3Ncblx0XHQgKiAgQHJldHVybiAge1RpY2tzfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5GcmVxdWVuY3kucHJvdG90eXBlLnRvVGlja3MgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHF1YXJ0ZXJUaW1lID0gdGhpcy5fYmVhdHNUb1VuaXRzKDEpO1xuXHQgICAgICAgIHZhciBxdWFydGVycyA9IHRoaXMudmFsdWVPZigpIC8gcXVhcnRlclRpbWU7XG5cdCAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IocXVhcnRlcnMgKiBUb25lLlRyYW5zcG9ydC5QUFEpO1xuXHQgICAgfTtcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9cdFVOSVQgQ09OVkVSU0lPTlMgSEVMUEVSU1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgV2l0aCBubyBhcmd1bWVudHMsIHJldHVybiAwXG5cdFx0ICogIEByZXR1cm4gIHtOdW1iZXJ9XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkZyZXF1ZW5jeS5wcm90b3R5cGUuX25vQXJnID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiAwO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIGZyZXF1ZW5jeSBpbiB0aGUgY3VycmVudCB1bml0c1xuXHRcdCAqICBAcGFyYW0ge0ZyZXF1ZW5jeX0gZnJlcVxuXHRcdCAqICBAcmV0dXJuICB7TnVtYmVyfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5GcmVxdWVuY3kucHJvdG90eXBlLl9mcmVxdWVuY3lUb1VuaXRzID0gZnVuY3Rpb24gKGZyZXEpIHtcblx0ICAgICAgICByZXR1cm4gZnJlcTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJucyB0aGUgdmFsdWUgb2YgYSB0aWNrIGluIHRoZSBjdXJyZW50IHRpbWUgdW5pdHNcblx0XHQgKiAgQHBhcmFtIHtUaWNrc30gdGlja3Ncblx0XHQgKiAgQHJldHVybiAge051bWJlcn1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuRnJlcXVlbmN5LnByb3RvdHlwZS5fdGlja3NUb1VuaXRzID0gZnVuY3Rpb24gKHRpY2tzKSB7XG5cdCAgICAgICAgcmV0dXJuIDEgLyAodGlja3MgKiA2MCAvIChUb25lLlRyYW5zcG9ydC5icG0udmFsdWUgKiBUb25lLlRyYW5zcG9ydC5QUFEpKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgYmVhdHMgaW4gdGhlIGN1cnJlbnQgdW5pdHNcblx0XHQgKiAgQHBhcmFtIHtOdW1iZXJ9IGJlYXRzXG5cdFx0ICogIEByZXR1cm4gIHtOdW1iZXJ9XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkZyZXF1ZW5jeS5wcm90b3R5cGUuX2JlYXRzVG9Vbml0cyA9IGZ1bmN0aW9uIChiZWF0cykge1xuXHQgICAgICAgIHJldHVybiAxIC8gVG9uZS5UaW1lQmFzZS5wcm90b3R5cGUuX2JlYXRzVG9Vbml0cy5jYWxsKHRoaXMsIGJlYXRzKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJucyB0aGUgdmFsdWUgb2YgYSBzZWNvbmQgaW4gdGhlIGN1cnJlbnQgdW5pdHNcblx0XHQgKiAgQHBhcmFtIHtTZWNvbmRzfSBzZWNvbmRzXG5cdFx0ICogIEByZXR1cm4gIHtOdW1iZXJ9XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkZyZXF1ZW5jeS5wcm90b3R5cGUuX3NlY29uZHNUb1VuaXRzID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcblx0ICAgICAgICByZXR1cm4gMSAvIHNlY29uZHM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBkZWZhdWx0IHVuaXRzIGlmIG5vbmUgYXJlIGdpdmVuLlxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5GcmVxdWVuY3kucHJvdG90eXBlLl9kZWZhdWx0VW5pdHMgPSAnaHonO1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0RlJFUVVFTkNZIENPTlZFUlNJT05TXG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8qKlxuXHRcdCAqICBOb3RlIHRvIHNjYWxlIGluZGV4XG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgdmFyIG5vdGVUb1NjYWxlSW5kZXggPSB7XG5cdCAgICAgICAgJ2NiYic6IC0yLFxuXHQgICAgICAgICdjYic6IC0xLFxuXHQgICAgICAgICdjJzogMCxcblx0ICAgICAgICAnYyMnOiAxLFxuXHQgICAgICAgICdjeCc6IDIsXG5cdCAgICAgICAgJ2RiYic6IDAsXG5cdCAgICAgICAgJ2RiJzogMSxcblx0ICAgICAgICAnZCc6IDIsXG5cdCAgICAgICAgJ2QjJzogMyxcblx0ICAgICAgICAnZHgnOiA0LFxuXHQgICAgICAgICdlYmInOiAyLFxuXHQgICAgICAgICdlYic6IDMsXG5cdCAgICAgICAgJ2UnOiA0LFxuXHQgICAgICAgICdlIyc6IDUsXG5cdCAgICAgICAgJ2V4JzogNixcblx0ICAgICAgICAnZmJiJzogMyxcblx0ICAgICAgICAnZmInOiA0LFxuXHQgICAgICAgICdmJzogNSxcblx0ICAgICAgICAnZiMnOiA2LFxuXHQgICAgICAgICdmeCc6IDcsXG5cdCAgICAgICAgJ2diYic6IDUsXG5cdCAgICAgICAgJ2diJzogNixcblx0ICAgICAgICAnZyc6IDcsXG5cdCAgICAgICAgJ2cjJzogOCxcblx0ICAgICAgICAnZ3gnOiA5LFxuXHQgICAgICAgICdhYmInOiA3LFxuXHQgICAgICAgICdhYic6IDgsXG5cdCAgICAgICAgJ2EnOiA5LFxuXHQgICAgICAgICdhIyc6IDEwLFxuXHQgICAgICAgICdheCc6IDExLFxuXHQgICAgICAgICdiYmInOiA5LFxuXHQgICAgICAgICdiYic6IDEwLFxuXHQgICAgICAgICdiJzogMTEsXG5cdCAgICAgICAgJ2IjJzogMTIsXG5cdCAgICAgICAgJ2J4JzogMTNcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgc2NhbGUgaW5kZXggdG8gbm90ZSAoc2hhcnBzKVxuXHRcdCAqICBAdHlwZSAge0FycmF5fVxuXHRcdCAqL1xuXHQgICAgdmFyIHNjYWxlSW5kZXhUb05vdGUgPSBbXG5cdCAgICAgICAgJ0MnLFxuXHQgICAgICAgICdDIycsXG5cdCAgICAgICAgJ0QnLFxuXHQgICAgICAgICdEIycsXG5cdCAgICAgICAgJ0UnLFxuXHQgICAgICAgICdGJyxcblx0ICAgICAgICAnRiMnLFxuXHQgICAgICAgICdHJyxcblx0ICAgICAgICAnRyMnLFxuXHQgICAgICAgICdBJyxcblx0ICAgICAgICAnQSMnLFxuXHQgICAgICAgICdCJ1xuXHQgICAgXTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgW2NvbmNlcnQgcGl0Y2hdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbmNlcnRfcGl0Y2gpXG5cdFx0ICogIEE0J3MgdmFsdWVzIGluIEhlcnR6LlxuXHRcdCAqICBAdHlwZSB7RnJlcXVlbmN5fVxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICovXG5cdCAgICBUb25lLkZyZXF1ZW5jeS5BNCA9IDQ0MDtcblx0ICAgIC8qKlxuXHRcdCAqICBDb252ZXJ0IGEgTUlESSBub3RlIHRvIGZyZXF1ZW5jeSB2YWx1ZS5cblx0XHQgKiAgQHBhcmFtICB7TUlESX0gbWlkaSBUaGUgbWlkaSBudW1iZXIgdG8gY29udmVydC5cblx0XHQgKiAgQHJldHVybiB7RnJlcXVlbmN5fSB0aGUgY29ycmVzcG9uZGluZyBmcmVxdWVuY3kgdmFsdWVcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIFRvbmUuRnJlcXVlbmN5Lm10b2YoNjkpOyAvLyByZXR1cm5zIDQ0MFxuXHRcdCAqL1xuXHQgICAgVG9uZS5GcmVxdWVuY3kubXRvZiA9IGZ1bmN0aW9uIChtaWRpKSB7XG5cdCAgICAgICAgcmV0dXJuIFRvbmUuRnJlcXVlbmN5LkE0ICogTWF0aC5wb3coMiwgKG1pZGkgLSA2OSkgLyAxMik7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENvbnZlcnQgYSBmcmVxdWVuY3kgdmFsdWUgdG8gYSBNSURJIG5vdGUuXG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fSBmcmVxdWVuY3kgVGhlIHZhbHVlIHRvIGZyZXF1ZW5jeSB2YWx1ZSB0byBjb252ZXJ0LlxuXHRcdCAqICBAcmV0dXJucyAge01JREl9XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiBUb25lLkZyZXF1ZW5jeS5mdG9tKDQ0MCk7IC8vIHJldHVybnMgNjlcblx0XHQgKi9cblx0ICAgIFRvbmUuRnJlcXVlbmN5LmZ0b20gPSBmdW5jdGlvbiAoZnJlcXVlbmN5KSB7XG5cdCAgICAgICAgcmV0dXJuIDY5ICsgTWF0aC5yb3VuZCgxMiAqIE1hdGgubG9nMihmcmVxdWVuY3kgLyBUb25lLkZyZXF1ZW5jeS5BNCkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkZyZXF1ZW5jeTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLlRpbWUgaXMgYSBwcmltaXRpdmUgdHlwZSBmb3IgZW5jb2RpbmcgVGltZSB2YWx1ZXMuXG5cdFx0ICogICAgICAgICBUb25lLlRpbWUgY2FuIGJlIGNvbnN0cnVjdGVkIHdpdGggb3Igd2l0aG91dCB0aGUgYG5ld2Aga2V5d29yZC4gVG9uZS5UaW1lIGNhbiBiZSBwYXNzZWRcblx0XHQgKiAgICAgICAgIGludG8gdGhlIHBhcmFtZXRlciBvZiBhbnkgbWV0aG9kIHdoaWNoIHRha2VzIHRpbWUgYXMgYW4gYXJndW1lbnQuXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5UaW1lQmFzZX1cblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfE51bWJlcn0gIHZhbCAgICBUaGUgdGltZSB2YWx1ZS5cblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nPX0gIHVuaXRzICBUaGUgdW5pdHMgb2YgdGhlIHZhbHVlLlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciB0ID0gVG9uZS5UaW1lKFwiNG5cIik7Ly9hIHF1YXJ0ZXIgbm90ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lID0gZnVuY3Rpb24gKHZhbCwgdW5pdHMpIHtcblx0ICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIFRvbmUuVGltZSkge1xuXHQgICAgICAgICAgICBUb25lLlRpbWVCYXNlLmNhbGwodGhpcywgdmFsLCB1bml0cyk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBUb25lLlRpbWUodmFsLCB1bml0cyk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuVGltZSwgVG9uZS5UaW1lQmFzZSk7XG5cdCAgICAvKipcblx0XHQgKiBFeHRlbmQgdGhlIGJhc2UgZXhwcmVzc2lvbnNcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZS5wcm90b3R5cGUuX2V4cHJlc3Npb25zID0gT2JqZWN0LmFzc2lnbih7fSwgVG9uZS5UaW1lQmFzZS5wcm90b3R5cGUuX2V4cHJlc3Npb25zLCB7XG5cdCAgICAgICAgJ3F1YW50aXplJzoge1xuXHQgICAgICAgICAgICByZWdleHA6IC9eQCguKykvLFxuXHQgICAgICAgICAgICBtZXRob2Q6IGZ1bmN0aW9uIChjYXB0dXJlKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoVG9uZS5UcmFuc3BvcnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcXVhbnRUbyA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGNhcHR1cmUpO1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBUb25lLlRyYW5zcG9ydC5uZXh0U3ViZGl2aXNpb24ocXVhbnRUbyk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblx0ICAgICAgICAnbm93Jzoge1xuXHQgICAgICAgICAgICByZWdleHA6IC9eXFwrKC4rKS8sXG5cdCAgICAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKGNhcHR1cmUpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub3coKSArIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGNhcHR1cmUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgUXVhbnRpemUgdGhlIHRpbWUgYnkgdGhlIGdpdmVuIHN1YmRpdmlzaW9uLiBPcHRpb25hbGx5IGFkZCBhXG5cdFx0ICogIHBlcmNlbnRhZ2Ugd2hpY2ggd2lsbCBtb3ZlIHRoZSB0aW1lIHZhbHVlIHRvd2FyZHMgdGhlIGlkZWFsXG5cdFx0ICogIHF1YW50aXplZCB2YWx1ZSBieSB0aGF0IHBlcmNlbnRhZ2UuXG5cdFx0ICogIEBwYXJhbSAge051bWJlcnxUaW1lfSAgdmFsICAgIFRoZSBzdWJkaXZpc2lvbiB0byBxdWFudGl6ZSB0b1xuXHRcdCAqICBAcGFyYW0gIHtOb3JtYWxSYW5nZX0gIFtwZXJjZW50PTFdICBNb3ZlIHRoZSB0aW1lIHZhbHVlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvd2FyZHMgdGhlIHF1YW50aXplZCB2YWx1ZSBieVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHBlcmNlbnRhZ2UuXG5cdFx0ICogIEByZXR1cm4gIHtOdW1iZXJ9ICB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogVG9uZS5UaW1lKDIxKS5xdWFudGl6ZSgyKSAvL3JldHVybnMgMjJcblx0XHQgKiBUb25lLlRpbWUoMC42KS5xdWFudGl6ZShcIjRuXCIsIDAuNSkgLy9yZXR1cm5zIDAuNTVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZS5wcm90b3R5cGUucXVhbnRpemUgPSBmdW5jdGlvbiAoc3ViZGl2LCBwZXJjZW50KSB7XG5cdCAgICAgICAgcGVyY2VudCA9IFRvbmUuZGVmYXVsdEFyZyhwZXJjZW50LCAxKTtcblx0ICAgICAgICB2YXIgc3ViZGl2aXNpb24gPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihzdWJkaXYpO1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWVPZigpO1xuXHQgICAgICAgIHZhciBtdWx0aXBsZSA9IE1hdGgucm91bmQodmFsdWUgLyBzdWJkaXZpc2lvbik7XG5cdCAgICAgICAgdmFyIGlkZWFsID0gbXVsdGlwbGUgKiBzdWJkaXZpc2lvbjtcblx0ICAgICAgICB2YXIgZGlmZiA9IGlkZWFsIC0gdmFsdWU7XG5cdCAgICAgICAgcmV0dXJuIHZhbHVlICsgZGlmZiAqIHBlcmNlbnQ7XG5cdCAgICB9O1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvLyBDT05WRVJTSU9OU1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgQ29udmVydCBhIFRpbWUgdG8gTm90YXRpb24uIFRoZSBub3RhdGlvbiB2YWx1ZXMgYXJlIHdpbGwgYmUgdGhlXG5cdFx0ICogIGNsb3Nlc3QgcmVwcmVzZW50YXRpb24gYmV0d2VlbiAxbSB0byAxMjh0aCBub3RlLlxuXHRcdCAqICBAcmV0dXJuIHtOb3RhdGlvbn1cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2lmIHRoZSBUcmFuc3BvcnQgaXMgYXQgMTIwYnBtOlxuXHRcdCAqIFRvbmUuVGltZSgyKS50b05vdGF0aW9uKCk7Ly9yZXR1cm5zIFwiMW1cIlxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lLnByb3RvdHlwZS50b05vdGF0aW9uID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciB0aW1lID0gdGhpcy50b1NlY29uZHMoKTtcblx0ICAgICAgICB2YXIgdGVzdE5vdGF0aW9ucyA9IFsnMW0nXTtcblx0ICAgICAgICBmb3IgKHZhciBwb3dlciA9IDE7IHBvd2VyIDwgODsgcG93ZXIrKykge1xuXHQgICAgICAgICAgICB2YXIgc3ViZGl2ID0gTWF0aC5wb3coMiwgcG93ZXIpO1xuXHQgICAgICAgICAgICB0ZXN0Tm90YXRpb25zLnB1c2goc3ViZGl2ICsgJ24uJyk7XG5cdCAgICAgICAgICAgIHRlc3ROb3RhdGlvbnMucHVzaChzdWJkaXYgKyAnbicpO1xuXHQgICAgICAgICAgICB0ZXN0Tm90YXRpb25zLnB1c2goc3ViZGl2ICsgJ3QnKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGVzdE5vdGF0aW9ucy5wdXNoKCcwJyk7XG5cdCAgICAgICAgLy9maW5kIHRoZSBjbG9zZXRzIG5vdGF0aW9uIHJlcHJlc2VudGF0aW9uXG5cdCAgICAgICAgdmFyIGNsb3Nlc3QgPSB0ZXN0Tm90YXRpb25zWzBdO1xuXHQgICAgICAgIHZhciBjbG9zZXN0U2Vjb25kcyA9IFRvbmUuVGltZSh0ZXN0Tm90YXRpb25zWzBdKS50b1NlY29uZHMoKTtcblx0ICAgICAgICB0ZXN0Tm90YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG5vdGF0aW9uKSB7XG5cdCAgICAgICAgICAgIHZhciBub3RhdGlvblNlY29uZHMgPSBUb25lLlRpbWUobm90YXRpb24pLnRvU2Vjb25kcygpO1xuXHQgICAgICAgICAgICBpZiAoTWF0aC5hYnMobm90YXRpb25TZWNvbmRzIC0gdGltZSkgPCBNYXRoLmFicyhjbG9zZXN0U2Vjb25kcyAtIHRpbWUpKSB7XG5cdCAgICAgICAgICAgICAgICBjbG9zZXN0ID0gbm90YXRpb247XG5cdCAgICAgICAgICAgICAgICBjbG9zZXN0U2Vjb25kcyA9IG5vdGF0aW9uU2Vjb25kcztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybiBjbG9zZXN0O1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm4gdGhlIHRpbWUgZW5jb2RlZCBhcyBCYXJzOkJlYXRzOlNpeHRlZW50aHMuXG5cdFx0ICogIEByZXR1cm4gIHtCYXJzQmVhdHNTaXh0ZWVudGhzfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lLnByb3RvdHlwZS50b0JhcnNCZWF0c1NpeHRlZW50aHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHF1YXJ0ZXJUaW1lID0gdGhpcy5fYmVhdHNUb1VuaXRzKDEpO1xuXHQgICAgICAgIHZhciBxdWFydGVycyA9IHRoaXMudmFsdWVPZigpIC8gcXVhcnRlclRpbWU7XG5cdCAgICAgICAgdmFyIG1lYXN1cmVzID0gTWF0aC5mbG9vcihxdWFydGVycyAvIHRoaXMuX2dldFRpbWVTaWduYXR1cmUoKSk7XG5cdCAgICAgICAgdmFyIHNpeHRlZW50aHMgPSBxdWFydGVycyAlIDEgKiA0O1xuXHQgICAgICAgIHF1YXJ0ZXJzID0gTWF0aC5mbG9vcihxdWFydGVycykgJSB0aGlzLl9nZXRUaW1lU2lnbmF0dXJlKCk7XG5cdCAgICAgICAgc2l4dGVlbnRocyA9IHNpeHRlZW50aHMudG9TdHJpbmcoKTtcblx0ICAgICAgICBpZiAoc2l4dGVlbnRocy5sZW5ndGggPiAzKSB7XG5cdCAgICAgICAgICAgIC8vIHRoZSBhZGRpdGlvbmFsIHBhcnNlRmxvYXQgcmVtb3ZlcyBpbnNpZ25pZmljYW50IHRyYWlsaW5nIHplcm9lc1xuXHQgICAgICAgICAgICBzaXh0ZWVudGhzID0gcGFyc2VGbG9hdChwYXJzZUZsb2F0KHNpeHRlZW50aHMpLnRvRml4ZWQoMykpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBbXG5cdCAgICAgICAgICAgIG1lYXN1cmVzLFxuXHQgICAgICAgICAgICBxdWFydGVycyxcblx0ICAgICAgICAgICAgc2l4dGVlbnRoc1xuXHQgICAgICAgIF07XG5cdCAgICAgICAgcmV0dXJuIHByb2dyZXNzLmpvaW4oJzonKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJuIHRoZSB0aW1lIGluIHRpY2tzLlxuXHRcdCAqICBAcmV0dXJuICB7VGlja3N9XG5cdFx0ICovXG5cdCAgICBUb25lLlRpbWUucHJvdG90eXBlLnRvVGlja3MgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHF1YXJ0ZXJUaW1lID0gdGhpcy5fYmVhdHNUb1VuaXRzKDEpO1xuXHQgICAgICAgIHZhciBxdWFydGVycyA9IHRoaXMudmFsdWVPZigpIC8gcXVhcnRlclRpbWU7XG5cdCAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocXVhcnRlcnMgKiB0aGlzLl9nZXRQUFEoKSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybiB0aGUgdGltZSBpbiBzZWNvbmRzLlxuXHRcdCAqICBAcmV0dXJuICB7U2Vjb25kc31cblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZS5wcm90b3R5cGUudG9TZWNvbmRzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJuIHRoZSB2YWx1ZSBhcyBhIG1pZGkgbm90ZS5cblx0XHQgKiAgQHJldHVybiAge01pZGl9XG5cdFx0ICovXG5cdCAgICBUb25lLlRpbWUucHJvdG90eXBlLnRvTWlkaSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gVG9uZS5GcmVxdWVuY3kuZnRvbSh0aGlzLnRvRnJlcXVlbmN5KCkpO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlRpbWU7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgVG9uZS5UcmFuc3BvcnRUaW1lIGlzIGEgdGhlIHRpbWUgYWxvbmcgdGhlIFRyYW5zcG9ydCdzXG5cdFx0ICogICAgICAgICB0aW1lbGluZS4gSXQgaXMgc2ltaWxhciB0byBUb25lLlRpbWUsIGJ1dCBpbnN0ZWFkIG9mIGV2YWx1YXRpbmdcblx0XHQgKiAgICAgICAgIGFnYWluc3QgdGhlIEF1ZGlvQ29udGV4dCdzIGNsb2NrLCBpdCBpcyBldmFsdWF0ZWQgYWdhaW5zdFxuXHRcdCAqICAgICAgICAgdGhlIFRyYW5zcG9ydCdzIHBvc2l0aW9uLiBTZWUgW1RyYW5zcG9ydFRpbWUgd2lraV0oaHR0cHM6Ly9naXRodWIuY29tL1RvbmVqcy9Ub25lLmpzL3dpa2kvVHJhbnNwb3J0VGltZSkuXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSAgdmFsICAgIFRoZSB0aW1lIHZhbHVlIGFzIGEgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmc9fSAgdW5pdHMgIFVuaXQgdmFsdWVzXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLlRpbWV9XG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydFRpbWUgPSBmdW5jdGlvbiAodmFsLCB1bml0cykge1xuXHQgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgVG9uZS5UcmFuc3BvcnRUaW1lKSB7XG5cdCAgICAgICAgICAgIFRvbmUuVGltZS5jYWxsKHRoaXMsIHZhbCwgdW5pdHMpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgVG9uZS5UcmFuc3BvcnRUaW1lKHZhbCwgdW5pdHMpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlRyYW5zcG9ydFRpbWUsIFRvbmUuVGltZSk7XG5cdCAgICAvKipcblx0XHQgKiBSZXR1cm4gdGhlIGN1cnJlbnQgdGltZSBpbiB3aGljaGV2ZXIgY29udGV4dCBpcyByZWxldmFudFxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0VGltZS5wcm90b3R5cGUuX25vdyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gVG9uZS5UcmFuc3BvcnQuc2Vjb25kcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5UcmFuc3BvcnRUaW1lO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8vXHRUWVBFU1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiBVbml0cyB3aGljaCBhIHZhbHVlIGNhbiB0YWtlIG9uLlxuXHRcdCAqIEBlbnVtIHtTdHJpbmd9XG5cdFx0ICovXG5cdCAgICBUb25lLlR5cGUgPSB7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgRGVmYXVsdCB1bml0c1xuXHRcdFx0ICogIEB0eXBlZGVmIHtEZWZhdWx0fVxuXHRcdFx0ICovXG5cdCAgICAgICAgRGVmYXVsdDogJ251bWJlcicsXG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGltZSBjYW4gYmUgZGVzY3JpYmVkIGluIGEgbnVtYmVyIG9mIHdheXMuIFJlYWQgbW9yZSBbVGltZV0oaHR0cHM6Ly9naXRodWIuY29tL1RvbmVqcy9Ub25lLmpzL3dpa2kvVGltZSkuXG5cdFx0XHQgKlxuXHRcdFx0ICogICogTnVtYmVycywgd2hpY2ggd2lsbCBiZSB0YWtlbiBsaXRlcmFsbHkgYXMgdGhlIHRpbWUgKGluIHNlY29uZHMpLlxuXHRcdFx0ICogICogTm90YXRpb24sIChcIjRuXCIsIFwiOHRcIikgZGVzY3JpYmVzIHRpbWUgaW4gQlBNIGFuZCB0aW1lIHNpZ25hdHVyZSByZWxhdGl2ZSB2YWx1ZXMuXG5cdFx0XHQgKiAgKiBUcmFuc3BvcnRUaW1lLCAoXCI0OjM6MlwiKSB3aWxsIGFsc28gcHJvdmlkZSB0ZW1wbyBhbmQgdGltZSBzaWduYXR1cmUgcmVsYXRpdmUgdGltZXNcblx0XHRcdCAqICBpbiB0aGUgZm9ybSBCQVJTOlFVQVJURVJTOlNJWFRFRU5USFMuXG5cdFx0XHQgKiAgKiBGcmVxdWVuY3ksIChcIjhoelwiKSBpcyBjb252ZXJ0ZWQgdG8gdGhlIGxlbmd0aCBvZiB0aGUgY3ljbGUgaW4gc2Vjb25kcy5cblx0XHRcdCAqICAqIE5vdy1SZWxhdGl2ZSwgKFwiKzFcIikgcHJlZml4IGFueSBvZiB0aGUgYWJvdmUgd2l0aCBcIitcIiBhbmQgaXQgd2lsbCBiZSBpbnRlcnByZXRlZCBhc1xuXHRcdFx0ICogIFwidGhlIGN1cnJlbnQgdGltZSBwbHVzIHdoYXRldmVyIGV4cHJlc3Npb24gZm9sbG93c1wiLlxuXHRcdFx0ICogICogRXhwcmVzc2lvbnMsIChcIjM6MCArIDIgLSAoMW0gLyA3KVwiKSBhbnkgb2YgdGhlIGFib3ZlIGNhbiBhbHNvIGJlIGNvbWJpbmVkXG5cdFx0XHQgKiAgaW50byBhIG1hdGhlbWF0aWNhbCBleHByZXNzaW9uIHdoaWNoIHdpbGwgYmUgZXZhbHVhdGVkIHRvIGNvbXB1dGUgdGhlIGRlc2lyZWQgdGltZS5cblx0XHRcdCAqICAqIE5vIEFyZ3VtZW50LCBmb3IgbWV0aG9kcyB3aGljaCBhY2NlcHQgdGltZSwgbm8gYXJndW1lbnQgd2lsbCBiZSBpbnRlcnByZXRlZCBhc1xuXHRcdFx0ICogIFwibm93XCIgKGkuZS4gdGhlIGN1cnJlbnRUaW1lKS5cblx0XHRcdCAqXG5cdFx0XHQgKiAgQHR5cGVkZWYge1RpbWV9XG5cdFx0XHQgKi9cblx0ICAgICAgICBUaW1lOiAndGltZScsXG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgRnJlcXVlbmN5IGNhbiBiZSBkZXNjcmliZWQgc2ltaWxhciB0byB0aW1lLCBleGNlcHQgdWx0aW1hdGVseSB0aGVcblx0XHRcdCAqICB2YWx1ZXMgYXJlIGNvbnZlcnRlZCB0byBmcmVxdWVuY3kgaW5zdGVhZCBvZiBzZWNvbmRzLiBBIG51bWJlclxuXHRcdFx0ICogIGlzIHRha2VuIGxpdGVyYWxseSBhcyB0aGUgdmFsdWUgaW4gaGVydHouIEFkZGl0aW9uYWxseSBhbnkgb2YgdGhlXG5cdFx0XHQgKiAgVGltZSBlbmNvZGluZ3MgY2FuIGJlIHVzZWQuIE5vdGUgbmFtZXMgaW4gdGhlIGZvcm1cblx0XHRcdCAqICBvZiBOT1RFIE9DVEFWRSAoaS5lLiBDNCkgYXJlIGFsc28gYWNjZXB0ZWQgYW5kIGNvbnZlcnRlZCB0byB0aGVpclxuXHRcdFx0ICogIGZyZXF1ZW5jeSB2YWx1ZS5cblx0XHRcdCAqICBAdHlwZWRlZiB7RnJlcXVlbmN5fVxuXHRcdFx0ICovXG5cdCAgICAgICAgRnJlcXVlbmN5OiAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUcmFuc3BvcnRUaW1lIGRlc2NyaWJlcyBhIHBvc2l0aW9uIGFsb25nIHRoZSBUcmFuc3BvcnQncyB0aW1lbGluZS4gSXQgaXNcblx0XHRcdCAqICBzaW1pbGFyIHRvIFRpbWUgaW4gdGhhdCBpdCB1c2VzIGFsbCB0aGUgc2FtZSBlbmNvZGluZ3MsIGJ1dCBUcmFuc3BvcnRUaW1lIHNwZWNpZmljYWxseVxuXHRcdFx0ICogIHBlcnRhaW5zIHRvIHRoZSBUcmFuc3BvcnQncyB0aW1lbGluZSwgd2hpY2ggaXMgc3RhcnRhYmxlLCBzdG9wcGFibGUsIGxvb3BhYmxlLCBhbmQgc2Vla2FibGUuXG5cdFx0XHQgKiAgW1JlYWQgbW9yZV0oaHR0cHM6Ly9naXRodWIuY29tL1RvbmVqcy9Ub25lLmpzL3dpa2kvVHJhbnNwb3J0VGltZSlcblx0XHRcdCAqICBAdHlwZWRlZiB7VHJhbnNwb3J0VGltZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIFRyYW5zcG9ydFRpbWU6ICd0cmFuc3BvcnRUaW1lJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaWNrcyBhcmUgdGhlIGJhc2ljIHN1YnVuaXQgb2YgdGhlIFRyYW5zcG9ydC4gVGhleSBhcmVcblx0XHRcdCAqICB0aGUgc21hbGxlc3QgdW5pdCBvZiB0aW1lIHRoYXQgdGhlIFRyYW5zcG9ydCBzdXBwb3J0cy5cblx0XHRcdCAqICBAdHlwZWRlZiB7VGlja3N9XG5cdFx0XHQgKi9cblx0ICAgICAgICBUaWNrczogJ3RpY2tzJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBOb3JtYWwgdmFsdWVzIGFyZSB3aXRoaW4gdGhlIHJhbmdlIFswLCAxXS5cblx0XHRcdCAqICBAdHlwZWRlZiB7Tm9ybWFsUmFuZ2V9XG5cdFx0XHQgKi9cblx0ICAgICAgICBOb3JtYWxSYW5nZTogJ25vcm1hbFJhbmdlJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBBdWRpb1JhbmdlIHZhbHVlcyBhcmUgYmV0d2VlbiBbLTEsIDFdLlxuXHRcdFx0ICogIEB0eXBlZGVmIHtBdWRpb1JhbmdlfVxuXHRcdFx0ICovXG5cdCAgICAgICAgQXVkaW9SYW5nZTogJ2F1ZGlvUmFuZ2UnLFxuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIERlY2liZWxzIGFyZSBhIGxvZ2FyaXRobWljIHVuaXQgb2YgbWVhc3VyZW1lbnQgd2hpY2ggaXMgdXNlZnVsIGZvciB2b2x1bWVcblx0XHRcdCAqICBiZWNhdXNlIG9mIHRoZSBsb2dhcml0aG1pYyB3YXkgdGhhdCB3ZSBwZXJjZWl2ZSBsb3VkbmVzcy4gMCBkZWNpYmVsc1xuXHRcdFx0ICogIG1lYW5zIG5vIGNoYW5nZSBpbiB2b2x1bWUuIC0xMGRiIGlzIGFwcHJveGltYXRlbHkgaGFsZiBhcyBsb3VkIGFuZCAxMGRiXG5cdFx0XHQgKiAgaXMgdHdpY2UgaXMgbG91ZC5cblx0XHRcdCAqICBAdHlwZWRlZiB7RGVjaWJlbHN9XG5cdFx0XHQgKi9cblx0ICAgICAgICBEZWNpYmVsczogJ2RiJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBIYWxmLXN0ZXAgbm90ZSBpbmNyZW1lbnRzLCBpLmUuIDEyIGlzIGFuIG9jdGF2ZSBhYm92ZSB0aGUgcm9vdC4gYW5kIDEgaXMgYSBoYWxmLXN0ZXAgdXAuXG5cdFx0XHQgKiAgQHR5cGVkZWYge0ludGVydmFsfVxuXHRcdFx0ICovXG5cdCAgICAgICAgSW50ZXJ2YWw6ICdpbnRlcnZhbCcsXG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQmVhdHMgcGVyIG1pbnV0ZS5cblx0XHRcdCAqICBAdHlwZWRlZiB7QlBNfVxuXHRcdFx0ICovXG5cdCAgICAgICAgQlBNOiAnYnBtJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgdmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMC5cblx0XHRcdCAqICBAdHlwZWRlZiB7UG9zaXRpdmV9XG5cdFx0XHQgKi9cblx0ICAgICAgICBQb3NpdGl2ZTogJ3Bvc2l0aXZlJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBHYWluIGlzIHRoZSByYXRpbyBiZXR3ZWVuIGlucHV0IGFuZCBvdXRwdXQgb2YgYSBzaWduYWwuXG5cdFx0XHQgKiAgQSBnYWluIG9mIDAgaXMgdGhlIHNhbWUgYXMgc2lsZW5jaW5nIHRoZSBzaWduYWwuIEEgZ2FpbiBvZlxuXHRcdFx0ICogIDEsIGNhdXNlcyBubyBjaGFuZ2UgdG8gdGhlIGluY29taW5nIHNpZ25hbC5cblx0XHRcdCAqICBAdHlwZWRlZiB7R2Fpbn1cblx0XHRcdCAqL1xuXHQgICAgICAgIEdhaW46ICdnYWluJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBBIGNlbnQgaXMgYSBodW5kcmVkdGggb2YgYSBzZW1pdG9uZS5cblx0XHRcdCAqICBAdHlwZWRlZiB7Q2VudHN9XG5cdFx0XHQgKi9cblx0ICAgICAgICBDZW50czogJ2NlbnRzJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBBbmdsZSBiZXR3ZWVuIDAgYW5kIDM2MC5cblx0XHRcdCAqICBAdHlwZWRlZiB7RGVncmVlc31cblx0XHRcdCAqL1xuXHQgICAgICAgIERlZ3JlZXM6ICdkZWdyZWVzJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBBIG51bWJlciByZXByZXNlbnRpbmcgYSBtaWRpIG5vdGUuXG5cdFx0XHQgKiAgQHR5cGVkZWYge01JREl9XG5cdFx0XHQgKi9cblx0ICAgICAgICBNSURJOiAnbWlkaScsXG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQSBjb2xvbi1zZXBhcmF0ZWQgcmVwcmVzZW50YXRpb24gb2YgdGltZSBpbiB0aGUgZm9ybSBvZlxuXHRcdFx0ICogIEJhcnM6QmVhdHM6U2l4dGVlbnRocy5cblx0XHRcdCAqICBAdHlwZWRlZiB7QmFyc0JlYXRzU2l4dGVlbnRoc31cblx0XHRcdCAqL1xuXHQgICAgICAgIEJhcnNCZWF0c1NpeHRlZW50aHM6ICdiYXJzQmVhdHNTaXh0ZWVudGhzJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBTYW1wbGluZyBpcyB0aGUgcmVkdWN0aW9uIG9mIGEgY29udGludW91cyBzaWduYWwgdG8gYSBkaXNjcmV0ZSBzaWduYWwuXG5cdFx0XHQgKiAgQXVkaW8gaXMgdHlwaWNhbGx5IHNhbXBsZWQgNDQxMDAgdGltZXMgcGVyIHNlY29uZC5cblx0XHRcdCAqICBAdHlwZWRlZiB7U2FtcGxlc31cblx0XHRcdCAqL1xuXHQgICAgICAgIFNhbXBsZXM6ICdzYW1wbGVzJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBIZXJ0eiBhcmUgYSBmcmVxdWVuY3kgcmVwcmVzZW50YXRpb24gZGVmaW5lZCBhcyBvbmUgY3ljbGUgcGVyIHNlY29uZC5cblx0XHRcdCAqICBAdHlwZWRlZiB7SGVydHp9XG5cdFx0XHQgKi9cblx0ICAgICAgICBIZXJ0ejogJ2hlcnR6Jyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBBIGZyZXF1ZW5jeSByZXByZXNlbnRlZCBieSBhIGxldHRlciBuYW1lLFxuXHRcdFx0ICogIGFjY2lkZW50YWwgYW5kIG9jdGF2ZS4gVGhpcyBzeXN0ZW0gaXMga25vd24gYXNcblx0XHRcdCAqICBbU2NpZW50aWZpYyBQaXRjaCBOb3RhdGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2NpZW50aWZpY19waXRjaF9ub3RhdGlvbikuXG5cdFx0XHQgKiAgQHR5cGVkZWYge05vdGV9XG5cdFx0XHQgKi9cblx0ICAgICAgICBOb3RlOiAnbm90ZScsXG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgT25lIG1pbGxpc2Vjb25kIGlzIGEgdGhvdXNhbmR0aCBvZiBhIHNlY29uZC5cblx0XHRcdCAqICBAdHlwZWRlZiB7TWlsbGlzZWNvbmRzfVxuXHRcdFx0ICovXG5cdCAgICAgICAgTWlsbGlzZWNvbmRzOiAnbWlsbGlzZWNvbmRzJyxcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBTZWNvbmRzIGFyZSB0aGUgdGltZSB1bml0IG9mIHRoZSBBdWRpb0NvbnRleHQuIEluIHRoZSBlbmQsXG5cdFx0XHQgKiAgYWxsIHZhbHVlcyBuZWVkIHRvIGJlIGV2YWx1YXRlZCB0byBzZWNvbmRzLlxuXHRcdFx0ICogIEB0eXBlZGVmIHtTZWNvbmRzfVxuXHRcdFx0ICovXG5cdCAgICAgICAgU2Vjb25kczogJ3NlY29uZHMnLFxuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEEgc3RyaW5nIHJlcHJlc2VudGluZyBhIGR1cmF0aW9uIHJlbGF0aXZlIHRvIGEgbWVhc3VyZS5cblx0XHRcdCAqICAqIFwiNG5cIiA9IHF1YXJ0ZXIgbm90ZVxuXHRcdFx0ICogICogXCIybVwiID0gdHdvIG1lYXN1cmVzXG5cdFx0XHQgKiAgKiBcIjh0XCIgPSBlaWdodGgtbm90ZSB0cmlwbGV0XG5cdFx0XHQgKiAgQHR5cGVkZWYge05vdGF0aW9ufVxuXHRcdFx0ICovXG5cdCAgICAgICAgTm90YXRpb246ICdub3RhdGlvbidcblx0ICAgIH07XG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8vIEFVR01FTlQgVE9ORSdzIFBST1RPVFlQRVxuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgQ29udmVydCBUaW1lIGludG8gc2Vjb25kcy5cblx0XHQgKlxuXHRcdCAqICBVbmxpa2UgdGhlIG1ldGhvZCB3aGljaCBpdCBvdmVycmlkZXMsIHRoaXMgdGFrZXMgaW50byBhY2NvdW50XG5cdFx0ICogIHRyYW5zcG9ydHRpbWUgYW5kIG11c2ljYWwgbm90YXRpb24uXG5cdFx0ICpcblx0XHQgKiAgVGltZSA6IDEuNDBcblx0XHQgKiAgTm90YXRpb246IDRuIG9yIDFtIG9yIDJ0XG5cdFx0ICogIE5vdyBSZWxhdGl2ZTogKzNuXG5cdFx0ICogIE1hdGg6IDNuKzE2biBvciBldmVuIGNvbXBsaWNhdGVkIGV4cHJlc3Npb25zICgoM24qMikvNiArIDEpXG5cdFx0ICpcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gdGltZVxuXHRcdCAqICBAcmV0dXJuIHtTZWNvbmRzfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5wcm90b3R5cGUudG9TZWNvbmRzID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICBpZiAoVG9uZS5pc051bWJlcih0aW1lKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGltZTtcblx0ICAgICAgICB9IGVsc2UgaWYgKFRvbmUuaXNVbmRlZih0aW1lKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5ub3coKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKFRvbmUuaXNTdHJpbmcodGltZSkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBUb25lLlRpbWUodGltZSkudG9TZWNvbmRzKCk7XG5cdCAgICAgICAgfSBlbHNlIGlmICh0aW1lIGluc3RhbmNlb2YgVG9uZS5UaW1lQmFzZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGltZS50b1NlY29uZHMoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENvbnZlcnQgYSBmcmVxdWVuY3kgcmVwcmVzZW50YXRpb24gaW50byBhIG51bWJlci5cblx0XHQgKiAgQHBhcmFtICB7RnJlcXVlbmN5fSBmcmVxXG5cdFx0ICogIEByZXR1cm4ge0hlcnR6fSAgICAgIHRoZSBmcmVxdWVuY3kgaW4gaGVydHpcblx0XHQgKi9cblx0ICAgIFRvbmUucHJvdG90eXBlLnRvRnJlcXVlbmN5ID0gZnVuY3Rpb24gKGZyZXEpIHtcblx0ICAgICAgICBpZiAoVG9uZS5pc051bWJlcihmcmVxKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gZnJlcTtcblx0ICAgICAgICB9IGVsc2UgaWYgKFRvbmUuaXNTdHJpbmcoZnJlcSkgfHwgVG9uZS5pc1VuZGVmKGZyZXEpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgVG9uZS5GcmVxdWVuY3koZnJlcSkudmFsdWVPZigpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoZnJlcSBpbnN0YW5jZW9mIFRvbmUuVGltZUJhc2UpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZyZXEudG9GcmVxdWVuY3koKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENvbnZlcnQgYSB0aW1lIHJlcHJlc2VudGF0aW9uIGludG8gdGlja3MuXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IHRpbWVcblx0XHQgKiAgQHJldHVybiB7VGlja3N9ICB0aGUgdGltZSBpbiB0aWNrc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5wcm90b3R5cGUudG9UaWNrcyA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgaWYgKFRvbmUuaXNOdW1iZXIodGltZSkgfHwgVG9uZS5pc1N0cmluZyh0aW1lKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFRvbmUuVHJhbnNwb3J0VGltZSh0aW1lKS50b1RpY2tzKCk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChUb25lLmlzVW5kZWYodGltZSkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuVHJhbnNwb3J0LnRpY2tzO1xuXHQgICAgICAgIH0gZWxzZSBpZiAodGltZSBpbnN0YW5jZW9mIFRvbmUuVGltZUJhc2UpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRpbWUudG9UaWNrcygpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuUGFyYW0gd3JhcHMgdGhlIG5hdGl2ZSBXZWIgQXVkaW8ncyBBdWRpb1BhcmFtIHRvIHByb3ZpZGVcblx0XHQgKiAgICAgICAgIGFkZGl0aW9uYWwgdW5pdCBjb252ZXJzaW9uIGZ1bmN0aW9uYWxpdHkuIEl0IGFsc29cblx0XHQgKiAgICAgICAgIHNlcnZlcyBhcyBhIGJhc2UtY2xhc3MgZm9yIGNsYXNzZXMgd2hpY2ggaGF2ZSBhIHNpbmdsZSxcblx0XHQgKiAgICAgICAgIGF1dG9tYXRhYmxlIHBhcmFtZXRlci5cblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAcGFyYW0gIHtBdWRpb1BhcmFtfSAgcGFyYW0gIFRoZSBwYXJhbWV0ZXIgdG8gd3JhcC5cblx0XHQgKiAgQHBhcmFtICB7VG9uZS5UeXBlfSB1bml0cyBUaGUgdW5pdHMgb2YgdGhlIGF1ZGlvIHBhcmFtLlxuXHRcdCAqICBAcGFyYW0gIHtCb29sZWFufSBjb252ZXJ0IElmIHRoZSBwYXJhbSBzaG91bGQgYmUgY29udmVydGVkLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJhbSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdwYXJhbScsXG5cdCAgICAgICAgICAgICd1bml0cycsXG5cdCAgICAgICAgICAgICdjb252ZXJ0J1xuXHQgICAgICAgIF0sIFRvbmUuUGFyYW0pO1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG5hdGl2ZSBwYXJhbWV0ZXIgdG8gY29udHJvbFxuXHRcdFx0ICogIEB0eXBlICB7QXVkaW9QYXJhbX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcGFyYW0gPSB0aGlzLmlucHV0ID0gb3B0aW9ucy5wYXJhbTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgdW5pdHMgb2YgdGhlIHBhcmFtZXRlclxuXHRcdFx0ICogIEB0eXBlIHtUb25lLlR5cGV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLnVuaXRzID0gb3B0aW9ucy51bml0cztcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBJZiB0aGUgdmFsdWUgc2hvdWxkIGJlIGNvbnZlcnRlZCBvciBub3Rcblx0XHRcdCAqICBAdHlwZSB7Qm9vbGVhbn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuY29udmVydCA9IG9wdGlvbnMuY29udmVydDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUcnVlIGlmIHRoZSBzaWduYWwgdmFsdWUgaXMgYmVpbmcgb3ZlcnJpZGRlbiBieVxuXHRcdFx0ICogIGEgY29ubmVjdGVkIHNpZ25hbC5cblx0XHRcdCAqICBAcmVhZE9ubHlcblx0XHRcdCAqICBAdHlwZSAge2Jvb2xlYW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMub3ZlcnJpZGRlbiA9IGZhbHNlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIHRpbWVsaW5lIHdoaWNoIHRyYWNrcyBhbGwgb2YgdGhlIGF1dG9tYXRpb25zLlxuXHRcdFx0ICogQHR5cGUge1RvbmUuVGltZWxpbmV9XG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IFRvbmUuVGltZWxpbmUoMTAwMCk7XG5cdCAgICAgICAgaWYgKFRvbmUuaXNEZWZpbmVkKG9wdGlvbnMudmFsdWUpICYmIHRoaXMuX3BhcmFtKSB7XG5cdCAgICAgICAgICAgIHRoaXMudmFsdWUgPSBvcHRpb25zLnZhbHVlO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlBhcmFtLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgRGVmYXVsdHNcblx0XHQgKiAgQHR5cGUgIHtPYmplY3R9XG5cdFx0ICogIEBjb25zdFxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJhbS5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAndW5pdHMnOiBUb25lLlR5cGUuRGVmYXVsdCxcblx0ICAgICAgICAnY29udmVydCc6IHRydWUsXG5cdCAgICAgICAgJ3BhcmFtJzogdW5kZWZpbmVkXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHBhcmFtZXRlci5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5QYXJhbSNcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBuYW1lIHZhbHVlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QYXJhbS5wcm90b3R5cGUsICd2YWx1ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIG5vdyA9IHRoaXMubm93KCk7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl90b1VuaXRzKHRoaXMuZ2V0VmFsdWVBdFRpbWUobm93KSk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9pbml0aWFsVmFsdWUgPSB0aGlzLl9mcm9tVW5pdHModmFsdWUpO1xuXHQgICAgICAgICAgICB0aGlzLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyh0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpO1xuXHQgICAgICAgICAgICB0aGlzLnNldFZhbHVlQXRUaW1lKHZhbHVlLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIG1pbmltdW0gb3V0cHV0IHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXJcblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5QYXJhbSNcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBuYW1lIHZhbHVlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QYXJhbS5wcm90b3R5cGUsICdtaW5WYWx1ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMudW5pdHMgPT09IFRvbmUuVHlwZS5UaW1lIHx8IHRoaXMudW5pdHMgPT09IFRvbmUuVHlwZS5GcmVxdWVuY3kgfHwgdGhpcy51bml0cyA9PT0gVG9uZS5UeXBlLk5vcm1hbFJhbmdlIHx8IHRoaXMudW5pdHMgPT09IFRvbmUuVHlwZS5Qb3NpdGl2ZSB8fCB0aGlzLnVuaXRzID09PSBUb25lLlR5cGUuQlBNKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMDtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnVuaXRzID09PSBUb25lLlR5cGUuQXVkaW9SYW5nZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudW5pdHMgPT09IFRvbmUuVHlwZS5EZWNpYmVscykge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIC1JbmZpbml0eTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJhbS5taW5WYWx1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIG1heGltdW0gb3V0cHV0IHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXJcblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5QYXJhbSNcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBuYW1lIHZhbHVlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QYXJhbS5wcm90b3R5cGUsICdtYXhWYWx1ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMudW5pdHMgPT09IFRvbmUuVHlwZS5Ob3JtYWxSYW5nZSB8fCB0aGlzLnVuaXRzID09PSBUb25lLlR5cGUuQXVkaW9SYW5nZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyYW0ubWF4VmFsdWU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDb252ZXJ0IHRoZSBnaXZlbiB2YWx1ZSBmcm9tIHRoZSB0eXBlIHNwZWNpZmllZCBieSBUb25lLlBhcmFtLnVuaXRzXG5cdFx0ICogIGludG8gdGhlIGRlc3RpbmF0aW9uIHZhbHVlIChzdWNoIGFzIEdhaW4gb3IgRnJlcXVlbmN5KS5cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKiAgQHBhcmFtICB7Kn0gdmFsIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG5cdFx0ICogIEByZXR1cm4ge251bWJlcn0gICAgIHRoZSBudW1iZXIgd2hpY2ggdGhlIHZhbHVlIHNob3VsZCBiZSBzZXQgdG9cblx0XHQgKi9cblx0ICAgIFRvbmUuUGFyYW0ucHJvdG90eXBlLl9mcm9tVW5pdHMgPSBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgaWYgKCh0aGlzLmNvbnZlcnQgfHwgVG9uZS5pc1VuZGVmKHRoaXMuY29udmVydCkpICYmICF0aGlzLm92ZXJyaWRkZW4pIHtcblx0ICAgICAgICAgICAgc3dpdGNoICh0aGlzLnVuaXRzKSB7XG5cdCAgICAgICAgICAgIGNhc2UgVG9uZS5UeXBlLlRpbWU6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b1NlY29uZHModmFsKTtcblx0ICAgICAgICAgICAgY2FzZSBUb25lLlR5cGUuRnJlcXVlbmN5OlxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9GcmVxdWVuY3kodmFsKTtcblx0ICAgICAgICAgICAgY2FzZSBUb25lLlR5cGUuRGVjaWJlbHM6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gVG9uZS5kYlRvR2Fpbih2YWwpO1xuXHQgICAgICAgICAgICBjYXNlIFRvbmUuVHlwZS5Ob3JtYWxSYW5nZTpcblx0ICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWwsIDApLCAxKTtcblx0ICAgICAgICAgICAgY2FzZSBUb25lLlR5cGUuQXVkaW9SYW5nZTpcblx0ICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2YWwsIC0xKSwgMSk7XG5cdCAgICAgICAgICAgIGNhc2UgVG9uZS5UeXBlLlBvc2l0aXZlOlxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KHZhbCwgMCk7XG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHZhbDtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogQ29udmVydCB0aGUgcGFyYW1ldGVycyB2YWx1ZSBpbnRvIHRoZSB1bml0cyBzcGVjaWZpZWQgYnkgVG9uZS5QYXJhbS51bml0cy5cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEBwYXJhbSAge251bWJlcn0gdmFsIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG5cdFx0ICogQHJldHVybiB7bnVtYmVyfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJhbS5wcm90b3R5cGUuX3RvVW5pdHMgPSBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuY29udmVydCB8fCBUb25lLmlzVW5kZWYodGhpcy5jb252ZXJ0KSkge1xuXHQgICAgICAgICAgICBzd2l0Y2ggKHRoaXMudW5pdHMpIHtcblx0ICAgICAgICAgICAgY2FzZSBUb25lLlR5cGUuRGVjaWJlbHM6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gVG9uZS5nYWluVG9EYih2YWwpO1xuXHQgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybiB2YWw7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgbWluaW11bSBvdXRwdXQgdmFsdWVcblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFyYW0ucHJvdG90eXBlLl9taW5PdXRwdXQgPSAwLjAwMDAxO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBldmVudCB0eXBlc1xuXHRcdCAqICBAZW51bSB7U3RyaW5nfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJhbS5BdXRvbWF0aW9uVHlwZSA9IHtcblx0ICAgICAgICBMaW5lYXI6ICdsaW5lYXJSYW1wVG9WYWx1ZUF0VGltZScsXG5cdCAgICAgICAgRXhwb25lbnRpYWw6ICdleHBvbmVudGlhbFJhbXBUb1ZhbHVlQXRUaW1lJyxcblx0ICAgICAgICBUYXJnZXQ6ICdzZXRUYXJnZXRBdFRpbWUnLFxuXHQgICAgICAgIFNldFZhbHVlOiAnc2V0VmFsdWVBdFRpbWUnXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFNjaGVkdWxlcyBhIHBhcmFtZXRlciB2YWx1ZSBjaGFuZ2UgYXQgdGhlIGdpdmVuIHRpbWUuXG5cdFx0ICogIEBwYXJhbSB7Kn1cdHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQgdGhlIHNpZ25hbC5cblx0XHQgKiAgQHBhcmFtIHtUaW1lfSAgdGltZSBUaGUgdGltZSB3aGVuIHRoZSBjaGFuZ2Ugc2hvdWxkIG9jY3VyLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5QYXJhbX0gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vc2V0IHRoZSBmcmVxdWVuY3kgdG8gXCJHNFwiIGluIGV4YWN0bHkgMSBzZWNvbmQgZnJvbSBub3cuXG5cdFx0ICogZnJlcS5zZXRWYWx1ZUF0VGltZShcIkc0XCIsIFwiKzFcIik7XG5cdFx0ICovXG5cdCAgICBUb25lLlBhcmFtLnByb3RvdHlwZS5zZXRWYWx1ZUF0VGltZSA9IGZ1bmN0aW9uICh2YWx1ZSwgdGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB2YWx1ZSA9IHRoaXMuX2Zyb21Vbml0cyh2YWx1ZSk7XG5cdCAgICAgICAgdGhpcy5fZXZlbnRzLmFkZCh7XG5cdCAgICAgICAgICAgICd0eXBlJzogVG9uZS5QYXJhbS5BdXRvbWF0aW9uVHlwZS5TZXRWYWx1ZSxcblx0ICAgICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXG5cdCAgICAgICAgICAgICd0aW1lJzogdGltZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHRoaXMuX3BhcmFtLnNldFZhbHVlQXRUaW1lKHZhbHVlLCB0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgR2V0IHRoZSBzaWduYWxzIHZhbHVlIGF0IHRoZSBnaXZlbiB0aW1lLiBTdWJzZXF1ZW50IHNjaGVkdWxpbmdcblx0XHQgKiAgbWF5IGludmFsaWRhdGUgdGhlIHJldHVybmVkIHZhbHVlLlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IHRpbWUgV2hlbiB0byBnZXQgdGhlIHZhbHVlXG5cdFx0ICogIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSB2YWx1ZSBhdCB0aGUgZ2l2ZW4gdGltZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJhbS5wcm90b3R5cGUuZ2V0VmFsdWVBdFRpbWUgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB2YXIgYWZ0ZXIgPSB0aGlzLl9ldmVudHMuZ2V0QWZ0ZXIodGltZSk7XG5cdCAgICAgICAgdmFyIGJlZm9yZSA9IHRoaXMuX2V2ZW50cy5nZXQodGltZSk7XG5cdCAgICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IFRvbmUuZGVmYXVsdEFyZyh0aGlzLl9pbml0aWFsVmFsdWUsIHRoaXMuX3BhcmFtLmRlZmF1bHRWYWx1ZSk7XG5cdCAgICAgICAgdmFyIHZhbHVlID0gaW5pdGlhbFZhbHVlO1xuXHQgICAgICAgIC8vaWYgaXQgd2FzIHNldCBieVxuXHQgICAgICAgIGlmIChiZWZvcmUgPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBpbml0aWFsVmFsdWU7XG5cdCAgICAgICAgfSBlbHNlIGlmIChiZWZvcmUudHlwZSA9PT0gVG9uZS5QYXJhbS5BdXRvbWF0aW9uVHlwZS5UYXJnZXQpIHtcblx0ICAgICAgICAgICAgdmFyIHByZXZpb3VzID0gdGhpcy5fZXZlbnRzLmdldEJlZm9yZShiZWZvcmUudGltZSk7XG5cdCAgICAgICAgICAgIHZhciBwcmV2aW91c1ZhbDtcblx0ICAgICAgICAgICAgaWYgKHByZXZpb3VzID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICBwcmV2aW91c1ZhbCA9IGluaXRpYWxWYWx1ZTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsID0gcHJldmlvdXMudmFsdWU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9leHBvbmVudGlhbEFwcHJvYWNoKGJlZm9yZS50aW1lLCBwcmV2aW91c1ZhbCwgYmVmb3JlLnZhbHVlLCBiZWZvcmUuY29uc3RhbnQsIHRpbWUpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoYWZ0ZXIgPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBiZWZvcmUudmFsdWU7XG5cdCAgICAgICAgfSBlbHNlIGlmIChhZnRlci50eXBlID09PSBUb25lLlBhcmFtLkF1dG9tYXRpb25UeXBlLkxpbmVhcikge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX2xpbmVhckludGVycG9sYXRlKGJlZm9yZS50aW1lLCBiZWZvcmUudmFsdWUsIGFmdGVyLnRpbWUsIGFmdGVyLnZhbHVlLCB0aW1lKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGFmdGVyLnR5cGUgPT09IFRvbmUuUGFyYW0uQXV0b21hdGlvblR5cGUuRXhwb25lbnRpYWwpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9leHBvbmVudGlhbEludGVycG9sYXRlKGJlZm9yZS50aW1lLCBiZWZvcmUudmFsdWUsIGFmdGVyLnRpbWUsIGFmdGVyLnZhbHVlLCB0aW1lKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IGJlZm9yZS52YWx1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHZhbHVlO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDcmVhdGVzIGEgc2NoZWR1bGUgcG9pbnQgd2l0aCB0aGUgY3VycmVudCB2YWx1ZSBhdCB0aGUgY3VycmVudCB0aW1lLlxuXHRcdCAqICBUaGlzIGlzIHVzZWZ1bCBmb3IgY3JlYXRpbmcgYW4gYXV0b21hdGlvbiBhbmNob3IgcG9pbnQgaW4gb3JkZXIgdG9cblx0XHQgKiAgc2NoZWR1bGUgY2hhbmdlcyBmcm9tIHRoZSBjdXJyZW50IHZhbHVlLlxuXHRcdCAqXG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyPX0gbm93IChPcHRpb25hbGx5KSBwYXNzIHRoZSBub3cgdmFsdWUgaW4uXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlBhcmFtfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcmFtLnByb3RvdHlwZS5zZXRSYW1wUG9pbnQgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB2YXIgY3VycmVudFZhbCA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG5cdCAgICAgICAgdGhpcy5jYW5jZWxBbmRIb2xkQXRUaW1lKHRpbWUpO1xuXHQgICAgICAgIGlmIChjdXJyZW50VmFsID09PSAwKSB7XG5cdCAgICAgICAgICAgIGN1cnJlbnRWYWwgPSB0aGlzLl9taW5PdXRwdXQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc2V0VmFsdWVBdFRpbWUodGhpcy5fdG9Vbml0cyhjdXJyZW50VmFsKSwgdGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFNjaGVkdWxlcyBhIGxpbmVhciBjb250aW51b3VzIGNoYW5nZSBpbiBwYXJhbWV0ZXIgdmFsdWUgZnJvbSB0aGVcblx0XHQgKiAgcHJldmlvdXMgc2NoZWR1bGVkIHBhcmFtZXRlciB2YWx1ZSB0byB0aGUgZ2l2ZW4gdmFsdWUuXG5cdFx0ICpcblx0XHQgKiAgQHBhcmFtICB7bnVtYmVyfSB2YWx1ZVxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBlbmRUaW1lXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlBhcmFtfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcmFtLnByb3RvdHlwZS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5kVGltZSkge1xuXHQgICAgICAgIHZhbHVlID0gdGhpcy5fZnJvbVVuaXRzKHZhbHVlKTtcblx0ICAgICAgICBlbmRUaW1lID0gdGhpcy50b1NlY29uZHMoZW5kVGltZSk7XG5cdCAgICAgICAgdGhpcy5fZXZlbnRzLmFkZCh7XG5cdCAgICAgICAgICAgICd0eXBlJzogVG9uZS5QYXJhbS5BdXRvbWF0aW9uVHlwZS5MaW5lYXIsXG5cdCAgICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuXHQgICAgICAgICAgICAndGltZSc6IGVuZFRpbWVcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLl9wYXJhbS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSh2YWx1ZSwgZW5kVGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFNjaGVkdWxlcyBhbiBleHBvbmVudGlhbCBjb250aW51b3VzIGNoYW5nZSBpbiBwYXJhbWV0ZXIgdmFsdWUgZnJvbVxuXHRcdCAqICB0aGUgcHJldmlvdXMgc2NoZWR1bGVkIHBhcmFtZXRlciB2YWx1ZSB0byB0aGUgZ2l2ZW4gdmFsdWUuXG5cdFx0ICpcblx0XHQgKiAgQHBhcmFtICB7bnVtYmVyfSB2YWx1ZVxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBlbmRUaW1lXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlBhcmFtfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcmFtLnByb3RvdHlwZS5leHBvbmVudGlhbFJhbXBUb1ZhbHVlQXRUaW1lID0gZnVuY3Rpb24gKHZhbHVlLCBlbmRUaW1lKSB7XG5cdCAgICAgICAgdmFsdWUgPSB0aGlzLl9mcm9tVW5pdHModmFsdWUpO1xuXHQgICAgICAgIHZhbHVlID0gTWF0aC5tYXgodGhpcy5fbWluT3V0cHV0LCB2YWx1ZSk7XG5cdCAgICAgICAgZW5kVGltZSA9IHRoaXMudG9TZWNvbmRzKGVuZFRpbWUpO1xuXHQgICAgICAgIC8vc3RvcmUgdGhlIGV2ZW50XG5cdCAgICAgICAgdGhpcy5fZXZlbnRzLmFkZCh7XG5cdCAgICAgICAgICAgICd0eXBlJzogVG9uZS5QYXJhbS5BdXRvbWF0aW9uVHlwZS5FeHBvbmVudGlhbCxcblx0ICAgICAgICAgICAgJ3RpbWUnOiBlbmRUaW1lLFxuXHQgICAgICAgICAgICAndmFsdWUnOiB2YWx1ZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHRoaXMuX3BhcmFtLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUodmFsdWUsIGVuZFRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTY2hlZHVsZXMgYW4gZXhwb25lbnRpYWwgY29udGludW91cyBjaGFuZ2UgaW4gcGFyYW1ldGVyIHZhbHVlIGZyb21cblx0XHQgKiAgdGhlIGN1cnJlbnQgdGltZSBhbmQgY3VycmVudCB2YWx1ZSB0byB0aGUgZ2l2ZW4gdmFsdWUgb3ZlciB0aGVcblx0XHQgKiAgZHVyYXRpb24gb2YgdGhlIHJhbXBUaW1lLlxuXHRcdCAqXG5cdFx0ICogIEBwYXJhbSAge251bWJlcn0gdmFsdWUgICBUaGUgdmFsdWUgdG8gcmFtcCB0by5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gcmFtcFRpbWUgdGhlIHRpbWUgdGhhdCBpdCB0YWtlcyB0aGVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSB0byByYW1wIGZyb20gaXQncyBjdXJyZW50IHZhbHVlXG5cdFx0ICogIEBwYXJhbSB7VGltZX1cdFtzdGFydFRpbWU9bm93XSBcdFdoZW4gdGhlIHJhbXAgc2hvdWxkIHN0YXJ0LlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5QYXJhbX0gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vZXhwb25lbnRpYWxseSByYW1wIHRvIHRoZSB2YWx1ZSAyIG92ZXIgNCBzZWNvbmRzLlxuXHRcdCAqIHNpZ25hbC5leHBvbmVudGlhbFJhbXBUbygyLCA0KTtcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFyYW0ucHJvdG90eXBlLmV4cG9uZW50aWFsUmFtcFRvID0gZnVuY3Rpb24gKHZhbHVlLCByYW1wVGltZSwgc3RhcnRUaW1lKSB7XG5cdCAgICAgICAgc3RhcnRUaW1lID0gdGhpcy50b1NlY29uZHMoc3RhcnRUaW1lKTtcblx0ICAgICAgICB0aGlzLnNldFJhbXBQb2ludChzdGFydFRpbWUpO1xuXHQgICAgICAgIHRoaXMuZXhwb25lbnRpYWxSYW1wVG9WYWx1ZUF0VGltZSh2YWx1ZSwgc3RhcnRUaW1lICsgdGhpcy50b1NlY29uZHMocmFtcFRpbWUpKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU2NoZWR1bGVzIGFuIGxpbmVhciBjb250aW51b3VzIGNoYW5nZSBpbiBwYXJhbWV0ZXIgdmFsdWUgZnJvbVxuXHRcdCAqICB0aGUgY3VycmVudCB0aW1lIGFuZCBjdXJyZW50IHZhbHVlIHRvIHRoZSBnaXZlbiB2YWx1ZSBvdmVyIHRoZVxuXHRcdCAqICBkdXJhdGlvbiBvZiB0aGUgcmFtcFRpbWUuXG5cdFx0ICpcblx0XHQgKiAgQHBhcmFtICB7bnVtYmVyfSB2YWx1ZSAgIFRoZSB2YWx1ZSB0byByYW1wIHRvLlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSByYW1wVGltZSB0aGUgdGltZSB0aGF0IGl0IHRha2VzIHRoZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIHRvIHJhbXAgZnJvbSBpdCdzIGN1cnJlbnQgdmFsdWVcblx0XHQgKiAgQHBhcmFtIHtUaW1lfVx0W3N0YXJ0VGltZT1ub3ddIFx0V2hlbiB0aGUgcmFtcCBzaG91bGQgc3RhcnQuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlBhcmFtfSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9saW5lYXJseSByYW1wIHRvIHRoZSB2YWx1ZSA0IG92ZXIgMyBzZWNvbmRzLlxuXHRcdCAqIHNpZ25hbC5saW5lYXJSYW1wVG8oNCwgMyk7XG5cdFx0ICovXG5cdCAgICBUb25lLlBhcmFtLnByb3RvdHlwZS5saW5lYXJSYW1wVG8gPSBmdW5jdGlvbiAodmFsdWUsIHJhbXBUaW1lLCBzdGFydFRpbWUpIHtcblx0ICAgICAgICBzdGFydFRpbWUgPSB0aGlzLnRvU2Vjb25kcyhzdGFydFRpbWUpO1xuXHQgICAgICAgIHRoaXMuc2V0UmFtcFBvaW50KHN0YXJ0VGltZSk7XG5cdCAgICAgICAgdGhpcy5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSh2YWx1ZSwgc3RhcnRUaW1lICsgdGhpcy50b1NlY29uZHMocmFtcFRpbWUpKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU3RhcnQgZXhwb25lbnRpYWxseSBhcHByb2FjaGluZyB0aGUgdGFyZ2V0IHZhbHVlIGF0IHRoZSBnaXZlbiB0aW1lLiBTaW5jZSBpdFxuXHRcdCAqICBpcyBhbiBleHBvbmVudGlhbCBhcHByb2FjaCBpdCB3aWxsIGNvbnRpbnVlIGFwcHJvYWNoaW5nIGFmdGVyIHRoZSByYW1wIGR1cmF0aW9uLiBUaGVcblx0XHQgKiAgcmFtcFRpbWUgaXMgdGhlIHRpbWUgdGhhdCBpdCB0YWtlcyB0byByZWFjaCBvdmVyIDk5JSBvZiB0aGUgd2F5IHRvd2FyZHMgdGhlIHZhbHVlLlxuXHRcdCAqICBAcGFyYW0gIHtudW1iZXJ9IHZhbHVlICAgVGhlIHZhbHVlIHRvIHJhbXAgdG8uXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IHJhbXBUaW1lIHRoZSB0aW1lIHRoYXQgaXQgdGFrZXMgdGhlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgdG8gcmFtcCBmcm9tIGl0J3MgY3VycmVudCB2YWx1ZVxuXHRcdCAqICBAcGFyYW0ge1RpbWV9XHRbc3RhcnRUaW1lPW5vd10gXHRXaGVuIHRoZSByYW1wIHNob3VsZCBzdGFydC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuUGFyYW19IHRoaXNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2V4cG9uZW50aWFsbHkgcmFtcCB0byB0aGUgdmFsdWUgMiBvdmVyIDQgc2Vjb25kcy5cblx0XHQgKiBzaWduYWwuZXhwb25lbnRpYWxSYW1wVG8oMiwgNCk7XG5cdFx0ICovXG5cdCAgICBUb25lLlBhcmFtLnByb3RvdHlwZS50YXJnZXRSYW1wVG8gPSBmdW5jdGlvbiAodmFsdWUsIHJhbXBUaW1lLCBzdGFydFRpbWUpIHtcblx0ICAgICAgICBzdGFydFRpbWUgPSB0aGlzLnRvU2Vjb25kcyhzdGFydFRpbWUpO1xuXHQgICAgICAgIHRoaXMuc2V0UmFtcFBvaW50KHN0YXJ0VGltZSk7XG5cdCAgICAgICAgdGhpcy5leHBvbmVudGlhbEFwcHJvYWNoVmFsdWVBdFRpbWUodmFsdWUsIHN0YXJ0VGltZSwgcmFtcFRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdGFydCBleHBvbmVudGlhbGx5IGFwcHJvYWNoaW5nIHRoZSB0YXJnZXQgdmFsdWUgYXQgdGhlIGdpdmVuIHRpbWUuIFNpbmNlIGl0XG5cdFx0ICogIGlzIGFuIGV4cG9uZW50aWFsIGFwcHJvYWNoIGl0IHdpbGwgY29udGludWUgYXBwcm9hY2hpbmcgYWZ0ZXIgdGhlIHJhbXAgZHVyYXRpb24uIFRoZVxuXHRcdCAqICByYW1wVGltZSBpcyB0aGUgdGltZSB0aGF0IGl0IHRha2VzIHRvIHJlYWNoIG92ZXIgOTklIG9mIHRoZSB3YXkgdG93YXJkcyB0aGUgdmFsdWUuIFRoaXMgbWV0aG9kc1xuXHRcdCAqICBpcyBzaW1pbGFyIHRvIHNldFRhcmdldEF0VGltZSBleGNlcHQgdGhlIHRoaXJkIGFyZ3VtZW50IGlzIGEgdGltZSBpbnN0ZWFkIG9mIGEgJ3RpbWVDb25zdGFudCdcblx0XHQgKiAgQHBhcmFtICB7bnVtYmVyfSB2YWx1ZSAgIFRoZSB2YWx1ZSB0byByYW1wIHRvLlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9XHR0aW1lIFx0V2hlbiB0aGUgcmFtcCBzaG91bGQgc3RhcnQuXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IHJhbXBUaW1lIHRoZSB0aW1lIHRoYXQgaXQgdGFrZXMgdGhlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgdG8gcmFtcCBmcm9tIGl0J3MgY3VycmVudCB2YWx1ZVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5QYXJhbX0gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vZXhwb25lbnRpYWxseSByYW1wIHRvIHRoZSB2YWx1ZSAyIG92ZXIgNCBzZWNvbmRzLlxuXHRcdCAqIHNpZ25hbC5leHBvbmVudGlhbFJhbXBUbygyLCA0KTtcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFyYW0ucHJvdG90eXBlLmV4cG9uZW50aWFsQXBwcm9hY2hWYWx1ZUF0VGltZSA9IGZ1bmN0aW9uICh2YWx1ZSwgdGltZSwgcmFtcFRpbWUpIHtcblx0ICAgICAgICB2YXIgdGltZUNvbnN0YW50ID0gTWF0aC5sb2codGhpcy50b1NlY29uZHMocmFtcFRpbWUpICsgMSkgLyBNYXRoLmxvZygyMDApO1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5zZXRUYXJnZXRBdFRpbWUodmFsdWUsIHRpbWUsIHRpbWVDb25zdGFudCk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFN0YXJ0IGV4cG9uZW50aWFsbHkgYXBwcm9hY2hpbmcgdGhlIHRhcmdldCB2YWx1ZSBhdCB0aGUgZ2l2ZW4gdGltZSB3aXRoXG5cdFx0ICogIGEgcmF0ZSBoYXZpbmcgdGhlIGdpdmVuIHRpbWUgY29uc3RhbnQuXG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IHN0YXJ0VGltZVxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gdGltZUNvbnN0YW50XG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlBhcmFtfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcmFtLnByb3RvdHlwZS5zZXRUYXJnZXRBdFRpbWUgPSBmdW5jdGlvbiAodmFsdWUsIHN0YXJ0VGltZSwgdGltZUNvbnN0YW50KSB7XG5cdCAgICAgICAgdmFsdWUgPSB0aGlzLl9mcm9tVW5pdHModmFsdWUpO1xuXHQgICAgICAgIC8vIFRoZSB2YWx1ZSB3aWxsIG5ldmVyIGJlIGFibGUgdG8gYXBwcm9hY2ggd2l0aG91dCB0aW1lQ29uc3RhbnQgPiAwLlxuXHQgICAgICAgIGlmICh0aW1lQ29uc3RhbnQgPD0gMCkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RpbWVDb25zdGFudCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHN0YXJ0VGltZSA9IHRoaXMudG9TZWNvbmRzKHN0YXJ0VGltZSk7XG5cdCAgICAgICAgdGhpcy5fZXZlbnRzLmFkZCh7XG5cdCAgICAgICAgICAgICd0eXBlJzogVG9uZS5QYXJhbS5BdXRvbWF0aW9uVHlwZS5UYXJnZXQsXG5cdCAgICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuXHQgICAgICAgICAgICAndGltZSc6IHN0YXJ0VGltZSxcblx0ICAgICAgICAgICAgJ2NvbnN0YW50JzogdGltZUNvbnN0YW50XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5fcGFyYW0uc2V0VGFyZ2V0QXRUaW1lKHZhbHVlLCBzdGFydFRpbWUsIHRpbWVDb25zdGFudCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFNldHMgYW4gYXJyYXkgb2YgYXJiaXRyYXJ5IHBhcmFtZXRlciB2YWx1ZXMgc3RhcnRpbmcgYXQgdGhlIGdpdmVuIHRpbWVcblx0XHQgKiAgZm9yIHRoZSBnaXZlbiBkdXJhdGlvbi5cblx0XHQgKlxuXHRcdCAqICBAcGFyYW0ge0FycmF5fSB2YWx1ZXNcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBzdGFydFRpbWVcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBkdXJhdGlvblxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlfSBbc2NhbGluZz0xXSBJZiB0aGUgdmFsdWVzIGluIHRoZSBjdXJ2ZSBzaG91bGQgYmUgc2NhbGVkIGJ5IHNvbWUgdmFsdWVcblx0XHQgKiAgQHJldHVybnMge1RvbmUuUGFyYW19IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFyYW0ucHJvdG90eXBlLnNldFZhbHVlQ3VydmVBdFRpbWUgPSBmdW5jdGlvbiAodmFsdWVzLCBzdGFydFRpbWUsIGR1cmF0aW9uLCBzY2FsaW5nKSB7XG5cdCAgICAgICAgc2NhbGluZyA9IFRvbmUuZGVmYXVsdEFyZyhzY2FsaW5nLCAxKTtcblx0ICAgICAgICBkdXJhdGlvbiA9IHRoaXMudG9TZWNvbmRzKGR1cmF0aW9uKTtcblx0ICAgICAgICBzdGFydFRpbWUgPSB0aGlzLnRvU2Vjb25kcyhzdGFydFRpbWUpO1xuXHQgICAgICAgIHRoaXMuc2V0VmFsdWVBdFRpbWUodmFsdWVzWzBdICogc2NhbGluZywgc3RhcnRUaW1lKTtcblx0ICAgICAgICB2YXIgc2VnVGltZSA9IGR1cmF0aW9uIC8gKHZhbHVlcy5sZW5ndGggLSAxKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB0aGlzLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKHZhbHVlc1tpXSAqIHNjYWxpbmcsIHN0YXJ0VGltZSArIGkgKiBzZWdUaW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENhbmNlbHMgYWxsIHNjaGVkdWxlZCBwYXJhbWV0ZXIgY2hhbmdlcyB3aXRoIHRpbWVzIGdyZWF0ZXIgdGhhbiBvclxuXHRcdCAqICBlcXVhbCB0byBzdGFydFRpbWUuXG5cdFx0ICpcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gdGltZVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5QYXJhbX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJhbS5wcm90b3R5cGUuY2FuY2VsU2NoZWR1bGVkVmFsdWVzID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy5fZXZlbnRzLmNhbmNlbCh0aW1lKTtcblx0ICAgICAgICB0aGlzLl9wYXJhbS5jYW5jZWxTY2hlZHVsZWRWYWx1ZXModGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoaXMgaXMgc2ltaWxhciB0byBbY2FuY2VsU2NoZWR1bGVkVmFsdWVzXSgjY2FuY2VsU2NoZWR1bGVkVmFsdWVzKSBleGNlcHRcblx0XHQgKiAgaXQgaG9sZHMgdGhlIGF1dG9tYXRlZCB2YWx1ZSBhdCB0aW1lIHVudGlsIHRoZSBuZXh0IGF1dG9tYXRlZCBldmVudC5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gdGltZVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5QYXJhbX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJhbS5wcm90b3R5cGUuY2FuY2VsQW5kSG9sZEF0VGltZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdmFyIHZhbHVlQXRUaW1lID0gdGhpcy5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcblx0ICAgICAgICAvL2lmIHRoZXJlIGlzIGFuIGV2ZW50IGF0IHRoZSBnaXZlbiB0aW1lXG5cdCAgICAgICAgLy9hbmQgdGhhdCBldmVuIGlzIG5vdCBhIFwic2V0XCJcblx0ICAgICAgICB2YXIgYmVmb3JlID0gdGhpcy5fZXZlbnRzLmdldCh0aW1lKTtcblx0ICAgICAgICB2YXIgYWZ0ZXIgPSB0aGlzLl9ldmVudHMuZ2V0QWZ0ZXIodGltZSk7XG5cdCAgICAgICAgaWYgKGJlZm9yZSAmJiBiZWZvcmUudGltZSA9PT0gdGltZSkge1xuXHQgICAgICAgICAgICAvL3JlbW92ZSBldmVyeXRoaW5nIGFmdGVyXG5cdCAgICAgICAgICAgIGlmIChhZnRlcikge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLmNhbmNlbChhZnRlci50aW1lKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5jYW5jZWwodGltZSArIDAuMDAwMDAxKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSBpZiAoYWZ0ZXIpIHtcblx0ICAgICAgICAgICAgLy9jYW5jZWwgdGhlIG5leHQgZXZlbnQocylcblx0ICAgICAgICAgICAgdGhpcy5fZXZlbnRzLmNhbmNlbChhZnRlci50aW1lKTtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXJhbS5jYW5jZWxBbmRIb2xkQXRUaW1lKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9wYXJhbS5jYW5jZWxTY2hlZHVsZWRWYWx1ZXModGltZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKGFmdGVyLnR5cGUgPT09IFRvbmUuUGFyYW0uQXV0b21hdGlvblR5cGUuTGluZWFyKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3BhcmFtLmNhbmNlbEFuZEhvbGRBdFRpbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKHZhbHVlQXRUaW1lLCB0aW1lKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLmFkZCh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogVG9uZS5QYXJhbS5BdXRvbWF0aW9uVHlwZS5MaW5lYXIsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IHZhbHVlQXRUaW1lLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IHRpbWVcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChhZnRlci50eXBlID09PSBUb25lLlBhcmFtLkF1dG9tYXRpb25UeXBlLkV4cG9uZW50aWFsKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3BhcmFtLmNhbmNlbEFuZEhvbGRBdFRpbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUodmFsdWVBdFRpbWUsIHRpbWUpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMuYWRkKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiBUb25lLlBhcmFtLkF1dG9tYXRpb25UeXBlLkV4cG9uZW50aWFsLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiB2YWx1ZUF0VGltZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiB0aW1lXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9zZXQgdGhlIHZhbHVlIGF0IHRoZSBnaXZlbiB0aW1lXG5cdCAgICAgICAgdGhpcy5fZXZlbnRzLmFkZCh7XG5cdCAgICAgICAgICAgICd0eXBlJzogVG9uZS5QYXJhbS5BdXRvbWF0aW9uVHlwZS5TZXRWYWx1ZSxcblx0ICAgICAgICAgICAgJ3ZhbHVlJzogdmFsdWVBdFRpbWUsXG5cdCAgICAgICAgICAgICd0aW1lJzogdGltZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIGlmICh0aGlzLl9wYXJhbS5jYW5jZWxBbmRIb2xkQXRUaW1lKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3BhcmFtLmNhbmNlbEFuZEhvbGRBdFRpbWUodGltZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5fcGFyYW0uc2V0VmFsdWVBdFRpbWUodmFsdWVBdFRpbWUsIHRpbWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmFtcHMgdG8gdGhlIGdpdmVuIHZhbHVlIG92ZXIgdGhlIGR1cmF0aW9uIG9mIHRoZSByYW1wVGltZS5cblx0XHQgKiAgQXV0b21hdGljYWxseSBzZWxlY3RzIHRoZSBiZXN0IHJhbXAgdHlwZSAoZXhwb25lbnRpYWwgb3IgbGluZWFyKVxuXHRcdCAqICBkZXBlbmRpbmcgb24gdGhlIGB1bml0c2Agb2YgdGhlIHNpZ25hbFxuXHRcdCAqXG5cdFx0ICogIEBwYXJhbSAge251bWJlcn0gdmFsdWVcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gcmFtcFRpbWUgXHRUaGUgdGltZSB0aGF0IGl0IHRha2VzIHRoZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgdG8gcmFtcCBmcm9tIGl0J3MgY3VycmVudCB2YWx1ZVxuXHRcdCAqICBAcGFyYW0ge1RpbWV9XHRbc3RhcnRUaW1lPW5vd10gXHRXaGVuIHRoZSByYW1wIHNob3VsZCBzdGFydC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuUGFyYW19IHRoaXNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL3JhbXAgdG8gdGhlIHZhbHVlIGVpdGhlciBsaW5lYXJseSBvciBleHBvbmVudGlhbGx5XG5cdFx0ICogLy9kZXBlbmRpbmcgb24gdGhlIFwidW5pdHNcIiB2YWx1ZSBvZiB0aGUgc2lnbmFsXG5cdFx0ICogc2lnbmFsLnJhbXBUbygwLCAxMCk7XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9zY2hlZHVsZSBpdCB0byByYW1wIHN0YXJ0aW5nIGF0IGEgc3BlY2lmaWMgdGltZVxuXHRcdCAqIHNpZ25hbC5yYW1wVG8oMCwgMTAsIDUpXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcmFtLnByb3RvdHlwZS5yYW1wVG8gPSBmdW5jdGlvbiAodmFsdWUsIHJhbXBUaW1lLCBzdGFydFRpbWUpIHtcblx0ICAgICAgICByYW1wVGltZSA9IFRvbmUuZGVmYXVsdEFyZyhyYW1wVGltZSwgMC4xKTtcblx0ICAgICAgICBpZiAodGhpcy51bml0cyA9PT0gVG9uZS5UeXBlLkZyZXF1ZW5jeSB8fCB0aGlzLnVuaXRzID09PSBUb25lLlR5cGUuQlBNIHx8IHRoaXMudW5pdHMgPT09IFRvbmUuVHlwZS5EZWNpYmVscykge1xuXHQgICAgICAgICAgICB0aGlzLmV4cG9uZW50aWFsUmFtcFRvKHZhbHVlLCByYW1wVGltZSwgc3RhcnRUaW1lKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmxpbmVhclJhbXBUbyh2YWx1ZSwgcmFtcFRpbWUsIHN0YXJ0VGltZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9cdEFVVE9NQVRJT04gQ1VSVkUgQ0FMQ1VMQVRJT05TXG5cdCAgICAvL1x0TUlUIExpY2Vuc2UsIGNvcHlyaWdodCAoYykgMjAxNCBKb3JkYW4gU2FudGVsbFxuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvLyBDYWxjdWxhdGVzIHRoZSB0aGUgdmFsdWUgYWxvbmcgdGhlIGN1cnZlIHByb2R1Y2VkIGJ5IHNldFRhcmdldEF0VGltZVxuXHQgICAgVG9uZS5QYXJhbS5wcm90b3R5cGUuX2V4cG9uZW50aWFsQXBwcm9hY2ggPSBmdW5jdGlvbiAodDAsIHYwLCB2MSwgdGltZUNvbnN0YW50LCB0KSB7XG5cdCAgICAgICAgcmV0dXJuIHYxICsgKHYwIC0gdjEpICogTWF0aC5leHAoLSh0IC0gdDApIC8gdGltZUNvbnN0YW50KTtcblx0ICAgIH07XG5cdCAgICAvLyBDYWxjdWxhdGVzIHRoZSB0aGUgdmFsdWUgYWxvbmcgdGhlIGN1cnZlIHByb2R1Y2VkIGJ5IGxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lXG5cdCAgICBUb25lLlBhcmFtLnByb3RvdHlwZS5fbGluZWFySW50ZXJwb2xhdGUgPSBmdW5jdGlvbiAodDAsIHYwLCB0MSwgdjEsIHQpIHtcblx0ICAgICAgICByZXR1cm4gdjAgKyAodjEgLSB2MCkgKiAoKHQgLSB0MCkgLyAodDEgLSB0MCkpO1xuXHQgICAgfTtcblx0ICAgIC8vIENhbGN1bGF0ZXMgdGhlIHRoZSB2YWx1ZSBhbG9uZyB0aGUgY3VydmUgcHJvZHVjZWQgYnkgZXhwb25lbnRpYWxSYW1wVG9WYWx1ZUF0VGltZVxuXHQgICAgVG9uZS5QYXJhbS5wcm90b3R5cGUuX2V4cG9uZW50aWFsSW50ZXJwb2xhdGUgPSBmdW5jdGlvbiAodDAsIHYwLCB0MSwgdjEsIHQpIHtcblx0ICAgICAgICByZXR1cm4gdjAgKiBNYXRoLnBvdyh2MSAvIHYwLCAodCAtIHQwKSAvICh0MSAtIHQwKSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlBhcmFtfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcmFtLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fcGFyYW0gPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2V2ZW50cyA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuUGFyYW07XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgV3JhcHBlciBhcm91bmQgdGhlIE9mZmxpbmVBdWRpb0NvbnRleHRcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQ29udGV4dH1cblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgY2hhbm5lbHMgIFRoZSBudW1iZXIgb2YgY2hhbm5lbHMgdG8gcmVuZGVyXG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIGR1cmF0aW9uICBUaGUgZHVyYXRpb24gdG8gcmVuZGVyIGluIHNhbXBsZXNcblx0XHQgKiAgQHBhcmFtIHtOdW1iZXJ9IHNhbXBsZVJhdGUgdGhlIHNhbXBsZSByYXRlIHRvIHJlbmRlciBhdFxuXHRcdCAqL1xuXHQgICAgVG9uZS5PZmZsaW5lQ29udGV4dCA9IGZ1bmN0aW9uIChjaGFubmVscywgZHVyYXRpb24sIHNhbXBsZVJhdGUpIHtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgb2ZmbGluZSBjb250ZXh0XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqICBAdHlwZSAge09mZmxpbmVBdWRpb0NvbnRleHR9XG5cdFx0XHQgKi9cblx0ICAgICAgICB2YXIgb2ZmbGluZUNvbnRleHQgPSBuZXcgT2ZmbGluZUF1ZGlvQ29udGV4dChjaGFubmVscywgZHVyYXRpb24gKiBzYW1wbGVSYXRlLCBzYW1wbGVSYXRlKTtcblx0ICAgICAgICAvL3dyYXAgdGhlIG1ldGhvZHMvbWVtYmVyc1xuXHQgICAgICAgIFRvbmUuQ29udGV4dC5jYWxsKHRoaXMsIHtcblx0ICAgICAgICAgICAgJ2NvbnRleHQnOiBvZmZsaW5lQ29udGV4dCxcblx0ICAgICAgICAgICAgJ2Nsb2NrU291cmNlJzogJ29mZmxpbmUnLFxuXHQgICAgICAgICAgICAnbG9va0FoZWFkJzogMCxcblx0ICAgICAgICAgICAgJ3VwZGF0ZUludGVydmFsJzogMTI4IC8gc2FtcGxlUmF0ZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEEgcHJpdmF0ZSByZWZlcmVuY2UgdG8gdGhlIGR1cmF0aW9uXG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqICBAdHlwZSAge051bWJlcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2R1cmF0aW9uID0gZHVyYXRpb247XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQW4gYXJ0aWZpY2lhbCBjbG9jayBzb3VyY2Vcblx0XHRcdCAqICBAdHlwZSAge051bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSAwO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuT2ZmbGluZUNvbnRleHQsIFRvbmUuQ29udGV4dCk7XG5cdCAgICAvKipcblx0XHQgKiAgT3ZlcnJpZGUgdGhlIG5vdyBtZXRob2QgdG8gcG9pbnQgdG8gdGhlIGludGVybmFsIGNsb2NrIHRpbWVcblx0XHQgKiAgQHJldHVybiAge051bWJlcn1cblx0XHQgKi9cblx0ICAgIFRvbmUuT2ZmbGluZUNvbnRleHQucHJvdG90eXBlLm5vdyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFRpbWU7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJlbmRlciB0aGUgb3V0cHV0IG9mIHRoZSBPZmZsaW5lQ29udGV4dFxuXHRcdCAqICBAcmV0dXJuICB7UHJvbWlzZX1cblx0XHQgKi9cblx0ICAgIFRvbmUuT2ZmbGluZUNvbnRleHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB3aGlsZSAodGhpcy5fZHVyYXRpb24gLSB0aGlzLl9jdXJyZW50VGltZSA+PSAwKSB7XG5cdCAgICAgICAgICAgIC8vaW52b2tlIGFsbCB0aGUgY2FsbGJhY2tzIG9uIHRoYXQgdGltZVxuXHQgICAgICAgICAgICB0aGlzLmVtaXQoJ3RpY2snKTtcblx0ICAgICAgICAgICAgLy9pbmNyZW1lbnQgdGhlIGNsb2NrXG5cdCAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRUaW1lICs9IHRoaXMuYmxvY2tUaW1lO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5zdGFydFJlbmRlcmluZygpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbG9zZSB0aGUgY29udGV4dFxuXHRcdCAqICBAcmV0dXJuICB7UHJvbWlzZX1cblx0XHQgKi9cblx0ICAgIFRvbmUuT2ZmbGluZUNvbnRleHQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5PZmZsaW5lQ29udGV4dDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgaWYgKFRvbmUuc3VwcG9ydGVkKSB7XG5cdCAgICAgICAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuXHQgICAgICAgIHZhciBpc01vYmlsZVNhZmFyaSA9IHVhLmluY2x1ZGVzKCdzYWZhcmknKSAmJiAhdWEuaW5jbHVkZXMoJ2Nocm9tZScpICYmIHVhLmluY2x1ZGVzKCdtb2JpbGUnKTtcblx0ICAgICAgICBpZiAoaXNNb2JpbGVTYWZhcmkpIHtcblx0ICAgICAgICAgICAgLy9tb2JpbGUgc2FmYXJpIGhhcyBhIGJpemFycmUgYnVnIHdpdGggdGhlIG9mZmxpbmUgY29udGV4dFxuXHQgICAgICAgICAgICAvL3doZW4gYSBCdWZmZXJTb3VyY2VOb2RlIGlzIHN0YXJ0ZWQsIGl0IHN0YXJ0cyB0aGUgb2ZmbGluZSBjb250ZXh0XG5cdCAgICAgICAgICAgIC8vXG5cdCAgICAgICAgICAgIC8vZGVmZXJyaW5nIGFsbCBCdWZmZXJTb3VyY2Ugc3RhcnRzIHRpbGwgdGhlIGxhc3QgcG9zc2libGUgbW9tZW50XG5cdCAgICAgICAgICAgIC8vcmVkdWNlcyB0aGUgbGlrZWxpaG9vZCBvZiB0aGlzIGhhcHBlbmluZ1xuXHQgICAgICAgICAgICBUb25lLk9mZmxpbmVDb250ZXh0LnByb3RvdHlwZS5jcmVhdGVCdWZmZXJTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYnVmZmVyU291cmNlID0gdGhpcy5fY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcblx0ICAgICAgICAgICAgICAgIHZhciBfbmF0aXZlX3N0YXJ0ID0gYnVmZmVyU291cmNlLnN0YXJ0O1xuXHQgICAgICAgICAgICAgICAgYnVmZmVyU291cmNlLnN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfbmF0aXZlX3N0YXJ0LmNhbGwoYnVmZmVyU291cmNlLCB0aW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksIDApO1xuXHQgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlclNvdXJjZTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBBIHRoaW4gd3JhcHBlciBhcm91bmQgdGhlIE5hdGl2ZSBXZWIgQXVkaW8gR2Fpbk5vZGUuXG5cdFx0ICogICAgICAgICBUaGUgR2Fpbk5vZGUgaXMgYSBiYXNpYyBidWlsZGluZyBibG9jayBvZiB0aGUgV2ViIEF1ZGlvXG5cdFx0ICogICAgICAgICBBUEkgYW5kIGlzIHVzZWZ1bCBmb3Igcm91dGluZyBhdWRpbyBhbmQgYWRqdXN0aW5nIGdhaW5zLlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyPX0gIGdhaW4gIFRoZSBpbml0aWFsIGdhaW4gb2YgdGhlIEdhaW5Ob2RlXG5cdFx0ICogIEBwYXJhbSB7VG9uZS5UeXBlPX0gdW5pdHMgVGhlIHVuaXRzIG9mIHRoZSBnYWluIHBhcmFtZXRlci5cblx0XHQgKi9cblx0ICAgIFRvbmUuR2FpbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdnYWluJyxcblx0ICAgICAgICAgICAgJ3VuaXRzJ1xuXHQgICAgICAgIF0sIFRvbmUuR2Fpbik7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgR2Fpbk5vZGVcblx0XHRcdCAqICBAdHlwZSAge0dhaW5Ob2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmlucHV0ID0gdGhpcy5vdXRwdXQgPSB0aGlzLl9nYWluTm9kZSA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGdhaW4gcGFyYW1ldGVyIG9mIHRoZSBnYWluIG5vZGUuXG5cdFx0XHQgKiAgQHR5cGUge0dhaW59XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5nYWluID0gbmV3IFRvbmUuUGFyYW0oe1xuXHQgICAgICAgICAgICAncGFyYW0nOiB0aGlzLl9nYWluTm9kZS5nYWluLFxuXHQgICAgICAgICAgICAndW5pdHMnOiBvcHRpb25zLnVuaXRzLFxuXHQgICAgICAgICAgICAndmFsdWUnOiBvcHRpb25zLmdhaW4sXG5cdCAgICAgICAgICAgICdjb252ZXJ0Jzogb3B0aW9ucy5jb252ZXJ0XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoJ2dhaW4nKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkdhaW4sIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdHNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5HYWluLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdnYWluJzogMSxcblx0ICAgICAgICAnY29udmVydCc6IHRydWVcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkdhaW59ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkdhaW4ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9nYWluTm9kZS5kaXNjb25uZWN0KCk7XG5cdCAgICAgICAgdGhpcy5fZ2Fpbk5vZGUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKCdnYWluJyk7XG5cdCAgICAgICAgdGhpcy5nYWluLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmdhaW4gPSBudWxsO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkdhaW47XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIGlmIChUb25lLnN1cHBvcnRlZCAmJiAhQXVkaW9Db250ZXh0LnByb3RvdHlwZS5jcmVhdGVDb25zdGFudFNvdXJjZSkge1xuXHQgICAgICAgIHZhciBDb25zdGFudFNvdXJjZU5vZGUgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXHQgICAgICAgICAgICB2YXIgYnVmZmVyID0gY29udGV4dC5jcmVhdGVCdWZmZXIoMSwgMTI4LCBjb250ZXh0LnNhbXBsZVJhdGUpO1xuXHQgICAgICAgICAgICB2YXIgYXJyID0gYnVmZmVyLmdldENoYW5uZWxEYXRhKDApO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgYXJyW2ldID0gMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLl9idWZmZXJTb3VyY2UgPSBjb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuXHQgICAgICAgICAgICB0aGlzLl9idWZmZXJTb3VyY2UuY2hhbm5lbENvdW50ID0gMTtcblx0ICAgICAgICAgICAgdGhpcy5fYnVmZmVyU291cmNlLmNoYW5uZWxDb3VudE1vZGUgPSAnZXhwbGljaXQnO1xuXHQgICAgICAgICAgICB0aGlzLl9idWZmZXJTb3VyY2UuYnVmZmVyID0gYnVmZmVyO1xuXHQgICAgICAgICAgICB0aGlzLl9idWZmZXJTb3VyY2UubG9vcCA9IHRydWU7XG5cdCAgICAgICAgICAgIHZhciBnYWluTm9kZSA9IHRoaXMuX291dHB1dCA9IGNvbnRleHQuY3JlYXRlR2FpbigpO1xuXHQgICAgICAgICAgICB0aGlzLm9mZnNldCA9IGdhaW5Ob2RlLmdhaW47XG5cdCAgICAgICAgICAgIHRoaXMuX2J1ZmZlclNvdXJjZS5jb25uZWN0KGdhaW5Ob2RlKTtcblx0ICAgICAgICB9O1xuXHQgICAgICAgIENvbnN0YW50U291cmNlTm9kZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9idWZmZXJTb3VyY2Uuc3RhcnQodGltZSk7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgQ29uc3RhbnRTb3VyY2VOb2RlLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fYnVmZmVyU291cmNlLnN0b3AodGltZSk7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgQ29uc3RhbnRTb3VyY2VOb2RlLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9vdXRwdXQuY29ubmVjdC5hcHBseSh0aGlzLl9vdXRwdXQsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgQ29uc3RhbnRTb3VyY2VOb2RlLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9vdXRwdXQuZGlzY29ubmVjdC5hcHBseSh0aGlzLl9vdXRwdXQsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgQXVkaW9Db250ZXh0LnByb3RvdHlwZS5jcmVhdGVDb25zdGFudFNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25zdGFudFNvdXJjZU5vZGUodGhpcyk7XG5cdCAgICAgICAgfTtcblx0ICAgICAgICBUb25lLkNvbnRleHQucHJvdG90eXBlLmNyZWF0ZUNvbnN0YW50U291cmNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IENvbnN0YW50U291cmNlTm9kZSh0aGlzKTtcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIEEgc2lnbmFsIGlzIGFuIGF1ZGlvLXJhdGUgdmFsdWUuIFRvbmUuU2lnbmFsIGlzIGEgY29yZSBjb21wb25lbnQgb2YgdGhlIGxpYnJhcnkuXG5cdFx0ICogICAgICAgICAgVW5saWtlIGEgbnVtYmVyLCBTaWduYWxzIGNhbiBiZSBzY2hlZHVsZWQgd2l0aCBzYW1wbGUtbGV2ZWwgYWNjdXJhY3kuIFRvbmUuU2lnbmFsXG5cdFx0ICogICAgICAgICAgaGFzIGFsbCBvZiB0aGUgbWV0aG9kcyBhdmFpbGFibGUgdG8gbmF0aXZlIFdlYiBBdWRpb1xuXHRcdCAqICAgICAgICAgIFtBdWRpb1BhcmFtXShodHRwOi8vd2ViYXVkaW8uZ2l0aHViLmlvL3dlYi1hdWRpby1hcGkvI3RoZS1hdWRpb3BhcmFtLWludGVyZmFjZSlcblx0XHQgKiAgICAgICAgICBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgY29udmVuaWVuY2VzLiBSZWFkIG1vcmUgYWJvdXQgd29ya2luZyB3aXRoIHNpZ25hbHNcblx0XHQgKiAgICAgICAgICBbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL1RvbmVqcy9Ub25lLmpzL3dpa2kvU2lnbmFscykuXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLlBhcmFtfVxuXHRcdCAqICBAcGFyYW0ge051bWJlcnxBdWRpb1BhcmFtfSBbdmFsdWVdIEluaXRpYWwgdmFsdWUgb2YgdGhlIHNpZ25hbC4gSWYgYW4gQXVkaW9QYXJhbVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIHBhc3NlZCBpbiwgdGhhdCBwYXJhbWV0ZXIgd2lsbCBiZSB3cmFwcGVkXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGNvbnRyb2xsZWQgYnkgdGhlIFNpZ25hbC5cblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IFt1bml0cz1OdW1iZXJdIHVuaXQgVGhlIHVuaXRzIHRoZSBzaWduYWwgaXMgaW4uXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIHNpZ25hbCA9IG5ldyBUb25lLlNpZ25hbCgxMCk7XG5cdFx0ICovXG5cdCAgICBUb25lLlNpZ25hbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICd2YWx1ZScsXG5cdCAgICAgICAgICAgICd1bml0cydcblx0ICAgICAgICBdLCBUb25lLlNpZ25hbCk7XG5cdCAgICAgICAgVG9uZS5QYXJhbS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0KiBXaGVuIGEgc2lnbmFsIGlzIGNvbm5lY3RlZCB0byBhbm90aGVyIHNpZ25hbCBvciBhdWRpbyBwYXJhbSxcblx0XHRcdCogdGhpcyBzaWduYWwgYmVjb21lcyBhIHByb3h5IGZvciBpdFxuXHRcdFx0KiBAdHlwZSB7QXJyYXl9XG5cdFx0XHQqIEBwcml2YXRlXG5cdFx0XHQqL1xuXHQgICAgICAgIHRoaXMuX3Byb3hpZXMgPSBbXTtcblx0ICAgICAgICAvKipcblx0XHRcdCogSW5kaWNhdGVzIGlmIHRoZSBjb25zdGFudCBzb3VyY2Ugd2FzIHN0YXJ0ZWQgb3Igbm90XG5cdFx0XHQqIEBwcml2YXRlXG5cdFx0XHQqIEB0eXBlIHtCb29sZWFufVxuXHRcdFx0Ki9cblx0ICAgICAgICB0aGlzLl9zb3VyY2VTdGFydGVkID0gZmFsc2U7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgY29uc3RhbnQgc291cmNlIG5vZGUgd2hpY2ggZ2VuZXJhdGVzIHRoZSBzaWduYWxcblx0XHRcdCAqIEB0eXBlIHtDb25zdGFudFNvdXJjZU5vZGV9XG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fY29uc3RhbnRTb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlQ29uc3RhbnRTb3VyY2UoKTtcblx0ICAgICAgICB0aGlzLl9wYXJhbSA9IHRoaXMuX2NvbnN0YW50U291cmNlLm9mZnNldDtcblx0ICAgICAgICB0aGlzLnZhbHVlID0gb3B0aW9ucy52YWx1ZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSBub2RlIHdoZXJlIHRoZSBjb25zdGFudCBzaWduYWwgdmFsdWUgaXMgc2NhbGVkLlxuXHRcdFx0ICogQHR5cGUge0dhaW5Ob2RlfVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMub3V0cHV0ID0gdGhpcy5fY29uc3RhbnRTb3VyY2U7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgbm9kZSB3aGVyZSB0aGUgdmFsdWUgaXMgc2V0LlxuXHRcdFx0ICogQHR5cGUge1RvbmUuUGFyYW19XG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5pbnB1dCA9IHRoaXMuX3BhcmFtID0gdGhpcy5vdXRwdXQub2Zmc2V0O1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuU2lnbmFsLCBUb25lLlBhcmFtKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdCB2YWx1ZXNcblx0XHQgKiAgQHR5cGUgIHtPYmplY3R9XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICovXG5cdCAgICBUb25lLlNpZ25hbC5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAndmFsdWUnOiAwLFxuXHQgICAgICAgICd1bml0cyc6IFRvbmUuVHlwZS5EZWZhdWx0LFxuXHQgICAgICAgICdjb252ZXJ0JzogdHJ1ZVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBXaGVuIHNpZ25hbHMgY29ubmVjdCB0byBvdGhlciBzaWduYWxzIG9yIEF1ZGlvUGFyYW1zLFxuXHRcdCAqICB0aGV5IHRha2Ugb3ZlciB0aGUgb3V0cHV0IHZhbHVlIG9mIHRoYXQgc2lnbmFsIG9yIEF1ZGlvUGFyYW0uXG5cdFx0ICogIEZvciBhbGwgb3RoZXIgbm9kZXMsIHRoZSBiZWhhdmlvciBpcyB0aGUgc2FtZSBhcyBhIGRlZmF1bHQgPGNvZGU+Y29ubmVjdDwvY29kZT4uXG5cdFx0ICpcblx0XHQgKiAgQG92ZXJyaWRlXG5cdFx0ICogIEBwYXJhbSB7QXVkaW9QYXJhbXxBdWRpb05vZGV8VG9uZS5TaWduYWx8VG9uZX0gbm9kZVxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gW291dHB1dE51bWJlcj0wXSBUaGUgb3V0cHV0IG51bWJlciB0byBjb25uZWN0IGZyb20uXG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyfSBbaW5wdXROdW1iZXI9MF0gVGhlIGlucHV0IG51bWJlciB0byBjb25uZWN0IHRvLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5TaWduYWx9IHRoaXNcblx0XHQgKiAgQG1ldGhvZFxuXHRcdCAqL1xuXHQgICAgVG9uZS5TaWduYWwucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAobm9kZSkge1xuXHQgICAgICAgIC8vdGhpcyBpcyBhbiBvcHRpbWl6YXRpb24gd2hlcmUgdGhpcyBub2RlIHdpbGwgZm9yd2FyZCBhdXRvbWF0aW9uc1xuXHQgICAgICAgIC8vdG8gY29ubmVjdGVkIG5vZGVzIHdpdGhvdXQgYW55IHNpZ25hbCBpZiBwb3NzaWJsZS5cblx0ICAgICAgICBpZiAodGhpcy5faXNQYXJhbShub2RlKSAmJiAhdGhpcy5fc291cmNlU3RhcnRlZCkge1xuXHQgICAgICAgICAgICB0aGlzLl9wcm94aWVzLnB1c2gobm9kZSk7XG5cdCAgICAgICAgICAgIG5vZGUub3ZlcnJpZGRlbiA9IHRydWU7XG5cdCAgICAgICAgICAgIHRoaXMuX2FwcGx5QXV0b21hdGlvbnMobm9kZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgVG9uZS5TaWduYWxCYXNlLnByb3RvdHlwZS5jb25uZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICAgIGlmICghdGhpcy5fc291cmNlU3RhcnRlZCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fc291cmNlU3RhcnRlZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9jb25zdGFudFNvdXJjZS5zdGFydCgwKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBUYWtlcyBhIG5vZGUgYXMgYW4gYXJndW1lbnQgYW5kIHJldHVybnMgaWYgaXQgaXMgYSBQYXJhbSBvciBBdWRpb1BhcmFtXG5cdFx0ICogQHBhcmFtICB7Kn0gbm9kZSBUaGUgbm9kZSB0byB0ZXN0XG5cdFx0ICogQHJldHVybiB7Qm9vbGVhbn1cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5TaWduYWwucHJvdG90eXBlLl9pc1BhcmFtID0gZnVuY3Rpb24gKG5vZGUpIHtcblx0ICAgICAgICByZXR1cm4gVG9uZS5QYXJhbSAmJiBUb25lLlBhcmFtID09PSBub2RlLmNvbnN0cnVjdG9yIHx8IG5vZGUgaW5zdGFuY2VvZiBBdWRpb1BhcmFtO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIERpc2NhcmQgdGhlIG9wdGltaXphdGlvbiBhbmQgY29ubmVjdCBhbGwgb2YgdGhlIHByb3hpZXNcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5TaWduYWwucHJvdG90eXBlLl9jb25uZWN0UHJveGllcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoIXRoaXMuX3NvdXJjZVN0YXJ0ZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fc291cmNlU3RhcnRlZCA9IHRydWU7XG5cdCAgICAgICAgICAgIHRoaXMuX2NvbnN0YW50U291cmNlLnN0YXJ0KDApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9wcm94aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3h5KSB7XG5cdCAgICAgICAgICAgIFRvbmUuU2lnbmFsQmFzZS5wcm90b3R5cGUuY29ubmVjdC5jYWxsKHRoaXMsIHByb3h5KTtcblx0ICAgICAgICAgICAgaWYgKHByb3h5Ll9wcm94aWVzKSB7XG5cdCAgICAgICAgICAgICAgICBwcm94eS5fY29ubmVjdFByb3hpZXMoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogSW52b2tlZCB3aGVuIGEgbm9kZSBpcyBjb25uZWN0ZWQgdG8gdGhpc1xuXHRcdCAqIEBwYXJhbSAge0F1ZGlvTm9kZX0gZnJvbVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlNpZ25hbC5wcm90b3R5cGUuX29uQ29ubmVjdCA9IGZ1bmN0aW9uIChmcm9tKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLl9pc1BhcmFtKGZyb20pKSB7XG5cdCAgICAgICAgICAgIC8vY29ubmVjdCBhbGwgdGhlIHByb3hpZXNcblx0ICAgICAgICAgICAgdGhpcy5fY29ubmVjdFByb3hpZXMoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogQXBwbHkgYWxsIHRoZSBjdXJyZW50IGF1dG9tYXRpb25zIHRvIHRoZSBnaXZlbiBwYXJhbWV0ZXJcblx0XHQgKiBAcGFyYW0gIHtBdWRpb1BhcmFtfSBwYXJhbVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlNpZ25hbC5wcm90b3R5cGUuX2FwcGx5QXV0b21hdGlvbnMgPSBmdW5jdGlvbiAocGFyYW0pIHtcblx0ICAgICAgICB2YXIgbm93ID0gdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lO1xuXHQgICAgICAgIHBhcmFtLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyhub3cpO1xuXHQgICAgICAgIHZhciBjdXJyZW50VmFsID0gdGhpcy5nZXRWYWx1ZUF0VGltZShub3cpO1xuXHQgICAgICAgIHBhcmFtLnNldFZhbHVlQXRUaW1lKGN1cnJlbnRWYWwsIG5vdyk7XG5cdCAgICAgICAgdGhpcy5fZXZlbnRzLmZvckVhY2hGcm9tKG5vdywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIHBhcmFtW2V2ZW50LnR5cGVdKGV2ZW50LnZhbHVlLCBldmVudC50aW1lLCBldmVudC5jb25zdGFudCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogRGlzY29ubmVjdCBmcm9tIHRoZSBnaXZlbiBub2RlIG9yIGFsbCBub2RlcyBpZiBubyBwYXJhbSBpcyBnaXZlbi5cblx0XHQgKiBAcGFyYW0gIHtBdWRpb05vZGV8QXVkaW9QYXJhbX0gbm9kZVxuXHRcdCAqIEByZXR1cm4ge1RvbmUuU2lnbmFsfSAgICAgIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuU2lnbmFsLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKG5vZGUpIHtcblx0ICAgICAgICBpZiAodGhpcy5fcHJveGllcy5pbmNsdWRlcyhub2RlKSkge1xuXHQgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9wcm94aWVzLmluZGV4T2Yobm9kZSk7XG5cdCAgICAgICAgICAgIHRoaXMuX3Byb3hpZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKCFub2RlKSB7XG5cdCAgICAgICAgICAgIC8vbm8gYXJndW1lbnQsIGRpc2Nvbm5lY3QgZXZlcnl0aGluZ1xuXHQgICAgICAgICAgICB0aGlzLl9wcm94aWVzID0gW107XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBUb25lLlNpZ25hbEJhc2UucHJvdG90eXBlLmRpc2Nvbm5lY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBSZXR1cm4gdGhlIGN1cnJlbnQgc2lnbmFsIHZhbHVlIGF0IHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqIEBwYXJhbSAge1RpbWV9IHRpbWUgV2hlbiB0byBnZXQgdGhlIHNpZ25hbCB2YWx1ZVxuXHRcdCAqIEByZXR1cm4ge051bWJlcn1cblx0XHQgKi9cblx0ICAgIFRvbmUuU2lnbmFsLnByb3RvdHlwZS5nZXRWYWx1ZUF0VGltZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuX3BhcmFtLmdldFZhbHVlQXRUaW1lKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJhbS5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gVG9uZS5QYXJhbS5wcm90b3R5cGUuZ2V0VmFsdWVBdFRpbWUuY2FsbCh0aGlzLCB0aW1lKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLy93cmFwIGFsbCBvZiB0aGUgYXV0b21hdGlvbiBtZXRob2RzXG5cdCAgICBbXG5cdCAgICAgICAgJ3NldFZhbHVlQXRUaW1lJyxcblx0ICAgICAgICAnbGluZWFyUmFtcFRvVmFsdWVBdFRpbWUnLFxuXHQgICAgICAgICdleHBvbmVudGlhbFJhbXBUb1ZhbHVlQXRUaW1lJyxcblx0ICAgICAgICAnc2V0VGFyZ2V0QXRUaW1lJ1xuXHQgICAgXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcblx0ICAgICAgICB2YXIgcHJldmlvdXNNZXRob2QgPSBUb25lLlNpZ25hbC5wcm90b3R5cGVbbWV0aG9kXTtcblx0ICAgICAgICBUb25lLlNpZ25hbC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cdCAgICAgICAgICAgIHByZXZpb3VzTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICAgIGFyZ3NbMF0gPSB0aGlzLl9mcm9tVW5pdHMoYXJnc1swXSk7XG5cdCAgICAgICAgICAgIGFyZ3NbMV0gPSB0aGlzLnRvU2Vjb25kcyhhcmdzWzFdKTtcblx0ICAgICAgICAgICAgLy9hcHBseSBpdCB0byB0aGUgcHJveGllc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm94aWVzLmZvckVhY2goZnVuY3Rpb24gKHNpZ25hbCkge1xuXHQgICAgICAgICAgICAgICAgc2lnbmFsW21ldGhvZF0uYXBwbHkoc2lnbmFsLCBhcmdzKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfTtcblx0ICAgIH0pO1xuXHQgICAgW1xuXHQgICAgICAgICdjYW5jZWxTY2hlZHVsZWRWYWx1ZXMnLFxuXHQgICAgICAgICdjYW5jZWxBbmRIb2xkQXRUaW1lJ1xuXHQgICAgXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcblx0ICAgICAgICB2YXIgcHJldmlvdXNNZXRob2QgPSBUb25lLlNpZ25hbC5wcm90b3R5cGVbbWV0aG9kXTtcblx0ICAgICAgICBUb25lLlNpZ25hbC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cdCAgICAgICAgICAgIHByZXZpb3VzTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICAgIGFyZ3NbMF0gPSB0aGlzLnRvU2Vjb25kcyhhcmdzWzBdKTtcblx0ICAgICAgICAgICAgLy9hcHBseSBpdCB0byB0aGUgcHJveGllc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm94aWVzLmZvckVhY2goZnVuY3Rpb24gKHNpZ25hbCkge1xuXHQgICAgICAgICAgICAgICAgc2lnbmFsW21ldGhvZF0uYXBwbHkoc2lnbmFsLCBhcmdzKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfTtcblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIGRpc3Bvc2UgYW5kIGRpc2Nvbm5lY3Rcblx0XHQgKiAgQHJldHVybnMge1RvbmUuU2lnbmFsfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlNpZ25hbC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlBhcmFtLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fY29uc3RhbnRTb3VyY2UuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMuX2NvbnN0YW50U291cmNlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9wcm94aWVzID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5TaWduYWw7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBQb3cgYXBwbGllcyBhbiBleHBvbmVudCB0byB0aGUgaW5jb21pbmcgc2lnbmFsLiBUaGUgaW5jb21pbmcgc2lnbmFsXG5cdFx0ICogICAgICAgICBtdXN0IGJlIEF1ZGlvUmFuZ2UuXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuU2lnbmFsQmFzZX1cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBwYXJhbSB7UG9zaXRpdmV9IGV4cCBUaGUgZXhwb25lbnQgdG8gYXBwbHkgdG8gdGhlIGluY29taW5nIHNpZ25hbCwgbXVzdCBiZSBhdCBsZWFzdCAyLiBcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgcG93ID0gbmV3IFRvbmUuUG93KDIpO1xuXHRcdCAqIHZhciBzaWcgPSBuZXcgVG9uZS5TaWduYWwoMC41KS5jb25uZWN0KHBvdyk7XG5cdFx0ICogLy9vdXRwdXQgb2YgcG93IGlzIDAuMjUuIFxuXHRcdCAqL1xuXHQgICAgVG9uZS5Qb3cgPSBmdW5jdGlvbiAoZXhwKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiB0aGUgZXhwb25lbnRcblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZXhwID0gVG9uZS5kZWZhdWx0QXJnKGV4cCwgMSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUge1dhdmVTaGFwZXJOb2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9leHBTY2FsZXIgPSB0aGlzLmlucHV0ID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5XYXZlU2hhcGVyKHRoaXMuX2V4cEZ1bmModGhpcy5fZXhwKSwgODE5Mik7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5Qb3csIFRvbmUuU2lnbmFsQmFzZSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgdmFsdWUgb2YgdGhlIGV4cG9uZW50LlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlBvdyNcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBuYW1lIHZhbHVlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Qb3cucHJvdG90eXBlLCAndmFsdWUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9leHA7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChleHApIHtcblx0ICAgICAgICAgICAgdGhpcy5fZXhwID0gZXhwO1xuXHQgICAgICAgICAgICB0aGlzLl9leHBTY2FsZXIuc2V0TWFwKHRoaXMuX2V4cEZ1bmModGhpcy5fZXhwKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgdGhlIGZ1bmN0aW9uIHdoaWNoIG1hcHMgdGhlIHdhdmVzaGFwZXJcblx0XHQgKiAgQHBhcmFtICAge251bWJlcn0gZXhwXG5cdFx0ICogIEByZXR1cm4ge2Z1bmN0aW9ufVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Qb3cucHJvdG90eXBlLl9leHBGdW5jID0gZnVuY3Rpb24gKGV4cCkge1xuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBNYXRoLnBvdyhNYXRoLmFicyh2YWwpLCBleHApO1xuXHQgICAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Qb3d9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUG93LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsQmFzZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX2V4cFNjYWxlci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZXhwU2NhbGVyID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5Qb3c7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgVG9uZS5FbnZlbG9wZSBpcyBhbiBbQURTUl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ludGhlc2l6ZXIjQURTUl9lbnZlbG9wZSlcblx0XHQgKiAgICAgICAgICBlbnZlbG9wZSBnZW5lcmF0b3IuIFRvbmUuRW52ZWxvcGUgb3V0cHV0cyBhIHNpZ25hbCB3aGljaFxuXHRcdCAqICAgICAgICAgIGNhbiBiZSBjb25uZWN0ZWQgdG8gYW4gQXVkaW9QYXJhbSBvciBUb25lLlNpZ25hbC5cblx0XHQgKiAgICAgICAgICA8aW1nIHNyYz1cImh0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvZS9lYS9BRFNSX3BhcmFtZXRlci5zdmdcIj5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFthdHRhY2tdIFRoZSBhbW91bnQgb2YgdGltZSBpdCB0YWtlcyBmb3IgdGhlIGVudmVsb3BlIHRvIGdvIGZyb21cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAwIHRvIGl0J3MgbWF4aW11bSB2YWx1ZS5cblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbZGVjYXldXHRUaGUgcGVyaW9kIG9mIHRpbWUgYWZ0ZXIgdGhlIGF0dGFjayB0aGF0IGl0IHRha2VzIGZvciB0aGUgZW52ZWxvcGVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgXHR0byBmYWxsIHRvIHRoZSBzdXN0YWluIHZhbHVlLlxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlfSBbc3VzdGFpbl1cdFRoZSBwZXJjZW50IG9mIHRoZSBtYXhpbXVtIHZhbHVlIHRoYXQgdGhlIGVudmVsb3BlIHJlc3RzIGF0IHVudGlsXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0dGhlIHJlbGVhc2UgaXMgdHJpZ2dlcmVkLlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFtyZWxlYXNlXVx0VGhlIGFtb3VudCBvZiB0aW1lIGFmdGVyIHRoZSByZWxlYXNlIGlzIHRyaWdnZXJlZCBpdCB0YWtlcyB0byByZWFjaCAwLlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vYW4gYW1wbGl0dWRlIGVudmVsb3BlXG5cdFx0ICogdmFyIGdhaW5Ob2RlID0gVG9uZS5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcblx0XHQgKiB2YXIgZW52ID0gbmV3IFRvbmUuRW52ZWxvcGUoe1xuXHRcdCAqIFx0XCJhdHRhY2tcIiA6IDAuMSxcblx0XHQgKiBcdFwiZGVjYXlcIiA6IDAuMixcblx0XHQgKiBcdFwic3VzdGFpblwiIDogMSxcblx0XHQgKiBcdFwicmVsZWFzZVwiIDogMC44LFxuXHRcdCAqIH0pO1xuXHRcdCAqIGVudi5jb25uZWN0KGdhaW5Ob2RlLmdhaW4pO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5FbnZlbG9wZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvL2dldCBhbGwgb2YgdGhlIGRlZmF1bHRzXG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnYXR0YWNrJyxcblx0ICAgICAgICAgICAgJ2RlY2F5Jyxcblx0ICAgICAgICAgICAgJ3N1c3RhaW4nLFxuXHQgICAgICAgICAgICAncmVsZWFzZSdcblx0ICAgICAgICBdLCBUb25lLkVudmVsb3BlKTtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFdoZW4gdHJpZ2dlckF0dGFjayBpcyBjYWxsZWQsIHRoZSBhdHRhY2sgdGltZSBpcyB0aGUgYW1vdW50IG9mXG5cdFx0XHQgKiAgdGltZSBpdCB0YWtlcyBmb3IgdGhlIGVudmVsb3BlIHRvIHJlYWNoIGl0J3MgbWF4aW11bSB2YWx1ZS5cblx0XHRcdCAqICBAdHlwZSB7VGltZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuYXR0YWNrID0gb3B0aW9ucy5hdHRhY2s7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQWZ0ZXIgdGhlIGF0dGFjayBwb3J0aW9uIG9mIHRoZSBlbnZlbG9wZSwgdGhlIHZhbHVlIHdpbGwgZmFsbFxuXHRcdFx0ICogIG92ZXIgdGhlIGR1cmF0aW9uIG9mIHRoZSBkZWNheSB0aW1lIHRvIGl0J3Mgc3VzdGFpbiB2YWx1ZS5cblx0XHRcdCAqICBAdHlwZSB7VGltZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGVjYXkgPSBvcHRpb25zLmRlY2F5O1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogXHRUaGUgc3VzdGFpbiB2YWx1ZSBpcyB0aGUgdmFsdWVcblx0XHRcdCAqIFx0d2hpY2ggdGhlIGVudmVsb3BlIHJlc3RzIGF0IGFmdGVyIHRyaWdnZXJBdHRhY2sgaXNcblx0XHRcdCAqIFx0Y2FsbGVkLCBidXQgYmVmb3JlIHRyaWdnZXJSZWxlYXNlIGlzIGludm9rZWQuXG5cdFx0XHQgKiAgQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5zdXN0YWluID0gb3B0aW9ucy5zdXN0YWluO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEFmdGVyIHRyaWdnZXJSZWxlYXNlIGlzIGNhbGxlZCwgdGhlIGVudmVsb3BlJ3Ncblx0XHRcdCAqICB2YWx1ZSB3aWxsIGZhbGwgdG8gaXQncyBtaW1pbnVtIHZhbHVlIG92ZXIgdGhlXG5cdFx0XHQgKiAgZHVyYXRpb24gb2YgdGhlIHJlbGVhc2UgdGltZS5cblx0XHRcdCAqICBAdHlwZSB7VGltZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMucmVsZWFzZSA9IG9wdGlvbnMucmVsZWFzZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgbmV4dCB0aW1lIHRoZSBlbnZlbG9wZSBpcyBhdCBzdGFuZGJ5XG5cdFx0XHQgKiAgQHR5cGUge251bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYXR0YWNrQ3VydmUgPSAnbGluZWFyJztcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgbmV4dCB0aW1lIHRoZSBlbnZlbG9wZSBpcyBhdCBzdGFuZGJ5XG5cdFx0XHQgKiAgQHR5cGUge251bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcmVsZWFzZUN1cnZlID0gJ2V4cG9uZW50aWFsJztcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgc2lnbmFsXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuU2lnbmFsfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zaWcgPSB0aGlzLm91dHB1dCA9IG5ldyBUb25lLlNpZ25hbCgwKTtcblx0ICAgICAgICAvL3NldCB0aGUgYXR0YWNrQ3VydmUgaW5pdGlhbGx5XG5cdCAgICAgICAgdGhpcy5hdHRhY2tDdXJ2ZSA9IG9wdGlvbnMuYXR0YWNrQ3VydmU7XG5cdCAgICAgICAgdGhpcy5yZWxlYXNlQ3VydmUgPSBvcHRpb25zLnJlbGVhc2VDdXJ2ZTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkVudmVsb3BlLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgdGhlIGRlZmF1bHQgcGFyYW1ldGVyc1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqL1xuXHQgICAgVG9uZS5FbnZlbG9wZS5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnYXR0YWNrJzogMC4wMSxcblx0ICAgICAgICAnZGVjYXknOiAwLjEsXG5cdCAgICAgICAgJ3N1c3RhaW4nOiAwLjUsXG5cdCAgICAgICAgJ3JlbGVhc2UnOiAxLFxuXHQgICAgICAgICdhdHRhY2tDdXJ2ZSc6ICdsaW5lYXInLFxuXHQgICAgICAgICdyZWxlYXNlQ3VydmUnOiAnZXhwb25lbnRpYWwnXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogUmVhZCB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgZW52ZWxvcGUuIFVzZWZ1bCBmb3Jcblx0XHQgKiBzeW5jcm9uaXppbmcgdmlzdWFsIG91dHB1dCB0byB0aGUgZW52ZWxvcGUuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuRW52ZWxvcGUjXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAbmFtZSB2YWx1ZVxuXHRcdCAqIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuRW52ZWxvcGUucHJvdG90eXBlLCAndmFsdWUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlQXRUaW1lKHRoaXMubm93KCkpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHNoYXBlIG9mIHRoZSBhdHRhY2suXG5cdFx0ICogQ2FuIGJlIGFueSBvZiB0aGVzZSBzdHJpbmdzOlxuXHRcdCAqIDx1bD5cblx0XHQgKiAgIDxsaT5saW5lYXI8L2xpPlxuXHRcdCAqICAgPGxpPmV4cG9uZW50aWFsPC9saT5cblx0XHQgKiAgIDxsaT5zaW5lPC9saT5cblx0XHQgKiAgIDxsaT5jb3NpbmU8L2xpPlxuXHRcdCAqICAgPGxpPmJvdW5jZTwvbGk+XG5cdFx0ICogICA8bGk+cmlwcGxlPC9saT5cblx0XHQgKiAgIDxsaT5zdGVwPC9saT5cblx0XHQgKiA8L3VsPlxuXHRcdCAqIENhbiBhbHNvIGJlIGFuIGFycmF5IHdoaWNoIGRlc2NyaWJlcyB0aGUgY3VydmUuIFZhbHVlc1xuXHRcdCAqIGluIHRoZSBhcnJheSBhcmUgZXZlbmx5IHN1YmRpdmlkZWQgYW5kIGxpbmVhcmx5XG5cdFx0ICogaW50ZXJwb2xhdGVkIG92ZXIgdGhlIGR1cmF0aW9uIG9mIHRoZSBhdHRhY2suXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuRW52ZWxvcGUjXG5cdFx0ICogQHR5cGUge1N0cmluZ3xBcnJheX1cblx0XHQgKiBAbmFtZSBhdHRhY2tDdXJ2ZVxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogZW52LmF0dGFja0N1cnZlID0gXCJsaW5lYXJcIjtcblx0XHQgKiBAZXhhbXBsZVxuXHRcdCAqIC8vY2FuIGFsc28gYmUgYW4gYXJyYXlcblx0XHQgKiBlbnYuYXR0YWNrQ3VydmUgPSBbMCwgMC4yLCAwLjMsIDAuNCwgMV1cblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkVudmVsb3BlLnByb3RvdHlwZSwgJ2F0dGFja0N1cnZlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBpZiAoVG9uZS5pc1N0cmluZyh0aGlzLl9hdHRhY2tDdXJ2ZSkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdHRhY2tDdXJ2ZTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChUb25lLmlzQXJyYXkodGhpcy5fYXR0YWNrQ3VydmUpKSB7XG5cdCAgICAgICAgICAgICAgICAvL2xvb2sgdXAgdGhlIG5hbWUgaW4gdGhlIGN1cnZlcyBhcnJheVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgdHlwZSBpbiBUb25lLkVudmVsb3BlLlR5cGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoVG9uZS5FbnZlbG9wZS5UeXBlW3R5cGVdLkluID09PSB0aGlzLl9hdHRhY2tDdXJ2ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAvL290aGVyd2lzZSBqdXN0IHJldHVybiB0aGUgYXJyYXlcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdHRhY2tDdXJ2ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoY3VydmUpIHtcblx0ICAgICAgICAgICAgLy9jaGVjayBpZiBpdCdzIGEgdmFsaWQgdHlwZVxuXHQgICAgICAgICAgICBpZiAoVG9uZS5FbnZlbG9wZS5UeXBlLmhhc093blByb3BlcnR5KGN1cnZlKSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGN1cnZlRGVmID0gVG9uZS5FbnZlbG9wZS5UeXBlW2N1cnZlXTtcblx0ICAgICAgICAgICAgICAgIGlmIChUb25lLmlzT2JqZWN0KGN1cnZlRGVmKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2F0dGFja0N1cnZlID0gY3VydmVEZWYuSW47XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2F0dGFja0N1cnZlID0gY3VydmVEZWY7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoVG9uZS5pc0FycmF5KGN1cnZlKSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fYXR0YWNrQ3VydmUgPSBjdXJ2ZTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVG9uZS5FbnZlbG9wZTogaW52YWxpZCBjdXJ2ZTogJyArIGN1cnZlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHNoYXBlIG9mIHRoZSByZWxlYXNlLiBTZWUgdGhlIGF0dGFjayBjdXJ2ZSB0eXBlcy5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5FbnZlbG9wZSNcblx0XHQgKiBAdHlwZSB7U3RyaW5nfEFycmF5fVxuXHRcdCAqIEBuYW1lIHJlbGVhc2VDdXJ2ZVxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogZW52LnJlbGVhc2VDdXJ2ZSA9IFwibGluZWFyXCI7XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5FbnZlbG9wZS5wcm90b3R5cGUsICdyZWxlYXNlQ3VydmUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmIChUb25lLmlzU3RyaW5nKHRoaXMuX3JlbGVhc2VDdXJ2ZSkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWxlYXNlQ3VydmU7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoVG9uZS5pc0FycmF5KHRoaXMuX3JlbGVhc2VDdXJ2ZSkpIHtcblx0ICAgICAgICAgICAgICAgIC8vbG9vayB1cCB0aGUgbmFtZSBpbiB0aGUgY3VydmVzIGFycmF5XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciB0eXBlIGluIFRvbmUuRW52ZWxvcGUuVHlwZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChUb25lLkVudmVsb3BlLlR5cGVbdHlwZV0uT3V0ID09PSB0aGlzLl9yZWxlYXNlQ3VydmUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgLy9vdGhlcndpc2UganVzdCByZXR1cm4gdGhlIGFycmF5XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVsZWFzZUN1cnZlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjdXJ2ZSkge1xuXHQgICAgICAgICAgICAvL2NoZWNrIGlmIGl0J3MgYSB2YWxpZCB0eXBlXG5cdCAgICAgICAgICAgIGlmIChUb25lLkVudmVsb3BlLlR5cGUuaGFzT3duUHJvcGVydHkoY3VydmUpKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY3VydmVEZWYgPSBUb25lLkVudmVsb3BlLlR5cGVbY3VydmVdO1xuXHQgICAgICAgICAgICAgICAgaWYgKFRvbmUuaXNPYmplY3QoY3VydmVEZWYpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVsZWFzZUN1cnZlID0gY3VydmVEZWYuT3V0O1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWxlYXNlQ3VydmUgPSBjdXJ2ZURlZjtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChUb25lLmlzQXJyYXkoY3VydmUpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9yZWxlYXNlQ3VydmUgPSBjdXJ2ZTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVG9uZS5FbnZlbG9wZTogaW52YWxpZCBjdXJ2ZTogJyArIGN1cnZlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRyaWdnZXIgdGhlIGF0dGFjay9kZWNheSBwb3J0aW9uIG9mIHRoZSBBRFNSIGVudmVsb3BlLlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbdGltZT1ub3ddIFdoZW4gdGhlIGF0dGFjayBzaG91bGQgc3RhcnQuXG5cdFx0ICogIEBwYXJhbSB7Tm9ybWFsUmFuZ2V9IFt2ZWxvY2l0eT0xXSBUaGUgdmVsb2NpdHkgb2YgdGhlIGVudmVsb3BlIHNjYWxlcyB0aGUgdmFsZXMuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyIGJldHdlZW4gMC0xXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkVudmVsb3BlfSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogIC8vdHJpZ2dlciB0aGUgYXR0YWNrIDAuNSBzZWNvbmRzIGZyb20gbm93IHdpdGggYSB2ZWxvY2l0eSBvZiAwLjJcblx0XHQgKiAgZW52LnRyaWdnZXJBdHRhY2soXCIrMC41XCIsIDAuMik7XG5cdFx0ICovXG5cdCAgICBUb25lLkVudmVsb3BlLnByb3RvdHlwZS50cmlnZ2VyQXR0YWNrID0gZnVuY3Rpb24gKHRpbWUsIHZlbG9jaXR5KSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHZhciBvcmlnaW5hbEF0dGFjayA9IHRoaXMudG9TZWNvbmRzKHRoaXMuYXR0YWNrKTtcblx0ICAgICAgICB2YXIgYXR0YWNrID0gb3JpZ2luYWxBdHRhY2s7XG5cdCAgICAgICAgdmFyIGRlY2F5ID0gdGhpcy50b1NlY29uZHModGhpcy5kZWNheSk7XG5cdCAgICAgICAgdmVsb2NpdHkgPSBUb25lLmRlZmF1bHRBcmcodmVsb2NpdHksIDEpO1xuXHQgICAgICAgIC8vY2hlY2sgaWYgaXQncyBub3QgYSBjb21wbGV0ZSBhdHRhY2tcblx0ICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gdGhpcy5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcblx0ICAgICAgICBpZiAoY3VycmVudFZhbHVlID4gMCkge1xuXHQgICAgICAgICAgICAvL3N1YnRyYWN0IHRoZSBjdXJyZW50IHZhbHVlIGZyb20gdGhlIGF0dGFjayB0aW1lXG5cdCAgICAgICAgICAgIHZhciBhdHRhY2tSYXRlID0gMSAvIGF0dGFjaztcblx0ICAgICAgICAgICAgdmFyIHJlbWFpbmluZ0Rpc3RhbmNlID0gMSAtIGN1cnJlbnRWYWx1ZTtcblx0ICAgICAgICAgICAgLy90aGUgYXR0YWNrIGlzIG5vdyB0aGUgcmVtYWluaW5nIHRpbWVcblx0ICAgICAgICAgICAgYXR0YWNrID0gcmVtYWluaW5nRGlzdGFuY2UgLyBhdHRhY2tSYXRlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvL2F0dGFja1xuXHQgICAgICAgIGlmICh0aGlzLl9hdHRhY2tDdXJ2ZSA9PT0gJ2xpbmVhcicpIHtcblx0ICAgICAgICAgICAgdGhpcy5fc2lnLmxpbmVhclJhbXBUbyh2ZWxvY2l0eSwgYXR0YWNrLCB0aW1lKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2F0dGFja0N1cnZlID09PSAnZXhwb25lbnRpYWwnKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3NpZy50YXJnZXRSYW1wVG8odmVsb2NpdHksIGF0dGFjaywgdGltZSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChhdHRhY2sgPiAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3NpZy5jYW5jZWxBbmRIb2xkQXRUaW1lKHRpbWUpO1xuXHQgICAgICAgICAgICB2YXIgY3VydmUgPSB0aGlzLl9hdHRhY2tDdXJ2ZTtcblx0ICAgICAgICAgICAgLy90YWtlIG9ubHkgYSBwb3J0aW9uIG9mIHRoZSBjdXJ2ZVxuXHQgICAgICAgICAgICBpZiAoYXR0YWNrIDwgb3JpZ2luYWxBdHRhY2spIHtcblx0ICAgICAgICAgICAgICAgIHZhciBwZXJjZW50Q29tcGxldGUgPSAxIC0gYXR0YWNrIC8gb3JpZ2luYWxBdHRhY2s7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2xpY2VJbmRleCA9IE1hdGguZmxvb3IocGVyY2VudENvbXBsZXRlICogdGhpcy5fYXR0YWNrQ3VydmUubGVuZ3RoKTtcblx0ICAgICAgICAgICAgICAgIGN1cnZlID0gdGhpcy5fYXR0YWNrQ3VydmUuc2xpY2Uoc2xpY2VJbmRleCk7XG5cdCAgICAgICAgICAgICAgICAvL3RoZSBmaXJzdCBpbmRleCBpcyB0aGUgY3VycmVudCB2YWx1ZVxuXHQgICAgICAgICAgICAgICAgY3VydmVbMF0gPSBjdXJyZW50VmFsdWU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5fc2lnLnNldFZhbHVlQ3VydmVBdFRpbWUoY3VydmUsIHRpbWUsIGF0dGFjaywgdmVsb2NpdHkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvL2RlY2F5XG5cdCAgICAgICAgaWYgKGRlY2F5KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3NpZy50YXJnZXRSYW1wVG8odmVsb2NpdHkgKiB0aGlzLnN1c3RhaW4sIGRlY2F5LCBhdHRhY2sgKyB0aW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRyaWdnZXJzIHRoZSByZWxlYXNlIG9mIHRoZSBlbnZlbG9wZS5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XSBXaGVuIHRoZSByZWxlYXNlIHBvcnRpb24gb2YgdGhlIGVudmVsb3BlIHNob3VsZCBzdGFydC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuRW52ZWxvcGV9IHRoaXNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgLy90cmlnZ2VyIHJlbGVhc2UgaW1tZWRpYXRlbHlcblx0XHQgKiAgZW52LnRyaWdnZXJSZWxlYXNlKCk7XG5cdFx0ICovXG5cdCAgICBUb25lLkVudmVsb3BlLnByb3RvdHlwZS50cmlnZ2VyUmVsZWFzZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB0aGlzLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuXHQgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPiAwKSB7XG5cdCAgICAgICAgICAgIHZhciByZWxlYXNlID0gdGhpcy50b1NlY29uZHModGhpcy5yZWxlYXNlKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3JlbGVhc2VDdXJ2ZSA9PT0gJ2xpbmVhcicpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3NpZy5saW5lYXJSYW1wVG8oMCwgcmVsZWFzZSwgdGltZSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fcmVsZWFzZUN1cnZlID09PSAnZXhwb25lbnRpYWwnKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9zaWcudGFyZ2V0UmFtcFRvKDAsIHJlbGVhc2UsIHRpbWUpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdmFyIGN1cnZlID0gdGhpcy5fcmVsZWFzZUN1cnZlO1xuXHQgICAgICAgICAgICAgICAgaWYgKFRvbmUuaXNBcnJheShjdXJ2ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaWcuY2FuY2VsQW5kSG9sZEF0VGltZSh0aW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaWcuc2V0VmFsdWVDdXJ2ZUF0VGltZShjdXJ2ZSwgdGltZSwgcmVsZWFzZSwgY3VycmVudFZhbHVlKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgR2V0IHRoZSBzY2hlZHVsZWQgdmFsdWUgYXQgdGhlIGdpdmVuIHRpbWUuIFRoaXMgd2lsbFxuXHRcdCAqICByZXR1cm4gdGhlIHVuY29udmVydGVkIChyYXcpIHZhbHVlLlxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lICBUaGUgdGltZSBpbiBzZWNvbmRzLlxuXHRcdCAqICBAcmV0dXJuICB7TnVtYmVyfSAgVGhlIHNjaGVkdWxlZCB2YWx1ZSBhdCB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKi9cblx0ICAgIFRvbmUuRW52ZWxvcGUucHJvdG90eXBlLmdldFZhbHVlQXRUaW1lID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fc2lnLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICB0cmlnZ2VyQXR0YWNrUmVsZWFzZSBpcyBzaG9ydGhhbmQgZm9yIHRyaWdnZXJBdHRhY2ssIHRoZW4gd2FpdGluZ1xuXHRcdCAqICBzb21lIGR1cmF0aW9uLCB0aGVuIHRyaWdnZXJSZWxlYXNlLlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3VzdGFpbi5cblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIFdoZW4gdGhlIGF0dGFjayBzaG91bGQgYmUgdHJpZ2dlcmVkLlxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gW3ZlbG9jaXR5PTFdIFRoZSB2ZWxvY2l0eSBvZiB0aGUgZW52ZWxvcGUuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkVudmVsb3BlfSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy90cmlnZ2VyIHRoZSBhdHRhY2sgYW5kIHRoZW4gdGhlIHJlbGVhc2UgYWZ0ZXIgMC42IHNlY29uZHMuXG5cdFx0ICogZW52LnRyaWdnZXJBdHRhY2tSZWxlYXNlKDAuNik7XG5cdFx0ICovXG5cdCAgICBUb25lLkVudmVsb3BlLnByb3RvdHlwZS50cmlnZ2VyQXR0YWNrUmVsZWFzZSA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgdGltZSwgdmVsb2NpdHkpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy50cmlnZ2VyQXR0YWNrKHRpbWUsIHZlbG9jaXR5KTtcblx0ICAgICAgICB0aGlzLnRyaWdnZXJSZWxlYXNlKHRpbWUgKyB0aGlzLnRvU2Vjb25kcyhkdXJhdGlvbikpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDYW5jZWxzIGFsbCBzY2hlZHVsZWQgZW52ZWxvcGUgY2hhbmdlcyBhZnRlciB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gYWZ0ZXJcblx0XHQgKiAgQHJldHVybnMge1RvbmUuRW52ZWxvcGV9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRW52ZWxvcGUucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uIChhZnRlcikge1xuXHQgICAgICAgIHRoaXMuX3NpZy5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMoYWZ0ZXIpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBCb3Jyb3dzIHRoZSBjb25uZWN0IG1ldGhvZCBmcm9tIFRvbmUuU2lnbmFsLlxuXHRcdCAqICBAZnVuY3Rpb25cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuRW52ZWxvcGUucHJvdG90eXBlLmNvbm5lY3QgPSBUb25lLlNpZ25hbEJhc2UucHJvdG90eXBlLmNvbm5lY3Q7XG5cdCAgICAvKipcblx0IFx0ICogIEdlbmVyYXRlIHNvbWUgY29tcGxleCBlbnZlbG9wZSBjdXJ2ZXMuXG5cdCBcdCAqL1xuXHQgICAgKGZ1bmN0aW9uIF9jcmVhdGVDdXJ2ZXMoKSB7XG5cdCAgICAgICAgdmFyIGN1cnZlTGVuID0gMTI4O1xuXHQgICAgICAgIHZhciBpLCBrO1xuXHQgICAgICAgIC8vY29zaW5lIGN1cnZlXG5cdCAgICAgICAgdmFyIGNvc2luZUN1cnZlID0gW107XG5cdCAgICAgICAgZm9yIChpID0gMDsgaSA8IGN1cnZlTGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgY29zaW5lQ3VydmVbaV0gPSBNYXRoLnNpbihpIC8gKGN1cnZlTGVuIC0gMSkgKiAoTWF0aC5QSSAvIDIpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9yaXBwbGUgY3VydmVcblx0ICAgICAgICB2YXIgcmlwcGxlQ3VydmUgPSBbXTtcblx0ICAgICAgICB2YXIgcmlwcGxlQ3VydmVGcmVxID0gNi40O1xuXHQgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjdXJ2ZUxlbiAtIDE7IGkrKykge1xuXHQgICAgICAgICAgICBrID0gaSAvIChjdXJ2ZUxlbiAtIDEpO1xuXHQgICAgICAgICAgICB2YXIgc2luZVdhdmUgPSBNYXRoLnNpbihrICogKE1hdGguUEkgKiAyKSAqIHJpcHBsZUN1cnZlRnJlcSAtIE1hdGguUEkgLyAyKSArIDE7XG5cdCAgICAgICAgICAgIHJpcHBsZUN1cnZlW2ldID0gc2luZVdhdmUgLyAxMCArIGsgKiAwLjgzO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByaXBwbGVDdXJ2ZVtjdXJ2ZUxlbiAtIDFdID0gMTtcblx0ICAgICAgICAvL3N0YWlycyBjdXJ2ZVxuXHQgICAgICAgIHZhciBzdGFpcnNDdXJ2ZSA9IFtdO1xuXHQgICAgICAgIHZhciBzdGVwcyA9IDU7XG5cdCAgICAgICAgZm9yIChpID0gMDsgaSA8IGN1cnZlTGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgc3RhaXJzQ3VydmVbaV0gPSBNYXRoLmNlaWwoaSAvIChjdXJ2ZUxlbiAtIDEpICogc3RlcHMpIC8gc3RlcHM7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vaW4tb3V0IGVhc2luZyBjdXJ2ZVxuXHQgICAgICAgIHZhciBzaW5lQ3VydmUgPSBbXTtcblx0ICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY3VydmVMZW47IGkrKykge1xuXHQgICAgICAgICAgICBrID0gaSAvIChjdXJ2ZUxlbiAtIDEpO1xuXHQgICAgICAgICAgICBzaW5lQ3VydmVbaV0gPSAwLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBrKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vYSBib3VuY2UgY3VydmVcblx0ICAgICAgICB2YXIgYm91bmNlQ3VydmUgPSBbXTtcblx0ICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY3VydmVMZW47IGkrKykge1xuXHQgICAgICAgICAgICBrID0gaSAvIChjdXJ2ZUxlbiAtIDEpO1xuXHQgICAgICAgICAgICB2YXIgZnJlcSA9IE1hdGgucG93KGssIDMpICogNCArIDAuMjtcblx0ICAgICAgICAgICAgdmFyIHZhbCA9IE1hdGguY29zKGZyZXEgKiBNYXRoLlBJICogMiAqIGspO1xuXHQgICAgICAgICAgICBib3VuY2VDdXJ2ZVtpXSA9IE1hdGguYWJzKHZhbCAqICgxIC0gaykpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvKipcblx0XHRcdCAqICBJbnZlcnQgYSB2YWx1ZSBjdXJ2ZSB0byBtYWtlIGl0IHdvcmsgZm9yIHRoZSByZWxlYXNlXG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIGZ1bmN0aW9uIGludmVydEN1cnZlKGN1cnZlKSB7XG5cdCAgICAgICAgICAgIHZhciBvdXQgPSBuZXcgQXJyYXkoY3VydmUubGVuZ3RoKTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjdXJ2ZS5sZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICAgICAgb3V0W2pdID0gMSAtIGN1cnZlW2pdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBvdXQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHJldmVyc2UgdGhlIGN1cnZlXG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIGZ1bmN0aW9uIHJldmVyc2VDdXJ2ZShjdXJ2ZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gY3VydmUuc2xpY2UoMCkucmV2ZXJzZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvKipcblx0XHRcdCAqICBhdHRhY2sgYW5kIHJlbGVhc2UgY3VydmUgYXJyYXlzXG5cdFx0XHQgKiAgQHR5cGUgIHtPYmplY3R9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIFRvbmUuRW52ZWxvcGUuVHlwZSA9IHtcblx0ICAgICAgICAgICAgJ2xpbmVhcic6ICdsaW5lYXInLFxuXHQgICAgICAgICAgICAnZXhwb25lbnRpYWwnOiAnZXhwb25lbnRpYWwnLFxuXHQgICAgICAgICAgICAnYm91bmNlJzoge1xuXHQgICAgICAgICAgICAgICAgSW46IGludmVydEN1cnZlKGJvdW5jZUN1cnZlKSxcblx0ICAgICAgICAgICAgICAgIE91dDogYm91bmNlQ3VydmVcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgJ2Nvc2luZSc6IHtcblx0ICAgICAgICAgICAgICAgIEluOiBjb3NpbmVDdXJ2ZSxcblx0ICAgICAgICAgICAgICAgIE91dDogcmV2ZXJzZUN1cnZlKGNvc2luZUN1cnZlKVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAnc3RlcCc6IHtcblx0ICAgICAgICAgICAgICAgIEluOiBzdGFpcnNDdXJ2ZSxcblx0ICAgICAgICAgICAgICAgIE91dDogaW52ZXJ0Q3VydmUoc3RhaXJzQ3VydmUpXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICdyaXBwbGUnOiB7XG5cdCAgICAgICAgICAgICAgICBJbjogcmlwcGxlQ3VydmUsXG5cdCAgICAgICAgICAgICAgICBPdXQ6IGludmVydEN1cnZlKHJpcHBsZUN1cnZlKVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAnc2luZSc6IHtcblx0ICAgICAgICAgICAgICAgIEluOiBzaW5lQ3VydmUsXG5cdCAgICAgICAgICAgICAgICBPdXQ6IGludmVydEN1cnZlKHNpbmVDdXJ2ZSlcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICB9KCkpO1xuXHQgICAgLyoqXG5cdFx0ICogIERpc2Nvbm5lY3QgYW5kIGRpc3Bvc2UuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkVudmVsb3BlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkVudmVsb3BlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fc2lnLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9zaWcgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2F0dGFja0N1cnZlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9yZWxlYXNlQ3VydmUgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkVudmVsb3BlO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIFRvbmUuQW1wbGl0dWRlRW52ZWxvcGUgaXMgYSBUb25lLkVudmVsb3BlIGNvbm5lY3RlZCB0byBhIGdhaW4gbm9kZS5cblx0XHQgKiAgICAgICAgICBVbmxpa2UgVG9uZS5FbnZlbG9wZSwgd2hpY2ggb3V0cHV0cyB0aGUgZW52ZWxvcGUncyB2YWx1ZSwgVG9uZS5BbXBsaXR1ZGVFbnZlbG9wZSBhY2NlcHRzXG5cdFx0ICogICAgICAgICAgYW4gYXVkaW8gc2lnbmFsIGFzIHRoZSBpbnB1dCBhbmQgd2lsbCBhcHBseSB0aGUgZW52ZWxvcGUgdG8gdGhlIGFtcGxpdHVkZVxuXHRcdCAqICAgICAgICAgIG9mIHRoZSBzaWduYWwuIFJlYWQgbW9yZSBhYm91dCBBRFNSIEVudmVsb3BlcyBvbiBbV2lraXBlZGlhXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW50aGVzaXplciNBRFNSX2VudmVsb3BlKS5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuRW52ZWxvcGV9XG5cdFx0ICogIEBwYXJhbSB7VGltZXxPYmplY3R9IFthdHRhY2tdIFRoZSBhbW91bnQgb2YgdGltZSBpdCB0YWtlcyBmb3IgdGhlIGVudmVsb3BlIHRvIGdvIGZyb21cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwIHRvIGl0J3MgbWF4aW11bSB2YWx1ZS5cblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbZGVjYXldXHRUaGUgcGVyaW9kIG9mIHRpbWUgYWZ0ZXIgdGhlIGF0dGFjayB0aGF0IGl0IHRha2VzIGZvciB0aGUgZW52ZWxvcGVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgXHR0byBmYWxsIHRvIHRoZSBzdXN0YWluIHZhbHVlLlxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlfSBbc3VzdGFpbl1cdFRoZSBwZXJjZW50IG9mIHRoZSBtYXhpbXVtIHZhbHVlIHRoYXQgdGhlIGVudmVsb3BlIHJlc3RzIGF0IHVudGlsXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0dGhlIHJlbGVhc2UgaXMgdHJpZ2dlcmVkLlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFtyZWxlYXNlXVx0VGhlIGFtb3VudCBvZiB0aW1lIGFmdGVyIHRoZSByZWxlYXNlIGlzIHRyaWdnZXJlZCBpdCB0YWtlcyB0byByZWFjaCAwLlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBhbXBFbnYgPSBuZXcgVG9uZS5BbXBsaXR1ZGVFbnZlbG9wZSh7XG5cdFx0ICogXHRcImF0dGFja1wiOiAwLjEsXG5cdFx0ICogXHRcImRlY2F5XCI6IDAuMixcblx0XHQgKiBcdFwic3VzdGFpblwiOiAxLjAsXG5cdFx0ICogXHRcInJlbGVhc2VcIjogMC44XG5cdFx0ICogfSkudG9NYXN0ZXIoKTtcblx0XHQgKiAvL2NyZWF0ZSBhbiBvc2NpbGxhdG9yIGFuZCBjb25uZWN0IGl0XG5cdFx0ICogdmFyIG9zYyA9IG5ldyBUb25lLk9zY2lsbGF0b3IoKS5jb25uZWN0KGFtcEVudikuc3RhcnQoKTtcblx0XHQgKiAvL3RyaWdnZXIgdGhlIGVudmVsb3BlcyBhdHRhY2sgYW5kIHJlbGVhc2UgXCI4dFwiIGFwYXJ0XG5cdFx0ICogYW1wRW52LnRyaWdnZXJBdHRhY2tSZWxlYXNlKFwiOHRcIik7XG5cdFx0ICovXG5cdCAgICBUb25lLkFtcGxpdHVkZUVudmVsb3BlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuRW52ZWxvcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgaW5wdXQgbm9kZVxuXHRcdFx0ICogIEB0eXBlIHtHYWluTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5pbnB1dCA9IHRoaXMub3V0cHV0ID0gbmV3IFRvbmUuR2FpbigpO1xuXHQgICAgICAgIHRoaXMuX3NpZy5jb25uZWN0KHRoaXMub3V0cHV0LmdhaW4pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuQW1wbGl0dWRlRW52ZWxvcGUsIFRvbmUuRW52ZWxvcGUpO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkFtcGxpdHVkZUVudmVsb3BlfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5BbXBsaXR1ZGVFbnZlbG9wZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkVudmVsb3BlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuQW1wbGl0dWRlRW52ZWxvcGU7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIC8qKlxuXHRcdCAqICBBbmFseXNlck5vZGUuZ2V0RmxvYXRUaW1lRG9tYWluRGF0YSBwb2x5ZmlsbFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgaWYgKFRvbmUuc3VwcG9ydGVkKSB7XG5cdCAgICAgICAgaWYgKCFBbmFseXNlck5vZGUucHJvdG90eXBlLmdldEZsb2F0VGltZURvbWFpbkRhdGEpIHtcblx0ICAgICAgICAgICAgLy9yZWZlcmVuY2VkIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2hheW9uYW8vZ2V0LWZsb2F0LXRpbWUtZG9tYWluLWRhdGFcblx0ICAgICAgICAgICAgQW5hbHlzZXJOb2RlLnByb3RvdHlwZS5nZXRGbG9hdFRpbWVEb21haW5EYXRhID0gZnVuY3Rpb24gKGFycmF5KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgdWludDggPSBuZXcgVWludDhBcnJheShhcnJheS5sZW5ndGgpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5nZXRCeXRlVGltZURvbWFpbkRhdGEodWludDgpO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1aW50OC5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGFycmF5W2ldID0gKHVpbnQ4W2ldIC0gMTI4KSAvIDEyODtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgV3JhcHBlciBhcm91bmQgdGhlIG5hdGl2ZSBXZWIgQXVkaW8nc1xuXHRcdCAqICAgICAgICAgIFtBbmFseXNlck5vZGVdKGh0dHA6Ly93ZWJhdWRpby5naXRodWIuaW8vd2ViLWF1ZGlvLWFwaS8jaWRsLWRlZi1BbmFseXNlck5vZGUpLlxuXHRcdCAqICAgICAgICAgIEV4dHJhY3RzIEZGVCBvciBXYXZlZm9ybSBkYXRhIGZyb20gdGhlIGluY29taW5nIHNpZ25hbC5cblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAcGFyYW0ge1N0cmluZz19IHR5cGUgVGhlIHJldHVybiB0eXBlIG9mIHRoZSBhbmFseXNpcywgZWl0aGVyIFwiZmZ0XCIsIG9yIFwid2F2ZWZvcm1cIi5cblx0XHQgKiAgQHBhcmFtIHtOdW1iZXI9fSBzaXplIFRoZSBzaXplIG9mIHRoZSBGRlQuIFZhbHVlIG11c3QgYmUgYSBwb3dlciBvZlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICB0d28gaW4gdGhlIHJhbmdlIDMyIHRvIDMyNzY4LlxuXHRcdCAqL1xuXHQgICAgVG9uZS5BbmFseXNlciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICd0eXBlJyxcblx0ICAgICAgICAgICAgJ3NpemUnXG5cdCAgICAgICAgXSwgVG9uZS5BbmFseXNlcik7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW5hbHlzZXIgbm9kZS5cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtBbmFseXNlck5vZGV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9hbmFseXNlciA9IHRoaXMuaW5wdXQgPSB0aGlzLm91dHB1dCA9IHRoaXMuY29udGV4dC5jcmVhdGVBbmFseXNlcigpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBhbmFseXNpcyB0eXBlXG5cdFx0XHQgKiAgQHR5cGUge1N0cmluZ31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fdHlwZSA9IG9wdGlvbnMudHlwZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYnVmZmVyIHRoYXQgdGhlIEZGVCBkYXRhIGlzIHdyaXR0ZW4gdG9cblx0XHRcdCAqICBAdHlwZSB7VHlwZWRBcnJheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYnVmZmVyID0gbnVsbDtcblx0ICAgICAgICAvL3NldCB0aGUgdmFsdWVzIGluaXRpYWxseVxuXHQgICAgICAgIHRoaXMuc2l6ZSA9IG9wdGlvbnMuc2l6ZTtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGU7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5BbmFseXNlciwgVG9uZS5BdWRpb05vZGUpO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBkZWZhdWx0IHZhbHVlcy5cblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKiAgQGNvbnN0XG5cdFx0ICovXG5cdCAgICBUb25lLkFuYWx5c2VyLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdzaXplJzogMTAyNCxcblx0ICAgICAgICAndHlwZSc6ICdmZnQnLFxuXHQgICAgICAgICdzbW9vdGhpbmcnOiAwLjhcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUG9zc2libGUgcmV0dXJuIHR5cGVzIG9mIGFuYWx5c2VyLmdldFZhbHVlKClcblx0XHQgKiAgQGVudW0ge1N0cmluZ31cblx0XHQgKi9cblx0ICAgIFRvbmUuQW5hbHlzZXIuVHlwZSA9IHtcblx0ICAgICAgICBXYXZlZm9ybTogJ3dhdmVmb3JtJyxcblx0ICAgICAgICBGRlQ6ICdmZnQnXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJ1biB0aGUgYW5hbHlzaXMgZ2l2ZW4gdGhlIGN1cnJlbnQgc2V0dGluZ3MgYW5kIHJldHVybiB0aGVcblx0XHQgKiAgcmVzdWx0IGFzIGEgVHlwZWRBcnJheS5cblx0XHQgKiAgQHJldHVybnMge1R5cGVkQXJyYXl9XG5cdFx0ICovXG5cdCAgICBUb25lLkFuYWx5c2VyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5fdHlwZSA9PT0gVG9uZS5BbmFseXNlci5UeXBlLkZGVCkge1xuXHQgICAgICAgICAgICB0aGlzLl9hbmFseXNlci5nZXRGbG9hdEZyZXF1ZW5jeURhdGEodGhpcy5fYnVmZmVyKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3R5cGUgPT09IFRvbmUuQW5hbHlzZXIuVHlwZS5XYXZlZm9ybSkge1xuXHQgICAgICAgICAgICB0aGlzLl9hbmFseXNlci5nZXRGbG9hdFRpbWVEb21haW5EYXRhKHRoaXMuX2J1ZmZlcik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXI7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBzaXplIG9mIGFuYWx5c2lzLiBUaGlzIG11c3QgYmUgYSBwb3dlciBvZiB0d28gaW4gdGhlIHJhbmdlIDMyIHRvIDMyNzY4LlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5BbmFseXNlciNcblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQG5hbWUgc2l6ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQW5hbHlzZXIucHJvdG90eXBlLCAnc2l6ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FuYWx5c2VyLmZyZXF1ZW5jeUJpbkNvdW50O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoc2l6ZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9hbmFseXNlci5mZnRTaXplID0gc2l6ZSAqIDI7XG5cdCAgICAgICAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGFuYWx5c2lzIGZ1bmN0aW9uIHJldHVybmVkIGJ5IGFuYWx5c2VyLmdldFZhbHVlKCksIGVpdGhlciBcImZmdFwiIG9yIFwid2F2ZWZvcm1cIi5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuQW5hbHlzZXIjXG5cdFx0ICogIEB0eXBlIHtTdHJpbmd9XG5cdFx0ICogIEBuYW1lIHR5cGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkFuYWx5c2VyLnByb3RvdHlwZSwgJ3R5cGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZSkge1xuXHQgICAgICAgICAgICBpZiAodHlwZSAhPT0gVG9uZS5BbmFseXNlci5UeXBlLldhdmVmb3JtICYmIHR5cGUgIT09IFRvbmUuQW5hbHlzZXIuVHlwZS5GRlQpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RvbmUuQW5hbHlzZXI6IGludmFsaWQgdHlwZTogJyArIHR5cGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIDAgcmVwcmVzZW50cyBubyB0aW1lIGF2ZXJhZ2luZyB3aXRoIHRoZSBsYXN0IGFuYWx5c2lzIGZyYW1lLlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5BbmFseXNlciNcblx0XHQgKiAgQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdCAqICBAbmFtZSBzbW9vdGhpbmdcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkFuYWx5c2VyLnByb3RvdHlwZSwgJ3Ntb290aGluZycsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FuYWx5c2VyLnNtb290aGluZ1RpbWVDb25zdGFudDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xuXHQgICAgICAgICAgICB0aGlzLl9hbmFseXNlci5zbW9vdGhpbmdUaW1lQ29uc3RhbnQgPSB2YWw7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkFuYWx5c2VyfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5BbmFseXNlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX2FuYWx5c2VyLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICB0aGlzLl9hbmFseXNlciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fYnVmZmVyID0gbnVsbDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5BbmFseXNlcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuQ29tcHJlc3NvciBpcyBhIHRoaW4gd3JhcHBlciBhcm91bmQgdGhlIFdlYiBBdWRpb1xuXHRcdCAqICAgICAgICAgW0R5bmFtaWNzQ29tcHJlc3Nvck5vZGVdKGh0dHA6Ly93ZWJhdWRpby5naXRodWIuaW8vd2ViLWF1ZGlvLWFwaS8jdGhlLWR5bmFtaWNzY29tcHJlc3Nvcm5vZGUtaW50ZXJmYWNlKS5cblx0XHQgKiAgICAgICAgIENvbXByZXNzaW9uIHJlZHVjZXMgdGhlIHZvbHVtZSBvZiBsb3VkIHNvdW5kcyBvciBhbXBsaWZpZXMgcXVpZXQgc291bmRzXG5cdFx0ICogICAgICAgICBieSBuYXJyb3dpbmcgb3IgXCJjb21wcmVzc2luZ1wiIGFuIGF1ZGlvIHNpZ25hbCdzIGR5bmFtaWMgcmFuZ2UuXG5cdFx0ICogICAgICAgICBSZWFkIG1vcmUgb24gW1dpa2lwZWRpYV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRHluYW1pY19yYW5nZV9jb21wcmVzc2lvbikuXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQHBhcmFtIHtEZWNpYmVsc3xPYmplY3R9IFt0aHJlc2hvbGRdIFRoZSB2YWx1ZSBhYm92ZSB3aGljaCB0aGUgY29tcHJlc3Npb24gc3RhcnRzIHRvIGJlIGFwcGxpZWQuXG5cdFx0ICogIEBwYXJhbSB7UG9zaXRpdmV9IFtyYXRpb10gVGhlIGdhaW4gcmVkdWN0aW9uIHJhdGlvLlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBjb21wID0gbmV3IFRvbmUuQ29tcHJlc3NvcigtMzAsIDMpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Db21wcmVzc29yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ3RocmVzaG9sZCcsXG5cdCAgICAgICAgICAgICdyYXRpbydcblx0ICAgICAgICBdLCBUb25lLkNvbXByZXNzb3IpO1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGNvbXByZXNzb3Igbm9kZVxuXHRcdFx0ICogIEB0eXBlIHtEeW5hbWljc0NvbXByZXNzb3JOb2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9jb21wcmVzc29yID0gdGhpcy5pbnB1dCA9IHRoaXMub3V0cHV0ID0gdGhpcy5jb250ZXh0LmNyZWF0ZUR5bmFtaWNzQ29tcHJlc3NvcigpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSB0aHJlc2hvbGQgdmF1ZVxuXHRcdFx0ICogIEB0eXBlIHtEZWNpYmVsc31cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLnRocmVzaG9sZCA9IG5ldyBUb25lLlBhcmFtKHtcblx0ICAgICAgICAgICAgJ3BhcmFtJzogdGhpcy5fY29tcHJlc3Nvci50aHJlc2hvbGQsXG5cdCAgICAgICAgICAgICd1bml0cyc6IFRvbmUuVHlwZS5EZWNpYmVscyxcblx0ICAgICAgICAgICAgJ2NvbnZlcnQnOiBmYWxzZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBhdHRhY2sgcGFyYW1ldGVyXG5cdFx0XHQgKiAgQHR5cGUge1RpbWV9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5hdHRhY2sgPSBuZXcgVG9uZS5QYXJhbSh0aGlzLl9jb21wcmVzc29yLmF0dGFjaywgVG9uZS5UeXBlLlRpbWUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSByZWxlYXNlIHBhcmFtZXRlclxuXHRcdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMucmVsZWFzZSA9IG5ldyBUb25lLlBhcmFtKHRoaXMuX2NvbXByZXNzb3IucmVsZWFzZSwgVG9uZS5UeXBlLlRpbWUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBrbmVlIHBhcmFtZXRlclxuXHRcdFx0ICogIEB0eXBlIHtEZWNpYmVsc31cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmtuZWUgPSBuZXcgVG9uZS5QYXJhbSh7XG5cdCAgICAgICAgICAgICdwYXJhbSc6IHRoaXMuX2NvbXByZXNzb3Iua25lZSxcblx0ICAgICAgICAgICAgJ3VuaXRzJzogVG9uZS5UeXBlLkRlY2liZWxzLFxuXHQgICAgICAgICAgICAnY29udmVydCc6IGZhbHNlXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHJhdGlvIHZhbHVlXG5cdFx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLnJhdGlvID0gbmV3IFRvbmUuUGFyYW0oe1xuXHQgICAgICAgICAgICAncGFyYW0nOiB0aGlzLl9jb21wcmVzc29yLnJhdGlvLFxuXHQgICAgICAgICAgICAnY29udmVydCc6IGZhbHNlXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgLy9zZXQgdGhlIGRlZmF1bHRzXG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAna25lZScsXG5cdCAgICAgICAgICAgICdyZWxlYXNlJyxcblx0ICAgICAgICAgICAgJ2F0dGFjaycsXG5cdCAgICAgICAgICAgICdyYXRpbycsXG5cdCAgICAgICAgICAgICd0aHJlc2hvbGQnXG5cdCAgICAgICAgXSk7XG5cdCAgICAgICAgdGhpcy5zZXQob3B0aW9ucyk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5Db21wcmVzc29yLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAY29uc3Rcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuQ29tcHJlc3Nvci5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAncmF0aW8nOiAxMixcblx0ICAgICAgICAndGhyZXNob2xkJzogLTI0LFxuXHQgICAgICAgICdyZWxlYXNlJzogMC4yNSxcblx0ICAgICAgICAnYXR0YWNrJzogMC4wMDMsXG5cdCAgICAgICAgJ2tuZWUnOiAzMFxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Db21wcmVzc29yfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkNvbXByZXNzb3IucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdrbmVlJyxcblx0ICAgICAgICAgICAgJ3JlbGVhc2UnLFxuXHQgICAgICAgICAgICAnYXR0YWNrJyxcblx0ICAgICAgICAgICAgJ3JhdGlvJyxcblx0ICAgICAgICAgICAgJ3RocmVzaG9sZCdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLl9jb21wcmVzc29yLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICB0aGlzLl9jb21wcmVzc29yID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmF0dGFjay5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5hdHRhY2sgPSBudWxsO1xuXHQgICAgICAgIHRoaXMucmVsZWFzZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5yZWxlYXNlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnRocmVzaG9sZC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy50aHJlc2hvbGQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMucmF0aW8uZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMucmF0aW8gPSBudWxsO1xuXHQgICAgICAgIHRoaXMua25lZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5rbmVlID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5Db21wcmVzc29yO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgQWRkIGEgc2lnbmFsIGFuZCBhIG51bWJlciBvciB0d28gc2lnbmFscy4gV2hlbiBubyB2YWx1ZSBpc1xuXHRcdCAqICAgICAgICAgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yLCBUb25lLkFkZCB3aWxsIHN1bSA8Y29kZT5pbnB1dFswXTwvY29kZT5cblx0XHQgKiAgICAgICAgIGFuZCA8Y29kZT5pbnB1dFsxXTwvY29kZT4uIElmIGEgdmFsdWUgaXMgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yLCBcblx0XHQgKiAgICAgICAgIHRoZSBpdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBpbnB1dC5cblx0XHQgKiAgXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5TaWduYWx9XG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyPX0gdmFsdWUgSWYgbm8gdmFsdWUgaXMgcHJvdmlkZWQsIFRvbmUuQWRkIHdpbGwgc3VtIHRoZSBmaXJzdFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBzZWNvbmQgaW5wdXRzLiBcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgc2lnbmFsID0gbmV3IFRvbmUuU2lnbmFsKDIpO1xuXHRcdCAqIHZhciBhZGQgPSBuZXcgVG9uZS5BZGQoMik7XG5cdFx0ICogc2lnbmFsLmNvbm5lY3QoYWRkKTtcblx0XHQgKiAvL3RoZSBvdXRwdXQgb2YgYWRkIGVxdWFscyA0XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9pZiBjb25zdHJ1Y3RlZCB3aXRoIG5vIGFyZ3VtZW50c1xuXHRcdCAqIC8vaXQgd2lsbCBhZGQgdGhlIGZpcnN0IGFuZCBzZWNvbmQgaW5wdXRzXG5cdFx0ICogdmFyIGFkZCA9IG5ldyBUb25lLkFkZCgpO1xuXHRcdCAqIHZhciBzaWcwID0gbmV3IFRvbmUuU2lnbmFsKDMpLmNvbm5lY3QoYWRkLCAwLCAwKTtcblx0XHQgKiB2YXIgc2lnMSA9IG5ldyBUb25lLlNpZ25hbCg0KS5jb25uZWN0KGFkZCwgMCwgMSk7XG5cdFx0ICogLy90aGUgb3V0cHV0IG9mIGFkZCBlcXVhbHMgNy4gXG5cdFx0ICovXG5cdCAgICBUb25lLkFkZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5jcmVhdGVJbnNPdXRzKDIsIDApO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBzdW1taW5nIG5vZGVcblx0XHRcdCAqICBAdHlwZSB7R2Fpbk5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N1bSA9IHRoaXMuaW5wdXRbMF0gPSB0aGlzLmlucHV0WzFdID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5TaWduYWx9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9wYXJhbSA9IHRoaXMuaW5wdXRbMV0gPSBuZXcgVG9uZS5TaWduYWwodmFsdWUpO1xuXHQgICAgICAgIHRoaXMuX3BhcmFtLmNvbm5lY3QodGhpcy5fc3VtKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkFkZCwgVG9uZS5TaWduYWwpO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5BZGR9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQWRkLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fc3VtLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9zdW0gPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkFkZDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBNdWx0aXBseSB0d28gaW5jb21pbmcgc2lnbmFscy4gT3IsIGlmIGEgbnVtYmVyIGlzIGdpdmVuIGluIHRoZSBjb25zdHJ1Y3Rvcixcblx0XHQgKiAgICAgICAgICBtdWx0aXBsaWVzIHRoZSBpbmNvbWluZyBzaWduYWwgYnkgdGhhdCB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuU2lnbmFsfVxuXHRcdCAqICBAcGFyYW0ge251bWJlcj19IHZhbHVlIENvbnN0YW50IHZhbHVlIHRvIG11bHRpcGxlLiBJZiBubyB2YWx1ZSBpcyBwcm92aWRlZCxcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICBpdCB3aWxsIHJldHVybiB0aGUgcHJvZHVjdCBvZiB0aGUgZmlyc3QgYW5kIHNlY29uZCBpbnB1dHNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgbXVsdCA9IG5ldyBUb25lLk11bHRpcGx5KCk7XG5cdFx0ICogdmFyIHNpZ0EgPSBuZXcgVG9uZS5TaWduYWwoMyk7XG5cdFx0ICogdmFyIHNpZ0IgPSBuZXcgVG9uZS5TaWduYWwoNCk7XG5cdFx0ICogc2lnQS5jb25uZWN0KG11bHQsIDAsIDApO1xuXHRcdCAqIHNpZ0IuY29ubmVjdChtdWx0LCAwLCAxKTtcblx0XHQgKiAvL291dHB1dCBvZiBtdWx0IGlzIDEyLlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBtdWx0ID0gbmV3IFRvbmUuTXVsdGlwbHkoMTApO1xuXHRcdCAqIHZhciBzaWcgPSBuZXcgVG9uZS5TaWduYWwoMikuY29ubmVjdChtdWx0KTtcblx0XHQgKiAvL3RoZSBvdXRwdXQgb2YgbXVsdCBpcyAyMC5cblx0XHQgKi9cblx0ICAgIFRvbmUuTXVsdGlwbHkgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICBUb25lLlNpZ25hbC5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuY3JlYXRlSW5zT3V0cygyLCAwKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgaW5wdXQgbm9kZSBpcyB0aGUgc2FtZSBhcyB0aGUgb3V0cHV0IG5vZGVcblx0XHRcdCAqICBpdCBpcyBhbHNvIHRoZSBHYWluTm9kZSB3aGljaCBoYW5kbGVzIHRoZSBzY2FsaW5nIG9mIGluY29taW5nIHNpZ25hbFxuXHRcdFx0ICpcblx0XHRcdCAqICBAdHlwZSB7R2Fpbk5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX211bHQgPSB0aGlzLmlucHV0WzBdID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIHNjYWxpbmcgcGFyYW1ldGVyXG5cdFx0XHQgKiAgQHR5cGUge0F1ZGlvUGFyYW19XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3BhcmFtID0gdGhpcy5pbnB1dFsxXSA9IHRoaXMub3V0cHV0LmdhaW47XG5cdCAgICAgICAgdGhpcy52YWx1ZSA9IFRvbmUuZGVmYXVsdEFyZyh2YWx1ZSwgMCk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5NdWx0aXBseSwgVG9uZS5TaWduYWwpO1xuXHQgICAgLyoqXG5cdFx0ICogIGNsZWFuIHVwXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLk11bHRpcGx5fSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk11bHRpcGx5LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fbXVsdC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbXVsdCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fcGFyYW0gPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLk11bHRpcGx5O1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgTmVnYXRlIHRoZSBpbmNvbWluZyBzaWduYWwuIGkuZS4gYW4gaW5wdXQgc2lnbmFsIG9mIDEwIHdpbGwgb3V0cHV0IC0xMFxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5TaWduYWxCYXNlfVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBuZWcgPSBuZXcgVG9uZS5OZWdhdGUoKTtcblx0XHQgKiB2YXIgc2lnID0gbmV3IFRvbmUuU2lnbmFsKC0yKS5jb25uZWN0KG5lZyk7XG5cdFx0ICogLy9vdXRwdXQgb2YgbmVnIGlzIHBvc2l0aXZlIDIuIFxuXHRcdCAqL1xuXHQgICAgVG9uZS5OZWdhdGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgbmVnYXRpb24gaXMgZG9uZSBieSBtdWx0aXBseWluZyBieSAtMVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLk11bHRpcGx5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9tdWx0aXBseSA9IHRoaXMuaW5wdXQgPSB0aGlzLm91dHB1dCA9IG5ldyBUb25lLk11bHRpcGx5KC0xKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLk5lZ2F0ZSwgVG9uZS5TaWduYWxCYXNlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5OZWdhdGV9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTmVnYXRlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsQmFzZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX211bHRpcGx5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9tdWx0aXBseSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuTmVnYXRlO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgU3VidHJhY3QgdGhlIHNpZ25hbCBjb25uZWN0ZWQgdG8gPGNvZGU+aW5wdXRbMV08L2NvZGU+IGZyb20gdGhlIHNpZ25hbCBjb25uZWN0ZWQgXG5cdFx0ICogICAgICAgICB0byA8Y29kZT5pbnB1dFswXTwvY29kZT4uIElmIGFuIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGluIHRoZSBjb25zdHJ1Y3RvciwgdGhlIFxuXHRcdCAqICAgICAgICAgc2lnbmFscyA8Y29kZT4udmFsdWU8L2NvZGU+IHdpbGwgYmUgc3VidHJhY3RlZCBmcm9tIHRoZSBpbmNvbWluZyBzaWduYWwuXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuU2lnbmFsfVxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQHBhcmFtIHtudW1iZXI9fSB2YWx1ZSBUaGUgdmFsdWUgdG8gc3VidHJhY3QgZnJvbSB0aGUgaW5jb21pbmcgc2lnbmFsLiBJZiB0aGUgdmFsdWVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICBpcyBvbWl0dGVkLCBpdCB3aWxsIHN1YnRyYWN0IHRoZSBzZWNvbmQgc2lnbmFsIGZyb20gdGhlIGZpcnN0LlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBzdWIgPSBuZXcgVG9uZS5TdWJ0cmFjdCgxKTtcblx0XHQgKiB2YXIgc2lnID0gbmV3IFRvbmUuU2lnbmFsKDQpLmNvbm5lY3Qoc3ViKTtcblx0XHQgKiAvL3RoZSBvdXRwdXQgb2Ygc3ViIGlzIDMuIFxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBzdWIgPSBuZXcgVG9uZS5TdWJ0cmFjdCgpO1xuXHRcdCAqIHZhciBzaWdBID0gbmV3IFRvbmUuU2lnbmFsKDEwKTtcblx0XHQgKiB2YXIgc2lnQiA9IG5ldyBUb25lLlNpZ25hbCgyLjUpO1xuXHRcdCAqIHNpZ0EuY29ubmVjdChzdWIsIDAsIDApO1xuXHRcdCAqIHNpZ0IuY29ubmVjdChzdWIsIDAsIDEpO1xuXHRcdCAqIC8vb3V0cHV0IG9mIHN1YiBpcyA3LjVcblx0XHQgKi9cblx0ICAgIFRvbmUuU3VidHJhY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICBUb25lLlNpZ25hbC5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuY3JlYXRlSW5zT3V0cygyLCAwKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgc3VtbWluZyBub2RlXG5cdFx0XHQgKiAgQHR5cGUge0dhaW5Ob2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zdW0gPSB0aGlzLmlucHV0WzBdID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgbmVnYXRlIHRoZSBpbnB1dCBvZiB0aGUgc2Vjb25kIGlucHV0IGJlZm9yZSBjb25uZWN0aW5nIGl0XG5cdFx0XHQgKiAgdG8gdGhlIHN1bW1pbmcgbm9kZS5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5OZWdhdGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX25lZyA9IG5ldyBUb25lLk5lZ2F0ZSgpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBub2RlIHdoZXJlIHRoZSB2YWx1ZSBpcyBzZXRcblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLlNpZ25hbH1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3BhcmFtID0gdGhpcy5pbnB1dFsxXSA9IG5ldyBUb25lLlNpZ25hbCh2YWx1ZSk7XG5cdCAgICAgICAgdGhpcy5fcGFyYW0uY2hhaW4odGhpcy5fbmVnLCB0aGlzLl9zdW0pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuU3VidHJhY3QsIFRvbmUuU2lnbmFsKTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuU2lnbmFsQmFzZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5TdWJ0cmFjdC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlNpZ25hbC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX25lZy5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbmVnID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9zdW0uZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMuX3N1bSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuU3VidHJhY3Q7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBDb252ZXJ0IGFuIGluY29taW5nIHNpZ25hbCBiZXR3ZWVuIDAsIDEgdG8gYW4gZXF1YWwgcG93ZXIgZ2FpbiBzY2FsZS5cblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5TaWduYWxCYXNlfVxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgZXFQb3dHYWluID0gbmV3IFRvbmUuRXF1YWxQb3dlckdhaW4oKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuRXF1YWxQb3dlckdhaW4gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuV2F2ZVNoYXBlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZXFQb3dlciA9IHRoaXMuaW5wdXQgPSB0aGlzLm91dHB1dCA9IG5ldyBUb25lLldhdmVTaGFwZXIoZnVuY3Rpb24gKHZhbCkge1xuXHQgICAgICAgICAgICBpZiAoTWF0aC5hYnModmFsKSA8IDAuMDAxKSB7XG5cdCAgICAgICAgICAgICAgICAvL3Nob3VsZCBvdXRwdXQgMCB3aGVuIGlucHV0IGlzIDBcblx0ICAgICAgICAgICAgICAgIHJldHVybiAwO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIFRvbmUuZXF1YWxQb3dlclNjYWxlKHZhbCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LmJpbmQodGhpcyksIDQwOTYpO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuRXF1YWxQb3dlckdhaW4sIFRvbmUuU2lnbmFsQmFzZSk7XG5cdCAgICAvKipcblx0XHQgKiAgY2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuRXF1YWxQb3dlckdhaW59IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRXF1YWxQb3dlckdhaW4ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fZXFQb3dlci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZXFQb3dlciA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuRXF1YWxQb3dlckdhaW47XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogQGNsYXNzICBUb25lLkNyb3NzZmFkZSBwcm92aWRlcyBlcXVhbCBwb3dlciBmYWRpbmcgYmV0d2VlbiB0d28gaW5wdXRzLlxuXHRcdCAqICAgICAgICAgTW9yZSBvbiBjcm9zc2ZhZGluZyB0ZWNobmlxdWUgW2hlcmVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ZhZGVfKGF1ZGlvX2VuZ2luZWVyaW5nKSNDcm9zc2ZhZGluZykuXG5cdFx0ICpcblx0XHQgKiBAY29uc3RydWN0b3Jcblx0XHQgKiBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogQHBhcmFtIHtOb3JtYWxSYW5nZX0gW2luaXRpYWxGYWRlPTAuNV1cblx0XHQgKiBAZXhhbXBsZVxuXHRcdCAqIHZhciBjcm9zc0ZhZGUgPSBuZXcgVG9uZS5Dcm9zc0ZhZGUoMC41KTtcblx0XHQgKiAvL2Nvbm5lY3QgZWZmZWN0IEEgdG8gY3Jvc3NmYWRlIGZyb21cblx0XHQgKiAvL2VmZmVjdCBvdXRwdXQgMCB0byBjcm9zc2ZhZGUgaW5wdXQgMFxuXHRcdCAqIGVmZmVjdEEuY29ubmVjdChjcm9zc0ZhZGUsIDAsIDApO1xuXHRcdCAqIC8vY29ubmVjdCBlZmZlY3QgQiB0byBjcm9zc2ZhZGUgZnJvbVxuXHRcdCAqIC8vZWZmZWN0IG91dHB1dCAwIHRvIGNyb3NzZmFkZSBpbnB1dCAxXG5cdFx0ICogZWZmZWN0Qi5jb25uZWN0KGNyb3NzRmFkZSwgMCwgMSk7XG5cdFx0ICogY3Jvc3NGYWRlLmZhZGUudmFsdWUgPSAwO1xuXHRcdCAqIC8vIF4gb25seSBlZmZlY3RBIGlzIG91dHB1dFxuXHRcdCAqIGNyb3NzRmFkZS5mYWRlLnZhbHVlID0gMTtcblx0XHQgKiAvLyBeIG9ubHkgZWZmZWN0QiBpcyBvdXRwdXRcblx0XHQgKiBjcm9zc0ZhZGUuZmFkZS52YWx1ZSA9IDAuNTtcblx0XHQgKiAvLyBeIHRoZSB0d28gc2lnbmFscyBhcmUgbWl4ZWQgZXF1YWxseS5cblx0XHQgKi9cblx0ICAgIFRvbmUuQ3Jvc3NGYWRlID0gZnVuY3Rpb24gKGluaXRpYWxGYWRlKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLmNyZWF0ZUluc091dHMoMiwgMSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQWxpYXMgZm9yIDxjb2RlPmlucHV0WzBdPC9jb2RlPi5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5HYWlufVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5hID0gdGhpcy5pbnB1dFswXSA9IG5ldyBUb25lLkdhaW4oKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBBbGlhcyBmb3IgPGNvZGU+aW5wdXRbMV08L2NvZGU+LlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkdhaW59XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmIgPSB0aGlzLmlucHV0WzFdID0gbmV3IFRvbmUuR2FpbigpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogXHRUaGUgbWl4IGJldHdlZW4gdGhlIHR3byBpbnB1dHMuIEEgZmFkZSB2YWx1ZSBvZiAwXG5cdFx0XHQgKiBcdHdpbGwgb3V0cHV0IDEwMCUgPGNvZGU+aW5wdXRbMF08L2NvZGU+IGFuZFxuXHRcdFx0ICogXHRhIHZhbHVlIG9mIDEgd2lsbCBvdXRwdXQgMTAwJSA8Y29kZT5pbnB1dFsxXTwvY29kZT4uXG5cdFx0XHQgKiAgQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZmFkZSA9IG5ldyBUb25lLlNpZ25hbChUb25lLmRlZmF1bHRBcmcoaW5pdGlhbEZhZGUsIDAuNSksIFRvbmUuVHlwZS5Ob3JtYWxSYW5nZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgZXF1YWwgcG93ZXIgZ2FpbiBjcm9zcyBmYWRlXG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5FcXVhbFBvd2VyR2Fpbn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2VxdWFsUG93ZXJBID0gbmV3IFRvbmUuRXF1YWxQb3dlckdhaW4oKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBlcXVhbCBwb3dlciBnYWluIGNyb3NzIGZhZGVcblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkVxdWFsUG93ZXJHYWlufVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZXF1YWxQb3dlckIgPSBuZXcgVG9uZS5FcXVhbFBvd2VyR2FpbigpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIGludmVydCB0aGUgaW5jb21pbmcgc2lnbmFsXG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqICBAdHlwZSB7VG9uZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX29uZSA9IHRoaXMuY29udGV4dC5nZXRDb25zdGFudCgxKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBpbnZlcnQgdGhlIGluY29taW5nIHNpZ25hbFxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuU3VidHJhY3R9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9pbnZlcnQgPSBuZXcgVG9uZS5TdWJ0cmFjdCgpO1xuXHQgICAgICAgIC8vY29ubmVjdGlvbnNcblx0ICAgICAgICB0aGlzLmEuY29ubmVjdCh0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgdGhpcy5iLmNvbm5lY3QodGhpcy5vdXRwdXQpO1xuXHQgICAgICAgIHRoaXMuZmFkZS5jaGFpbih0aGlzLl9lcXVhbFBvd2VyQiwgdGhpcy5iLmdhaW4pO1xuXHQgICAgICAgIHRoaXMuX29uZS5jb25uZWN0KHRoaXMuX2ludmVydCwgMCwgMCk7XG5cdCAgICAgICAgdGhpcy5mYWRlLmNvbm5lY3QodGhpcy5faW52ZXJ0LCAwLCAxKTtcblx0ICAgICAgICB0aGlzLl9pbnZlcnQuY2hhaW4odGhpcy5fZXF1YWxQb3dlckEsIHRoaXMuYS5nYWluKTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seSgnZmFkZScpO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuQ3Jvc3NGYWRlLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgY2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuQ3Jvc3NGYWRlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkNyb3NzRmFkZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKCdmYWRlJyk7XG5cdCAgICAgICAgdGhpcy5fZXF1YWxQb3dlckEuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2VxdWFsUG93ZXJBID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9lcXVhbFBvd2VyQi5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZXF1YWxQb3dlckIgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZmFkZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5mYWRlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9pbnZlcnQuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2ludmVydCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fb25lID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmEuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuYSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5iLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmIgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkNyb3NzRmFkZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBUb25lLkZpbHRlciBpcyBhIGZpbHRlciB3aGljaCBhbGxvd3MgZm9yIGFsbCBvZiB0aGUgc2FtZSBuYXRpdmUgbWV0aG9kc1xuXHRcdCAqICAgICAgICAgIGFzIHRoZSBbQmlxdWFkRmlsdGVyTm9kZV0oaHR0cDovL3dlYmF1ZGlvLmdpdGh1Yi5pby93ZWItYXVkaW8tYXBpLyN0aGUtYmlxdWFkZmlsdGVybm9kZS1pbnRlcmZhY2UpLlxuXHRcdCAqICAgICAgICAgIFRvbmUuRmlsdGVyIGhhcyB0aGUgYWRkZWQgYWJpbGl0eSB0byBzZXQgdGhlIGZpbHRlciByb2xsb2ZmIGF0IC0xMlxuXHRcdCAqICAgICAgICAgIChkZWZhdWx0KSwgLTI0IGFuZCAtNDguXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkF1ZGlvTm9kZX1cblx0XHQgKiAgQHBhcmFtIHtGcmVxdWVuY3l8T2JqZWN0fSBbZnJlcXVlbmN5XSBUaGUgY3V0b2ZmIGZyZXF1ZW5jeSBvZiB0aGUgZmlsdGVyLlxuXHRcdCAqICBAcGFyYW0ge3N0cmluZz19IHR5cGUgVGhlIHR5cGUgb2YgZmlsdGVyLlxuXHRcdCAqICBAcGFyYW0ge251bWJlcj19IHJvbGxvZmYgVGhlIGRyb3AgaW4gZGVjaWJlbHMgcGVyIG9jdGF2ZSBhZnRlciB0aGUgY3V0b2ZmIGZyZXF1ZW5jeS5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzIGNob2ljZXM6IC0xMiwgLTI0LCBhbmQgLTQ4XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogIHZhciBmaWx0ZXIgPSBuZXcgVG9uZS5GaWx0ZXIoMjAwLCBcImhpZ2hwYXNzXCIpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5GaWx0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ3R5cGUnLFxuXHQgICAgICAgICAgICAncm9sbG9mZidcblx0ICAgICAgICBdLCBUb25lLkZpbHRlcik7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLmNyZWF0ZUluc091dHMoMSwgMSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGZpbHRlcihzKVxuXHRcdFx0ICogIEB0eXBlIHtBcnJheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZmlsdGVycyA9IFtdO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBjdXRvZmYgZnJlcXVlbmN5IG9mIHRoZSBmaWx0ZXIuXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG5ldyBUb25lLlNpZ25hbChvcHRpb25zLmZyZXF1ZW5jeSwgVG9uZS5UeXBlLkZyZXF1ZW5jeSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGRldHVuZSBwYXJhbWV0ZXJcblx0XHRcdCAqICBAdHlwZSB7Q2VudHN9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5kZXR1bmUgPSBuZXcgVG9uZS5TaWduYWwoMCwgVG9uZS5UeXBlLkNlbnRzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZ2FpbiBvZiB0aGUgZmlsdGVyLCBvbmx5IHVzZWQgaW4gY2VydGFpbiBmaWx0ZXIgdHlwZXNcblx0XHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZ2FpbiA9IG5ldyBUb25lLlNpZ25hbCh7XG5cdCAgICAgICAgICAgICd2YWx1ZSc6IG9wdGlvbnMuZ2Fpbixcblx0ICAgICAgICAgICAgJ2NvbnZlcnQnOiBmYWxzZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBRIG9yIFF1YWxpdHkgb2YgdGhlIGZpbHRlclxuXHRcdFx0ICogIEB0eXBlIHtQb3NpdGl2ZX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLlEgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5RKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgdHlwZSBvZiB0aGUgZmlsdGVyXG5cdFx0XHQgKiAgQHR5cGUge3N0cmluZ31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fdHlwZSA9IG9wdGlvbnMudHlwZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgcm9sbG9mZiB2YWx1ZSBvZiB0aGUgZmlsdGVyXG5cdFx0XHQgKiAgQHR5cGUge251bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcm9sbG9mZiA9IG9wdGlvbnMucm9sbG9mZjtcblx0ICAgICAgICAvL3NldCB0aGUgcm9sbG9mZjtcblx0ICAgICAgICB0aGlzLnJvbGxvZmYgPSBvcHRpb25zLnJvbGxvZmY7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAnZGV0dW5lJyxcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdnYWluJyxcblx0ICAgICAgICAgICAgJ1EnXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5GaWx0ZXIsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgZGVmYXVsdCBwYXJhbWV0ZXJzXG5cdFx0ICpcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5GaWx0ZXIuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ3R5cGUnOiAnbG93cGFzcycsXG5cdCAgICAgICAgJ2ZyZXF1ZW5jeSc6IDM1MCxcblx0ICAgICAgICAncm9sbG9mZic6IC0xMixcblx0ICAgICAgICAnUSc6IDEsXG5cdCAgICAgICAgJ2dhaW4nOiAwXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHR5cGUgb2YgdGhlIGZpbHRlci4gVHlwZXM6IFwibG93cGFzc1wiLCBcImhpZ2hwYXNzXCIsXG5cdFx0ICogXCJiYW5kcGFzc1wiLCBcImxvd3NoZWxmXCIsIFwiaGlnaHNoZWxmXCIsIFwibm90Y2hcIiwgXCJhbGxwYXNzXCIsIG9yIFwicGVha2luZ1wiLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkZpbHRlciNcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBuYW1lIHR5cGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkZpbHRlci5wcm90b3R5cGUsICd0eXBlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHR5cGUpIHtcblx0ICAgICAgICAgICAgdmFyIHR5cGVzID0gW1xuXHQgICAgICAgICAgICAgICAgJ2xvd3Bhc3MnLFxuXHQgICAgICAgICAgICAgICAgJ2hpZ2hwYXNzJyxcblx0ICAgICAgICAgICAgICAgICdiYW5kcGFzcycsXG5cdCAgICAgICAgICAgICAgICAnbG93c2hlbGYnLFxuXHQgICAgICAgICAgICAgICAgJ2hpZ2hzaGVsZicsXG5cdCAgICAgICAgICAgICAgICAnbm90Y2gnLFxuXHQgICAgICAgICAgICAgICAgJ2FsbHBhc3MnLFxuXHQgICAgICAgICAgICAgICAgJ3BlYWtpbmcnXG5cdCAgICAgICAgICAgIF07XG5cdCAgICAgICAgICAgIGlmICh0eXBlcy5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVG9uZS5GaWx0ZXI6IGludmFsaWQgdHlwZSAnICsgdHlwZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fZmlsdGVycy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fZmlsdGVyc1tpXS50eXBlID0gdHlwZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHJvbGxvZmYgb2YgdGhlIGZpbHRlciB3aGljaCBpcyB0aGUgZHJvcCBpbiBkYlxuXHRcdCAqIHBlciBvY3RhdmUuIEltcGxlbWVudGVkIGludGVybmFsbHkgYnkgY2FzY2FkaW5nIGZpbHRlcnMuXG5cdFx0ICogT25seSBhY2NlcHRzIHRoZSB2YWx1ZXMgLTEyLCAtMjQsIC00OCBhbmQgLTk2LlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkZpbHRlciNcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBuYW1lIHJvbGxvZmZcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkZpbHRlci5wcm90b3R5cGUsICdyb2xsb2ZmJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcm9sbG9mZjtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHJvbGxvZmYpIHtcblx0ICAgICAgICAgICAgcm9sbG9mZiA9IHBhcnNlSW50KHJvbGxvZmYsIDEwKTtcblx0ICAgICAgICAgICAgdmFyIHBvc3NpYmlsaXRpZXMgPSBbXG5cdCAgICAgICAgICAgICAgICAtMTIsXG5cdCAgICAgICAgICAgICAgICAtMjQsXG5cdCAgICAgICAgICAgICAgICAtNDgsXG5cdCAgICAgICAgICAgICAgICAtOTZcblx0ICAgICAgICAgICAgXTtcblx0ICAgICAgICAgICAgdmFyIGNhc2NhZGluZ0NvdW50ID0gcG9zc2liaWxpdGllcy5pbmRleE9mKHJvbGxvZmYpO1xuXHQgICAgICAgICAgICAvL2NoZWNrIHRoZSByb2xsb2ZmIGlzIHZhbGlkXG5cdCAgICAgICAgICAgIGlmIChjYXNjYWRpbmdDb3VudCA9PT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUb25lLkZpbHRlcjogcm9sbG9mZiBjYW4gb25seSBiZSAtMTIsIC0yNCwgLTQ4IG9yIC05NicpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGNhc2NhZGluZ0NvdW50ICs9IDE7XG5cdCAgICAgICAgICAgIHRoaXMuX3JvbGxvZmYgPSByb2xsb2ZmO1xuXHQgICAgICAgICAgICAvL2ZpcnN0IGRpc2Nvbm5lY3QgdGhlIGZpbHRlcnMgYW5kIHRocm93IHRoZW0gYXdheVxuXHQgICAgICAgICAgICB0aGlzLmlucHV0LmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9maWx0ZXJzW2ldLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2ZpbHRlcnNbaV0gPSBudWxsO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuX2ZpbHRlcnMgPSBuZXcgQXJyYXkoY2FzY2FkaW5nQ291bnQpO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBjb3VudCA9IDA7IGNvdW50IDwgY2FzY2FkaW5nQ291bnQ7IGNvdW50KyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBmaWx0ZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlQmlxdWFkRmlsdGVyKCk7XG5cdCAgICAgICAgICAgICAgICBmaWx0ZXIudHlwZSA9IHRoaXMuX3R5cGU7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmZyZXF1ZW5jeS5jb25uZWN0KGZpbHRlci5mcmVxdWVuY3kpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5kZXR1bmUuY29ubmVjdChmaWx0ZXIuZGV0dW5lKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuUS5jb25uZWN0KGZpbHRlci5RKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZ2Fpbi5jb25uZWN0KGZpbHRlci5nYWluKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2ZpbHRlcnNbY291bnRdID0gZmlsdGVyO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIC8vY29ubmVjdCB0aGVtIHVwXG5cdCAgICAgICAgICAgIHZhciBjb25uZWN0aW9uQ2hhaW4gPSBbdGhpcy5pbnB1dF0uY29uY2F0KHRoaXMuX2ZpbHRlcnMpLmNvbmNhdChbdGhpcy5vdXRwdXRdKTtcblx0ICAgICAgICAgICAgVG9uZS5jb25uZWN0U2VyaWVzLmFwcGx5KFRvbmUsIGNvbm5lY3Rpb25DaGFpbik7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm4ge1RvbmUuRmlsdGVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkZpbHRlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fZmlsdGVycy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB0aGlzLl9maWx0ZXJzW2ldLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICAgICAgdGhpcy5fZmlsdGVyc1tpXSA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuX2ZpbHRlcnMgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFtcblx0ICAgICAgICAgICAgJ2RldHVuZScsXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZ2FpbicsXG5cdCAgICAgICAgICAgICdRJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLlEuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLlEgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmRldHVuZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5nYWluLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmdhaW4gPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkZpbHRlcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFNwbGl0IHRoZSBpbmNvbWluZyBzaWduYWwgaW50byB0aHJlZSBiYW5kcyAobG93LCBtaWQsIGhpZ2gpXG5cdFx0ICogICAgICAgICB3aXRoIHR3byBjcm9zc292ZXIgZnJlcXVlbmN5IGNvbnRyb2xzLlxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkF1ZGlvTm9kZX1cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fE9iamVjdH0gW2xvd0ZyZXF1ZW5jeV0gdGhlIGxvdy9taWQgY3Jvc3NvdmVyIGZyZXF1ZW5jeVxuXHRcdCAqICBAcGFyYW0ge0ZyZXF1ZW5jeX0gW2hpZ2hGcmVxdWVuY3ldIHRoZSBtaWQvaGlnaCBjcm9zc292ZXIgZnJlcXVlbmN5XG5cdFx0ICovXG5cdCAgICBUb25lLk11bHRpYmFuZFNwbGl0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2xvd0ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdoaWdoRnJlcXVlbmN5J1xuXHQgICAgICAgIF0sIFRvbmUuTXVsdGliYW5kU3BsaXQpO1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGlucHV0XG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5pbnB1dCA9IG5ldyBUb25lLkdhaW4oKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgb3V0cHV0c1xuXHRcdFx0ICogIEB0eXBlIHtBcnJheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5vdXRwdXQgPSBuZXcgQXJyYXkoMyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGxvdyBiYW5kLiBBbGlhcyBmb3IgPGNvZGU+b3V0cHV0WzBdPC9jb2RlPlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkZpbHRlcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMubG93ID0gdGhpcy5vdXRwdXRbMF0gPSBuZXcgVG9uZS5GaWx0ZXIoMCwgJ2xvd3Bhc3MnKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgbG93ZXIgZmlsdGVyIG9mIHRoZSBtaWQgYmFuZFxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkZpbHRlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbG93TWlkRmlsdGVyID0gbmV3IFRvbmUuRmlsdGVyKDAsICdoaWdocGFzcycpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBtaWQgYmFuZCBvdXRwdXQuIEFsaWFzIGZvciA8Y29kZT5vdXRwdXRbMV08L2NvZGU+XG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuRmlsdGVyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5taWQgPSB0aGlzLm91dHB1dFsxXSA9IG5ldyBUb25lLkZpbHRlcigwLCAnbG93cGFzcycpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBoaWdoIGJhbmQgb3V0cHV0LiBBbGlhcyBmb3IgPGNvZGU+b3V0cHV0WzJdPC9jb2RlPlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkZpbHRlcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuaGlnaCA9IHRoaXMub3V0cHV0WzJdID0gbmV3IFRvbmUuRmlsdGVyKDAsICdoaWdocGFzcycpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBsb3cvbWlkIGNyb3Nzb3ZlciBmcmVxdWVuY3kuXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmxvd0ZyZXF1ZW5jeSA9IG5ldyBUb25lLlNpZ25hbChvcHRpb25zLmxvd0ZyZXF1ZW5jeSwgVG9uZS5UeXBlLkZyZXF1ZW5jeSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG1pZC9oaWdoIGNyb3Nzb3ZlciBmcmVxdWVuY3kuXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmhpZ2hGcmVxdWVuY3kgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5oaWdoRnJlcXVlbmN5LCBUb25lLlR5cGUuRnJlcXVlbmN5KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgcXVhbGl0eSBvZiBhbGwgdGhlIGZpbHRlcnNcblx0XHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuUSA9IG5ldyBUb25lLlNpZ25hbChvcHRpb25zLlEpO1xuXHQgICAgICAgIHRoaXMuaW5wdXQuZmFuKHRoaXMubG93LCB0aGlzLmhpZ2gpO1xuXHQgICAgICAgIHRoaXMuaW5wdXQuY2hhaW4odGhpcy5fbG93TWlkRmlsdGVyLCB0aGlzLm1pZCk7XG5cdCAgICAgICAgLy90aGUgZnJlcXVlbmN5IGNvbnRyb2wgc2lnbmFsXG5cdCAgICAgICAgdGhpcy5sb3dGcmVxdWVuY3kuY29ubmVjdCh0aGlzLmxvdy5mcmVxdWVuY3kpO1xuXHQgICAgICAgIHRoaXMubG93RnJlcXVlbmN5LmNvbm5lY3QodGhpcy5fbG93TWlkRmlsdGVyLmZyZXF1ZW5jeSk7XG5cdCAgICAgICAgdGhpcy5oaWdoRnJlcXVlbmN5LmNvbm5lY3QodGhpcy5taWQuZnJlcXVlbmN5KTtcblx0ICAgICAgICB0aGlzLmhpZ2hGcmVxdWVuY3kuY29ubmVjdCh0aGlzLmhpZ2guZnJlcXVlbmN5KTtcblx0ICAgICAgICAvL3RoZSBRIHZhbHVlXG5cdCAgICAgICAgdGhpcy5RLmNvbm5lY3QodGhpcy5sb3cuUSk7XG5cdCAgICAgICAgdGhpcy5RLmNvbm5lY3QodGhpcy5fbG93TWlkRmlsdGVyLlEpO1xuXHQgICAgICAgIHRoaXMuUS5jb25uZWN0KHRoaXMubWlkLlEpO1xuXHQgICAgICAgIHRoaXMuUS5jb25uZWN0KHRoaXMuaGlnaC5RKTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbXG5cdCAgICAgICAgICAgICdoaWdoJyxcblx0ICAgICAgICAgICAgJ21pZCcsXG5cdCAgICAgICAgICAgICdsb3cnLFxuXHQgICAgICAgICAgICAnaGlnaEZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdsb3dGcmVxdWVuY3knXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5NdWx0aWJhbmRTcGxpdCwgVG9uZS5BdWRpb05vZGUpO1xuXHQgICAgLyoqXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuTXVsdGliYW5kU3BsaXQuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2xvd0ZyZXF1ZW5jeSc6IDQwMCxcblx0ICAgICAgICAnaGlnaEZyZXF1ZW5jeSc6IDI1MDAsXG5cdCAgICAgICAgJ1EnOiAxXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5NdWx0aWJhbmRTcGxpdH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NdWx0aWJhbmRTcGxpdC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFtcblx0ICAgICAgICAgICAgJ2hpZ2gnLFxuXHQgICAgICAgICAgICAnbWlkJyxcblx0ICAgICAgICAgICAgJ2xvdycsXG5cdCAgICAgICAgICAgICdoaWdoRnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2xvd0ZyZXF1ZW5jeSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLmxvdy5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5sb3cgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2xvd01pZEZpbHRlci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbG93TWlkRmlsdGVyID0gbnVsbDtcblx0ICAgICAgICB0aGlzLm1pZC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5taWQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuaGlnaC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5oaWdoID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmxvd0ZyZXF1ZW5jeS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5sb3dGcmVxdWVuY3kgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuaGlnaEZyZXF1ZW5jeS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5oaWdoRnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLlEuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuUSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuTXVsdGliYW5kU3BsaXQ7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLkVRMyBpcyBhIHRocmVlIGJhbmQgRVEgd2l0aCBjb250cm9sIG92ZXIgbG93LCBtaWQsIGFuZCBoaWdoIGdhaW4gYXNcblx0XHQgKiAgICAgICAgIHdlbGwgYXMgdGhlIGxvdyBhbmQgaGlnaCBjcm9zc292ZXIgZnJlcXVlbmNpZXMuXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkF1ZGlvTm9kZX1cblx0XHQgKlxuXHRcdCAqICBAcGFyYW0ge0RlY2liZWxzfE9iamVjdH0gW2xvd0xldmVsXSBUaGUgZ2FpbiBhcHBsaWVkIHRvIHRoZSBsb3dzLlxuXHRcdCAqICBAcGFyYW0ge0RlY2liZWxzfSBbbWlkTGV2ZWxdIFRoZSBnYWluIGFwcGxpZWQgdG8gdGhlIG1pZC5cblx0XHQgKiAgQHBhcmFtIHtEZWNpYmVsc30gW2hpZ2hMZXZlbF0gVGhlIGdhaW4gYXBwbGllZCB0byB0aGUgaGlnaC5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgZXEgPSBuZXcgVG9uZS5FUTMoLTEwLCAzLCAtMjApO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5FUTMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnbG93Jyxcblx0ICAgICAgICAgICAgJ21pZCcsXG5cdCAgICAgICAgICAgICdoaWdoJ1xuXHQgICAgICAgIF0sIFRvbmUuRVEzKTtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBvdXRwdXQgbm9kZVxuXHRcdFx0ICogIEB0eXBlIHtHYWluTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIG11bHRpYmFuZCBzcGxpdFxuXHRcdFx0ICogIEB0eXBlIHtUb25lLk11bHRpYmFuZFNwbGl0fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9tdWx0aWJhbmRTcGxpdCA9IHRoaXMuaW5wdXQgPSBuZXcgVG9uZS5NdWx0aWJhbmRTcGxpdCh7XG5cdCAgICAgICAgICAgICdsb3dGcmVxdWVuY3knOiBvcHRpb25zLmxvd0ZyZXF1ZW5jeSxcblx0ICAgICAgICAgICAgJ2hpZ2hGcmVxdWVuY3knOiBvcHRpb25zLmhpZ2hGcmVxdWVuY3lcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZ2FpbiBmb3IgdGhlIGxvd2VyIHNpZ25hbHNcblx0XHRcdCAqICBAdHlwZSAge1RvbmUuR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbG93R2FpbiA9IG5ldyBUb25lLkdhaW4ob3B0aW9ucy5sb3csIFRvbmUuVHlwZS5EZWNpYmVscyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGdhaW4gZm9yIHRoZSBtaWQgc2lnbmFsc1xuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5HYWlufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9taWRHYWluID0gbmV3IFRvbmUuR2FpbihvcHRpb25zLm1pZCwgVG9uZS5UeXBlLkRlY2liZWxzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSBnYWluIGluIGRlY2liZWxzIG9mIHRoZSBoaWdoIHBhcnRcblx0XHRcdCAqIEB0eXBlIHtUb25lLkdhaW59XG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5faGlnaEdhaW4gPSBuZXcgVG9uZS5HYWluKG9wdGlvbnMuaGlnaCwgVG9uZS5UeXBlLkRlY2liZWxzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSBnYWluIGluIGRlY2liZWxzIG9mIHRoZSBsb3cgcGFydFxuXHRcdFx0ICogQHR5cGUge0RlY2liZWxzfVxuXHRcdFx0ICogQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5sb3cgPSB0aGlzLl9sb3dHYWluLmdhaW47XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgZ2FpbiBpbiBkZWNpYmVscyBvZiB0aGUgbWlkIHBhcnRcblx0XHRcdCAqIEB0eXBlIHtEZWNpYmVsc31cblx0XHRcdCAqIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMubWlkID0gdGhpcy5fbWlkR2Fpbi5nYWluO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIGdhaW4gaW4gZGVjaWJlbHMgb2YgdGhlIGhpZ2ggcGFydFxuXHRcdFx0ICogQHR5cGUge0RlY2liZWxzfVxuXHRcdFx0ICogQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5oaWdoID0gdGhpcy5faGlnaEdhaW4uZ2Fpbjtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgUSB2YWx1ZSBmb3IgYWxsIG9mIHRoZSBmaWx0ZXJzLlxuXHRcdFx0ICogIEB0eXBlIHtQb3NpdGl2ZX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLlEgPSB0aGlzLl9tdWx0aWJhbmRTcGxpdC5RO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBsb3cvbWlkIGNyb3Nzb3ZlciBmcmVxdWVuY3kuXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmxvd0ZyZXF1ZW5jeSA9IHRoaXMuX211bHRpYmFuZFNwbGl0Lmxvd0ZyZXF1ZW5jeTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbWlkL2hpZ2ggY3Jvc3NvdmVyIGZyZXF1ZW5jeS5cblx0XHRcdCAqICBAdHlwZSB7RnJlcXVlbmN5fVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuaGlnaEZyZXF1ZW5jeSA9IHRoaXMuX211bHRpYmFuZFNwbGl0LmhpZ2hGcmVxdWVuY3k7XG5cdCAgICAgICAgLy90aGUgZnJlcXVlbmN5IGJhbmRzXG5cdCAgICAgICAgdGhpcy5fbXVsdGliYW5kU3BsaXQubG93LmNoYWluKHRoaXMuX2xvd0dhaW4sIHRoaXMub3V0cHV0KTtcblx0ICAgICAgICB0aGlzLl9tdWx0aWJhbmRTcGxpdC5taWQuY2hhaW4odGhpcy5fbWlkR2FpbiwgdGhpcy5vdXRwdXQpO1xuXHQgICAgICAgIHRoaXMuX211bHRpYmFuZFNwbGl0LmhpZ2guY2hhaW4odGhpcy5faGlnaEdhaW4sIHRoaXMub3V0cHV0KTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbXG5cdCAgICAgICAgICAgICdsb3cnLFxuXHQgICAgICAgICAgICAnbWlkJyxcblx0ICAgICAgICAgICAgJ2hpZ2gnLFxuXHQgICAgICAgICAgICAnbG93RnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2hpZ2hGcmVxdWVuY3knXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5FUTMsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgZGVmYXVsdCB2YWx1ZXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRVEzLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdsb3cnOiAwLFxuXHQgICAgICAgICdtaWQnOiAwLFxuXHQgICAgICAgICdoaWdoJzogMCxcblx0ICAgICAgICAnbG93RnJlcXVlbmN5JzogNDAwLFxuXHQgICAgICAgICdoaWdoRnJlcXVlbmN5JzogMjUwMFxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5FUTN9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRVEzLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoW1xuXHQgICAgICAgICAgICAnbG93Jyxcblx0ICAgICAgICAgICAgJ21pZCcsXG5cdCAgICAgICAgICAgICdoaWdoJyxcblx0ICAgICAgICAgICAgJ2xvd0ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdoaWdoRnJlcXVlbmN5J1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIHRoaXMuX211bHRpYmFuZFNwbGl0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9tdWx0aWJhbmRTcGxpdCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5sb3dGcmVxdWVuY3kgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuaGlnaEZyZXF1ZW5jeSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbG93R2Fpbi5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbG93R2FpbiA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbWlkR2Fpbi5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbWlkR2FpbiA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5faGlnaEdhaW4uZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2hpZ2hHYWluID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmxvdyA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5taWQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuaGlnaCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5RID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5FUTM7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgUGVyZm9ybXMgYSBsaW5lYXIgc2NhbGluZyBvbiBhbiBpbnB1dCBzaWduYWwuXG5cdFx0ICogICAgICAgICAgU2NhbGVzIGEgTm9ybWFsUmFuZ2UgaW5wdXQgdG8gYmV0d2VlblxuXHRcdCAqICAgICAgICAgIG91dHB1dE1pbiBhbmQgb3V0cHV0TWF4LlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5TaWduYWxCYXNlfVxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gW291dHB1dE1pbj0wXSBUaGUgb3V0cHV0IHZhbHVlIHdoZW4gdGhlIGlucHV0IGlzIDAuIFxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gW291dHB1dE1heD0xXVx0VGhlIG91dHB1dCB2YWx1ZSB3aGVuIHRoZSBpbnB1dCBpcyAxLiBcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgc2NhbGUgPSBuZXcgVG9uZS5TY2FsZSg1MCwgMTAwKTtcblx0XHQgKiB2YXIgc2lnbmFsID0gbmV3IFRvbmUuU2lnbmFsKDAuNSkuY29ubmVjdChzY2FsZSk7XG5cdFx0ICogLy90aGUgb3V0cHV0IG9mIHNjYWxlIGVxdWFscyA3NVxuXHRcdCAqL1xuXHQgICAgVG9uZS5TY2FsZSA9IGZ1bmN0aW9uIChvdXRwdXRNaW4sIG91dHB1dE1heCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsQmFzZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKiBcblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtudW1iZXJ9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9vdXRwdXRNaW4gPSBUb25lLmRlZmF1bHRBcmcob3V0cHV0TWluLCAwKTtcblx0ICAgICAgICAvKiogXG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqICBAdHlwZSB7bnVtYmVyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fb3V0cHV0TWF4ID0gVG9uZS5kZWZhdWx0QXJnKG91dHB1dE1heCwgMSk7XG5cdCAgICAgICAgLyoqIFxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuTXVsdGlwbHl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3NjYWxlID0gdGhpcy5pbnB1dCA9IG5ldyBUb25lLk11bHRpcGx5KDEpO1xuXHQgICAgICAgIC8qKiBcblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkFkZH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYWRkID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5BZGQoMCk7XG5cdCAgICAgICAgdGhpcy5fc2NhbGUuY29ubmVjdCh0aGlzLl9hZGQpO1xuXHQgICAgICAgIHRoaXMuX3NldFJhbmdlKCk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5TY2FsZSwgVG9uZS5TaWduYWxCYXNlKTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBtaW5pbXVtIG91dHB1dCB2YWx1ZS4gVGhpcyBudW1iZXIgaXMgb3V0cHV0IHdoZW4gXG5cdFx0ICogdGhlIHZhbHVlIGlucHV0IHZhbHVlIGlzIDAuIFxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlNjYWxlI1xuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQG5hbWUgbWluXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5TY2FsZS5wcm90b3R5cGUsICdtaW4nLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9vdXRwdXRNaW47XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChtaW4pIHtcblx0ICAgICAgICAgICAgdGhpcy5fb3V0cHV0TWluID0gbWluO1xuXHQgICAgICAgICAgICB0aGlzLl9zZXRSYW5nZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIG1heGltdW0gb3V0cHV0IHZhbHVlLiBUaGlzIG51bWJlciBpcyBvdXRwdXQgd2hlbiBcblx0XHQgKiB0aGUgdmFsdWUgaW5wdXQgdmFsdWUgaXMgMS4gXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuU2NhbGUjXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAbmFtZSBtYXhcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlNjYWxlLnByb3RvdHlwZSwgJ21heCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX291dHB1dE1heDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG1heCkge1xuXHQgICAgICAgICAgICB0aGlzLl9vdXRwdXRNYXggPSBtYXg7XG5cdCAgICAgICAgICAgIHRoaXMuX3NldFJhbmdlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgc2V0IHRoZSB2YWx1ZXNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuU2NhbGUucHJvdG90eXBlLl9zZXRSYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLl9hZGQudmFsdWUgPSB0aGlzLl9vdXRwdXRNaW47XG5cdCAgICAgICAgdGhpcy5fc2NhbGUudmFsdWUgPSB0aGlzLl9vdXRwdXRNYXggLSB0aGlzLl9vdXRwdXRNaW47XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5TY2FsZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5TY2FsZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlNpZ25hbEJhc2UucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9hZGQuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2FkZCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fc2NhbGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3NjYWxlID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5TY2FsZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgUGVyZm9ybXMgYW4gZXhwb25lbnRpYWwgc2NhbGluZyBvbiBhbiBpbnB1dCBzaWduYWwuXG5cdFx0ICogICAgICAgICAgU2NhbGVzIGEgTm9ybWFsUmFuZ2UgdmFsdWUgWzAsMV0gZXhwb25lbnRpYWxseVxuXHRcdCAqICAgICAgICAgIHRvIHRoZSBvdXRwdXQgcmFuZ2Ugb2Ygb3V0cHV0TWluIHRvIG91dHB1dE1heC5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuU2lnbmFsQmFzZX1cblx0XHQgKiAgQHBhcmFtIHtudW1iZXJ9IFtvdXRwdXRNaW49MF0gVGhlIG91dHB1dCB2YWx1ZSB3aGVuIHRoZSBpbnB1dCBpcyAwLlxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gW291dHB1dE1heD0xXVx0VGhlIG91dHB1dCB2YWx1ZSB3aGVuIHRoZSBpbnB1dCBpcyAxLlxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gW2V4cG9uZW50PTJdIFRoZSBleHBvbmVudCB3aGljaCBzY2FsZXMgdGhlIGluY29taW5nIHNpZ25hbC5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgc2NhbGVFeHAgPSBuZXcgVG9uZS5TY2FsZUV4cCgwLCAxMDAsIDIpO1xuXHRcdCAqIHZhciBzaWduYWwgPSBuZXcgVG9uZS5TaWduYWwoMC41KS5jb25uZWN0KHNjYWxlRXhwKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuU2NhbGVFeHAgPSBmdW5jdGlvbiAob3V0cHV0TWluLCBvdXRwdXRNYXgsIGV4cG9uZW50KSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgc2NhbGUgdGhlIGlucHV0IHRvIHRoZSBvdXRwdXQgcmFuZ2Vcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5TY2FsZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc2NhbGUgPSB0aGlzLm91dHB1dCA9IG5ldyBUb25lLlNjYWxlKG91dHB1dE1pbiwgb3V0cHV0TWF4KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLlBvd31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZXhwID0gdGhpcy5pbnB1dCA9IG5ldyBUb25lLlBvdyhUb25lLmRlZmF1bHRBcmcoZXhwb25lbnQsIDIpKTtcblx0ICAgICAgICB0aGlzLl9leHAuY29ubmVjdCh0aGlzLl9zY2FsZSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5TY2FsZUV4cCwgVG9uZS5TaWduYWxCYXNlKTtcblx0ICAgIC8qKlxuXHRcdCAqIEluc3RlYWQgb2YgaW50ZXJwb2xhdGluZyBsaW5lYXJseSBiZXR3ZWVuIHRoZSA8Y29kZT5taW48L2NvZGU+IGFuZFxuXHRcdCAqIDxjb2RlPm1heDwvY29kZT4gdmFsdWVzLCBzZXR0aW5nIHRoZSBleHBvbmVudCB3aWxsIGludGVycG9sYXRlIGJldHdlZW5cblx0XHQgKiB0aGUgdHdvIHZhbHVlcyB3aXRoIGFuIGV4cG9uZW50aWFsIGN1cnZlLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlNjYWxlRXhwI1xuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQG5hbWUgZXhwb25lbnRcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlNjYWxlRXhwLnByb3RvdHlwZSwgJ2V4cG9uZW50Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXhwLnZhbHVlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoZXhwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2V4cC52YWx1ZSA9IGV4cDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBtaW5pbXVtIG91dHB1dCB2YWx1ZS4gVGhpcyBudW1iZXIgaXMgb3V0cHV0IHdoZW5cblx0XHQgKiB0aGUgdmFsdWUgaW5wdXQgdmFsdWUgaXMgMC5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5TY2FsZUV4cCNcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBuYW1lIG1pblxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuU2NhbGVFeHAucHJvdG90eXBlLCAnbWluJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGUubWluO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAobWluKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3NjYWxlLm1pbiA9IG1pbjtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBtYXhpbXVtIG91dHB1dCB2YWx1ZS4gVGhpcyBudW1iZXIgaXMgb3V0cHV0IHdoZW5cblx0XHQgKiB0aGUgdmFsdWUgaW5wdXQgdmFsdWUgaXMgMS5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5TY2FsZUV4cCNcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBuYW1lIG1heFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuU2NhbGVFeHAucHJvdG90eXBlLCAnbWF4Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGUubWF4O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAobWF4KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3NjYWxlLm1heCA9IG1heDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuU2NhbGVFeHB9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuU2NhbGVFeHAucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fc2NhbGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3NjYWxlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9leHAuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2V4cCA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuU2NhbGVFeHA7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBXcmFwcGVyIGFyb3VuZCBXZWIgQXVkaW8ncyBuYXRpdmUgW0RlbGF5Tm9kZV0oaHR0cDovL3dlYmF1ZGlvLmdpdGh1Yi5pby93ZWItYXVkaW8tYXBpLyN0aGUtZGVsYXlub2RlLWludGVyZmFjZSkuXG5cdFx0ICogIEBleHRlbmRzIHtUb25lfVxuXHRcdCAqICBAcGFyYW0ge1RpbWU9fSBkZWxheVRpbWUgVGhlIGRlbGF5IGFwcGxpZWQgdG8gdGhlIGluY29taW5nIHNpZ25hbC5cblx0XHQgKiAgQHBhcmFtIHtUaW1lPX0gbWF4RGVsYXkgVGhlIG1heGltdW0gZGVsYXkgdGltZS5cblx0XHQgKi9cblx0ICAgIFRvbmUuRGVsYXkgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnZGVsYXlUaW1lJyxcblx0ICAgICAgICAgICAgJ21heERlbGF5J1xuXHQgICAgICAgIF0sIFRvbmUuRGVsYXkpO1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgbWF4aW11bSBkZWxheSB0aW1lIGluaXRpYWxpemVkIHdpdGggdGhlIG5vZGVcblx0XHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbWF4RGVsYXkgPSBNYXRoLm1heCh0aGlzLnRvU2Vjb25kcyhvcHRpb25zLm1heERlbGF5KSwgdGhpcy50b1NlY29uZHMob3B0aW9ucy5kZWxheVRpbWUpKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbmF0aXZlIGRlbGF5IG5vZGVcblx0XHRcdCAqICBAdHlwZSB7RGVsYXlOb2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9kZWxheU5vZGUgPSB0aGlzLmlucHV0ID0gdGhpcy5vdXRwdXQgPSB0aGlzLmNvbnRleHQuY3JlYXRlRGVsYXkodGhpcy5fbWF4RGVsYXkpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBhbW91bnQgb2YgdGltZSB0aGUgaW5jb21pbmcgc2lnbmFsIGlzXG5cdFx0XHQgKiAgZGVsYXllZC5cblx0XHRcdCAqICBAdHlwZSB7VGltZX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmRlbGF5VGltZSA9IG5ldyBUb25lLlBhcmFtKHtcblx0ICAgICAgICAgICAgJ3BhcmFtJzogdGhpcy5fZGVsYXlOb2RlLmRlbGF5VGltZSxcblx0ICAgICAgICAgICAgJ3VuaXRzJzogVG9uZS5UeXBlLlRpbWUsXG5cdCAgICAgICAgICAgICd2YWx1ZSc6IG9wdGlvbnMuZGVsYXlUaW1lXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoJ2RlbGF5VGltZScpO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuRGVsYXksIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdHNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5EZWxheS5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnbWF4RGVsYXknOiAxLFxuXHQgICAgICAgICdkZWxheVRpbWUnOiAwXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIG1heGltdW0gZGVsYXkgdGltZS4gVGhpcyBjYW5ub3QgYmUgY2hhbmdlZC4gVGhlIHZhbHVlIGlzIHBhc3NlZCBpbnRvIHRoZSBjb25zdHJ1Y3Rvci5cblx0XHQgKiBAbWVtYmVyb2YgVG9uZS5EZWxheSNcblx0XHQgKiBAdHlwZSB7VGltZX1cblx0XHQgKiBAbmFtZSBtYXhEZWxheVxuXHRcdCAqIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuRGVsYXkucHJvdG90eXBlLCAnbWF4RGVsYXknLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXhEZWxheTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuRGVsYXl9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkRlbGF5LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fZGVsYXlOb2RlLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICB0aGlzLl9kZWxheU5vZGUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKCdkZWxheVRpbWUnKTtcblx0ICAgICAgICB0aGlzLmRlbGF5VGltZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuRGVsYXk7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBDb21iIGZpbHRlcnMgYXJlIGJhc2ljIGJ1aWxkaW5nIGJsb2NrcyBmb3IgcGh5c2ljYWwgbW9kZWxpbmcuIFJlYWQgbW9yZVxuXHRcdCAqICAgICAgICAgYWJvdXQgY29tYiBmaWx0ZXJzIG9uIFtDQ1JNQSdzIHdlYnNpdGVdKGh0dHBzOi8vY2NybWEuc3RhbmZvcmQuZWR1L35qb3MvcGFzcC9GZWVkYmFja19Db21iX0ZpbHRlcnMuaHRtbCkuXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQHBhcmFtIHtUaW1lfE9iamVjdH0gW2RlbGF5VGltZV0gVGhlIGRlbGF5IHRpbWUgb2YgdGhlIGZpbHRlci5cblx0XHQgKiAgQHBhcmFtIHtOb3JtYWxSYW5nZT19IHJlc29uYW5jZSBUaGUgYW1vdW50IG9mIGZlZWRiYWNrIHRoZSBmaWx0ZXIgaGFzLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5GZWVkYmFja0NvbWJGaWx0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnZGVsYXlUaW1lJyxcblx0ICAgICAgICAgICAgJ3Jlc29uYW5jZSdcblx0ICAgICAgICBdLCBUb25lLkZlZWRiYWNrQ29tYkZpbHRlcik7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgZGVsYXkgbm9kZVxuXHRcdFx0ICogIEB0eXBlIHtEZWxheU5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2RlbGF5ID0gdGhpcy5pbnB1dCA9IHRoaXMub3V0cHV0ID0gbmV3IFRvbmUuRGVsYXkob3B0aW9ucy5kZWxheVRpbWUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBhbW91bnQgb2YgZGVsYXkgb2YgdGhlIGNvbWIgZmlsdGVyLlxuXHRcdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGVsYXlUaW1lID0gdGhpcy5fZGVsYXkuZGVsYXlUaW1lO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBmZWVkYmFjayBub2RlXG5cdFx0XHQgKiAgQHR5cGUge0dhaW5Ob2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9mZWVkYmFjayA9IG5ldyBUb25lLkdhaW4ob3B0aW9ucy5yZXNvbmFuY2UsIFRvbmUuVHlwZS5Ob3JtYWxSYW5nZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGFtb3VudCBvZiBmZWVkYmFjayBvZiB0aGUgZGVsYXllZCBzaWduYWwuXG5cdFx0XHQgKiAgQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMucmVzb25hbmNlID0gdGhpcy5fZmVlZGJhY2suZ2Fpbjtcblx0ICAgICAgICB0aGlzLl9kZWxheS5jaGFpbih0aGlzLl9mZWVkYmFjaywgdGhpcy5fZGVsYXkpO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KFtcblx0ICAgICAgICAgICAgJ3Jlc29uYW5jZScsXG5cdCAgICAgICAgICAgICdkZWxheVRpbWUnXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5GZWVkYmFja0NvbWJGaWx0ZXIsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgZGVmYXVsdCBwYXJhbWV0ZXJzXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLkZlZWRiYWNrQ29tYkZpbHRlci5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnZGVsYXlUaW1lJzogMC4xLFxuXHQgICAgICAgICdyZXNvbmFuY2UnOiAwLjVcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgY2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuRmVlZGJhY2tDb21iRmlsdGVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkZlZWRiYWNrQ29tYkZpbHRlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFtcblx0ICAgICAgICAgICAgJ3Jlc29uYW5jZScsXG5cdCAgICAgICAgICAgICdkZWxheVRpbWUnXG5cdCAgICAgICAgXSk7XG5cdCAgICAgICAgdGhpcy5fZGVsYXkuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2RlbGF5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmRlbGF5VGltZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fZmVlZGJhY2suZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2ZlZWRiYWNrID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnJlc29uYW5jZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuRmVlZGJhY2tDb21iRmlsdGVyO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBHZXQgdGhlIGN1cnJlbnQgd2F2ZWZvcm0gZGF0YSBvZiB0aGUgY29ubmVjdGVkIGF1ZGlvIHNvdXJjZS5cblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAcGFyYW0ge051bWJlcj19IHNpemUgVGhlIHNpemUgb2YgdGhlIEZGVC4gVmFsdWUgbXVzdCBiZSBhIHBvd2VyIG9mXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgIHR3byBpbiB0aGUgcmFuZ2UgMzIgdG8gMzI3NjguXG5cdFx0ICovXG5cdCAgICBUb25lLkZGVCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbJ3NpemUnXSwgVG9uZS5GRlQpO1xuXHQgICAgICAgIG9wdGlvbnMudHlwZSA9IFRvbmUuQW5hbHlzZXIuVHlwZS5GRlQ7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW5hbHlzZXIgbm9kZS5cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkFuYWx5c2VyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYW5hbHlzZXIgPSB0aGlzLmlucHV0ID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5BbmFseXNlcihvcHRpb25zKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkZGVCwgVG9uZS5BdWRpb05vZGUpO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBkZWZhdWx0IHZhbHVlcy5cblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKiAgQGNvbnN0XG5cdFx0ICovXG5cdCAgICBUb25lLkZGVC5kZWZhdWx0cyA9IHsgJ3NpemUnOiAxMDI0IH07XG5cdCAgICAvKipcblx0XHQgKiAgR2V0cyB0aGUgd2F2ZWZvcm0gb2YgdGhlIGF1ZGlvIHNvdXJjZS4gUmV0dXJucyB0aGUgd2F2ZWZvcm0gZGF0YVxuXHRcdCAqICBvZiBsZW5ndGggW3NpemVdKCNzaXplKSBhcyBhIEZsb2F0MzJBcnJheSB3aXRoIHZhbHVlcyBiZXR3ZWVuIC0xIGFuZCAxLlxuXHRcdCAqICBAcmV0dXJucyB7VHlwZWRBcnJheX1cblx0XHQgKi9cblx0ICAgIFRvbmUuRkZULnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fYW5hbHlzZXIuZ2V0VmFsdWUoKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHNpemUgb2YgYW5hbHlzaXMuIFRoaXMgbXVzdCBiZSBhIHBvd2VyIG9mIHR3byBpbiB0aGUgcmFuZ2UgMzIgdG8gMzI3NjguXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkZGVCNcblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQG5hbWUgc2l6ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuRkZULnByb3RvdHlwZSwgJ3NpemUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbmFseXNlci5zaXplO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoc2l6ZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9hbmFseXNlci5zaXplID0gc2l6ZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuRkZUfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5GRlQucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9hbmFseXNlci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fYW5hbHlzZXIgPSBudWxsO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkZGVDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFJldHVybiB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgYW4gaW5jb21pbmcgc2lnbmFsLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5TaWduYWxCYXNlfVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBzaWduYWwgPSBuZXcgVG9uZS5TaWduYWwoLTEpO1xuXHRcdCAqIHZhciBhYnMgPSBuZXcgVG9uZS5BYnMoKTtcblx0XHQgKiBzaWduYWwuY29ubmVjdChhYnMpO1xuXHRcdCAqIC8vdGhlIG91dHB1dCBvZiBhYnMgaXMgMS5cblx0XHQgKi9cblx0ICAgIFRvbmUuQWJzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsQmFzZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkxlc3NUaGFufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9hYnMgPSB0aGlzLmlucHV0ID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5XYXZlU2hhcGVyKGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgICAgICAgaWYgKE1hdGguYWJzKHZhbCkgPCAwLjAwMSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5hYnModmFsKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sIDEwMjQpO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuQWJzLCBUb25lLlNpZ25hbEJhc2UpO1xuXHQgICAgLyoqXG5cdFx0ICogIGRpc3Bvc2UgbWV0aG9kXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkFic30gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5BYnMucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fYWJzLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9hYnMgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkFicztcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBUb25lLkZvbGxvd2VyIGlzIGEgIGNydWRlIGVudmVsb3BlIGZvbGxvd2VyIHdoaWNoIHdpbGwgZm9sbG93XG5cdFx0ICogICAgICAgICAgdGhlIGFtcGxpdHVkZSBvZiBhbiBpbmNvbWluZyBzaWduYWwuXG5cdFx0ICogICAgICAgICAgVGFrZSBjYXJlIHdpdGggc21hbGwgKDwgMC4wMikgYXR0YWNrIG9yIGRlY2F5IHZhbHVlc1xuXHRcdCAqICAgICAgICAgIGFzIGZvbGxvd2VyIGhhcyBzb21lIHJpcHBsZSB3aGljaCBpcyBleGFnZ2VyYXRlZFxuXHRcdCAqICAgICAgICAgIGF0IHRoZXNlIHZhbHVlcy4gUmVhZCBtb3JlIGFib3V0IGVudmVsb3BlIGZvbGxvd2VycyAoYWxzbyBrbm93blxuXHRcdCAqICAgICAgICAgIGFzIGVudmVsb3BlIGRldGVjdG9ycykgb24gW1dpa2lwZWRpYV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW52ZWxvcGVfZGV0ZWN0b3IpLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogIEBwYXJhbSB7VGltZXxPYmplY3R9IFthdHRhY2tdIFRoZSByYXRlIGF0IHdoaWNoIHRoZSBmb2xsb3dlciByaXNlcy5cblx0XHQgKiAgQHBhcmFtIHtUaW1lPX0gcmVsZWFzZSBUaGUgcmF0ZSBhdCB3aGljaCB0aGUgZm9sb3dlciBmYWxscy5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgZm9sbG93ZXIgPSBuZXcgVG9uZS5Gb2xsb3dlcigwLjIsIDAuNCk7XG5cdFx0ICovXG5cdCAgICBUb25lLkZvbGxvd2VyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2F0dGFjaycsXG5cdCAgICAgICAgICAgICdyZWxlYXNlJ1xuXHQgICAgICAgIF0sIFRvbmUuRm9sbG93ZXIpO1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5jcmVhdGVJbnNPdXRzKDEsIDEpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkFic31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYWJzID0gbmV3IFRvbmUuQWJzKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGxvd3Bhc3MgZmlsdGVyIHdoaWNoIHNtb290aHMgdGhlIGlucHV0XG5cdFx0XHQgKiAgQHR5cGUge0JpcXVhZEZpbHRlck5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2ZpbHRlciA9IHRoaXMuY29udGV4dC5jcmVhdGVCaXF1YWRGaWx0ZXIoKTtcblx0ICAgICAgICB0aGlzLl9maWx0ZXIudHlwZSA9ICdsb3dwYXNzJztcblx0ICAgICAgICB0aGlzLl9maWx0ZXIuZnJlcXVlbmN5LnZhbHVlID0gMDtcblx0ICAgICAgICB0aGlzLl9maWx0ZXIuUS52YWx1ZSA9IC0xMDA7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUge1dhdmVTaGFwZXJOb2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9mcmVxdWVuY3lWYWx1ZXMgPSBuZXcgVG9uZS5XYXZlU2hhcGVyKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuU3VidHJhY3R9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N1YiA9IG5ldyBUb25lLlN1YnRyYWN0KCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuRGVsYXl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2RlbGF5ID0gbmV3IFRvbmUuRGVsYXkodGhpcy5ibG9ja1RpbWUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoaXMga2VlcHMgaXQgZmFyIGZyb20gMCwgZXZlbiBmb3IgdmVyeSBzbWFsbCBkaWZmZXJlbmNlc1xuXHRcdFx0ICogIEB0eXBlIHtUb25lLk11bHRpcGx5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9tdWx0ID0gbmV3IFRvbmUuTXVsdGlwbHkoMTAwMDApO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKiAgQHR5cGUge251bWJlcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2F0dGFjayA9IG9wdGlvbnMuYXR0YWNrO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKiAgQHR5cGUge251bWJlcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3JlbGVhc2UgPSBvcHRpb25zLnJlbGVhc2U7XG5cdCAgICAgICAgLy90aGUgc21vb3RoZWQgc2lnbmFsIHRvIGdldCB0aGUgdmFsdWVzXG5cdCAgICAgICAgdGhpcy5pbnB1dC5jaGFpbih0aGlzLl9hYnMsIHRoaXMuX2ZpbHRlciwgdGhpcy5vdXRwdXQpO1xuXHQgICAgICAgIC8vdGhlIGRpZmZlcmVuY2UgcGF0aFxuXHQgICAgICAgIHRoaXMuX2Ficy5jb25uZWN0KHRoaXMuX3N1YiwgMCwgMSk7XG5cdCAgICAgICAgdGhpcy5fZmlsdGVyLmNoYWluKHRoaXMuX2RlbGF5LCB0aGlzLl9zdWIpO1xuXHQgICAgICAgIC8vdGhyZXNob2xkIHRoZSBkaWZmZXJlbmNlIGFuZCB1c2UgdGhlIHRocmVzaCB0byBzZXQgdGhlIGZyZXF1ZW5jeVxuXHQgICAgICAgIHRoaXMuX3N1Yi5jaGFpbih0aGlzLl9tdWx0LCB0aGlzLl9mcmVxdWVuY3lWYWx1ZXMsIHRoaXMuX2ZpbHRlci5mcmVxdWVuY3kpO1xuXHQgICAgICAgIC8vc2V0IHRoZSBhdHRhY2sgYW5kIHJlbGVhc2UgdmFsdWVzIGluIHRoZSB0YWJsZVxuXHQgICAgICAgIHRoaXMuX3NldEF0dGFja1JlbGVhc2UodGhpcy5fYXR0YWNrLCB0aGlzLl9yZWxlYXNlKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkZvbGxvd2VyLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Gb2xsb3dlci5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnYXR0YWNrJzogMC4wNSxcblx0ICAgICAgICAncmVsZWFzZSc6IDAuNVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBzZXRzIHRoZSBhdHRhY2sgYW5kIHJlbGVhc2UgdGltZXMgaW4gdGhlIHdhdmUgc2hhcGVyXG5cdFx0ICogIEBwYXJhbSAgIHtUaW1lfSBhdHRhY2tcblx0XHQgKiAgQHBhcmFtICAge1RpbWV9IHJlbGVhc2Vcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuRm9sbG93ZXIucHJvdG90eXBlLl9zZXRBdHRhY2tSZWxlYXNlID0gZnVuY3Rpb24gKGF0dGFjaywgcmVsZWFzZSkge1xuXHQgICAgICAgIHZhciBtaW5UaW1lID0gdGhpcy5ibG9ja1RpbWU7XG5cdCAgICAgICAgYXR0YWNrID0gVG9uZS5UaW1lKGF0dGFjaykudG9GcmVxdWVuY3koKTtcblx0ICAgICAgICByZWxlYXNlID0gVG9uZS5UaW1lKHJlbGVhc2UpLnRvRnJlcXVlbmN5KCk7XG5cdCAgICAgICAgYXR0YWNrID0gTWF0aC5tYXgoYXR0YWNrLCBtaW5UaW1lKTtcblx0ICAgICAgICByZWxlYXNlID0gTWF0aC5tYXgocmVsZWFzZSwgbWluVGltZSk7XG5cdCAgICAgICAgdGhpcy5fZnJlcXVlbmN5VmFsdWVzLnNldE1hcChmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgICAgIGlmICh2YWwgPD0gMCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGF0dGFjaztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiByZWxlYXNlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGF0dGFjayB0aW1lLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkZvbGxvd2VyI1xuXHRcdCAqIEB0eXBlIHtUaW1lfVxuXHRcdCAqIEBuYW1lIGF0dGFja1xuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuRm9sbG93ZXIucHJvdG90eXBlLCAnYXR0YWNrJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fYXR0YWNrO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoYXR0YWNrKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2F0dGFjayA9IGF0dGFjaztcblx0ICAgICAgICAgICAgdGhpcy5fc2V0QXR0YWNrUmVsZWFzZSh0aGlzLl9hdHRhY2ssIHRoaXMuX3JlbGVhc2UpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHJlbGVhc2UgdGltZS5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5Gb2xsb3dlciNcblx0XHQgKiBAdHlwZSB7VGltZX1cblx0XHQgKiBAbmFtZSByZWxlYXNlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Gb2xsb3dlci5wcm90b3R5cGUsICdyZWxlYXNlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVsZWFzZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHJlbGVhc2UpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcmVsZWFzZSA9IHJlbGVhc2U7XG5cdCAgICAgICAgICAgIHRoaXMuX3NldEF0dGFja1JlbGVhc2UodGhpcy5fYXR0YWNrLCB0aGlzLl9yZWxlYXNlKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBCb3Jyb3dzIHRoZSBjb25uZWN0IG1ldGhvZCBmcm9tIFNpZ25hbCBzbyB0aGF0IHRoZSBvdXRwdXQgY2FuIGJlIHVzZWRcblx0XHQgKiAgYXMgYSBUb25lLlNpZ25hbCBjb250cm9sIHNpZ25hbC5cblx0XHQgKiAgQGZ1bmN0aW9uXG5cdFx0ICovXG5cdCAgICBUb25lLkZvbGxvd2VyLnByb3RvdHlwZS5jb25uZWN0ID0gVG9uZS5TaWduYWxCYXNlLnByb3RvdHlwZS5jb25uZWN0O1xuXHQgICAgLyoqXG5cdFx0ICogIGRpc3Bvc2Vcblx0XHQgKiAgQHJldHVybnMge1RvbmUuRm9sbG93ZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRm9sbG93ZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9maWx0ZXIuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMuX2ZpbHRlciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fZnJlcXVlbmN5VmFsdWVzLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICB0aGlzLl9mcmVxdWVuY3lWYWx1ZXMgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2RlbGF5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9kZWxheSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fc3ViLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICB0aGlzLl9zdWIgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2Ficy5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fYWJzID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9tdWx0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9tdWx0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9jdXJ2ZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuRm9sbG93ZXI7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLlNjYWxlZEVudmVsb3AgaXMgYW4gZW52ZWxvcGUgd2hpY2ggY2FuIGJlIHNjYWxlZFxuXHRcdCAqICAgICAgICAgdG8gYW55IHJhbmdlLiBJdCdzIHVzZWZ1bCBmb3IgYXBwbHlpbmcgYW4gZW52ZWxvcGVcblx0XHQgKiAgICAgICAgIHRvIGEgZnJlcXVlbmN5IG9yIGFueSBvdGhlciBub24tTm9ybWFsUmFuZ2Ugc2lnbmFsXG5cdFx0ICogICAgICAgICBwYXJhbWV0ZXIuXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuRW52ZWxvcGV9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAcGFyYW0ge1RpbWV8T2JqZWN0fSBbYXR0YWNrXVx0dGhlIGF0dGFjayB0aW1lIGluIHNlY29uZHNcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbZGVjYXldXHR0aGUgZGVjYXkgdGltZSBpbiBzZWNvbmRzXG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyfSBbc3VzdGFpbl0gXHRhIHBlcmNlbnRhZ2UgKDAtMSkgb2YgdGhlIGZ1bGwgYW1wbGl0dWRlXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gW3JlbGVhc2VdXHR0aGUgcmVsZWFzZSB0aW1lIGluIHNlY29uZHNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgdmFyIHNjYWxlZEVudiA9IG5ldyBUb25lLlNjYWxlZEVudmVsb3BlKHtcblx0XHQgKiAgXHRcImF0dGFja1wiIDogMC4yLFxuXHRcdCAqICBcdFwibWluXCIgOiAyMDAsXG5cdFx0ICogIFx0XCJtYXhcIiA6IDIwMDBcblx0XHQgKiAgfSk7XG5cdFx0ICogIHNjYWxlZEVudi5jb25uZWN0KG9zY2lsbGF0b3IuZnJlcXVlbmN5KTtcblx0XHQgKi9cblx0ICAgIFRvbmUuU2NhbGVkRW52ZWxvcGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLy9nZXQgYWxsIG9mIHRoZSBkZWZhdWx0c1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2F0dGFjaycsXG5cdCAgICAgICAgICAgICdkZWNheScsXG5cdCAgICAgICAgICAgICdzdXN0YWluJyxcblx0ICAgICAgICAgICAgJ3JlbGVhc2UnXG5cdCAgICAgICAgXSwgVG9uZS5FbnZlbG9wZSk7XG5cdCAgICAgICAgVG9uZS5FbnZlbG9wZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRBcmcob3B0aW9ucywgVG9uZS5TY2FsZWRFbnZlbG9wZS5kZWZhdWx0cyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgc2NhbGUgdGhlIGluY29taW5nIHNpZ25hbCBieSBhbiBleHBvbmVudFxuXHRcdFx0ICogIEB0eXBlIHtUb25lLlBvd31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZXhwID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5Qb3cob3B0aW9ucy5leHBvbmVudCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgc2NhbGUgdGhlIHNpZ25hbCB0byB0aGUgZGVzaXJlZCByYW5nZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLk11bHRpcGx5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zY2FsZSA9IHRoaXMub3V0cHV0ID0gbmV3IFRvbmUuU2NhbGUob3B0aW9ucy5taW4sIG9wdGlvbnMubWF4KTtcblx0ICAgICAgICB0aGlzLl9zaWcuY2hhaW4odGhpcy5fZXhwLCB0aGlzLl9zY2FsZSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5TY2FsZWRFbnZlbG9wZSwgVG9uZS5FbnZlbG9wZSk7XG5cdCAgICAvKipcblx0XHQgKiAgdGhlIGRlZmF1bHQgcGFyYW1ldGVyc1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICovXG5cdCAgICBUb25lLlNjYWxlZEVudmVsb3BlLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdtaW4nOiAwLFxuXHQgICAgICAgICdtYXgnOiAxLFxuXHQgICAgICAgICdleHBvbmVudCc6IDFcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBUaGUgZW52ZWxvcGUncyBtaW4gb3V0cHV0IHZhbHVlLiBUaGlzIGlzIHRoZSB2YWx1ZSB3aGljaCBpdFxuXHRcdCAqIHN0YXJ0cyBhdC5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5TY2FsZWRFbnZlbG9wZSNcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBuYW1lIG1pblxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuU2NhbGVkRW52ZWxvcGUucHJvdG90eXBlLCAnbWluJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGUubWluO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAobWluKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3NjYWxlLm1pbiA9IG1pbjtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBlbnZlbG9wZSdzIG1heCBvdXRwdXQgdmFsdWUuIEluIG90aGVyIHdvcmRzLCB0aGUgdmFsdWVcblx0XHQgKiBhdCB0aGUgcGVhayBvZiB0aGUgYXR0YWNrIHBvcnRpb24gb2YgdGhlIGVudmVsb3BlLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlNjYWxlZEVudmVsb3BlI1xuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQG5hbWUgbWF4XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5TY2FsZWRFbnZlbG9wZS5wcm90b3R5cGUsICdtYXgnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY2FsZS5tYXg7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChtYXgpIHtcblx0ICAgICAgICAgICAgdGhpcy5fc2NhbGUubWF4ID0gbWF4O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGVudmVsb3BlJ3MgZXhwb25lbnQgdmFsdWUuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuU2NhbGVkRW52ZWxvcGUjXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAbmFtZSBleHBvbmVudFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuU2NhbGVkRW52ZWxvcGUucHJvdG90eXBlLCAnZXhwb25lbnQnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9leHAudmFsdWU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChleHApIHtcblx0ICAgICAgICAgICAgdGhpcy5fZXhwLnZhbHVlID0gZXhwO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIGNsZWFuIHVwXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlNjYWxlZEVudmVsb3BlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlNjYWxlZEVudmVsb3BlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuRW52ZWxvcGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9zY2FsZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fc2NhbGUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2V4cC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZXhwID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5TY2FsZWRFbnZlbG9wZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuRnJlcXVlbmN5RW52ZWxvcGUgaXMgYSBUb25lLlNjYWxlZEVudmVsb3BlLCBidXQgaW5zdGVhZCBvZiBgbWluYCBhbmQgYG1heGBcblx0XHQgKiAgICAgICAgIGl0J3MgZ290IGEgYGJhc2VGcmVxdWVuY3lgIGFuZCBgb2N0YXZlc2AgcGFyYW1ldGVyLlxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkVudmVsb3BlfVxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQHBhcmFtIHtUaW1lfE9iamVjdH0gW2F0dGFja11cdHRoZSBhdHRhY2sgdGltZSBpbiBzZWNvbmRzXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gW2RlY2F5XVx0dGhlIGRlY2F5IHRpbWUgaW4gc2Vjb25kc1xuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gW3N1c3RhaW5dIFx0YSBwZXJjZW50YWdlICgwLTEpIG9mIHRoZSBmdWxsIGFtcGxpdHVkZVxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFtyZWxlYXNlXVx0dGhlIHJlbGVhc2UgdGltZSBpbiBzZWNvbmRzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogIHZhciBmcmVxRW52ID0gbmV3IFRvbmUuRnJlcXVlbmN5RW52ZWxvcGUoe1xuXHRcdCAqICBcdFwiYXR0YWNrXCIgOiAwLjIsXG5cdFx0ICogIFx0XCJiYXNlRnJlcXVlbmN5XCIgOiBcIkMyXCIsXG5cdFx0ICogIFx0XCJvY3RhdmVzXCIgOiA0XG5cdFx0ICogIH0pO1xuXHRcdCAqICBmcmVxRW52LmNvbm5lY3Qob3NjaWxsYXRvci5mcmVxdWVuY3kpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5GcmVxdWVuY3lFbnZlbG9wZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdhdHRhY2snLFxuXHQgICAgICAgICAgICAnZGVjYXknLFxuXHQgICAgICAgICAgICAnc3VzdGFpbicsXG5cdCAgICAgICAgICAgICdyZWxlYXNlJ1xuXHQgICAgICAgIF0sIFRvbmUuRW52ZWxvcGUpO1xuXHQgICAgICAgIFRvbmUuU2NhbGVkRW52ZWxvcGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvL21lcmdlIGl0IHdpdGggdGhlIGZyZXF1ZW5jeSBlbnZlbG9wZSBkZWZhdWx0c1xuXHQgICAgICAgIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRBcmcob3B0aW9ucywgVG9uZS5GcmVxdWVuY3lFbnZlbG9wZS5kZWZhdWx0cyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgU3RvcmVzIHRoZSBvY3RhdmUgdmFsdWVcblx0XHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX29jdGF2ZXMgPSBvcHRpb25zLm9jdGF2ZXM7XG5cdCAgICAgICAgLy9zZXR1cFxuXHQgICAgICAgIHRoaXMuYmFzZUZyZXF1ZW5jeSA9IG9wdGlvbnMuYmFzZUZyZXF1ZW5jeTtcblx0ICAgICAgICB0aGlzLm9jdGF2ZXMgPSBvcHRpb25zLm9jdGF2ZXM7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5GcmVxdWVuY3lFbnZlbG9wZSwgVG9uZS5FbnZlbG9wZSk7XG5cdCAgICAvKipcblx0XHQgKiAgdGhlIGRlZmF1bHQgcGFyYW1ldGVyc1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICovXG5cdCAgICBUb25lLkZyZXF1ZW5jeUVudmVsb3BlLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdiYXNlRnJlcXVlbmN5JzogMjAwLFxuXHQgICAgICAgICdvY3RhdmVzJzogNCxcblx0ICAgICAgICAnZXhwb25lbnQnOiAyXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGVudmVsb3BlJ3MgbWluaW51bSBvdXRwdXQgdmFsdWUuIFRoaXMgaXMgdGhlIHZhbHVlIHdoaWNoIGl0XG5cdFx0ICogc3RhcnRzIGF0LlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkZyZXF1ZW5jeUVudmVsb3BlI1xuXHRcdCAqIEB0eXBlIHtGcmVxdWVuY3l9XG5cdFx0ICogQG5hbWUgYmFzZUZyZXF1ZW5jeVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuRnJlcXVlbmN5RW52ZWxvcGUucHJvdG90eXBlLCAnYmFzZUZyZXF1ZW5jeScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjYWxlLm1pbjtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG1pbikge1xuXHQgICAgICAgICAgICB0aGlzLl9zY2FsZS5taW4gPSB0aGlzLnRvRnJlcXVlbmN5KG1pbik7XG5cdCAgICAgICAgICAgIC8vYWxzbyB1cGRhdGUgdGhlIG9jdGF2ZXNcblx0ICAgICAgICAgICAgdGhpcy5vY3RhdmVzID0gdGhpcy5fb2N0YXZlcztcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBudW1iZXIgb2Ygb2N0YXZlcyBhYm92ZSB0aGUgYmFzZUZyZXF1ZW5jeSB0aGF0IHRoZVxuXHRcdCAqIGVudmVsb3BlIHdpbGwgc2NhbGUgdG8uXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuRnJlcXVlbmN5RW52ZWxvcGUjXG5cdFx0ICogQHR5cGUge1Bvc2l0aXZlfVxuXHRcdCAqIEBuYW1lIG9jdGF2ZXNcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkZyZXF1ZW5jeUVudmVsb3BlLnByb3RvdHlwZSwgJ29jdGF2ZXMnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9vY3RhdmVzO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAob2N0YXZlcykge1xuXHQgICAgICAgICAgICB0aGlzLl9vY3RhdmVzID0gb2N0YXZlcztcblx0ICAgICAgICAgICAgdGhpcy5fc2NhbGUubWF4ID0gdGhpcy5iYXNlRnJlcXVlbmN5ICogTWF0aC5wb3coMiwgb2N0YXZlcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgZW52ZWxvcGUncyBleHBvbmVudCB2YWx1ZS5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5GcmVxdWVuY3lFbnZlbG9wZSNcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBuYW1lIGV4cG9uZW50XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5GcmVxdWVuY3lFbnZlbG9wZS5wcm90b3R5cGUsICdleHBvbmVudCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V4cC52YWx1ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGV4cCkge1xuXHQgICAgICAgICAgICB0aGlzLl9leHAudmFsdWUgPSBleHA7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgY2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuRnJlcXVlbmN5RW52ZWxvcGV9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRnJlcXVlbmN5RW52ZWxvcGUucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TY2FsZWRFbnZlbG9wZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkZyZXF1ZW5jeUVudmVsb3BlO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIEdyZWF0ZXJUaGFuWmVybyBvdXRwdXRzIDEgd2hlbiB0aGUgaW5wdXQgaXMgc3RyaWN0bHkgZ3JlYXRlciB0aGFuIHplcm9cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuU2lnbmFsQmFzZX1cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgZ3QwID0gbmV3IFRvbmUuR3JlYXRlclRoYW5aZXJvKCk7XG5cdFx0ICogdmFyIHNpZyA9IG5ldyBUb25lLlNpZ25hbCgwLjAxKS5jb25uZWN0KGd0MCk7XG5cdFx0ICogLy90aGUgb3V0cHV0IG9mIGd0MCBpcyAxLlxuXHRcdCAqIHNpZy52YWx1ZSA9IDA7XG5cdFx0ICogLy90aGUgb3V0cHV0IG9mIGd0MCBpcyAwLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5HcmVhdGVyVGhhblplcm8gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuV2F2ZVNoYXBlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fdGhyZXNoID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5XYXZlU2hhcGVyKGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgICAgICAgaWYgKHZhbCA8PSAwKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMDtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAxO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSwgMTI3KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBzY2FsZSB0aGUgZmlyc3QgdGhyZXNob2xkZWQgc2lnbmFsIGJ5IGEgbGFyZ2UgdmFsdWUuXG5cdFx0XHQgKiAgdGhpcyB3aWxsIGhlbHAgd2l0aCB2YWx1ZXMgd2hpY2ggYXJlIHZlcnkgY2xvc2UgdG8gMFxuXHRcdFx0ICogIEB0eXBlIHtUb25lLk11bHRpcGx5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zY2FsZSA9IHRoaXMuaW5wdXQgPSBuZXcgVG9uZS5NdWx0aXBseSgxMDAwMCk7XG5cdCAgICAgICAgLy9jb25uZWN0aW9uc1xuXHQgICAgICAgIHRoaXMuX3NjYWxlLmNvbm5lY3QodGhpcy5fdGhyZXNoKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkdyZWF0ZXJUaGFuWmVybywgVG9uZS5TaWduYWxCYXNlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBkaXNwb3NlIG1ldGhvZFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5HcmVhdGVyVGhhblplcm99IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuR3JlYXRlclRoYW5aZXJvLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsQmFzZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3NjYWxlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9zY2FsZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fdGhyZXNoLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl90aHJlc2ggPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkdyZWF0ZXJUaGFuWmVybztcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBPdXRwdXQgMSBpZiB0aGUgc2lnbmFsIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUsIG90aGVyd2lzZSBvdXRwdXRzIDAuXG5cdFx0ICogICAgICAgICAgY2FuIGNvbXBhcmUgdHdvIHNpZ25hbHMgb3IgYSBzaWduYWwgYW5kIGEgbnVtYmVyLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5TaWduYWx9XG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyfSBbdmFsdWU9MF0gdGhlIHZhbHVlIHRvIGNvbXBhcmUgdG8gdGhlIGluY29taW5nIHNpZ25hbFxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBndCA9IG5ldyBUb25lLkdyZWF0ZXJUaGFuKDIpO1xuXHRcdCAqIHZhciBzaWcgPSBuZXcgVG9uZS5TaWduYWwoNCkuY29ubmVjdChndCk7XG5cdFx0ICogLy9vdXRwdXQgb2YgZ3QgaXMgZXF1YWwgMS5cblx0XHQgKi9cblx0ICAgIFRvbmUuR3JlYXRlclRoYW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICBUb25lLlNpZ25hbC5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuY3JlYXRlSW5zT3V0cygyLCAwKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBzdWJ0cmFjdCB0aGUgYW1vdW50IGZyb20gdGhlIGluY29taW5nIHNpZ25hbFxuXHRcdFx0ICogIEB0eXBlIHtUb25lLlN1YnRyYWN0fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9wYXJhbSA9IHRoaXMuaW5wdXRbMF0gPSBuZXcgVG9uZS5TdWJ0cmFjdCh2YWx1ZSk7XG5cdCAgICAgICAgdGhpcy5pbnB1dFsxXSA9IHRoaXMuX3BhcmFtLmlucHV0WzFdO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIGNvbXBhcmUgdGhhdCBhbW91bnQgdG8gemVyb1xuXHRcdFx0ICogIEB0eXBlIHtUb25lLkdyZWF0ZXJUaGFuWmVyb31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZ3R6ID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5HcmVhdGVyVGhhblplcm8oKTtcblx0ICAgICAgICAvL2Nvbm5lY3Rcblx0ICAgICAgICB0aGlzLl9wYXJhbS5jb25uZWN0KHRoaXMuX2d0eik7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5HcmVhdGVyVGhhbiwgVG9uZS5TaWduYWwpO1xuXHQgICAgLyoqXG5cdFx0ICogIGRpc3Bvc2UgbWV0aG9kXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkdyZWF0ZXJUaGFufSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkdyZWF0ZXJUaGFuLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fZ3R6LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9ndHogPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkdyZWF0ZXJUaGFuO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIFRvbmUuR2F0ZSBvbmx5IHBhc3NlcyBhIHNpZ25hbCB0aHJvdWdoIHdoZW4gdGhlIGluY29taW5nXG5cdFx0ICogICAgICAgICAgc2lnbmFsIGV4Y2VlZHMgYSBzcGVjaWZpZWQgdGhyZXNob2xkLiBUbyBkbyB0aGlzLCBHYXRlIHVzZXNcblx0XHQgKiAgICAgICAgICBhIFRvbmUuRm9sbG93ZXIgdG8gZm9sbG93IHRoZSBhbXBsaXR1ZGUgb2YgdGhlIGluY29taW5nIHNpZ25hbC5cblx0XHQgKiAgICAgICAgICBBIGNvbW1vbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGNsYXNzIGlzIGEgW05vaXNlIEdhdGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL05vaXNlX2dhdGUpLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogIEBwYXJhbSB7RGVjaWJlbHN8T2JqZWN0fSBbdGhyZXNob2xkXSBUaGUgdGhyZXNob2xkIGFib3ZlIHdoaWNoIHRoZSBnYXRlIHdpbGwgb3Blbi5cblx0XHQgKiAgQHBhcmFtIHtUaW1lPX0gYXR0YWNrIFRoZSBmb2xsb3dlcidzIGF0dGFjayB0aW1lXG5cdFx0ICogIEBwYXJhbSB7VGltZT19IHJlbGVhc2UgVGhlIGZvbGxvd2VyJ3MgcmVsZWFzZSB0aW1lXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIGdhdGUgPSBuZXcgVG9uZS5HYXRlKC0zMCwgMC4yLCAwLjMpLnRvTWFzdGVyKCk7XG5cdFx0ICogdmFyIG1pYyA9IG5ldyBUb25lLlVzZXJNZWRpYSgpLmNvbm5lY3QoZ2F0ZSk7XG5cdFx0ICogLy90aGUgZ2F0ZSB3aWxsIG9ubHkgcGFzcyB0aHJvdWdoIHRoZSBpbmNvbWluZ1xuXHRcdCAqIC8vc2lnbmFsIHdoZW4gaXQncyBsb3VkZXIgdGhhbiAtMzBkYlxuXHRcdCAqL1xuXHQgICAgVG9uZS5HYXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ3RocmVzaG9sZCcsXG5cdCAgICAgICAgICAgICdhdHRhY2snLFxuXHQgICAgICAgICAgICAncmVsZWFzZSdcblx0ICAgICAgICBdLCBUb25lLkdhdGUpO1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5jcmVhdGVJbnNPdXRzKDEsIDEpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkZvbGxvd2VyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9mb2xsb3dlciA9IG5ldyBUb25lLkZvbGxvd2VyKG9wdGlvbnMuYXR0YWNrLCBvcHRpb25zLnJlbGVhc2UpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkdyZWF0ZXJUaGFufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9ndCA9IG5ldyBUb25lLkdyZWF0ZXJUaGFuKFRvbmUuZGJUb0dhaW4ob3B0aW9ucy50aHJlc2hvbGQpKTtcblx0ICAgICAgICAvL3RoZSBjb25uZWN0aW9uc1xuXHQgICAgICAgIHRoaXMuaW5wdXQuY29ubmVjdCh0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgLy90aGUgY29udHJvbCBzaWduYWxcblx0ICAgICAgICB0aGlzLmlucHV0LmNoYWluKHRoaXMuX2d0LCB0aGlzLl9mb2xsb3dlciwgdGhpcy5vdXRwdXQuZ2Fpbik7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5HYXRlLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuR2F0ZS5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnYXR0YWNrJzogMC4xLFxuXHQgICAgICAgICdyZWxlYXNlJzogMC4xLFxuXHQgICAgICAgICd0aHJlc2hvbGQnOiAtNDBcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBUaGUgdGhyZXNob2xkIG9mIHRoZSBnYXRlIGluIGRlY2liZWxzXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuR2F0ZSNcblx0XHQgKiBAdHlwZSB7RGVjaWJlbHN9XG5cdFx0ICogQG5hbWUgdGhyZXNob2xkXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5HYXRlLnByb3RvdHlwZSwgJ3RocmVzaG9sZCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuZ2FpblRvRGIodGhpcy5fZ3QudmFsdWUpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodGhyZXNoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2d0LnZhbHVlID0gVG9uZS5kYlRvR2Fpbih0aHJlc2gpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGF0dGFjayBzcGVlZCBvZiB0aGUgZ2F0ZVxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkdhdGUjXG5cdFx0ICogQHR5cGUge1RpbWV9XG5cdFx0ICogQG5hbWUgYXR0YWNrXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5HYXRlLnByb3RvdHlwZSwgJ2F0dGFjaycsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZvbGxvd2VyLmF0dGFjaztcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGF0dGFja1RpbWUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZm9sbG93ZXIuYXR0YWNrID0gYXR0YWNrVGltZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSByZWxlYXNlIHNwZWVkIG9mIHRoZSBnYXRlXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuR2F0ZSNcblx0XHQgKiBAdHlwZSB7VGltZX1cblx0XHQgKiBAbmFtZSByZWxlYXNlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5HYXRlLnByb3RvdHlwZSwgJ3JlbGVhc2UnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb2xsb3dlci5yZWxlYXNlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocmVsZWFzZVRpbWUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZm9sbG93ZXIucmVsZWFzZSA9IHJlbGVhc2VUaW1lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5HYXRlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkdhdGUucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9mb2xsb3dlci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZ3QuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2ZvbGxvd2VyID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9ndCA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuR2F0ZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgLyoqXG5cdFx0ICogQGNsYXNzIFRvbmUuVGlja1NpZ25hbCBleHRlbmRzIFRvbmUuU2lnbmFsLCBidXQgYWRkcyB0aGUgY2FwYWJpbGl0eVxuXHRcdCAqICAgICAgICB0byBjYWxjdWxhdGUgdGhlIG51bWJlciBvZiBlbGFwc2VkIHRpY2tzLiBleHBvbmVudGlhbCBhbmQgdGFyZ2V0IGN1cnZlc1xuXHRcdCAqICAgICAgICBhcmUgYXBwcm94aW1hdGVkIHdpdGggbXVsdGlwbGUgbGluZWFyIHJhbXBzLlxuXHRcdCAqXG5cdFx0ICogICAgICAgIFRoYW5rIHlvdSBCcnVubyBEaWFzLCBILiBTb2ZpYSBQaW50bywgYW5kIERhdmlkIE0uIE1hdG9zLCBmb3IgeW91ciBbV0FDIHBhcGVyXShodHRwczovL3NtYXJ0ZWNoLmdhdGVjaC5lZHUvYml0c3RyZWFtL2hhbmRsZS8xODUzLzU0NTg4L1dBQzIwMTYtNDkucGRmKVxuXHRcdCAqICAgICAgICBkZXNjcmliaW5nIGludGVncmF0aW5nIHRpbWluZyBmdW5jdGlvbnMgZm9yIHRlbXBvIGNhbGN1bGF0aW9ucy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgc2lnbmFsXG5cdFx0ICogQGV4dGVuZHMge1RvbmUuU2lnbmFsfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrU2lnbmFsID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdmFsdWUgPSBUb25lLmRlZmF1bHRBcmcodmFsdWUsIDEpO1xuXHQgICAgICAgIFRvbmUuU2lnbmFsLmNhbGwodGhpcywge1xuXHQgICAgICAgICAgICAndW5pdHMnOiBUb25lLlR5cGUuVGlja3MsXG5cdCAgICAgICAgICAgICd2YWx1ZSc6IHZhbHVlXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgLy9leHRlbmQgdGhlIG1lbW9yeVxuXHQgICAgICAgIHRoaXMuX2V2ZW50cy5tZW1vcnkgPSBJbmZpbml0eTtcblx0ICAgICAgICAvL2NsZWFyIHRoZSBjbG9jayBmcm9tIHRoZSBiZWdpbm5pbmdcblx0ICAgICAgICB0aGlzLmNhbmNlbFNjaGVkdWxlZFZhbHVlcygwKTtcblx0ICAgICAgICAvL3NldCBhbiBpbml0aWFsIGV2ZW50XG5cdCAgICAgICAgdGhpcy5fZXZlbnRzLmFkZCh7XG5cdCAgICAgICAgICAgICd0eXBlJzogVG9uZS5QYXJhbS5BdXRvbWF0aW9uVHlwZS5TZXRWYWx1ZSxcblx0ICAgICAgICAgICAgJ3RpbWUnOiAwLFxuXHQgICAgICAgICAgICAndmFsdWUnOiB2YWx1ZVxuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuVGlja1NpZ25hbCwgVG9uZS5TaWduYWwpO1xuXHQgICAgLyoqXG5cdFx0ICogV3JhcHMgVG9uZS5TaWduYWwgbWV0aG9kcyBzbyB0aGF0IHRoZXkgYWxzb1xuXHRcdCAqIHJlY29yZCB0aGUgdGlja3MuXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IG1ldGhvZFxuXHRcdCAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBmdW5jdGlvbiBfd3JhcFNjaGVkdWxlTWV0aG9kcyhtZXRob2QpIHtcblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCB0aW1lKSB7XG5cdCAgICAgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICAgICAgbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICAgIHZhciBldmVudCA9IHRoaXMuX2V2ZW50cy5nZXQodGltZSk7XG5cdCAgICAgICAgICAgIHZhciBwcmV2aW91c0V2ZW50ID0gdGhpcy5fZXZlbnRzLnByZXZpb3VzRXZlbnQoZXZlbnQpO1xuXHQgICAgICAgICAgICB2YXIgdGlja3NVbnRpbFRpbWUgPSB0aGlzLl9nZXRUaWNrc1VudGlsRXZlbnQocHJldmlvdXNFdmVudCwgdGltZSk7XG5cdCAgICAgICAgICAgIGV2ZW50LnRpY2tzID0gTWF0aC5tYXgodGlja3NVbnRpbFRpbWUsIDApO1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXHQgICAgVG9uZS5UaWNrU2lnbmFsLnByb3RvdHlwZS5zZXRWYWx1ZUF0VGltZSA9IF93cmFwU2NoZWR1bGVNZXRob2RzKFRvbmUuU2lnbmFsLnByb3RvdHlwZS5zZXRWYWx1ZUF0VGltZSk7XG5cdCAgICBUb25lLlRpY2tTaWduYWwucHJvdG90eXBlLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lID0gX3dyYXBTY2hlZHVsZU1ldGhvZHMoVG9uZS5TaWduYWwucHJvdG90eXBlLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdGFydCBleHBvbmVudGlhbGx5IGFwcHJvYWNoaW5nIHRoZSB0YXJnZXQgdmFsdWUgYXQgdGhlIGdpdmVuIHRpbWUgd2l0aFxuXHRcdCAqICBhIHJhdGUgaGF2aW5nIHRoZSBnaXZlbiB0aW1lIGNvbnN0YW50LlxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gdmFsdWVcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBzdGFydFRpbWVcblx0XHQgKiAgQHBhcmFtIHtudW1iZXJ9IHRpbWVDb25zdGFudFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UaWNrU2lnbmFsfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRpY2tTaWduYWwucHJvdG90eXBlLnNldFRhcmdldEF0VGltZSA9IGZ1bmN0aW9uICh2YWx1ZSwgdGltZSwgY29uc3RhbnQpIHtcblx0ICAgICAgICAvL2Fwcm94aW1hdGUgaXQgd2l0aCBtdWx0aXBsZSBsaW5lYXIgcmFtcHNcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy5zZXRSYW1wUG9pbnQodGltZSk7XG5cdCAgICAgICAgdmFsdWUgPSB0aGlzLl9mcm9tVW5pdHModmFsdWUpO1xuXHQgICAgICAgIC8vc3RhcnQgZnJvbSBwcmV2aW91c2x5IHNjaGVkdWxlZCB2YWx1ZVxuXHQgICAgICAgIHZhciBwcmV2RXZlbnQgPSB0aGlzLl9ldmVudHMuZ2V0KHRpbWUpO1xuXHQgICAgICAgIHZhciBzZWdtZW50cyA9IE1hdGgucm91bmQoTWF0aC5tYXgoMSAvIGNvbnN0YW50LCAxKSk7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gc2VnbWVudHM7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgc2VnVGltZSA9IGNvbnN0YW50ICogaSArIHRpbWU7XG5cdCAgICAgICAgICAgIHZhciByYW1wVmFsID0gdGhpcy5fZXhwb25lbnRpYWxBcHByb2FjaChwcmV2RXZlbnQudGltZSwgcHJldkV2ZW50LnZhbHVlLCB2YWx1ZSwgY29uc3RhbnQsIHNlZ1RpbWUpO1xuXHQgICAgICAgICAgICB0aGlzLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKHRoaXMuX3RvVW5pdHMocmFtcFZhbCksIHNlZ1RpbWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU2NoZWR1bGVzIGFuIGV4cG9uZW50aWFsIGNvbnRpbnVvdXMgY2hhbmdlIGluIHBhcmFtZXRlciB2YWx1ZSBmcm9tXG5cdFx0ICogIHRoZSBwcmV2aW91cyBzY2hlZHVsZWQgcGFyYW1ldGVyIHZhbHVlIHRvIHRoZSBnaXZlbiB2YWx1ZS5cblx0XHQgKiAgQHBhcmFtICB7bnVtYmVyfSB2YWx1ZVxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBlbmRUaW1lXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlRpY2tTaWduYWx9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVGlja1NpZ25hbC5wcm90b3R5cGUuZXhwb25lbnRpYWxSYW1wVG9WYWx1ZUF0VGltZSA9IGZ1bmN0aW9uICh2YWx1ZSwgdGltZSkge1xuXHQgICAgICAgIC8vYXByb3hpbWF0ZSBpdCB3aXRoIG11bHRpcGxlIGxpbmVhciByYW1wc1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB2YWx1ZSA9IHRoaXMuX2Zyb21Vbml0cyh2YWx1ZSk7XG5cdCAgICAgICAgLy9zdGFydCBmcm9tIHByZXZpb3VzbHkgc2NoZWR1bGVkIHZhbHVlXG5cdCAgICAgICAgdmFyIHByZXZFdmVudCA9IHRoaXMuX2V2ZW50cy5nZXQodGltZSk7XG5cdCAgICAgICAgaWYgKHByZXZFdmVudCA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICBwcmV2RXZlbnQgPSB7XG5cdCAgICAgICAgICAgICAgICAndmFsdWUnOiB0aGlzLl9pbml0aWFsVmFsdWUsXG5cdCAgICAgICAgICAgICAgICAndGltZSc6IDBcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9hcHByb3ggMTAgc2VnbWVudHMgcGVyIHNlY29uZFxuXHQgICAgICAgIHZhciBzZWdtZW50cyA9IE1hdGgucm91bmQoTWF0aC5tYXgoKHRpbWUgLSBwcmV2RXZlbnQudGltZSkgKiAxMCwgMSkpO1xuXHQgICAgICAgIHZhciBzZWdtZW50RHVyID0gKHRpbWUgLSBwcmV2RXZlbnQudGltZSkgLyBzZWdtZW50cztcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBzZWdtZW50czsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBzZWdUaW1lID0gc2VnbWVudER1ciAqIGkgKyBwcmV2RXZlbnQudGltZTtcblx0ICAgICAgICAgICAgdmFyIHJhbXBWYWwgPSB0aGlzLl9leHBvbmVudGlhbEludGVycG9sYXRlKHByZXZFdmVudC50aW1lLCBwcmV2RXZlbnQudmFsdWUsIHRpbWUsIHZhbHVlLCBzZWdUaW1lKTtcblx0ICAgICAgICAgICAgdGhpcy5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSh0aGlzLl90b1VuaXRzKHJhbXBWYWwpLCBzZWdUaW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogUmV0dXJucyB0aGUgdGljayB2YWx1ZSBhdCB0aGUgdGltZS4gVGFrZXMgaW50byBhY2NvdW50XG5cdFx0ICogYW55IGF1dG9tYXRpb24gY3VydmVzIHNjaGVkdWxlZCBvbiB0aGUgc2lnbmFsLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHBhcmFtICB7VGltZX0gdGltZSBUaGUgdGltZSB0byBnZXQgdGhlIHRpY2sgY291bnQgYXRcblx0XHQgKiBAcmV0dXJuIHtUaWNrc30gICAgICBUaGUgbnVtYmVyIG9mIHRpY2tzIHdoaWNoIGhhdmUgZWxhcHNlZCBhdCB0aGUgdGltZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICBnaXZlbiBhbnkgYXV0b21hdGlvbnMuXG5cdFx0ICovXG5cdCAgICBUb25lLlRpY2tTaWduYWwucHJvdG90eXBlLl9nZXRUaWNrc1VudGlsRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIHRpbWUpIHtcblx0ICAgICAgICBpZiAoZXZlbnQgPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgZXZlbnQgPSB7XG5cdCAgICAgICAgICAgICAgICAndGlja3MnOiAwLFxuXHQgICAgICAgICAgICAgICAgJ3RpbWUnOiAwXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfSBlbHNlIGlmIChUb25lLmlzVW5kZWYoZXZlbnQudGlja3MpKSB7XG5cdCAgICAgICAgICAgIHZhciBwcmV2aW91c0V2ZW50ID0gdGhpcy5fZXZlbnRzLnByZXZpb3VzRXZlbnQoZXZlbnQpO1xuXHQgICAgICAgICAgICBldmVudC50aWNrcyA9IHRoaXMuX2dldFRpY2tzVW50aWxFdmVudChwcmV2aW91c0V2ZW50LCBldmVudC50aW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIHZhbDAgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGV2ZW50LnRpbWUpO1xuXHQgICAgICAgIHZhciB2YWwxID0gdGhpcy5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcblx0ICAgICAgICAvL2lmIGl0J3MgcmlnaHQgb24gdGhlIGxpbmUsIHRha2UgdGhlIHByZXZpb3VzIHZhbHVlXG5cdCAgICAgICAgaWYgKHRoaXMuX2V2ZW50cy5nZXQodGltZSkudGltZSA9PT0gdGltZSAmJiB0aGlzLl9ldmVudHMuZ2V0KHRpbWUpLnR5cGUgPT09IFRvbmUuUGFyYW0uQXV0b21hdGlvblR5cGUuU2V0VmFsdWUpIHtcblx0ICAgICAgICAgICAgdmFsMSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUodGltZSAtIHRoaXMuc2FtcGxlVGltZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiAwLjUgKiAodGltZSAtIGV2ZW50LnRpbWUpICogKHZhbDAgKyB2YWwxKSArIGV2ZW50LnRpY2tzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIHRpY2sgdmFsdWUgYXQgdGhlIHRpbWUuIFRha2VzIGludG8gYWNjb3VudFxuXHRcdCAqIGFueSBhdXRvbWF0aW9uIGN1cnZlcyBzY2hlZHVsZWQgb24gdGhlIHNpZ25hbC5cblx0XHQgKiBAcGFyYW0gIHtUaW1lfSB0aW1lIFRoZSB0aW1lIHRvIGdldCB0aGUgdGljayBjb3VudCBhdFxuXHRcdCAqIEByZXR1cm4ge1RpY2tzfSAgICAgIFRoZSBudW1iZXIgb2YgdGlja3Mgd2hpY2ggaGF2ZSBlbGFwc2VkIGF0IHRoZSB0aW1lXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuIGFueSBhdXRvbWF0aW9ucy5cblx0XHQgKi9cblx0ICAgIFRvbmUuVGlja1NpZ25hbC5wcm90b3R5cGUuZ2V0VGlja3NBdFRpbWUgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLl9ldmVudHMuZ2V0KHRpbWUpO1xuXHQgICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLl9nZXRUaWNrc1VudGlsRXZlbnQoZXZlbnQsIHRpbWUpLCAwKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBSZXR1cm4gdGhlIGVsYXBzZWQgdGltZSBvZiB0aGUgbnVtYmVyIG9mIHRpY2tzIGZyb20gdGhlIGdpdmVuIHRpbWVcblx0XHQgKiBAcGFyYW0ge1RpY2tzfSB0aWNrcyBUaGUgbnVtYmVyIG9mIHRpY2tzIHRvIGNhbGN1bGF0ZVxuXHRcdCAqIEBwYXJhbSAge1RpbWV9IHRpbWUgVGhlIHRpbWUgdG8gZ2V0IHRoZSBuZXh0IHRpY2sgZnJvbVxuXHRcdCAqIEByZXR1cm4ge1NlY29uZHN9IFRoZSBkdXJhdGlvbiBvZiB0aGUgbnVtYmVyIG9mIHRpY2tzIGZyb20gdGhlIGdpdmVuIHRpbWUgaW4gc2Vjb25kc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrU2lnbmFsLnByb3RvdHlwZS5nZXREdXJhdGlvbk9mVGlja3MgPSBmdW5jdGlvbiAodGlja3MsIHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdmFyIGN1cnJlbnRUaWNrID0gdGhpcy5nZXRUaWNrc0F0VGltZSh0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5nZXRUaW1lT2ZUaWNrKGN1cnJlbnRUaWNrICsgdGlja3MpIC0gdGltZTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBHaXZlbiBhIHRpY2ssIHJldHVybnMgdGhlIHRpbWUgdGhhdCB0aWNrIG9jY3VycyBhdC5cblx0XHQgKiBAcGFyYW0gIHtUaWNrc30gdGlja1xuXHRcdCAqIEByZXR1cm4ge1RpbWV9ICAgICAgVGhlIHRpbWUgdGhhdCB0aGUgdGljayBvY2N1cnMuXG5cdFx0ICovXG5cdCAgICBUb25lLlRpY2tTaWduYWwucHJvdG90eXBlLmdldFRpbWVPZlRpY2sgPSBmdW5jdGlvbiAodGljaykge1xuXHQgICAgICAgIHZhciBiZWZvcmUgPSB0aGlzLl9ldmVudHMuZ2V0KHRpY2ssICd0aWNrcycpO1xuXHQgICAgICAgIHZhciBhZnRlciA9IHRoaXMuX2V2ZW50cy5nZXRBZnRlcih0aWNrLCAndGlja3MnKTtcblx0ICAgICAgICBpZiAoYmVmb3JlICYmIGJlZm9yZS50aWNrcyA9PT0gdGljaykge1xuXHQgICAgICAgICAgICByZXR1cm4gYmVmb3JlLnRpbWU7XG5cdCAgICAgICAgfSBlbHNlIGlmIChiZWZvcmUgJiYgYWZ0ZXIgJiYgYWZ0ZXIudHlwZSA9PT0gVG9uZS5QYXJhbS5BdXRvbWF0aW9uVHlwZS5MaW5lYXIgJiYgYmVmb3JlLnZhbHVlICE9PSBhZnRlci52YWx1ZSkge1xuXHQgICAgICAgICAgICB2YXIgdmFsMCA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoYmVmb3JlLnRpbWUpO1xuXHQgICAgICAgICAgICB2YXIgdmFsMSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoYWZ0ZXIudGltZSk7XG5cdCAgICAgICAgICAgIHZhciBkZWx0YSA9ICh2YWwxIC0gdmFsMCkgLyAoYWZ0ZXIudGltZSAtIGJlZm9yZS50aW1lKTtcblx0ICAgICAgICAgICAgdmFyIGsgPSBNYXRoLnNxcnQoTWF0aC5wb3codmFsMCwgMikgLSAyICogZGVsdGEgKiAoYmVmb3JlLnRpY2tzIC0gdGljaykpO1xuXHQgICAgICAgICAgICB2YXIgc29sMSA9ICgtdmFsMCArIGspIC8gZGVsdGE7XG5cdCAgICAgICAgICAgIHZhciBzb2wyID0gKC12YWwwIC0gaykgLyBkZWx0YTtcblx0ICAgICAgICAgICAgcmV0dXJuIChzb2wxID4gMCA/IHNvbDEgOiBzb2wyKSArIGJlZm9yZS50aW1lO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoYmVmb3JlKSB7XG5cdCAgICAgICAgICAgIGlmIChiZWZvcmUudmFsdWUgPT09IDApIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBJbmZpbml0eTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBiZWZvcmUudGltZSArICh0aWNrIC0gYmVmb3JlLnRpY2tzKSAvIGJlZm9yZS52YWx1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aWNrIC8gdGhpcy5faW5pdGlhbFZhbHVlO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBDb252ZXJ0IHNvbWUgbnVtYmVyIG9mIHRpY2tzIHRoZWlyIHRoZSBkdXJhdGlvbiBpbiBzZWNvbmRzIGFjY291bnRpbmdcblx0XHQgKiBmb3IgYW55IGF1dG9tYXRpb24gY3VydmVzIHN0YXJ0aW5nIGF0IHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqIEBwYXJhbSAge1RpY2tzfSB0aWNrcyBUaGUgbnVtYmVyIG9mIHRpY2tzIHRvIGNvbnZlcnQgdG8gc2Vjb25kcy5cblx0XHQgKiBAcGFyYW0gIHtUaW1lfSBbd2hlbj1ub3ddICBXaGVuIGFsb25nIHRoZSBhdXRvbWF0aW9uIHRpbWVsaW5lIHRvIGNvbnZlcnQgdGhlIHRpY2tzLlxuXHRcdCAqIEByZXR1cm4ge1RvbmUuVGltZX0gICAgICAgVGhlIGR1cmF0aW9uIGluIHNlY29uZHMgb2YgdGhlIHRpY2tzLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrU2lnbmFsLnByb3RvdHlwZS50aWNrc1RvVGltZSA9IGZ1bmN0aW9uICh0aWNrcywgd2hlbikge1xuXHQgICAgICAgIHdoZW4gPSB0aGlzLnRvU2Vjb25kcyh3aGVuKTtcblx0ICAgICAgICByZXR1cm4gbmV3IFRvbmUuVGltZSh0aGlzLmdldER1cmF0aW9uT2ZUaWNrcyh0aWNrcywgd2hlbikpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBpbnZlcnNlIG9mIFt0aWNrc1RvVGltZV0oI3RpY2tzdG90aW1lKS4gQ29udmVydCBhIGR1cmF0aW9uIGluXG5cdFx0ICogc2Vjb25kcyB0byB0aGUgY29ycmVzcG9uZGluZyBudW1iZXIgb2YgdGlja3MgYWNjb3VudGluZyBmb3IgYW55XG5cdFx0ICogYXV0b21hdGlvbiBjdXJ2ZXMgc3RhcnRpbmcgYXQgdGhlIGdpdmVuIHRpbWUuXG5cdFx0ICogQHBhcmFtICB7VGltZX0gZHVyYXRpb24gVGhlIHRpbWUgaW50ZXJ2YWwgdG8gY29udmVydCB0byB0aWNrcy5cblx0XHQgKiBAcGFyYW0gIHtUaW1lfSBbd2hlbj1ub3ddICAgICBXaGVuIGFsb25nIHRoZSBhdXRvbWF0aW9uIHRpbWVsaW5lIHRvIGNvbnZlcnQgdGhlIHRpY2tzLlxuXHRcdCAqIEByZXR1cm4ge1RvbmUuVGlja3N9ICAgICAgICAgIFRoZSBkdXJhdGlvbiBpbiB0aWNrcy5cblx0XHQgKi9cblx0ICAgIFRvbmUuVGlja1NpZ25hbC5wcm90b3R5cGUudGltZVRvVGlja3MgPSBmdW5jdGlvbiAoZHVyYXRpb24sIHdoZW4pIHtcblx0ICAgICAgICB3aGVuID0gdGhpcy50b1NlY29uZHMod2hlbik7XG5cdCAgICAgICAgZHVyYXRpb24gPSB0aGlzLnRvU2Vjb25kcyhkdXJhdGlvbik7XG5cdCAgICAgICAgdmFyIHN0YXJ0VGlja3MgPSB0aGlzLmdldFRpY2tzQXRUaW1lKHdoZW4pO1xuXHQgICAgICAgIHZhciBlbmRUaWNrcyA9IHRoaXMuZ2V0VGlja3NBdFRpbWUod2hlbiArIGR1cmF0aW9uKTtcblx0ICAgICAgICByZXR1cm4gbmV3IFRvbmUuVGlja3MoZW5kVGlja3MgLSBzdGFydFRpY2tzKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5UaWNrU2lnbmFsO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIEEgVGltZWxpbmUgU3RhdGUuIFByb3ZpZGVzIHRoZSBtZXRob2RzOiA8Y29kZT5zZXRTdGF0ZUF0VGltZShcInN0YXRlXCIsIHRpbWUpPC9jb2RlPlxuXHRcdCAqICAgICAgICAgIGFuZCA8Y29kZT5nZXRWYWx1ZUF0VGltZSh0aW1lKTwvY29kZT4uXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuVGltZWxpbmV9XG5cdFx0ICogIEBwYXJhbSB7U3RyaW5nfSBpbml0aWFsIFRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZSBUaW1lbGluZVN0YXRlLiBcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gPGNvZGU+dW5kZWZpbmVkPC9jb2RlPlxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaW1lbGluZVN0YXRlID0gZnVuY3Rpb24gKGluaXRpYWwpIHtcblx0ICAgICAgICBUb25lLlRpbWVsaW5lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGluaXRpYWwgc3RhdGVcblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtTdHJpbmd9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9pbml0aWFsID0gaW5pdGlhbDtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlRpbWVsaW5lU3RhdGUsIFRvbmUuVGltZWxpbmUpO1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybnMgdGhlIHNjaGVkdWxlZCBzdGF0ZSBzY2hlZHVsZWQgYmVmb3JlIG9yIGF0XG5cdFx0ICogIHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lICBUaGUgdGltZSB0byBxdWVyeS5cblx0XHQgKiAgQHJldHVybiAge1N0cmluZ30gIFRoZSBuYW1lIG9mIHRoZSBzdGF0ZSBpbnB1dCBpbiBzZXRTdGF0ZUF0VGltZS5cblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuZ2V0VmFsdWVBdFRpbWUgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHZhciBldmVudCA9IHRoaXMuZ2V0KHRpbWUpO1xuXHQgICAgICAgIGlmIChldmVudCAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICByZXR1cm4gZXZlbnQuc3RhdGU7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luaXRpYWw7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBBZGQgYSBzdGF0ZSB0byB0aGUgdGltZWxpbmUuXG5cdFx0ICogIEBwYXJhbSAge1N0cmluZ30gIHN0YXRlIFRoZSBuYW1lIG9mIHRoZSBzdGF0ZSB0byBzZXQuXG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIHRpbWUgIFRoZSB0aW1lIHRvIHF1ZXJ5LlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UaW1lbGluZVN0YXRlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRpbWVsaW5lU3RhdGUucHJvdG90eXBlLnNldFN0YXRlQXRUaW1lID0gZnVuY3Rpb24gKHN0YXRlLCB0aW1lKSB7XG5cdCAgICAgICAgLy9hbGwgc3RhdGUgY2hhbmdlcyBuZWVkIHRvIGJlID49IHRoZSBwcmV2aW91cyBzdGF0ZSB0aW1lXG5cdCAgICAgICAgLy9UT0RPIHRocm93IGVycm9yIGlmIHRpbWUgPCB0aGUgcHJldmlvdXMgZXZlbnQgdGltZVxuXHQgICAgICAgIHRoaXMuYWRkKHtcblx0ICAgICAgICAgICAgJ3N0YXRlJzogc3RhdGUsXG5cdCAgICAgICAgICAgICd0aW1lJzogdGltZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm4gdGhlIGV2ZW50IGJlZm9yZSB0aGUgdGltZSB3aXRoIHRoZSBnaXZlbiBzdGF0ZVxuXHRcdCAqICBAcGFyYW0ge1RvbmUuU3RhdGV9IHN0YXRlIFRoZSBzdGF0ZSB0byBsb29rIGZvclxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSAgdGltZSAgV2hlbiB0byBjaGVjayBiZWZvcmVcdFx0XHRcblx0XHQgKiAgQHJldHVybiAge09iamVjdH0gIFRoZSBldmVudCB3aXRoIHRoZSBnaXZlbiBzdGF0ZSBiZWZvcmUgdGhlIHRpbWVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuZ2V0TGFzdFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlLCB0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX3NlYXJjaCh0aW1lKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gaW5kZXg7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgICAgIHZhciBldmVudCA9IHRoaXMuX3RpbWVsaW5lW2ldO1xuXHQgICAgICAgICAgICBpZiAoZXZlbnQuc3RhdGUgPT09IHN0YXRlKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybiB0aGUgZXZlbnQgYWZ0ZXIgdGhlIHRpbWUgd2l0aCB0aGUgZ2l2ZW4gc3RhdGVcblx0XHQgKiAgQHBhcmFtIHtUb25lLlN0YXRlfSBzdGF0ZSBUaGUgc3RhdGUgdG8gbG9vayBmb3Jcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gIHRpbWUgIFdoZW4gdG8gY2hlY2sgZnJvbVxuXHRcdCAqICBAcmV0dXJuICB7T2JqZWN0fSAgVGhlIGV2ZW50IHdpdGggdGhlIGdpdmVuIHN0YXRlIGFmdGVyIHRoZSB0aW1lXG5cdFx0ICovXG5cdCAgICBUb25lLlRpbWVsaW5lU3RhdGUucHJvdG90eXBlLmdldE5leHRTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgdGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9zZWFyY2godGltZSk7XG5cdCAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gaW5kZXg7IGkgPCB0aGlzLl90aW1lbGluZS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5fdGltZWxpbmVbaV07XG5cdCAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc3RhdGUgPT09IHN0YXRlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlRpbWVsaW5lU3RhdGU7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgVXNlcyBbVG9uZS5UaWNrU2lnbmFsXShUaWNrU2lnbmFsKSB0byB0cmFjayBlbGFwc2VkIHRpY2tzIHdpdGhcblx0XHQgKiAgXHRcdGNvbXBsZXggYXV0b21hdGlvbiBjdXJ2ZXMuXG5cdFx0ICpcblx0XHQgKiBcdEBjb25zdHJ1Y3RvclxuXHQgICAgICogIEBwYXJhbSB7RnJlcXVlbmN5fSBmcmVxdWVuY3kgVGhlIGluaXRpYWwgZnJlcXVlbmN5IHRoYXQgdGhlIHNpZ25hbCB0aWNrcyBhdFxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0XHQgKi9cblx0ICAgIFRvbmUuVGlja1NvdXJjZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbJ2ZyZXF1ZW5jeSddLCBUb25lLlRpY2tTb3VyY2UpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBmcmVxdWVuY3kgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHNob3VsZCBiZSBpbnZva2VkLlxuXHRcdFx0ICogIEB0eXBlICB7RnJlcXVlbmN5fVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gbmV3IFRvbmUuVGlja1NpZ25hbChvcHRpb25zLmZyZXF1ZW5jeSwgVG9uZS5UeXBlLkZyZXF1ZW5jeSk7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoJ2ZyZXF1ZW5jeScpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBzdGF0ZSB0aW1lbGluZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLlRpbWVsaW5lU3RhdGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N0YXRlID0gbmV3IFRvbmUuVGltZWxpbmVTdGF0ZShUb25lLlN0YXRlLlN0b3BwZWQpO1xuXHQgICAgICAgIHRoaXMuX3N0YXRlLnNldFN0YXRlQXRUaW1lKFRvbmUuU3RhdGUuU3RvcHBlZCwgMCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgb2Zmc2V0IHZhbHVlcyBvZiB0aGUgdGlja3Ncblx0XHRcdCAqIEB0eXBlIHtUb25lLlRpbWVsaW5lfVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3RpY2tPZmZzZXQgPSBuZXcgVG9uZS5UaW1lbGluZSgpO1xuXHQgICAgICAgIC8vYWRkIHRoZSBmaXJzdCBldmVudFxuXHQgICAgICAgIHRoaXMuc2V0VGlja3NBdFRpbWUoMCwgMCk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5UaWNrU291cmNlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdHNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrU291cmNlLmRlZmF1bHRzID0geyAnZnJlcXVlbmN5JzogMSB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybnMgdGhlIHBsYXliYWNrIHN0YXRlIG9mIHRoZSBzb3VyY2UsIGVpdGhlciBcInN0YXJ0ZWRcIiwgXCJzdG9wcGVkXCIgb3IgXCJwYXVzZWRcIi5cblx0XHQgKiAgQHR5cGUge1RvbmUuU3RhdGV9XG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5UaWNrU291cmNlI1xuXHRcdCAqICBAbmFtZSBzdGF0ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuVGlja1NvdXJjZS5wcm90b3R5cGUsICdzdGF0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldFZhbHVlQXRUaW1lKHRoaXMubm93KCkpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFN0YXJ0IHRoZSBjbG9jayBhdCB0aGUgZ2l2ZW4gdGltZS4gT3B0aW9uYWxseSBwYXNzIGluIGFuIG9mZnNldFxuXHRcdCAqICBvZiB3aGVyZSB0byBzdGFydCB0aGUgdGljayBjb3VudGVyIGZyb20uXG5cdFx0ICogIEBwYXJhbSAge1RpbWU9fSAgdGltZSAgICBUaGUgdGltZSB0aGUgY2xvY2sgc2hvdWxkIHN0YXJ0XG5cdFx0ICogIEBwYXJhbSB7VGlja3M9MH0gb2Zmc2V0IFRoZSBudW1iZXIgb2YgdGlja3MgdG8gc3RhcnQgdGhlIHNvdXJjZSBhdFxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5UaWNrU291cmNlfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrU291cmNlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICh0aW1lLCBvZmZzZXQpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgaWYgKHRoaXMuX3N0YXRlLmdldFZhbHVlQXRUaW1lKHRpbWUpICE9PSBUb25lLlN0YXRlLlN0YXJ0ZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fc3RhdGUuc2V0U3RhdGVBdFRpbWUoVG9uZS5TdGF0ZS5TdGFydGVkLCB0aW1lKTtcblx0ICAgICAgICAgICAgaWYgKFRvbmUuaXNEZWZpbmVkKG9mZnNldCkpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2V0VGlja3NBdFRpbWUob2Zmc2V0LCB0aW1lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU3RvcCB0aGUgY2xvY2suIFN0b3BwaW5nIHRoZSBjbG9jayByZXNldHMgdGhlIHRpY2sgY291bnRlciB0byAwLlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFt0aW1lPW5vd10gVGhlIHRpbWUgd2hlbiB0aGUgY2xvY2sgc2hvdWxkIHN0b3AuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlRpY2tTb3VyY2V9IHRoaXNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiBjbG9jay5zdG9wKCk7XG5cdFx0ICovXG5cdCAgICBUb25lLlRpY2tTb3VyY2UucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICAvL2NhbmNlbCB0aGUgcHJldmlvdXMgc3RvcFxuXHQgICAgICAgIGlmICh0aGlzLl9zdGF0ZS5nZXRWYWx1ZUF0VGltZSh0aW1lKSA9PT0gVG9uZS5TdGF0ZS5TdG9wcGVkKSB7XG5cdCAgICAgICAgICAgIHZhciBldmVudCA9IHRoaXMuX3N0YXRlLmdldCh0aW1lKTtcblx0ICAgICAgICAgICAgaWYgKGV2ZW50LnRpbWUgPiAwKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl90aWNrT2Zmc2V0LmNhbmNlbChldmVudC50aW1lKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlLmNhbmNlbChldmVudC50aW1lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9zdGF0ZS5jYW5jZWwodGltZSk7XG5cdCAgICAgICAgdGhpcy5fc3RhdGUuc2V0U3RhdGVBdFRpbWUoVG9uZS5TdGF0ZS5TdG9wcGVkLCB0aW1lKTtcblx0ICAgICAgICB0aGlzLnNldFRpY2tzQXRUaW1lKDAsIHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBQYXVzZSB0aGUgY2xvY2suIFBhdXNpbmcgZG9lcyBub3QgcmVzZXQgdGhlIHRpY2sgY291bnRlci5cblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIFRoZSB0aW1lIHdoZW4gdGhlIGNsb2NrIHNob3VsZCBzdG9wLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UaWNrU291cmNlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRpY2tTb3VyY2UucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgaWYgKHRoaXMuX3N0YXRlLmdldFZhbHVlQXRUaW1lKHRpbWUpID09PSBUb25lLlN0YXRlLlN0YXJ0ZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fc3RhdGUuc2V0U3RhdGVBdFRpbWUoVG9uZS5TdGF0ZS5QYXVzZWQsIHRpbWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2FuY2VsIHN0YXJ0L3N0b3AvcGF1c2UgYW5kIHNldFRpY2tBdFRpbWUgZXZlbnRzIHNjaGVkdWxlZCBhZnRlciB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIFdoZW4gdG8gY2xlYXIgdGhlIGV2ZW50cyBhZnRlclxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UaWNrU291cmNlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRpY2tTb3VyY2UucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX3N0YXRlLmNhbmNlbCh0aW1lKTtcblx0ICAgICAgICB0aGlzLl90aWNrT2Zmc2V0LmNhbmNlbCh0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBHZXQgdGhlIGVsYXBzZWQgdGlja3MgYXQgdGhlIGdpdmVuIHRpbWVcblx0XHQgKiBAcGFyYW0gIHtUaW1lfSB0aW1lICBXaGVuIHRvIGdldCB0aGUgdGljayB2YWx1ZVxuXHRcdCAqIEByZXR1cm4ge1RpY2tzfSAgICAgVGhlIG51bWJlciBvZiB0aWNrc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrU291cmNlLnByb3RvdHlwZS5nZXRUaWNrc0F0VGltZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHZhciBzdG9wRXZlbnQgPSB0aGlzLl9zdGF0ZS5nZXRMYXN0U3RhdGUoVG9uZS5TdGF0ZS5TdG9wcGVkLCB0aW1lKTtcblx0ICAgICAgICAvL3RoaXMgZXZlbnQgYWxsb3dzIGZvckVhY2hCZXR3ZWVuIHRvIGl0ZXJhdGUgdW50aWwgdGhlIGN1cnJlbnQgdGltZVxuXHQgICAgICAgIHZhciB0bXBFdmVudCA9IHtcblx0ICAgICAgICAgICAgc3RhdGU6IFRvbmUuU3RhdGUuUGF1c2VkLFxuXHQgICAgICAgICAgICB0aW1lOiB0aW1lXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB0aGlzLl9zdGF0ZS5hZGQodG1wRXZlbnQpO1xuXHQgICAgICAgIC8va2VlcCB0cmFjayBvZiB0aGUgcHJldmlvdXMgb2Zmc2V0IGV2ZW50XG5cdCAgICAgICAgdmFyIGxhc3RTdGF0ZSA9IHN0b3BFdmVudDtcblx0ICAgICAgICB2YXIgZWxhcHNlZFRpY2tzID0gMDtcblx0ICAgICAgICAvL2l0ZXJhdGUgdGhyb3VnaCBhbGwgdGhlIGV2ZW50cyBzaW5jZSB0aGUgbGFzdCBzdG9wXG5cdCAgICAgICAgdGhpcy5fc3RhdGUuZm9yRWFjaEJldHdlZW4oc3RvcEV2ZW50LnRpbWUsIHRpbWUgKyB0aGlzLnNhbXBsZVRpbWUsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgIHZhciBwZXJpb2RTdGFydFRpbWUgPSBsYXN0U3RhdGUudGltZTtcblx0ICAgICAgICAgICAgLy9pZiB0aGVyZSBpcyBhbiBvZmZzZXQgZXZlbnQgaW4gdGhpcyBwZXJpb2QgdXNlIHRoYXRcblx0ICAgICAgICAgICAgdmFyIG9mZnNldEV2ZW50ID0gdGhpcy5fdGlja09mZnNldC5nZXQoZS50aW1lKTtcblx0ICAgICAgICAgICAgaWYgKG9mZnNldEV2ZW50LnRpbWUgPj0gbGFzdFN0YXRlLnRpbWUpIHtcblx0ICAgICAgICAgICAgICAgIGVsYXBzZWRUaWNrcyA9IG9mZnNldEV2ZW50LnRpY2tzO1xuXHQgICAgICAgICAgICAgICAgcGVyaW9kU3RhcnRUaW1lID0gb2Zmc2V0RXZlbnQudGltZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAobGFzdFN0YXRlLnN0YXRlID09PSBUb25lLlN0YXRlLlN0YXJ0ZWQgJiYgZS5zdGF0ZSAhPT0gVG9uZS5TdGF0ZS5TdGFydGVkKSB7XG5cdCAgICAgICAgICAgICAgICBlbGFwc2VkVGlja3MgKz0gdGhpcy5mcmVxdWVuY3kuZ2V0VGlja3NBdFRpbWUoZS50aW1lKSAtIHRoaXMuZnJlcXVlbmN5LmdldFRpY2tzQXRUaW1lKHBlcmlvZFN0YXJ0VGltZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgbGFzdFN0YXRlID0gZTtcblx0ICAgICAgICB9LmJpbmQodGhpcykpO1xuXHQgICAgICAgIC8vcmVtb3ZlIHRoZSB0ZW1wb3JhcnkgZXZlbnRcblx0ICAgICAgICB0aGlzLl9zdGF0ZS5yZW1vdmUodG1wRXZlbnQpO1xuXHQgICAgICAgIC8vcmV0dXJuIHRoZSB0aWNrc1xuXHQgICAgICAgIHJldHVybiBlbGFwc2VkVGlja3M7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGNhbGxiYWNrIHdhcyBpbnZva2VkLiBTdGFydHMgY291bnRpbmcgYXQgMFxuXHRcdCAqICBhbmQgaW5jcmVtZW50cyBhZnRlciB0aGUgY2FsbGJhY2sgd2FzIGludm9rZWQuIFJldHVybnMgLTEgd2hlbiBzdG9wcGVkLlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5UaWNrU291cmNlI1xuXHRcdCAqICBAbmFtZSB0aWNrc1xuXHRcdCAqICBAdHlwZSB7VGlja3N9XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5UaWNrU291cmNlLnByb3RvdHlwZSwgJ3RpY2tzJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRUaWNrc0F0VGltZSh0aGlzLm5vdygpKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHQpIHtcblx0ICAgICAgICAgICAgdGhpcy5zZXRUaWNrc0F0VGltZSh0LCB0aGlzLm5vdygpKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgdGltZSBzaW5jZSB0aWNrcz0wIHRoYXQgdGhlIFRpY2tTb3VyY2UgaGFzIGJlZW4gcnVubmluZy4gQWNjb3VudHNcblx0XHQgKiAgZm9yIHRlbXBvIGN1cnZlc1xuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5UaWNrU291cmNlI1xuXHRcdCAqICBAbmFtZSBzZWNvbmRzXG5cdFx0ICogIEB0eXBlIHtTZWNvbmRzfVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuVGlja1NvdXJjZS5wcm90b3R5cGUsICdzZWNvbmRzJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTZWNvbmRzQXRUaW1lKHRoaXMubm93KCkpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocykge1xuXHQgICAgICAgICAgICB2YXIgbm93ID0gdGhpcy5ub3coKTtcblx0ICAgICAgICAgICAgdmFyIHRpY2tzID0gdGhpcy5mcmVxdWVuY3kudGltZVRvVGlja3Mocywgbm93KTtcblx0ICAgICAgICAgICAgdGhpcy5zZXRUaWNrc0F0VGltZSh0aWNrcywgbm93KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm4gdGhlIGVsYXBzZWQgc2Vjb25kcyBhdCB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gIHRpbWUgIFdoZW4gdG8gZ2V0IHRoZSBlbGFwc2VkIHNlY29uZHNcblx0XHQgKiAgQHJldHVybiAge1NlY29uZHN9ICBUaGUgbnVtYmVyIG9mIGVsYXBzZWQgc2Vjb25kc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrU291cmNlLnByb3RvdHlwZS5nZXRTZWNvbmRzQXRUaW1lID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdmFyIHN0b3BFdmVudCA9IHRoaXMuX3N0YXRlLmdldExhc3RTdGF0ZShUb25lLlN0YXRlLlN0b3BwZWQsIHRpbWUpO1xuXHQgICAgICAgIC8vdGhpcyBldmVudCBhbGxvd3MgZm9yRWFjaEJldHdlZW4gdG8gaXRlcmF0ZSB1bnRpbCB0aGUgY3VycmVudCB0aW1lXG5cdCAgICAgICAgdmFyIHRtcEV2ZW50ID0ge1xuXHQgICAgICAgICAgICBzdGF0ZTogVG9uZS5TdGF0ZS5QYXVzZWQsXG5cdCAgICAgICAgICAgIHRpbWU6IHRpbWVcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHRoaXMuX3N0YXRlLmFkZCh0bXBFdmVudCk7XG5cdCAgICAgICAgLy9rZWVwIHRyYWNrIG9mIHRoZSBwcmV2aW91cyBvZmZzZXQgZXZlbnRcblx0ICAgICAgICB2YXIgbGFzdFN0YXRlID0gc3RvcEV2ZW50O1xuXHQgICAgICAgIHZhciBlbGFwc2VkU2Vjb25kcyA9IDA7XG5cdCAgICAgICAgLy9pdGVyYXRlIHRocm91Z2ggYWxsIHRoZSBldmVudHMgc2luY2UgdGhlIGxhc3Qgc3RvcFxuXHQgICAgICAgIHRoaXMuX3N0YXRlLmZvckVhY2hCZXR3ZWVuKHN0b3BFdmVudC50aW1lLCB0aW1lICsgdGhpcy5zYW1wbGVUaW1lLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgICB2YXIgcGVyaW9kU3RhcnRUaW1lID0gbGFzdFN0YXRlLnRpbWU7XG5cdCAgICAgICAgICAgIC8vaWYgdGhlcmUgaXMgYW4gb2Zmc2V0IGV2ZW50IGluIHRoaXMgcGVyaW9kIHVzZSB0aGF0XG5cdCAgICAgICAgICAgIHZhciBvZmZzZXRFdmVudCA9IHRoaXMuX3RpY2tPZmZzZXQuZ2V0KGUudGltZSk7XG5cdCAgICAgICAgICAgIGlmIChvZmZzZXRFdmVudC50aW1lID49IGxhc3RTdGF0ZS50aW1lKSB7XG5cdCAgICAgICAgICAgICAgICBlbGFwc2VkU2Vjb25kcyA9IG9mZnNldEV2ZW50LnNlY29uZHM7XG5cdCAgICAgICAgICAgICAgICBwZXJpb2RTdGFydFRpbWUgPSBvZmZzZXRFdmVudC50aW1lO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChsYXN0U3RhdGUuc3RhdGUgPT09IFRvbmUuU3RhdGUuU3RhcnRlZCAmJiBlLnN0YXRlICE9PSBUb25lLlN0YXRlLlN0YXJ0ZWQpIHtcblx0ICAgICAgICAgICAgICAgIGVsYXBzZWRTZWNvbmRzICs9IGUudGltZSAtIHBlcmlvZFN0YXJ0VGltZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBsYXN0U3RhdGUgPSBlO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICAgICAgLy9yZW1vdmUgdGhlIHRlbXBvcmFyeSBldmVudFxuXHQgICAgICAgIHRoaXMuX3N0YXRlLnJlbW92ZSh0bXBFdmVudCk7XG5cdCAgICAgICAgLy9yZXR1cm4gdGhlIHRpY2tzXG5cdCAgICAgICAgcmV0dXJuIGVsYXBzZWRTZWNvbmRzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFNldCB0aGUgY2xvY2sncyB0aWNrcyBhdCB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiBAcGFyYW0gIHtUaWNrc30gdGlja3MgVGhlIHRpY2sgdmFsdWUgdG8gc2V0XG5cdFx0ICogQHBhcmFtICB7VGltZX0gdGltZSAgV2hlbiB0byBzZXQgdGhlIHRpY2sgdmFsdWVcblx0XHQgKiBAcmV0dXJuIHtUb25lLlRpY2tTb3VyY2V9ICAgICAgIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVGlja1NvdXJjZS5wcm90b3R5cGUuc2V0VGlja3NBdFRpbWUgPSBmdW5jdGlvbiAodGlja3MsIHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy5fdGlja09mZnNldC5jYW5jZWwodGltZSk7XG5cdCAgICAgICAgdGhpcy5fdGlja09mZnNldC5hZGQoe1xuXHQgICAgICAgICAgICAndGltZSc6IHRpbWUsXG5cdCAgICAgICAgICAgICd0aWNrcyc6IHRpY2tzLFxuXHQgICAgICAgICAgICAnc2Vjb25kcyc6IHRoaXMuZnJlcXVlbmN5LmdldER1cmF0aW9uT2ZUaWNrcyh0aWNrcywgdGltZSlcblx0ICAgICAgICB9KTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJucyB0aGUgc2NoZWR1bGVkIHN0YXRlIGF0IHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSAgdGltZSAgVGhlIHRpbWUgdG8gcXVlcnkuXG5cdFx0ICogIEByZXR1cm4gIHtTdHJpbmd9ICBUaGUgbmFtZSBvZiB0aGUgc3RhdGUgaW5wdXQgaW4gc2V0U3RhdGVBdFRpbWUuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogc291cmNlLnN0YXJ0KFwiKzAuMVwiKTtcblx0XHQgKiBzb3VyY2UuZ2V0U3RhdGVBdFRpbWUoXCIrMC4xXCIpOyAvL3JldHVybnMgXCJzdGFydGVkXCJcblx0XHQgKi9cblx0ICAgIFRvbmUuVGlja1NvdXJjZS5wcm90b3R5cGUuZ2V0U3RhdGVBdFRpbWUgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGUuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogR2V0IHRoZSB0aW1lIG9mIHRoZSBnaXZlbiB0aWNrLiBUaGUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ICogaXMgd2hlbiB0byB0ZXN0IGJlZm9yZS4gU2luY2UgdGlja3MgY2FuIGJlIHNldCAod2l0aCBzZXRUaWNrc0F0VGltZSlcblx0XHQgKiB0aGVyZSBtYXkgYmUgbXVsdGlwbGUgdGltZXMgZm9yIGEgZ2l2ZW4gdGljayB2YWx1ZS4gXG5cdFx0ICogQHBhcmFtICB7VGlja3N9IHRpY2tzIFRoZSB0aWNrIG51bWJlci5cblx0XHQgKiBAcGFyYW0gIHtUaW1lPX0gYmVmb3JlIFdoZW4gdG8gbWVhc3VyZSB0aGUgdGljayB2YWx1ZSBmcm9tLiBcblx0XHQgKiBAcmV0dXJuIHtUaW1lfSAgICAgICBUaGUgdGltZSBvZiB0aGUgdGlja1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrU291cmNlLnByb3RvdHlwZS5nZXRUaW1lT2ZUaWNrID0gZnVuY3Rpb24gKHRpY2ssIGJlZm9yZSkge1xuXHQgICAgICAgIGJlZm9yZSA9IFRvbmUuZGVmYXVsdEFyZyhiZWZvcmUsIHRoaXMubm93KCkpO1xuXHQgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl90aWNrT2Zmc2V0LmdldChiZWZvcmUpO1xuXHQgICAgICAgIHZhciBldmVudCA9IHRoaXMuX3N0YXRlLmdldChiZWZvcmUpO1xuXHQgICAgICAgIHZhciBzdGFydFRpbWUgPSBNYXRoLm1heChvZmZzZXQudGltZSwgZXZlbnQudGltZSk7XG5cdCAgICAgICAgdmFyIGFic29sdXRlVGlja3MgPSB0aGlzLmZyZXF1ZW5jeS5nZXRUaWNrc0F0VGltZShzdGFydFRpbWUpICsgdGljayAtIG9mZnNldC50aWNrcztcblx0ICAgICAgICByZXR1cm4gdGhpcy5mcmVxdWVuY3kuZ2V0VGltZU9mVGljayhhYnNvbHV0ZVRpY2tzKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgSW52b2tlIHRoZSBjYWxsYmFjayBldmVudCBhdCBhbGwgc2NoZWR1bGVkIHRpY2tzIGJldHdlZW4gdGhlIFxuXHRcdCAqICBzdGFydCB0aW1lIGFuZCB0aGUgZW5kIHRpbWVcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gICAgc3RhcnRUaW1lICBUaGUgYmVnaW5uaW5nIG9mIHRoZSBzZWFyY2ggcmFuZ2Vcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gICAgZW5kVGltZSAgICBUaGUgZW5kIG9mIHRoZSBzZWFyY2ggcmFuZ2Vcblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb248VGltZSxUaWNrcz59ICBjYWxsYmFjayAgIFRoZSBjYWxsYmFjayB0byBpbnZva2Ugd2l0aCBlYWNoIHRpY2tcblx0XHQgKiAgQHJldHVybiAge1RvbmUuVGlja1NvdXJjZX0gICAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrU291cmNlLnByb3RvdHlwZS5mb3JFYWNoVGlja0JldHdlZW4gPSBmdW5jdGlvbiAoc3RhcnRUaW1lLCBlbmRUaW1lLCBjYWxsYmFjaykge1xuXHQgICAgICAgIC8vb25seSBpdGVyYXRlIHRocm91Z2ggdGhlIHNlY3Rpb25zIHdoZXJlIGl0IGlzIFwic3RhcnRlZFwiXG5cdCAgICAgICAgdmFyIGxhc3RTdGF0ZUV2ZW50ID0gdGhpcy5fc3RhdGUuZ2V0KHN0YXJ0VGltZSk7XG5cdCAgICAgICAgdGhpcy5fc3RhdGUuZm9yRWFjaEJldHdlZW4oc3RhcnRUaW1lLCBlbmRUaW1lLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgaWYgKGxhc3RTdGF0ZUV2ZW50LnN0YXRlID09PSBUb25lLlN0YXRlLlN0YXJ0ZWQgJiYgZXZlbnQuc3RhdGUgIT09IFRvbmUuU3RhdGUuU3RhcnRlZCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5mb3JFYWNoVGlja0JldHdlZW4oTWF0aC5tYXgobGFzdFN0YXRlRXZlbnQudGltZSwgc3RhcnRUaW1lKSwgZXZlbnQudGltZSAtIHRoaXMuc2FtcGxlVGltZSwgY2FsbGJhY2spO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGxhc3RTdGF0ZUV2ZW50ID0gZXZlbnQ7XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgICAgICBzdGFydFRpbWUgPSBNYXRoLm1heChsYXN0U3RhdGVFdmVudC50aW1lLCBzdGFydFRpbWUpO1xuXHQgICAgICAgIGlmIChsYXN0U3RhdGVFdmVudC5zdGF0ZSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkICYmIHRoaXMuX3N0YXRlKSB7XG5cdCAgICAgICAgICAgIC8vZmlndXJlIG91dCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBmcmVxdWVuY3kgdGlja3MgYW5kIHRoZSBcblx0ICAgICAgICAgICAgdmFyIHN0YXJ0VGlja3MgPSB0aGlzLmZyZXF1ZW5jeS5nZXRUaWNrc0F0VGltZShzdGFydFRpbWUpO1xuXHQgICAgICAgICAgICB2YXIgdGlja3NBdFN0YXJ0ID0gdGhpcy5mcmVxdWVuY3kuZ2V0VGlja3NBdFRpbWUobGFzdFN0YXRlRXZlbnQudGltZSk7XG5cdCAgICAgICAgICAgIHZhciBkaWZmID0gc3RhcnRUaWNrcyAtIHRpY2tzQXRTdGFydDtcblx0ICAgICAgICAgICAgdmFyIG9mZnNldCA9IGRpZmYgJSAxO1xuXHQgICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSAwKSB7XG5cdCAgICAgICAgICAgICAgICBvZmZzZXQgPSAxIC0gb2Zmc2V0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBuZXh0VGlja1RpbWUgPSB0aGlzLmZyZXF1ZW5jeS5nZXRUaW1lT2ZUaWNrKHN0YXJ0VGlja3MgKyBvZmZzZXQpO1xuXHQgICAgICAgICAgICB2YXIgZXJyb3IgPSBudWxsO1xuXHQgICAgICAgICAgICB3aGlsZSAobmV4dFRpY2tUaW1lIDwgZW5kVGltZSAmJiB0aGlzLl9zdGF0ZSkge1xuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXh0VGlja1RpbWUsIE1hdGgucm91bmQodGhpcy5nZXRUaWNrc0F0VGltZShuZXh0VGlja1RpbWUpKSk7XG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBlO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbmV4dFRpY2tUaW1lICs9IHRoaXMuZnJlcXVlbmN5LmdldER1cmF0aW9uT2ZUaWNrcygxLCBuZXh0VGlja1RpbWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChlcnJvcikge1xuXHQgICAgICAgICAgICB0aHJvdyBlcnJvcjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlRpY2tTb3VyY2V9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVGlja1NvdXJjZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlBhcmFtLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fc3RhdGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3N0YXRlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl90aWNrT2Zmc2V0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl90aWNrT2Zmc2V0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZSgnZnJlcXVlbmN5Jyk7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5UaWNrU291cmNlO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIEEgc2FtcGxlIGFjY3VyYXRlIGNsb2NrIHdoaWNoIHByb3ZpZGVzIGEgY2FsbGJhY2sgYXQgdGhlIGdpdmVuIHJhdGUuXG5cdFx0ICogICAgICAgICAgV2hpbGUgdGhlIGNhbGxiYWNrIGlzIG5vdCBzYW1wbGUtYWNjdXJhdGUgKGl0IGlzIHN0aWxsIHN1c2NlcHRpYmxlIHRvXG5cdFx0ICogICAgICAgICAgbG9vc2UgSlMgdGltaW5nKSwgdGhlIHRpbWUgcGFzc2VkIGluIGFzIHRoZSBhcmd1bWVudCB0byB0aGUgY2FsbGJhY2tcblx0XHQgKiAgICAgICAgICBpcyBwcmVjaXNlLiBGb3IgbW9zdCBhcHBsaWNhdGlvbnMsIGl0IGlzIGJldHRlciB0byB1c2UgVG9uZS5UcmFuc3BvcnRcblx0XHQgKiAgICAgICAgICBpbnN0ZWFkIG9mIHRoZSBDbG9jayBieSBpdHNlbGYgc2luY2UgeW91IGNhbiBzeW5jaHJvbml6ZSBtdWx0aXBsZSBjYWxsYmFja3MuXG5cdFx0ICpcblx0XHQgKiBcdEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5FbWl0dGVyfVxuXHRcdCAqIFx0QHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2l0aCB0aGUgdGltZSBvZiB0aGUgYXVkaW8gZXZlbnRcblx0XHQgKiBcdEBwYXJhbSB7RnJlcXVlbmN5fSBmcmVxdWVuY3kgVGhlIHJhdGUgb2YgdGhlIGNhbGxiYWNrXG5cdFx0ICogXHRAZXhhbXBsZVxuXHRcdCAqIC8vdGhlIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZCBhcHByb3hpbWF0ZWx5IG9uY2UgYSBzZWNvbmRcblx0XHQgKiAvL2FuZCB3aWxsIHByaW50IHRoZSB0aW1lIGV4YWN0bHkgb25jZSBhIHNlY29uZCBhcGFydC5cblx0XHQgKiB2YXIgY2xvY2sgPSBuZXcgVG9uZS5DbG9jayhmdW5jdGlvbih0aW1lKXtcblx0XHQgKiBcdGNvbnNvbGUubG9nKHRpbWUpO1xuXHRcdCAqIH0sIDEpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5DbG9jayA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdjYWxsYmFjaycsXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knXG5cdCAgICAgICAgXSwgVG9uZS5DbG9jayk7XG5cdCAgICAgICAgVG9uZS5FbWl0dGVyLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGludm9rZSBhdCB0aGUgc2NoZWR1bGVkIHRpY2suXG5cdFx0XHQgKiAgQHR5cGUgIHtGdW5jdGlvbn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuY2FsbGJhY2sgPSBvcHRpb25zLmNhbGxiYWNrO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBuZXh0IHRpbWUgdGhlIGNhbGxiYWNrIGlzIHNjaGVkdWxlZC5cblx0XHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9uZXh0VGljayA9IDA7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHRpY2sgY291bnRlclxuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5UaWNrU291cmNlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl90aWNrU291cmNlID0gbmV3IFRvbmUuVGlja1NvdXJjZShvcHRpb25zLmZyZXF1ZW5jeSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGxhc3QgdGltZSB0aGUgbG9vcCBjYWxsYmFjayB3YXMgaW52b2tlZFxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2xhc3RVcGRhdGUgPSAwO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSByYXRlIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBzaG91bGQgYmUgaW52b2tlZC5cblx0XHRcdCAqICBAdHlwZSAge0JQTX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IHRoaXMuX3RpY2tTb3VyY2UuZnJlcXVlbmN5O1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KCdmcmVxdWVuY3knKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgc3RhdGUgdGltZWxpbmVcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5UaW1lbGluZVN0YXRlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zdGF0ZSA9IG5ldyBUb25lLlRpbWVsaW5lU3RhdGUoVG9uZS5TdGF0ZS5TdG9wcGVkKTtcblx0ICAgICAgICAvL2FkZCBhbiBpbml0aWFsIHN0YXRlXG5cdCAgICAgICAgdGhpcy5fc3RhdGUuc2V0U3RhdGVBdFRpbWUoVG9uZS5TdGF0ZS5TdG9wcGVkLCAwKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbG9vcCBmdW5jdGlvbiBib3VuZCB0byBpdHMgY29udGV4dC5cblx0XHRcdCAqICBUaGlzIGlzIG5lY2Vzc2FyeSB0byByZW1vdmUgdGhlIGV2ZW50IGluIHRoZSBlbmQuXG5cdFx0XHQgKiAgQHR5cGUge0Z1bmN0aW9ufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9ib3VuZExvb3AgPSB0aGlzLl9sb29wLmJpbmQodGhpcyk7XG5cdCAgICAgICAgLy9iaW5kIGEgY2FsbGJhY2sgdG8gdGhlIHdvcmtlciB0aHJlYWRcblx0ICAgICAgICB0aGlzLmNvbnRleHQub24oJ3RpY2snLCB0aGlzLl9ib3VuZExvb3ApO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuQ2xvY2ssIFRvbmUuRW1pdHRlcik7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGRlZmF1bHRzXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqICBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuQ2xvY2suZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2NhbGxiYWNrJzogVG9uZS5ub09wLFxuXHQgICAgICAgICdmcmVxdWVuY3knOiAxXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybnMgdGhlIHBsYXliYWNrIHN0YXRlIG9mIHRoZSBzb3VyY2UsIGVpdGhlciBcInN0YXJ0ZWRcIiwgXCJzdG9wcGVkXCIgb3IgXCJwYXVzZWRcIi5cblx0XHQgKiAgQHR5cGUge1RvbmUuU3RhdGV9XG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5DbG9jayNcblx0XHQgKiAgQG5hbWUgc3RhdGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkNsb2NrLnByb3RvdHlwZSwgJ3N0YXRlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGUuZ2V0VmFsdWVBdFRpbWUodGhpcy5ub3coKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgU3RhcnQgdGhlIGNsb2NrIGF0IHRoZSBnaXZlbiB0aW1lLiBPcHRpb25hbGx5IHBhc3MgaW4gYW4gb2Zmc2V0XG5cdFx0ICogIG9mIHdoZXJlIHRvIHN0YXJ0IHRoZSB0aWNrIGNvdW50ZXIgZnJvbS5cblx0XHQgKiAgQHBhcmFtICB7VGltZT19ICB0aW1lICAgIFRoZSB0aW1lIHRoZSBjbG9jayBzaG91bGQgc3RhcnRcblx0XHQgKiAgQHBhcmFtICB7VGlja3M9fSAgb2Zmc2V0ICBXaGVyZSB0aGUgdGljayBjb3VudGVyIHN0YXJ0cyBjb3VudGluZyBmcm9tLlxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5DbG9ja30gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQ2xvY2sucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUsIG9mZnNldCkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICBpZiAodGhpcy5fc3RhdGUuZ2V0VmFsdWVBdFRpbWUodGltZSkgIT09IFRvbmUuU3RhdGUuU3RhcnRlZCkge1xuXHQgICAgICAgICAgICB0aGlzLl9zdGF0ZS5zZXRTdGF0ZUF0VGltZShUb25lLlN0YXRlLlN0YXJ0ZWQsIHRpbWUpO1xuXHQgICAgICAgICAgICB0aGlzLl90aWNrU291cmNlLnN0YXJ0KHRpbWUsIG9mZnNldCk7XG5cdCAgICAgICAgICAgIGlmICh0aW1lIDwgdGhpcy5fbGFzdFVwZGF0ZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdzdGFydCcsIHRpbWUsIG9mZnNldCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFN0b3AgdGhlIGNsb2NrLiBTdG9wcGluZyB0aGUgY2xvY2sgcmVzZXRzIHRoZSB0aWNrIGNvdW50ZXIgdG8gMC5cblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIFRoZSB0aW1lIHdoZW4gdGhlIGNsb2NrIHNob3VsZCBzdG9wLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5DbG9ja30gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIGNsb2NrLnN0b3AoKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuQ2xvY2sucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB0aGlzLl9zdGF0ZS5jYW5jZWwodGltZSk7XG5cdCAgICAgICAgdGhpcy5fc3RhdGUuc2V0U3RhdGVBdFRpbWUoVG9uZS5TdGF0ZS5TdG9wcGVkLCB0aW1lKTtcblx0ICAgICAgICB0aGlzLl90aWNrU291cmNlLnN0b3AodGltZSk7XG5cdCAgICAgICAgaWYgKHRpbWUgPCB0aGlzLl9sYXN0VXBkYXRlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZW1pdCgnc3RvcCcsIHRpbWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUGF1c2UgdGhlIGNsb2NrLiBQYXVzaW5nIGRvZXMgbm90IHJlc2V0IHRoZSB0aWNrIGNvdW50ZXIuXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gW3RpbWU9bm93XSBUaGUgdGltZSB3aGVuIHRoZSBjbG9jayBzaG91bGQgc3RvcC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuQ2xvY2t9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQ2xvY2sucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgaWYgKHRoaXMuX3N0YXRlLmdldFZhbHVlQXRUaW1lKHRpbWUpID09PSBUb25lLlN0YXRlLlN0YXJ0ZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fc3RhdGUuc2V0U3RhdGVBdFRpbWUoVG9uZS5TdGF0ZS5QYXVzZWQsIHRpbWUpO1xuXHQgICAgICAgICAgICB0aGlzLl90aWNrU291cmNlLnBhdXNlKHRpbWUpO1xuXHQgICAgICAgICAgICBpZiAodGltZSA8IHRoaXMuX2xhc3RVcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgncGF1c2UnLCB0aW1lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIG51bWJlciBvZiB0aW1lcyB0aGUgY2FsbGJhY2sgd2FzIGludm9rZWQuIFN0YXJ0cyBjb3VudGluZyBhdCAwXG5cdFx0ICogIGFuZCBpbmNyZW1lbnRzIGFmdGVyIHRoZSBjYWxsYmFjayB3YXMgaW52b2tlZC5cblx0XHQgKiAgQHR5cGUge1RpY2tzfVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQ2xvY2sucHJvdG90eXBlLCAndGlja3MnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5nZXRUaWNrc0F0VGltZSh0aGlzLm5vdygpKSk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3RpY2tTb3VyY2UudGlja3MgPSB0O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSB0aW1lIHNpbmNlIHRpY2tzPTAgdGhhdCB0aGUgQ2xvY2sgaGFzIGJlZW4gcnVubmluZy4gQWNjb3VudHNcblx0XHQgKiAgZm9yIHRlbXBvIGN1cnZlc1xuXHRcdCAqICBAdHlwZSB7U2Vjb25kc31cblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkNsb2NrLnByb3RvdHlwZSwgJ3NlY29uZHMnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl90aWNrU291cmNlLnNlY29uZHM7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3RpY2tTb3VyY2Uuc2Vjb25kcyA9IHM7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJuIHRoZSBlbGFwc2VkIHNlY29uZHMgYXQgdGhlIGdpdmVuIHRpbWUuXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9ICB0aW1lICBXaGVuIHRvIGdldCB0aGUgZWxhcHNlZCBzZWNvbmRzXG5cdFx0ICogIEByZXR1cm4gIHtTZWNvbmRzfSAgVGhlIG51bWJlciBvZiBlbGFwc2VkIHNlY29uZHNcblx0XHQgKi9cblx0ICAgIFRvbmUuQ2xvY2sucHJvdG90eXBlLmdldFNlY29uZHNBdFRpbWUgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLl90aWNrU291cmNlLmdldFNlY29uZHNBdFRpbWUodGltZSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogU2V0IHRoZSBjbG9jaydzIHRpY2tzIGF0IHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqIEBwYXJhbSAge1RpY2tzfSB0aWNrcyBUaGUgdGljayB2YWx1ZSB0byBzZXRcblx0XHQgKiBAcGFyYW0gIHtUaW1lfSB0aW1lICBXaGVuIHRvIHNldCB0aGUgdGljayB2YWx1ZVxuXHRcdCAqIEByZXR1cm4ge1RvbmUuQ2xvY2t9ICAgICAgIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQ2xvY2sucHJvdG90eXBlLnNldFRpY2tzQXRUaW1lID0gZnVuY3Rpb24gKHRpY2tzLCB0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fdGlja1NvdXJjZS5zZXRUaWNrc0F0VGltZSh0aWNrcywgdGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogR2V0IHRoZSBjbG9jaydzIHRpY2tzIGF0IHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqIEBwYXJhbSAge1RpbWV9IHRpbWUgIFdoZW4gdG8gZ2V0IHRoZSB0aWNrIHZhbHVlXG5cdFx0ICogQHJldHVybiB7VGlja3N9ICAgICAgIFRoZSB0aWNrIHZhbHVlIGF0IHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5DbG9jay5wcm90b3R5cGUuZ2V0VGlja3NBdFRpbWUgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLl90aWNrU291cmNlLmdldFRpY2tzQXRUaW1lKHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIEdldCB0aGUgdGltZSBvZiB0aGUgbmV4dCB0aWNrXG5cdFx0ICogQHBhcmFtICB7VGlja3N9IHRpY2tzIFRoZSB0aWNrIG51bWJlci5cblx0XHQgKiBAcGFyYW0gIHtUaW1lfSBiZWZvcmUgXG5cdFx0ICogQHJldHVybiB7VG9uZS5DbG9ja30gICAgICAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5DbG9jay5wcm90b3R5cGUubmV4dFRpY2tUaW1lID0gZnVuY3Rpb24gKG9mZnNldCwgd2hlbikge1xuXHQgICAgICAgIHdoZW4gPSB0aGlzLnRvU2Vjb25kcyh3aGVuKTtcblx0ICAgICAgICB2YXIgY3VycmVudFRpY2sgPSB0aGlzLmdldFRpY2tzQXRUaW1lKHdoZW4pO1xuXHQgICAgICAgIHJldHVybiB0aGlzLl90aWNrU291cmNlLmdldFRpbWVPZlRpY2soY3VycmVudFRpY2sgKyBvZmZzZXQsIHdoZW4pO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgc2NoZWR1bGluZyBsb29wLlxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5DbG9jay5wcm90b3R5cGUuX2xvb3AgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0VGltZSA9IHRoaXMuX2xhc3RVcGRhdGU7XG5cdCAgICAgICAgdmFyIGVuZFRpbWUgPSB0aGlzLm5vdygpO1xuXHQgICAgICAgIHRoaXMuX2xhc3RVcGRhdGUgPSBlbmRUaW1lO1xuXHQgICAgICAgIGlmIChzdGFydFRpbWUgIT09IGVuZFRpbWUpIHtcblx0ICAgICAgICAgICAgLy90aGUgc3RhdGUgY2hhbmdlIGV2ZW50c1xuXHQgICAgICAgICAgICB0aGlzLl9zdGF0ZS5mb3JFYWNoQmV0d2VlbihzdGFydFRpbWUsIGVuZFRpbWUsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuc3RhdGUpIHtcblx0ICAgICAgICAgICAgICAgIGNhc2UgVG9uZS5TdGF0ZS5TdGFydGVkOlxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl90aWNrU291cmNlLmdldFRpY2tzQXRUaW1lKGUudGltZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdzdGFydCcsIGUudGltZSwgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgVG9uZS5TdGF0ZS5TdG9wcGVkOlxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChlLnRpbWUgIT09IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdzdG9wJywgZS50aW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIFRvbmUuU3RhdGUuUGF1c2VkOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgncGF1c2UnLCBlLnRpbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXHQgICAgICAgICAgICAvL3RoZSB0aWNrIGNhbGxiYWNrc1xuXHQgICAgICAgICAgICB0aGlzLl90aWNrU291cmNlLmZvckVhY2hUaWNrQmV0d2VlbihzdGFydFRpbWUsIGVuZFRpbWUsIGZ1bmN0aW9uICh0aW1lLCB0aWNrcykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh0aW1lLCB0aWNrcyk7XG5cdCAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm5zIHRoZSBzY2hlZHVsZWQgc3RhdGUgYXQgdGhlIGdpdmVuIHRpbWUuXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9ICB0aW1lICBUaGUgdGltZSB0byBxdWVyeS5cblx0XHQgKiAgQHJldHVybiAge1N0cmluZ30gIFRoZSBuYW1lIG9mIHRoZSBzdGF0ZSBpbnB1dCBpbiBzZXRTdGF0ZUF0VGltZS5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiBjbG9jay5zdGFydChcIiswLjFcIik7XG5cdFx0ICogY2xvY2suZ2V0U3RhdGVBdFRpbWUoXCIrMC4xXCIpOyAvL3JldHVybnMgXCJzdGFydGVkXCJcblx0XHQgKi9cblx0ICAgIFRvbmUuQ2xvY2sucHJvdG90eXBlLmdldFN0YXRlQXRUaW1lID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5DbG9ja30gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5DbG9jay5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkVtaXR0ZXIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQub2ZmKCd0aWNrJywgdGhpcy5fYm91bmRMb29wKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZSgnZnJlcXVlbmN5Jyk7XG5cdCAgICAgICAgdGhpcy5fdGlja1NvdXJjZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fdGlja1NvdXJjZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2JvdW5kTG9vcCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbmV4dFRpY2sgPSBJbmZpbml0eTtcblx0ICAgICAgICB0aGlzLmNhbGxiYWNrID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9zdGF0ZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fc3RhdGUgPSBudWxsO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkNsb2NrO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgU2ltaWxhciB0byBUb25lLlRpbWVsaW5lLCBidXQgYWxsIGV2ZW50cyByZXByZXNlbnRcblx0XHQgKiAgICAgICAgIGludGVydmFscyB3aXRoIGJvdGggXCJ0aW1lXCIgYW5kIFwiZHVyYXRpb25cIiB0aW1lcy4gVGhlXG5cdFx0ICogICAgICAgICBldmVudHMgYXJlIHBsYWNlZCBpbiBhIHRyZWUgc3RydWN0dXJlIG9wdGltaXplZFxuXHRcdCAqICAgICAgICAgZm9yIHF1ZXJ5aW5nIGFuIGludGVyc2VjdGlvbiBwb2ludCB3aXRoIHRoZSB0aW1lbGluZVxuXHRcdCAqICAgICAgICAgZXZlbnRzLiBJbnRlcm5hbGx5IHVzZXMgYW4gW0ludGVydmFsIFRyZWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludGVydmFsX3RyZWUpXG5cdFx0ICogICAgICAgICB0byByZXByZXNlbnQgdGhlIGRhdGEuXG5cdFx0ICogIEBleHRlbmRzIHtUb25lfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5JbnRlcnZhbFRpbWVsaW5lID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgcm9vdCBub2RlIG9mIHRoZSBpbnRldmFsIHRyZWVcblx0XHRcdCAqICBAdHlwZSAge0ludGVydmFsTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgS2VlcCB0cmFjayBvZiB0aGUgbGVuZ3RoIG9mIHRoZSB0aW1lbGluZS5cblx0XHRcdCAqICBAdHlwZSAge051bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbGVuZ3RoID0gMDtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkludGVydmFsVGltZWxpbmUpO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBldmVudCB0byBhZGQgdG8gdGhlIHRpbWVsaW5lLiBBbGwgZXZlbnRzIG11c3Rcblx0XHQgKiAgaGF2ZSBhIHRpbWUgYW5kIGR1cmF0aW9uIHZhbHVlXG5cdFx0ICogIEBwYXJhbSAge09iamVjdH0gIGV2ZW50ICBUaGUgZXZlbnQgdG8gYWRkIHRvIHRoZSB0aW1lbGluZVxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5JbnRlcnZhbFRpbWVsaW5lfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5JbnRlcnZhbFRpbWVsaW5lLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICBpZiAoVG9uZS5pc1VuZGVmKGV2ZW50LnRpbWUpIHx8IFRvbmUuaXNVbmRlZihldmVudC5kdXJhdGlvbikpIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb25lLkludGVydmFsVGltZWxpbmU6IGV2ZW50cyBtdXN0IGhhdmUgdGltZSBhbmQgZHVyYXRpb24gcGFyYW1ldGVycycpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBldmVudC50aW1lID0gZXZlbnQudGltZS52YWx1ZU9mKCk7XG5cdCAgICAgICAgdmFyIG5vZGUgPSBuZXcgSW50ZXJ2YWxOb2RlKGV2ZW50LnRpbWUsIGV2ZW50LnRpbWUgKyBldmVudC5kdXJhdGlvbiwgZXZlbnQpO1xuXHQgICAgICAgIGlmICh0aGlzLl9yb290ID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3Jvb3QgPSBub2RlO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3Jvb3QuaW5zZXJ0KG5vZGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9sZW5ndGgrKztcblx0ICAgICAgICAvLyBSZXN0cnVjdHVyZSB0cmVlIHRvIGJlIGJhbGFuY2VkXG5cdCAgICAgICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgbm9kZS51cGRhdGVIZWlnaHQoKTtcblx0ICAgICAgICAgICAgbm9kZS51cGRhdGVNYXgoKTtcblx0ICAgICAgICAgICAgdGhpcy5fcmViYWxhbmNlKG5vZGUpO1xuXHQgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZW1vdmUgYW4gZXZlbnQgZnJvbSB0aGUgdGltZWxpbmUuXG5cdFx0ICogIEBwYXJhbSAge09iamVjdH0gIGV2ZW50ICBUaGUgZXZlbnQgdG8gcmVtb3ZlIGZyb20gdGhlIHRpbWVsaW5lXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkludGVydmFsVGltZWxpbmV9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkludGVydmFsVGltZWxpbmUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgIGlmICh0aGlzLl9yb290ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107XG5cdCAgICAgICAgICAgIHRoaXMuX3Jvb3Quc2VhcmNoKGV2ZW50LnRpbWUsIHJlc3VsdHMpO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBub2RlID0gcmVzdWx0c1tpXTtcblx0ICAgICAgICAgICAgICAgIGlmIChub2RlLmV2ZW50ID09PSBldmVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZU5vZGUobm9kZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGVuZ3RoLS07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIHRpbWVsaW5lLlxuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5JbnRlcnZhbFRpbWVsaW5lI1xuXHRcdCAqICBAbmFtZSBsZW5ndGhcblx0XHQgKiAgQHJlYWRPbmx5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5JbnRlcnZhbFRpbWVsaW5lLnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZW1vdmUgZXZlbnRzIHdob3NlIHRpbWUgdGltZSBpcyBhZnRlciB0aGUgZ2l2ZW4gdGltZVxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lICBUaGUgdGltZSB0byBxdWVyeS5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuSW50ZXJ2YWxUaW1lbGluZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5JbnRlcnZhbFRpbWVsaW5lLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoYWZ0ZXIpIHtcblx0ICAgICAgICB0aGlzLmZvckVhY2hGcm9tKGFmdGVyLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgdGhpcy5yZW1vdmUoZXZlbnQpO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFNldCB0aGUgcm9vdCBub2RlIGFzIHRoZSBnaXZlbiBub2RlXG5cdFx0ICogIEBwYXJhbSB7SW50ZXJ2YWxOb2RlfSBub2RlXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkludGVydmFsVGltZWxpbmUucHJvdG90eXBlLl9zZXRSb290ID0gZnVuY3Rpb24gKG5vZGUpIHtcblx0ICAgICAgICB0aGlzLl9yb290ID0gbm9kZTtcblx0ICAgICAgICBpZiAodGhpcy5fcm9vdCAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICB0aGlzLl9yb290LnBhcmVudCA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXBsYWNlIHRoZSByZWZlcmVuY2VzIHRvIHRoZSBub2RlIGluIHRoZSBub2RlJ3MgcGFyZW50XG5cdFx0ICogIHdpdGggdGhlIHJlcGxhY2VtZW50IG5vZGUuXG5cdFx0ICogIEBwYXJhbSAge0ludGVydmFsTm9kZX0gIG5vZGVcblx0XHQgKiAgQHBhcmFtICB7SW50ZXJ2YWxOb2RlfSAgcmVwbGFjZW1lbnRcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuSW50ZXJ2YWxUaW1lbGluZS5wcm90b3R5cGUuX3JlcGxhY2VOb2RlSW5QYXJlbnQgPSBmdW5jdGlvbiAobm9kZSwgcmVwbGFjZW1lbnQpIHtcblx0ICAgICAgICBpZiAobm9kZS5wYXJlbnQgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgaWYgKG5vZGUuaXNMZWZ0Q2hpbGQoKSkge1xuXHQgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnQubGVmdCA9IHJlcGxhY2VtZW50O1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnQucmlnaHQgPSByZXBsYWNlbWVudDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLl9yZWJhbGFuY2Uobm9kZS5wYXJlbnQpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3NldFJvb3QocmVwbGFjZW1lbnQpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmVtb3ZlIHRoZSBub2RlIGZyb20gdGhlIHRyZWUgYW5kIHJlcGxhY2UgaXQgd2l0aFxuXHRcdCAqICBhIHN1Y2Nlc3NvciB3aGljaCBmb2xsb3dzIHRoZSBzY2hlbWEuXG5cdFx0ICogIEBwYXJhbSAge0ludGVydmFsTm9kZX0gIG5vZGVcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuSW50ZXJ2YWxUaW1lbGluZS5wcm90b3R5cGUuX3JlbW92ZU5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuXHQgICAgICAgIGlmIChub2RlLmxlZnQgPT09IG51bGwgJiYgbm9kZS5yaWdodCA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICB0aGlzLl9yZXBsYWNlTm9kZUluUGFyZW50KG5vZGUsIG51bGwpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAobm9kZS5yaWdodCA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICB0aGlzLl9yZXBsYWNlTm9kZUluUGFyZW50KG5vZGUsIG5vZGUubGVmdCk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChub2RlLmxlZnQgPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcmVwbGFjZU5vZGVJblBhcmVudChub2RlLCBub2RlLnJpZ2h0KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgYmFsYW5jZSA9IG5vZGUuZ2V0QmFsYW5jZSgpO1xuXHQgICAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQsIHRlbXA7XG5cdCAgICAgICAgICAgIGlmIChiYWxhbmNlID4gMCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUubGVmdC5yaWdodCA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50ID0gbm9kZS5sZWZ0O1xuXHQgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50LnJpZ2h0ID0gbm9kZS5yaWdodDtcblx0ICAgICAgICAgICAgICAgICAgICB0ZW1wID0gcmVwbGFjZW1lbnQ7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50ID0gbm9kZS5sZWZ0LnJpZ2h0O1xuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyZXBsYWNlbWVudC5yaWdodCAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudCA9IHJlcGxhY2VtZW50LnJpZ2h0O1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudC5wYXJlbnQucmlnaHQgPSByZXBsYWNlbWVudC5sZWZ0O1xuXHQgICAgICAgICAgICAgICAgICAgIHRlbXAgPSByZXBsYWNlbWVudC5wYXJlbnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQubGVmdCA9IG5vZGUubGVmdDtcblx0ICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudC5yaWdodCA9IG5vZGUucmlnaHQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5yaWdodC5sZWZ0ID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICByZXBsYWNlbWVudCA9IG5vZGUucmlnaHQ7XG5cdCAgICAgICAgICAgICAgICByZXBsYWNlbWVudC5sZWZ0ID0gbm9kZS5sZWZ0O1xuXHQgICAgICAgICAgICAgICAgdGVtcCA9IHJlcGxhY2VtZW50O1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQgPSBub2RlLnJpZ2h0LmxlZnQ7XG5cdCAgICAgICAgICAgICAgICB3aGlsZSAocmVwbGFjZW1lbnQubGVmdCAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50ID0gcmVwbGFjZW1lbnQubGVmdDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50LnBhcmVudCA9IHJlcGxhY2VtZW50LnBhcmVudDtcblx0ICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50LnBhcmVudC5sZWZ0ID0gcmVwbGFjZW1lbnQucmlnaHQ7XG5cdCAgICAgICAgICAgICAgICB0ZW1wID0gcmVwbGFjZW1lbnQucGFyZW50O1xuXHQgICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQubGVmdCA9IG5vZGUubGVmdDtcblx0ICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50LnJpZ2h0ID0gbm9kZS5yaWdodDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAobm9kZS5wYXJlbnQgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChub2RlLmlzTGVmdENoaWxkKCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudC5sZWZ0ID0gcmVwbGFjZW1lbnQ7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50LnJpZ2h0ID0gcmVwbGFjZW1lbnQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9zZXRSb290KHJlcGxhY2VtZW50KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyB0aGlzLl9yZXBsYWNlTm9kZUluUGFyZW50KG5vZGUsIHJlcGxhY2VtZW50KTtcblx0ICAgICAgICAgICAgdGhpcy5fcmViYWxhbmNlKHRlbXApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBub2RlLmRpc3Bvc2UoKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUm90YXRlIHRoZSB0cmVlIHRvIHRoZSBsZWZ0XG5cdFx0ICogIEBwYXJhbSAge0ludGVydmFsTm9kZX0gIG5vZGVcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuSW50ZXJ2YWxUaW1lbGluZS5wcm90b3R5cGUuX3JvdGF0ZUxlZnQgPSBmdW5jdGlvbiAobm9kZSkge1xuXHQgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudDtcblx0ICAgICAgICB2YXIgaXNMZWZ0Q2hpbGQgPSBub2RlLmlzTGVmdENoaWxkKCk7XG5cdCAgICAgICAgLy8gTWFrZSBub2RlLnJpZ2h0IHRoZSBuZXcgcm9vdCBvZiB0aGlzIHN1YiB0cmVlIChpbnN0ZWFkIG9mIG5vZGUpXG5cdCAgICAgICAgdmFyIHBpdm90Tm9kZSA9IG5vZGUucmlnaHQ7XG5cdCAgICAgICAgbm9kZS5yaWdodCA9IHBpdm90Tm9kZS5sZWZ0O1xuXHQgICAgICAgIHBpdm90Tm9kZS5sZWZ0ID0gbm9kZTtcblx0ICAgICAgICBpZiAocGFyZW50ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIGlmIChpc0xlZnRDaGlsZCkge1xuXHQgICAgICAgICAgICAgICAgcGFyZW50LmxlZnQgPSBwaXZvdE5vZGU7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBwYXJlbnQucmlnaHQgPSBwaXZvdE5vZGU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLl9zZXRSb290KHBpdm90Tm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSb3RhdGUgdGhlIHRyZWUgdG8gdGhlIHJpZ2h0XG5cdFx0ICogIEBwYXJhbSAge0ludGVydmFsTm9kZX0gIG5vZGVcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuSW50ZXJ2YWxUaW1lbGluZS5wcm90b3R5cGUuX3JvdGF0ZVJpZ2h0ID0gZnVuY3Rpb24gKG5vZGUpIHtcblx0ICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnQ7XG5cdCAgICAgICAgdmFyIGlzTGVmdENoaWxkID0gbm9kZS5pc0xlZnRDaGlsZCgpO1xuXHQgICAgICAgIC8vIE1ha2Ugbm9kZS5sZWZ0IHRoZSBuZXcgcm9vdCBvZiB0aGlzIHN1YiB0cmVlIChpbnN0ZWFkIG9mIG5vZGUpXG5cdCAgICAgICAgdmFyIHBpdm90Tm9kZSA9IG5vZGUubGVmdDtcblx0ICAgICAgICBub2RlLmxlZnQgPSBwaXZvdE5vZGUucmlnaHQ7XG5cdCAgICAgICAgcGl2b3ROb2RlLnJpZ2h0ID0gbm9kZTtcblx0ICAgICAgICBpZiAocGFyZW50ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIGlmIChpc0xlZnRDaGlsZCkge1xuXHQgICAgICAgICAgICAgICAgcGFyZW50LmxlZnQgPSBwaXZvdE5vZGU7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBwYXJlbnQucmlnaHQgPSBwaXZvdE5vZGU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLl9zZXRSb290KHBpdm90Tm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBCYWxhbmNlIHRoZSBCU1Rcblx0XHQgKiAgQHBhcmFtICB7SW50ZXJ2YWxOb2RlfSAgbm9kZVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5JbnRlcnZhbFRpbWVsaW5lLnByb3RvdHlwZS5fcmViYWxhbmNlID0gZnVuY3Rpb24gKG5vZGUpIHtcblx0ICAgICAgICB2YXIgYmFsYW5jZSA9IG5vZGUuZ2V0QmFsYW5jZSgpO1xuXHQgICAgICAgIGlmIChiYWxhbmNlID4gMSkge1xuXHQgICAgICAgICAgICBpZiAobm9kZS5sZWZ0LmdldEJhbGFuY2UoKSA8IDApIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0ZUxlZnQobm9kZS5sZWZ0KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0ZVJpZ2h0KG5vZGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmIChiYWxhbmNlIDwgLTEpIHtcblx0ICAgICAgICAgICAgaWYgKG5vZGUucmlnaHQuZ2V0QmFsYW5jZSgpID4gMCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fcm90YXRlUmlnaHQobm9kZS5yaWdodCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGVMZWZ0KG5vZGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBHZXQgYW4gZXZlbnQgd2hvc2UgdGltZSBhbmQgZHVyYXRpb24gc3BhbiB0aGUgZ2l2ZSB0aW1lLiBXaWxsXG5cdFx0ICogIHJldHVybiB0aGUgbWF0Y2ggd2hvc2UgXCJ0aW1lXCIgdmFsdWUgaXMgY2xvc2VzdCB0byB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgQHBhcmFtICB7T2JqZWN0fSAgZXZlbnQgIFRoZSBldmVudCB0byBhZGQgdG8gdGhlIHRpbWVsaW5lXG5cdFx0ICogIEByZXR1cm4gIHtPYmplY3R9ICBUaGUgZXZlbnQgd2hpY2ggc3BhbnMgdGhlIGRlc2lyZWQgdGltZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5JbnRlcnZhbFRpbWVsaW5lLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIGlmICh0aGlzLl9yb290ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107XG5cdCAgICAgICAgICAgIHRoaXMuX3Jvb3Quc2VhcmNoKHRpbWUsIHJlc3VsdHMpO1xuXHQgICAgICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWF4ID0gcmVzdWx0c1swXTtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzW2ldLmxvdyA+IG1heC5sb3cpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gcmVzdWx0c1tpXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbWF4LmV2ZW50O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBJdGVyYXRlIG92ZXIgZXZlcnl0aGluZyBpbiB0aGUgdGltZWxpbmUuXG5cdFx0ICogIEBwYXJhbSAge0Z1bmN0aW9ufSAgY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGludm9rZSB3aXRoIGV2ZXJ5IGl0ZW1cblx0XHQgKiAgQHJldHVybnMge1RvbmUuSW50ZXJ2YWxUaW1lbGluZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5JbnRlcnZhbFRpbWVsaW5lLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuX3Jvb3QgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgdmFyIGFsbE5vZGVzID0gW107XG5cdCAgICAgICAgICAgIHRoaXMuX3Jvb3QudHJhdmVyc2UoZnVuY3Rpb24gKG5vZGUpIHtcblx0ICAgICAgICAgICAgICAgIGFsbE5vZGVzLnB1c2gobm9kZSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbE5vZGVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZXYgPSBhbGxOb2Rlc1tpXS5ldmVudDtcblx0ICAgICAgICAgICAgICAgIGlmIChldikge1xuXHQgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGV2KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgSXRlcmF0ZSBvdmVyIGV2ZXJ5dGhpbmcgaW4gdGhlIGFycmF5IGluIHdoaWNoIHRoZSBnaXZlbiB0aW1lXG5cdFx0ICogIG92ZXJsYXBzIHdpdGggdGhlIHRpbWUgYW5kIGR1cmF0aW9uIHRpbWUgb2YgdGhlIGV2ZW50LlxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lIFRoZSB0aW1lIHRvIGNoZWNrIGlmIGl0ZW1zIGFyZSBvdmVybGFwcGluZ1xuXHRcdCAqICBAcGFyYW0gIHtGdW5jdGlvbn0gIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBpbnZva2Ugd2l0aCBldmVyeSBpdGVtXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkludGVydmFsVGltZWxpbmV9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuSW50ZXJ2YWxUaW1lbGluZS5wcm90b3R5cGUuZm9yRWFjaEF0VGltZSA9IGZ1bmN0aW9uICh0aW1lLCBjYWxsYmFjaykge1xuXHQgICAgICAgIGlmICh0aGlzLl9yb290ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107XG5cdCAgICAgICAgICAgIHRoaXMuX3Jvb3Quc2VhcmNoKHRpbWUsIHJlc3VsdHMpO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gcmVzdWx0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGV2ID0gcmVzdWx0c1tpXS5ldmVudDtcblx0ICAgICAgICAgICAgICAgIGlmIChldikge1xuXHQgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGV2KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgSXRlcmF0ZSBvdmVyIGV2ZXJ5dGhpbmcgaW4gdGhlIGFycmF5IGluIHdoaWNoIHRoZSB0aW1lIGlzIGdyZWF0ZXJcblx0XHQgKiAgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgdGltZSBUaGUgdGltZSB0byBjaGVjayBpZiBpdGVtcyBhcmUgYmVmb3JlXG5cdFx0ICogIEBwYXJhbSAge0Z1bmN0aW9ufSAgY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGludm9rZSB3aXRoIGV2ZXJ5IGl0ZW1cblx0XHQgKiAgQHJldHVybnMge1RvbmUuSW50ZXJ2YWxUaW1lbGluZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5JbnRlcnZhbFRpbWVsaW5lLnByb3RvdHlwZS5mb3JFYWNoRnJvbSA9IGZ1bmN0aW9uICh0aW1lLCBjYWxsYmFjaykge1xuXHQgICAgICAgIGlmICh0aGlzLl9yb290ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107XG5cdCAgICAgICAgICAgIHRoaXMuX3Jvb3Quc2VhcmNoQWZ0ZXIodGltZSwgcmVzdWx0cyk7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSByZXN1bHRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZXYgPSByZXN1bHRzW2ldLmV2ZW50O1xuXHQgICAgICAgICAgICAgICAgY2FsbGJhY2soZXYpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5JbnRlcnZhbFRpbWVsaW5lfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5JbnRlcnZhbFRpbWVsaW5lLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBhbGxOb2RlcyA9IFtdO1xuXHQgICAgICAgIGlmICh0aGlzLl9yb290ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3Jvb3QudHJhdmVyc2UoZnVuY3Rpb24gKG5vZGUpIHtcblx0ICAgICAgICAgICAgICAgIGFsbE5vZGVzLnB1c2gobm9kZSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbE5vZGVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIGFsbE5vZGVzW2ldLmRpc3Bvc2UoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYWxsTm9kZXMgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9cdElOVEVSVkFMIE5PREUgSEVMUEVSXG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8qKlxuXHRcdCAqICBSZXByZXNlbnRzIGEgbm9kZSBpbiB0aGUgYmluYXJ5IHNlYXJjaCB0cmVlLCB3aXRoIHRoZSBhZGRpdGlvblxuXHRcdCAqICBvZiBhIFwiaGlnaFwiIHZhbHVlIHdoaWNoIGtlZXBzIHRyYWNrIG9mIHRoZSBoaWdoZXN0IHZhbHVlIG9mXG5cdFx0ICogIGl0cyBjaGlsZHJlbi5cblx0XHQgKiAgUmVmZXJlbmNlczpcblx0XHQgKiAgaHR0cHM6Ly9icm9va25vdmFrLndvcmRwcmVzcy5jb20vMjAxMy8xMi8wNy9hdWdtZW50ZWQtaW50ZXJ2YWwtdHJlZS1pbi1jL1xuXHRcdCAqICBodHRwOi8vd3d3Lm1pZi52dS5sdC9+dmFsZGFzL0FMR09SSVRNQUkvTElURVJBVFVSQS9Db3JtZW4vQ29ybWVuLnBkZlxuXHRcdCAqICBAcGFyYW0ge051bWJlcn0gbG93XG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfSBoaWdoXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICB2YXIgSW50ZXJ2YWxOb2RlID0gZnVuY3Rpb24gKGxvdywgaGlnaCwgZXZlbnQpIHtcblx0ICAgICAgICAvL3RoZSBldmVudCBjb250YWluZXJcblx0ICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG5cdCAgICAgICAgLy90aGUgbG93IHZhbHVlXG5cdCAgICAgICAgdGhpcy5sb3cgPSBsb3c7XG5cdCAgICAgICAgLy90aGUgaGlnaCB2YWx1ZVxuXHQgICAgICAgIHRoaXMuaGlnaCA9IGhpZ2g7XG5cdCAgICAgICAgLy90aGUgaGlnaCB2YWx1ZSBmb3IgdGhpcyBhbmQgYWxsIGNoaWxkIG5vZGVzXG5cdCAgICAgICAgdGhpcy5tYXggPSB0aGlzLmhpZ2g7XG5cdCAgICAgICAgLy90aGUgbm9kZXMgdG8gdGhlIGxlZnRcblx0ICAgICAgICB0aGlzLl9sZWZ0ID0gbnVsbDtcblx0ICAgICAgICAvL3RoZSBub2RlcyB0byB0aGUgcmlnaHRcblx0ICAgICAgICB0aGlzLl9yaWdodCA9IG51bGw7XG5cdCAgICAgICAgLy90aGUgcGFyZW50IG5vZGVcblx0ICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG5cdCAgICAgICAgLy90aGUgbnVtYmVyIG9mIGNoaWxkIG5vZGVzXG5cdCAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBJbnNlcnQgYSBub2RlIGludG8gdGhlIGNvcnJlY3Qgc3BvdCBpbiB0aGUgdHJlZVxuXHRcdCAqICBAcGFyYW0gIHtJbnRlcnZhbE5vZGV9ICBub2RlXG5cdFx0ICovXG5cdCAgICBJbnRlcnZhbE5vZGUucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChub2RlKSB7XG5cdCAgICAgICAgaWYgKG5vZGUubG93IDw9IHRoaXMubG93KSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmxlZnQgPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMubGVmdCA9IG5vZGU7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmxlZnQuaW5zZXJ0KG5vZGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJpZ2h0ID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMucmlnaHQgPSBub2RlO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMucmlnaHQuaW5zZXJ0KG5vZGUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU2VhcmNoIHRoZSB0cmVlIGZvciBub2RlcyB3aGljaCBvdmVybGFwXG5cdFx0ICogIHdpdGggdGhlIGdpdmVuIHBvaW50XG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIHBvaW50ICBUaGUgcG9pbnQgdG8gcXVlcnlcblx0XHQgKiAgQHBhcmFtICB7QXJyYXl9ICByZXN1bHRzICBUaGUgYXJyYXkgdG8gcHV0IHRoZSByZXN1bHRzXG5cdFx0ICovXG5cdCAgICBJbnRlcnZhbE5vZGUucHJvdG90eXBlLnNlYXJjaCA9IGZ1bmN0aW9uIChwb2ludCwgcmVzdWx0cykge1xuXHQgICAgICAgIC8vIElmIHAgaXMgdG8gdGhlIHJpZ2h0IG9mIHRoZSByaWdodG1vc3QgcG9pbnQgb2YgYW55IGludGVydmFsXG5cdCAgICAgICAgLy8gaW4gdGhpcyBub2RlIGFuZCBhbGwgY2hpbGRyZW4sIHRoZXJlIHdvbid0IGJlIGFueSBtYXRjaGVzLlxuXHQgICAgICAgIGlmIChwb2ludCA+IHRoaXMubWF4KSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gU2VhcmNoIGxlZnQgY2hpbGRyZW5cblx0ICAgICAgICBpZiAodGhpcy5sZWZ0ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMubGVmdC5zZWFyY2gocG9pbnQsIHJlc3VsdHMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBDaGVjayB0aGlzIG5vZGVcblx0ICAgICAgICBpZiAodGhpcy5sb3cgPD0gcG9pbnQgJiYgdGhpcy5oaWdoID4gcG9pbnQpIHtcblx0ICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBJZiBwIGlzIHRvIHRoZSBsZWZ0IG9mIHRoZSB0aW1lIG9mIHRoaXMgaW50ZXJ2YWwsXG5cdCAgICAgICAgLy8gdGhlbiBpdCBjYW4ndCBiZSBpbiBhbnkgY2hpbGQgdG8gdGhlIHJpZ2h0LlxuXHQgICAgICAgIGlmICh0aGlzLmxvdyA+IHBvaW50KSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gU2VhcmNoIHJpZ2h0IGNoaWxkcmVuXG5cdCAgICAgICAgaWYgKHRoaXMucmlnaHQgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgdGhpcy5yaWdodC5zZWFyY2gocG9pbnQsIHJlc3VsdHMpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU2VhcmNoIHRoZSB0cmVlIGZvciBub2RlcyB3aGljaCBhcmUgbGVzc1xuXHRcdCAqICB0aGFuIHRoZSBnaXZlbiBwb2ludFxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICBwb2ludCAgVGhlIHBvaW50IHRvIHF1ZXJ5XG5cdFx0ICogIEBwYXJhbSAge0FycmF5fSAgcmVzdWx0cyAgVGhlIGFycmF5IHRvIHB1dCB0aGUgcmVzdWx0c1xuXHRcdCAqL1xuXHQgICAgSW50ZXJ2YWxOb2RlLnByb3RvdHlwZS5zZWFyY2hBZnRlciA9IGZ1bmN0aW9uIChwb2ludCwgcmVzdWx0cykge1xuXHQgICAgICAgIC8vIENoZWNrIHRoaXMgbm9kZVxuXHQgICAgICAgIGlmICh0aGlzLmxvdyA+PSBwb2ludCkge1xuXHQgICAgICAgICAgICByZXN1bHRzLnB1c2godGhpcyk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmxlZnQgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMubGVmdC5zZWFyY2hBZnRlcihwb2ludCwgcmVzdWx0cyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gc2VhcmNoIHRoZSByaWdodCBzaWRlXG5cdCAgICAgICAgaWYgKHRoaXMucmlnaHQgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgdGhpcy5yaWdodC5zZWFyY2hBZnRlcihwb2ludCwgcmVzdWx0cyk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBJbnZva2UgdGhlIGNhbGxiYWNrIG9uIHRoaXMgZWxlbWVudCBhbmQgYm90aCBpdCdzIGJyYW5jaGVzXG5cdFx0ICogIEBwYXJhbSAge0Z1bmN0aW9ufSAgY2FsbGJhY2tcblx0XHQgKi9cblx0ICAgIEludGVydmFsTm9kZS5wcm90b3R5cGUudHJhdmVyc2UgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0ICAgICAgICBjYWxsYmFjayh0aGlzKTtcblx0ICAgICAgICBpZiAodGhpcy5sZWZ0ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMubGVmdC50cmF2ZXJzZShjYWxsYmFjayk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLnJpZ2h0ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMucmlnaHQudHJhdmVyc2UoY2FsbGJhY2spO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVXBkYXRlIHRoZSBoZWlnaHQgb2YgdGhlIG5vZGVcblx0XHQgKi9cblx0ICAgIEludGVydmFsTm9kZS5wcm90b3R5cGUudXBkYXRlSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmxlZnQgIT09IG51bGwgJiYgdGhpcy5yaWdodCAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICB0aGlzLmhlaWdodCA9IE1hdGgubWF4KHRoaXMubGVmdC5oZWlnaHQsIHRoaXMucmlnaHQuaGVpZ2h0KSArIDE7XG5cdCAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJpZ2h0ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5yaWdodC5oZWlnaHQgKyAxO1xuXHQgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sZWZ0ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5sZWZ0LmhlaWdodCArIDE7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVXBkYXRlIHRoZSBoZWlnaHQgb2YgdGhlIG5vZGVcblx0XHQgKi9cblx0ICAgIEludGVydmFsTm9kZS5wcm90b3R5cGUudXBkYXRlTWF4ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMubWF4ID0gdGhpcy5oaWdoO1xuXHQgICAgICAgIGlmICh0aGlzLmxlZnQgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgdGhpcy5tYXggPSBNYXRoLm1heCh0aGlzLm1heCwgdGhpcy5sZWZ0Lm1heCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLnJpZ2h0ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMubWF4ID0gTWF0aC5tYXgodGhpcy5tYXgsIHRoaXMucmlnaHQubWF4KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBiYWxhbmNlIGlzIGhvdyB0aGUgbGVhZnMgYXJlIGRpc3RyaWJ1dGVkIG9uIHRoZSBub2RlXG5cdFx0ICogIEByZXR1cm4gIHtOdW1iZXJ9ICBOZWdhdGl2ZSBudW1iZXJzIGFyZSBiYWxhbmNlZCB0byB0aGUgcmlnaHRcblx0XHQgKi9cblx0ICAgIEludGVydmFsTm9kZS5wcm90b3R5cGUuZ2V0QmFsYW5jZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgYmFsYW5jZSA9IDA7XG5cdCAgICAgICAgaWYgKHRoaXMubGVmdCAhPT0gbnVsbCAmJiB0aGlzLnJpZ2h0ICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIGJhbGFuY2UgPSB0aGlzLmxlZnQuaGVpZ2h0IC0gdGhpcy5yaWdodC5oZWlnaHQ7XG5cdCAgICAgICAgfSBlbHNlIGlmICh0aGlzLmxlZnQgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgYmFsYW5jZSA9IHRoaXMubGVmdC5oZWlnaHQgKyAxO1xuXHQgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yaWdodCAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICBiYWxhbmNlID0gLSh0aGlzLnJpZ2h0LmhlaWdodCArIDEpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gYmFsYW5jZTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgdGhpcyBub2RlIGlzIHRoZSBsZWZ0IGNoaWxkXG5cdFx0ICogIG9mIGl0cyBwYXJlbnRcblx0XHQgKi9cblx0ICAgIEludGVydmFsTm9kZS5wcm90b3R5cGUuaXNMZWZ0Q2hpbGQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ICE9PSBudWxsICYmIHRoaXMucGFyZW50LmxlZnQgPT09IHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIGdldC9zZXQgdGhlIGxlZnQgbm9kZVxuXHRcdCAqICBAdHlwZSB7SW50ZXJ2YWxOb2RlfVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVydmFsTm9kZS5wcm90b3R5cGUsICdsZWZ0Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGVmdDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG5vZGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbGVmdCA9IG5vZGU7XG5cdCAgICAgICAgICAgIGlmIChub2RlICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICBub2RlLnBhcmVudCA9IHRoaXM7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy51cGRhdGVIZWlnaHQoKTtcblx0ICAgICAgICAgICAgdGhpcy51cGRhdGVNYXgoKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBnZXQvc2V0IHRoZSByaWdodCBub2RlXG5cdFx0ICogIEB0eXBlIHtJbnRlcnZhbE5vZGV9XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJ2YWxOb2RlLnByb3RvdHlwZSwgJ3JpZ2h0Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmlnaHQ7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChub2RlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3JpZ2h0ID0gbm9kZTtcblx0ICAgICAgICAgICAgaWYgKG5vZGUgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIG5vZGUucGFyZW50ID0gdGhpcztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnVwZGF0ZUhlaWdodCgpO1xuXHQgICAgICAgICAgICB0aGlzLnVwZGF0ZU1heCgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIG51bGwgb3V0IHJlZmVyZW5jZXMuXG5cdFx0ICovXG5cdCAgICBJbnRlcnZhbE5vZGUucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2xlZnQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3JpZ2h0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmV2ZW50ID0gbnVsbDtcblx0ICAgIH07XG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8vXHRFTkQgSU5URVJWQUwgTk9ERSBIRUxQRVJcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgcmV0dXJuIFRvbmUuSW50ZXJ2YWxUaW1lbGluZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLlRpY2tzIGlzIGEgcHJpbWl0aXZlIHR5cGUgZm9yIGVuY29kaW5nIFRpbWUgdmFsdWVzLlxuXHRcdCAqICAgICAgICAgVG9uZS5UaWNrcyBjYW4gYmUgY29uc3RydWN0ZWQgd2l0aCBvciB3aXRob3V0IHRoZSBgbmV3YCBrZXl3b3JkLiBUb25lLlRpY2tzIGNhbiBiZSBwYXNzZWRcblx0XHQgKiAgICAgICAgIGludG8gdGhlIHBhcmFtZXRlciBvZiBhbnkgbWV0aG9kIHdoaWNoIHRha2VzIHRpbWUgYXMgYW4gYXJndW1lbnQuXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5UcmFuc3BvcnRUaW1lfVxuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmd8TnVtYmVyfSAgdmFsICAgIFRoZSB0aW1lIHZhbHVlLlxuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmc9fSAgdW5pdHMgIFRoZSB1bml0cyBvZiB0aGUgdmFsdWUuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIHQgPSBUb25lLlRpY2tzKFwiNG5cIik7Ly9hIHF1YXJ0ZXIgbm90ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrcyA9IGZ1bmN0aW9uICh2YWwsIHVuaXRzKSB7XG5cdCAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBUb25lLlRpY2tzKSB7XG5cdCAgICAgICAgICAgIFRvbmUuVHJhbnNwb3J0VGltZS5jYWxsKHRoaXMsIHZhbCwgdW5pdHMpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgVG9uZS5UaWNrcyh2YWwsIHVuaXRzKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5UaWNrcywgVG9uZS5UcmFuc3BvcnRUaW1lKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdCB1bml0cyBpZiBub25lIGFyZSBnaXZlbi5cblx0XHQgKiAgQHR5cGUge1N0cmluZ31cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGlja3MucHJvdG90eXBlLl9kZWZhdWx0VW5pdHMgPSAnaSc7XG5cdCAgICAvKipcblx0XHQgKiBHZXQgdGhlIGN1cnJlbnQgdGltZSBpbiB0aGUgZ2l2ZW4gdW5pdHNcblx0XHQgKiBAcmV0dXJuIHtUaWNrc31cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrcy5wcm90b3R5cGUuX25vdyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gVG9uZS5UcmFuc3BvcnQudGlja3M7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGJlYXRzIGluIHRoZSBjdXJyZW50IHVuaXRzXG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfSBiZWF0c1xuXHRcdCAqICBAcmV0dXJuICB7TnVtYmVyfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UaWNrcy5wcm90b3R5cGUuX2JlYXRzVG9Vbml0cyA9IGZ1bmN0aW9uIChiZWF0cykge1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9nZXRQUFEoKSAqIGJlYXRzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIHNlY29uZCBpbiB0aGUgY3VycmVudCB1bml0c1xuXHRcdCAqICBAcGFyYW0ge1NlY29uZHN9IHNlY29uZHNcblx0XHQgKiAgQHJldHVybiAge051bWJlcn1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGlja3MucHJvdG90eXBlLl9zZWNvbmRzVG9Vbml0cyA9IGZ1bmN0aW9uIChzZWNvbmRzKSB7XG5cdCAgICAgICAgcmV0dXJuIHNlY29uZHMgLyAoNjAgLyB0aGlzLl9nZXRCcG0oKSkgKiB0aGlzLl9nZXRQUFEoKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJucyB0aGUgdmFsdWUgb2YgYSB0aWNrIGluIHRoZSBjdXJyZW50IHRpbWUgdW5pdHNcblx0XHQgKiAgQHBhcmFtIHtUaWNrc30gdGlja3Ncblx0XHQgKiAgQHJldHVybiAge051bWJlcn1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVGlja3MucHJvdG90eXBlLl90aWNrc1RvVW5pdHMgPSBmdW5jdGlvbiAodGlja3MpIHtcblx0ICAgICAgICByZXR1cm4gdGlja3M7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybiB0aGUgdGltZSBpbiB0aWNrc1xuXHRcdCAqICBAcmV0dXJuICB7VGlja3N9XG5cdFx0ICovXG5cdCAgICBUb25lLlRpY2tzLnByb3RvdHlwZS50b1RpY2tzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJuIHRoZSB0aW1lIGluIHRpY2tzXG5cdFx0ICogIEByZXR1cm4gIHtUaWNrc31cblx0XHQgKi9cblx0ICAgIFRvbmUuVGlja3MucHJvdG90eXBlLnRvU2Vjb25kcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgLyB0aGlzLl9nZXRQUFEoKSAqICg2MCAvIHRoaXMuX2dldEJwbSgpKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5UaWNrcztcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLlRyYW5zcG9ydEV2ZW50IGlzIGFuIGludGVybmFsIGNsYXNzIHVzZWQgYnkgKFRvbmUuVHJhbnNwb3J0KVtUcmFuc3BvcnRdXG5cdFx0ICogICAgICAgICB0byBzY2hlZHVsZSBldmVudHMuIERvIG5vIGludm9rZSB0aGlzIGNsYXNzIGRpcmVjdGx5LCBpdCBpc1xuXHRcdCAqICAgICAgICAgaGFuZGxlZCBmcm9tIHdpdGhpbiBUb25lLlRyYW5zcG9ydC5cblx0XHQgKiAgQGV4dGVuZHMge1RvbmV9XG5cdFx0ICogIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydEV2ZW50ID0gZnVuY3Rpb24gKFRyYW5zcG9ydCwgb3B0aW9ucykge1xuXHQgICAgICAgIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRBcmcob3B0aW9ucywgVG9uZS5UcmFuc3BvcnRFdmVudC5kZWZhdWx0cyk7XG5cdCAgICAgICAgVG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBUcmFuc3BvcnQgdGhhdCBjcmVhdGVkIGl0XG5cdFx0XHQgKiBAdHlwZSB7VG9uZS5UcmFuc3BvcnR9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLlRyYW5zcG9ydCA9IFRyYW5zcG9ydDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSB1bmlxdWUgaWQgb2YgdGhlIGV2ZW50XG5cdFx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5pZCA9IFRvbmUuVHJhbnNwb3J0RXZlbnQuX2V2ZW50SWQrKztcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSB0aW1lIHRoZSBldmVudCBzdGFydHNcblx0XHRcdCAqIEB0eXBlIHtUaWNrc31cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMudGltZSA9IFRvbmUuVGlja3Mob3B0aW9ucy50aW1lKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSBjYWxsYmFjayB0byBpbnZva2Vcblx0XHRcdCAqIEB0eXBlIHtGdW5jdGlvbn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuY2FsbGJhY2sgPSBvcHRpb25zLmNhbGxiYWNrO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogSWYgdGhlIGV2ZW50IHNob3VsZCBiZSByZW1vdmVkIGFmdGVyIGJlaW5nIGNyZWF0ZWQuXG5cdFx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9vbmNlID0gb3B0aW9ucy5vbmNlO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuVHJhbnNwb3J0RXZlbnQpO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGRlZmF1bHRzXG5cdFx0ICogQHN0YXRpY1xuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydEV2ZW50LmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdvbmNlJzogZmFsc2UsXG5cdCAgICAgICAgJ2NhbGxiYWNrJzogVG9uZS5ub09wXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogQ3VycmVudCBJRCBjb3VudGVyXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAc3RhdGljXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0RXZlbnQuX2V2ZW50SWQgPSAwO1xuXHQgICAgLyoqXG5cdFx0ICogSW52b2tlIHRoZSBldmVudCBjYWxsYmFjay5cblx0XHQgKiBAcGFyYW0gIHtUaW1lfSB0aW1lICBUaGUgQXVkaW9Db250ZXh0IHRpbWUgaW4gc2Vjb25kcyBvZiB0aGUgZXZlbnRcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0RXZlbnQucHJvdG90eXBlLmludm9rZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2spIHtcblx0ICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh0aW1lKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX29uY2UgJiYgdGhpcy5UcmFuc3BvcnQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuVHJhbnNwb3J0LmNsZWFyKHRoaXMuaWQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIENsZWFuIHVwXG5cdFx0ICogQHJldHVybiB7VG9uZS5UcmFuc3BvcnRFdmVudH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UcmFuc3BvcnRFdmVudC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5UcmFuc3BvcnQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuY2FsbGJhY2sgPSBudWxsO1xuXHQgICAgICAgIHRoaXMudGltZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuVHJhbnNwb3J0RXZlbnQ7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgVG9uZS5UcmFuc3BvcnRSZXBlYXRFdmVudCBpcyBhbiBpbnRlcm5hbCBjbGFzcyB1c2VkIGJ5IFRvbmUuVHJhbnNwb3J0XG5cdFx0ICogICAgICAgICB0byBzY2hlZHVsZSByZXBlYXQgZXZlbnRzLiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5LlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5UcmFuc3BvcnRFdmVudH1cblx0XHQgKiAgQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0UmVwZWF0RXZlbnQgPSBmdW5jdGlvbiAoVHJhbnNwb3J0LCBvcHRpb25zKSB7XG5cdCAgICAgICAgVG9uZS5UcmFuc3BvcnRFdmVudC5jYWxsKHRoaXMsIFRyYW5zcG9ydCwgb3B0aW9ucyk7XG5cdCAgICAgICAgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdEFyZyhvcHRpb25zLCBUb25lLlRyYW5zcG9ydFJlcGVhdEV2ZW50LmRlZmF1bHRzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFdoZW4gdGhlIGV2ZW50IHNob3VsZCBzdG9wIHJlcGVhdGluZ1xuXHRcdFx0ICogQHR5cGUge1RpY2tzfVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZHVyYXRpb24gPSBUb25lLlRpY2tzKG9wdGlvbnMuZHVyYXRpb24pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIGludGVydmFsIG9mIHRoZSByZXBlYXRlZCBldmVudFxuXHRcdFx0ICogQHR5cGUge1RpY2tzfVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2ludGVydmFsID0gVG9uZS5UaWNrcyhvcHRpb25zLmludGVydmFsKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSBJRCBvZiB0aGUgY3VycmVudCB0aW1lbGluZSBldmVudFxuXHRcdFx0ICogQHR5cGUge051bWJlcn1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9jdXJyZW50SWQgPSAtMTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSBJRCBvZiB0aGUgbmV4dCB0aW1lbGluZSBldmVudFxuXHRcdFx0ICogQHR5cGUge051bWJlcn1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9uZXh0SWQgPSAtMTtcblx0ICAgICAgICAvKipcblx0XHRcdCAgKiBUaGUgdGltZSBvZiB0aGUgbmV4dCBldmVudFxuXHRcdFx0ICAqIEB0eXBlIHtUaWNrc31cblx0XHRcdCAgKiBAcHJpdmF0ZVxuXHRcdFx0ICAqL1xuXHQgICAgICAgIHRoaXMuX25leHRUaWNrID0gdGhpcy50aW1lO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogYSByZWZlcmVuY2UgdG8gdGhlIGJvdW5kIHN0YXJ0IG1ldGhvZFxuXHRcdFx0ICogQHR5cGUge0Z1bmN0aW9ufVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2JvdW5kUmVzdGFydCA9IHRoaXMuX3Jlc3RhcnQuYmluZCh0aGlzKTtcblx0ICAgICAgICB0aGlzLlRyYW5zcG9ydC5vbignc3RhcnQgbG9vcFN0YXJ0JywgdGhpcy5fYm91bmRSZXN0YXJ0KTtcblx0ICAgICAgICB0aGlzLl9yZXN0YXJ0KCk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5UcmFuc3BvcnRSZXBlYXRFdmVudCwgVG9uZS5UcmFuc3BvcnRFdmVudCk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgZGVmYXVsdHNcblx0XHQgKiBAc3RhdGljXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0UmVwZWF0RXZlbnQuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2R1cmF0aW9uJzogSW5maW5pdHksXG5cdCAgICAgICAgJ2ludGVydmFsJzogMVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIEludm9rZSB0aGUgY2FsbGJhY2suIFJldHVybnMgdGhlIHRpY2sgdGltZSB3aGljaFxuXHRcdCAqIHRoZSBuZXh0IGV2ZW50IHNob3VsZCBiZSBzY2hlZHVsZWQgYXQuXG5cdFx0ICogQHBhcmFtICB7TnVtYmVyfSB0aW1lICBUaGUgQXVkaW9Db250ZXh0IHRpbWUgaW4gc2Vjb25kcyBvZiB0aGUgZXZlbnRcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0UmVwZWF0RXZlbnQucHJvdG90eXBlLmludm9rZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgLy9jcmVhdGUgbW9yZSBldmVudHMgaWYgbmVjZXNzYXJ5XG5cdCAgICAgICAgdGhpcy5fY3JlYXRlRXZlbnRzKHRpbWUpO1xuXHQgICAgICAgIC8vY2FsbCB0aGUgc3VwZXIgY2xhc3Ncblx0ICAgICAgICBUb25lLlRyYW5zcG9ydEV2ZW50LnByb3RvdHlwZS5pbnZva2UuY2FsbCh0aGlzLCB0aW1lKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBQdXNoIG1vcmUgZXZlbnRzIG9udG8gdGhlIHRpbWVsaW5lIHRvIGtlZXAgdXAgd2l0aCB0aGUgcG9zaXRpb24gb2YgdGhlIHRpbWVsaW5lXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0UmVwZWF0RXZlbnQucHJvdG90eXBlLl9jcmVhdGVFdmVudHMgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIC8vIHNjaGVkdWxlIHRoZSBuZXh0IGV2ZW50XG5cdCAgICAgICAgdmFyIHRpY2tzID0gdGhpcy5UcmFuc3BvcnQuZ2V0VGlja3NBdFRpbWUodGltZSk7XG5cdCAgICAgICAgaWYgKHRpY2tzID49IHRoaXMudGltZSAmJiB0aWNrcyA+PSB0aGlzLl9uZXh0VGljayAmJiB0aGlzLl9uZXh0VGljayArIHRoaXMuX2ludGVydmFsIDwgdGhpcy50aW1lICsgdGhpcy5kdXJhdGlvbikge1xuXHQgICAgICAgICAgICB0aGlzLl9uZXh0VGljayArPSB0aGlzLl9pbnRlcnZhbDtcblx0ICAgICAgICAgICAgdGhpcy5fY3VycmVudElkID0gdGhpcy5fbmV4dElkO1xuXHQgICAgICAgICAgICB0aGlzLl9uZXh0SWQgPSB0aGlzLlRyYW5zcG9ydC5zY2hlZHVsZU9uY2UodGhpcy5pbnZva2UuYmluZCh0aGlzKSwgVG9uZS5UaWNrcyh0aGlzLl9uZXh0VGljaykpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBQdXNoIG1vcmUgZXZlbnRzIG9udG8gdGhlIHRpbWVsaW5lIHRvIGtlZXAgdXAgd2l0aCB0aGUgcG9zaXRpb24gb2YgdGhlIHRpbWVsaW5lXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0UmVwZWF0RXZlbnQucHJvdG90eXBlLl9yZXN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aGlzLlRyYW5zcG9ydC5jbGVhcih0aGlzLl9jdXJyZW50SWQpO1xuXHQgICAgICAgIHRoaXMuVHJhbnNwb3J0LmNsZWFyKHRoaXMuX25leHRJZCk7XG5cdCAgICAgICAgdGhpcy5fbmV4dFRpY2sgPSB0aGlzLnRpbWU7XG5cdCAgICAgICAgdmFyIHRpY2tzID0gdGhpcy5UcmFuc3BvcnQuZ2V0VGlja3NBdFRpbWUodGltZSk7XG5cdCAgICAgICAgaWYgKHRpY2tzID4gdGhpcy50aW1lKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX25leHRUaWNrID0gdGhpcy50aW1lICsgTWF0aC5jZWlsKCh0aWNrcyAtIHRoaXMudGltZSkgLyB0aGlzLl9pbnRlcnZhbCkgKiB0aGlzLl9pbnRlcnZhbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fY3VycmVudElkID0gdGhpcy5UcmFuc3BvcnQuc2NoZWR1bGVPbmNlKHRoaXMuaW52b2tlLmJpbmQodGhpcyksIFRvbmUuVGlja3ModGhpcy5fbmV4dFRpY2spKTtcblx0ICAgICAgICB0aGlzLl9uZXh0VGljayArPSB0aGlzLl9pbnRlcnZhbDtcblx0ICAgICAgICB0aGlzLl9uZXh0SWQgPSB0aGlzLlRyYW5zcG9ydC5zY2hlZHVsZU9uY2UodGhpcy5pbnZva2UuYmluZCh0aGlzKSwgVG9uZS5UaWNrcyh0aGlzLl9uZXh0VGljaykpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIENsZWFuIHVwXG5cdFx0ICogQHJldHVybiB7VG9uZS5UcmFuc3BvcnRSZXBlYXRFdmVudH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UcmFuc3BvcnRSZXBlYXRFdmVudC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLlRyYW5zcG9ydC5jbGVhcih0aGlzLl9jdXJyZW50SWQpO1xuXHQgICAgICAgIHRoaXMuVHJhbnNwb3J0LmNsZWFyKHRoaXMuX25leHRJZCk7XG5cdCAgICAgICAgdGhpcy5UcmFuc3BvcnQub2ZmKCdzdGFydCBsb29wU3RhcnQnLCB0aGlzLl9ib3VuZFJlc3RhcnQpO1xuXHQgICAgICAgIHRoaXMuX2JvdW5kQ3JlYXRlRXZlbnRzID0gbnVsbDtcblx0ICAgICAgICBUb25lLlRyYW5zcG9ydEV2ZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5kdXJhdGlvbiA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlRyYW5zcG9ydFJlcGVhdEV2ZW50O1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIFRyYW5zcG9ydCBmb3IgdGltaW5nIG11c2ljYWwgZXZlbnRzLlxuXHRcdCAqICAgICAgICAgIFN1cHBvcnRzIHRlbXBvIGN1cnZlcyBhbmQgdGltZSBjaGFuZ2VzLiBVbmxpa2UgYnJvd3Nlci1iYXNlZCB0aW1pbmcgKHNldEludGVydmFsLCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUpXG5cdFx0ICogICAgICAgICAgVG9uZS5UcmFuc3BvcnQgdGltaW5nIGV2ZW50cyBwYXNzIGluIHRoZSBleGFjdCB0aW1lIG9mIHRoZSBzY2hlZHVsZWQgZXZlbnRcblx0XHQgKiAgICAgICAgICBpbiB0aGUgYXJndW1lbnQgb2YgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLiBQYXNzIHRoYXQgdGltZSB2YWx1ZSB0byB0aGUgb2JqZWN0XG5cdFx0ICogICAgICAgICAgeW91J3JlIHNjaGVkdWxpbmcuIDxicj48YnI+XG5cdFx0ICogICAgICAgICAgQSBzaW5nbGUgdHJhbnNwb3J0IGlzIGNyZWF0ZWQgZm9yIHlvdSB3aGVuIHRoZSBsaWJyYXJ5IGlzIGluaXRpYWxpemVkLlxuXHRcdCAqICAgICAgICAgIDxicj48YnI+XG5cdFx0ICogICAgICAgICAgVGhlIHRyYW5zcG9ydCBlbWl0cyB0aGUgZXZlbnRzOiBcInN0YXJ0XCIsIFwic3RvcFwiLCBcInBhdXNlXCIsIGFuZCBcImxvb3BcIiB3aGljaCBhcmVcblx0XHQgKiAgICAgICAgICBjYWxsZWQgd2l0aCB0aGUgdGltZSBvZiB0aGF0IGV2ZW50IGFzIHRoZSBhcmd1bWVudC5cblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5FbWl0dGVyfVxuXHRcdCAqICBAc2luZ2xldG9uXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9yZXBlYXRlZCBldmVudCBldmVyeSA4dGggbm90ZVxuXHRcdCAqIFRvbmUuVHJhbnNwb3J0LnNjaGVkdWxlUmVwZWF0KGZ1bmN0aW9uKHRpbWUpe1xuXHRcdCAqIFx0Ly9kbyBzb21ldGhpbmcgd2l0aCB0aGUgdGltZVxuXHRcdCAqIH0sIFwiOG5cIik7XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9zY2hlZHVsZSBhbiBldmVudCBvbiB0aGUgMTZ0aCBtZWFzdXJlXG5cdFx0ICogVG9uZS5UcmFuc3BvcnQuc2NoZWR1bGUoZnVuY3Rpb24odGltZSl7XG5cdFx0ICogXHQvL2RvIHNvbWV0aGluZyB3aXRoIHRoZSB0aW1lXG5cdFx0ICogfSwgXCIxNjowOjBcIik7XG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkVtaXR0ZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgICBUb25lLmdldENvbnRleHQoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgICAgICAgICAvL1x0TE9PUElOR1xuXHQgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAgICAgICAgIC8qKlxuXHRcdFx0XHQgKiBcdElmIHRoZSB0cmFuc3BvcnQgbG9vcHMgb3Igbm90LlxuXHRcdFx0XHQgKiAgQHR5cGUge2Jvb2xlYW59XG5cdFx0XHRcdCAqL1xuXHQgICAgICAgICAgICB0aGlzLmxvb3AgPSBmYWxzZTtcblx0ICAgICAgICAgICAgLyoqXG5cdFx0XHRcdCAqIFx0VGhlIGxvb3Agc3RhcnQgcG9zaXRpb24gaW4gdGlja3Ncblx0XHRcdFx0ICogIEB0eXBlIHtUaWNrc31cblx0XHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHRcdCAqL1xuXHQgICAgICAgICAgICB0aGlzLl9sb29wU3RhcnQgPSAwO1xuXHQgICAgICAgICAgICAvKipcblx0XHRcdFx0ICogXHRUaGUgbG9vcCBlbmQgcG9zaXRpb24gaW4gdGlja3Ncblx0XHRcdFx0ICogIEB0eXBlIHtUaWNrc31cblx0XHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHRcdCAqL1xuXHQgICAgICAgICAgICB0aGlzLl9sb29wRW5kID0gMDtcblx0ICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgICAgICAgICAgLy9cdENMT0NLL1RFTVBPXG5cdCAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgICAgICAgICAgLyoqXG5cdFx0XHRcdCAqICBQdWxzZXMgcGVyIHF1YXJ0ZXIgaXMgdGhlIG51bWJlciBvZiB0aWNrcyBwZXIgcXVhcnRlciBub3RlLlxuXHRcdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdFx0ICogIEB0eXBlICB7TnVtYmVyfVxuXHRcdFx0XHQgKi9cblx0ICAgICAgICAgICAgdGhpcy5fcHBxID0gVHJhbnNwb3J0Q29uc3RydWN0b3IuZGVmYXVsdHMuUFBRO1xuXHQgICAgICAgICAgICAvKipcblx0XHRcdFx0ICogIHdhdGNoZXMgdGhlIG1haW4gb3NjaWxsYXRvciBmb3IgdGltaW5nIHRpY2tzXG5cdFx0XHRcdCAqICBpbml0aWFsbHkgc3RhcnRzIGF0IDEyMGJwbVxuXHRcdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdFx0ICogIEB0eXBlIHtUb25lLkNsb2NrfVxuXHRcdFx0XHQgKi9cblx0ICAgICAgICAgICAgdGhpcy5fY2xvY2sgPSBuZXcgVG9uZS5DbG9jayh7XG5cdCAgICAgICAgICAgICAgICAnY2FsbGJhY2snOiB0aGlzLl9wcm9jZXNzVGljay5iaW5kKHRoaXMpLFxuXHQgICAgICAgICAgICAgICAgJ2ZyZXF1ZW5jeSc6IDBcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHRoaXMuX2JpbmRDbG9ja0V2ZW50cygpO1xuXHQgICAgICAgICAgICAvKipcblx0XHRcdFx0ICogIFRoZSBCZWF0cyBQZXIgTWludXRlIG9mIHRoZSBUcmFuc3BvcnQuXG5cdFx0XHRcdCAqICBAdHlwZSB7QlBNfVxuXHRcdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdFx0ICogVG9uZS5UcmFuc3BvcnQuYnBtLnZhbHVlID0gODA7XG5cdFx0XHRcdCAqIC8vcmFtcCB0aGUgYnBtIHRvIDEyMCBvdmVyIDEwIHNlY29uZHNcblx0XHRcdFx0ICogVG9uZS5UcmFuc3BvcnQuYnBtLnJhbXBUbygxMjAsIDEwKTtcblx0XHRcdFx0ICovXG5cdCAgICAgICAgICAgIHRoaXMuYnBtID0gdGhpcy5fY2xvY2suZnJlcXVlbmN5O1xuXHQgICAgICAgICAgICB0aGlzLmJwbS5fdG9Vbml0cyA9IHRoaXMuX3RvVW5pdHMuYmluZCh0aGlzKTtcblx0ICAgICAgICAgICAgdGhpcy5icG0uX2Zyb21Vbml0cyA9IHRoaXMuX2Zyb21Vbml0cy5iaW5kKHRoaXMpO1xuXHQgICAgICAgICAgICB0aGlzLmJwbS51bml0cyA9IFRvbmUuVHlwZS5CUE07XG5cdCAgICAgICAgICAgIHRoaXMuYnBtLnZhbHVlID0gVHJhbnNwb3J0Q29uc3RydWN0b3IuZGVmYXVsdHMuYnBtO1xuXHQgICAgICAgICAgICB0aGlzLl9yZWFkT25seSgnYnBtJyk7XG5cdCAgICAgICAgICAgIC8qKlxuXHRcdFx0XHQgKiAgVGhlIHRpbWUgc2lnbmF0dXJlLCBvciBtb3JlIGFjY3VyYXRlbHkgdGhlIG51bWVyYXRvclxuXHRcdFx0XHQgKiAgb2YgdGhlIHRpbWUgc2lnbmF0dXJlIG92ZXIgYSBkZW5vbWluYXRvciBvZiA0LlxuXHRcdFx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHRcdCAqL1xuXHQgICAgICAgICAgICB0aGlzLl90aW1lU2lnbmF0dXJlID0gVHJhbnNwb3J0Q29uc3RydWN0b3IuZGVmYXVsdHMudGltZVNpZ25hdHVyZTtcblx0ICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgICAgICAgICAgLy9cdFRJTUVMSU5FIEVWRU5UU1xuXHQgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAgICAgICAgIC8qKlxuXHRcdFx0XHQgKiAgQWxsIHRoZSBldmVudHMgaW4gYW4gb2JqZWN0IHRvIGtlZXAgdHJhY2sgYnkgSURcblx0XHRcdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0XHQgKi9cblx0ICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVkRXZlbnRzID0ge307XG5cdCAgICAgICAgICAgIC8qKlxuXHRcdFx0XHQgKiBcdFRoZSBzY2hlZHVsZWQgZXZlbnRzLlxuXHRcdFx0XHQgKiAgQHR5cGUge1RvbmUuVGltZWxpbmV9XG5cdFx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0XHQgKi9cblx0ICAgICAgICAgICAgdGhpcy5fdGltZWxpbmUgPSBuZXcgVG9uZS5UaW1lbGluZSgpO1xuXHQgICAgICAgICAgICAvKipcblx0XHRcdFx0ICogIFJlcGVhdGVkIGV2ZW50c1xuXHRcdFx0XHQgKiAgQHR5cGUge0FycmF5fVxuXHRcdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdFx0ICovXG5cdCAgICAgICAgICAgIHRoaXMuX3JlcGVhdGVkRXZlbnRzID0gbmV3IFRvbmUuSW50ZXJ2YWxUaW1lbGluZSgpO1xuXHQgICAgICAgICAgICAvKipcblx0XHRcdFx0ICogIEFsbCBvZiB0aGUgc3luY2VkIFNpZ25hbHNcblx0XHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHRcdCAqICBAdHlwZSB7QXJyYXl9XG5cdFx0XHRcdCAqL1xuXHQgICAgICAgICAgICB0aGlzLl9zeW5jZWRTaWduYWxzID0gW107XG5cdCAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAgICAgICAgIC8vXHRTV0lOR1xuXHQgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAgICAgICAgIC8qKlxuXHRcdFx0XHQgKiAgVGhlIHN1YmRpdmlzaW9uIG9mIHRoZSBzd2luZ1xuXHRcdFx0XHQgKiAgQHR5cGUgIHtUaWNrc31cblx0XHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHRcdCAqL1xuXHQgICAgICAgICAgICB0aGlzLl9zd2luZ1RpY2tzID0gVHJhbnNwb3J0Q29uc3RydWN0b3IuZGVmYXVsdHMuUFBRIC8gMjtcblx0ICAgICAgICAgICAgLy84blxuXHQgICAgICAgICAgICAvKipcblx0XHRcdFx0ICogIFRoZSBzd2luZyBhbW91bnRcblx0XHRcdFx0ICogIEB0eXBlIHtOb3JtYWxSYW5nZX1cblx0XHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHRcdCAqL1xuXHQgICAgICAgICAgICB0aGlzLl9zd2luZ0Ftb3VudCA9IDA7XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlRyYW5zcG9ydCwgVG9uZS5FbWl0dGVyKTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgZGVmYXVsdHNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0LmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdicG0nOiAxMjAsXG5cdCAgICAgICAgJ3N3aW5nJzogMCxcblx0ICAgICAgICAnc3dpbmdTdWJkaXZpc2lvbic6ICc4bicsXG5cdCAgICAgICAgJ3RpbWVTaWduYXR1cmUnOiA0LFxuXHQgICAgICAgICdsb29wU3RhcnQnOiAwLFxuXHQgICAgICAgICdsb29wRW5kJzogJzRtJyxcblx0ICAgICAgICAnUFBRJzogMTkyXG5cdCAgICB9O1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9cdFRJQ0tTXG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgY2FsbGVkIG9uIGV2ZXJ5IHRpY2tcblx0XHQgKiAgQHBhcmFtICAge251bWJlcn0gdGlja1RpbWUgY2xvY2sgcmVsYXRpdmUgdGljayB0aW1lXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydC5wcm90b3R5cGUuX3Byb2Nlc3NUaWNrID0gZnVuY3Rpb24gKHRpY2tUaW1lLCB0aWNrcykge1xuXHQgICAgICAgIC8vaGFuZGxlIHN3aW5nXG5cdCAgICAgICAgaWYgKHRoaXMuX3N3aW5nQW1vdW50ID4gMCAmJiB0aWNrcyAlIHRoaXMuX3BwcSAhPT0gMCAmJiAvL25vdCBvbiBhIGRvd25iZWF0XG5cdCAgICAgICAgICAgIHRpY2tzICUgKHRoaXMuX3N3aW5nVGlja3MgKiAyKSAhPT0gMCkge1xuXHQgICAgICAgICAgICAvL2FkZCBzb21lIHN3aW5nXG5cdCAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IHRpY2tzICUgKHRoaXMuX3N3aW5nVGlja3MgKiAyKSAvICh0aGlzLl9zd2luZ1RpY2tzICogMik7XG5cdCAgICAgICAgICAgIHZhciBhbW91bnQgPSBNYXRoLnNpbihwcm9ncmVzcyAqIE1hdGguUEkpICogdGhpcy5fc3dpbmdBbW91bnQ7XG5cdCAgICAgICAgICAgIHRpY2tUaW1lICs9IFRvbmUuVGlja3ModGhpcy5fc3dpbmdUaWNrcyAqIDIgLyAzKS50b1NlY29uZHMoKSAqIGFtb3VudDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9kbyB0aGUgbG9vcCB0ZXN0XG5cdCAgICAgICAgaWYgKHRoaXMubG9vcCkge1xuXHQgICAgICAgICAgICBpZiAodGlja3MgPj0gdGhpcy5fbG9vcEVuZCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdsb29wRW5kJywgdGlja1RpbWUpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fY2xvY2suc2V0VGlja3NBdFRpbWUodGhpcy5fbG9vcFN0YXJ0LCB0aWNrVGltZSk7XG5cdCAgICAgICAgICAgICAgICB0aWNrcyA9IHRoaXMuX2xvb3BTdGFydDtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnbG9vcFN0YXJ0JywgdGlja1RpbWUsIHRoaXMuX2Nsb2NrLmdldFNlY29uZHNBdFRpbWUodGlja1RpbWUpKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnbG9vcCcsIHRpY2tUaW1lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICAvL2ludm9rZSB0aGUgdGltZWxpbmUgZXZlbnRzIHNjaGVkdWxlZCBvbiB0aGlzIHRpY2tcblx0ICAgICAgICB0aGlzLl90aW1lbGluZS5mb3JFYWNoQXRUaW1lKHRpY2tzLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgZXZlbnQuaW52b2tlKHRpY2tUaW1lKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0U0NIRURVTEFCTEUgRVZFTlRTXG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgU2NoZWR1bGUgYW4gZXZlbnQgYWxvbmcgdGhlIHRpbWVsaW5lLlxuXHRcdCAqICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBhdCB0aGUgdGltZS5cblx0XHQgKiAgQHBhcmFtIHtUcmFuc3BvcnRUaW1lfSAgdGltZSBUaGUgdGltZSB0byBpbnZva2UgdGhlIGNhbGxiYWNrIGF0LlxuXHRcdCAqICBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBpZCBvZiB0aGUgZXZlbnQgd2hpY2ggY2FuIGJlIHVzZWQgZm9yIGNhbmNlbGluZyB0aGUgZXZlbnQuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy90cmlnZ2VyIHRoZSBjYWxsYmFjayB3aGVuIHRoZSBUcmFuc3BvcnQgcmVhY2hlcyB0aGUgZGVzaXJlZCB0aW1lXG5cdFx0ICogVG9uZS5UcmFuc3BvcnQuc2NoZWR1bGUoZnVuY3Rpb24odGltZSl7XG5cdFx0ICogXHRlbnZlbG9wZS50cmlnZ2VyQXR0YWNrKHRpbWUpO1xuXHRcdCAqIH0sIFwiMTI4aVwiKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0LnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGltZSkge1xuXHQgICAgICAgIHZhciBldmVudCA9IG5ldyBUb25lLlRyYW5zcG9ydEV2ZW50KHRoaXMsIHtcblx0ICAgICAgICAgICAgJ3RpbWUnOiBUb25lLlRyYW5zcG9ydFRpbWUodGltZSksXG5cdCAgICAgICAgICAgICdjYWxsYmFjayc6IGNhbGxiYWNrXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX2FkZEV2ZW50KGV2ZW50LCB0aGlzLl90aW1lbGluZSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFNjaGVkdWxlIGEgcmVwZWF0ZWQgZXZlbnQgYWxvbmcgdGhlIHRpbWVsaW5lLiBUaGUgZXZlbnQgd2lsbCBmaXJlXG5cdFx0ICogIGF0IHRoZSBgaW50ZXJ2YWxgIHN0YXJ0aW5nIGF0IHRoZSBgc3RhcnRUaW1lYCBhbmQgZm9yIHRoZSBzcGVjaWZpZWRcblx0XHQgKiAgYGR1cmF0aW9uYC5cblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb259ICBjYWxsYmFjayAgIFRoZSBjYWxsYmFjayB0byBpbnZva2UuXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9ICAgIGludGVydmFsICAgVGhlIGR1cmF0aW9uIGJldHdlZW4gc3VjY2Vzc2l2ZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy4gTXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlci5cblx0XHQgKiAgQHBhcmFtICB7VHJhbnNwb3J0VGltZT19ICAgIHN0YXJ0VGltZSAgV2hlbiBhbG9uZyB0aGUgdGltZWxpbmUgdGhlIGV2ZW50cyBzaG91bGRcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCBiZWluZyBpbnZva2VkLlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFtkdXJhdGlvbj1JbmZpbml0eV0gSG93IGxvbmcgdGhlIGV2ZW50IHNob3VsZCByZXBlYXQuXG5cdFx0ICogIEByZXR1cm4gIHtOdW1iZXJ9ICAgIFRoZSBJRCBvZiB0aGUgc2NoZWR1bGVkIGV2ZW50LiBVc2UgdGhpcyB0byBjYW5jZWxcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBldmVudC5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2EgY2FsbGJhY2sgaW52b2tlZCBldmVyeSBlaWdodGggbm90ZSBhZnRlciB0aGUgZmlyc3QgbWVhc3VyZVxuXHRcdCAqIFRvbmUuVHJhbnNwb3J0LnNjaGVkdWxlUmVwZWF0KGNhbGxiYWNrLCBcIjhuXCIsIFwiMW1cIik7XG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydC5wcm90b3R5cGUuc2NoZWR1bGVSZXBlYXQgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGludGVydmFsLCBzdGFydFRpbWUsIGR1cmF0aW9uKSB7XG5cdCAgICAgICAgdmFyIGV2ZW50ID0gbmV3IFRvbmUuVHJhbnNwb3J0UmVwZWF0RXZlbnQodGhpcywge1xuXHQgICAgICAgICAgICAnY2FsbGJhY2snOiBjYWxsYmFjayxcblx0ICAgICAgICAgICAgJ2ludGVydmFsJzogVG9uZS5UaW1lKGludGVydmFsKSxcblx0ICAgICAgICAgICAgJ3RpbWUnOiBUb25lLlRyYW5zcG9ydFRpbWUoc3RhcnRUaW1lKSxcblx0ICAgICAgICAgICAgJ2R1cmF0aW9uJzogVG9uZS5UaW1lKFRvbmUuZGVmYXVsdEFyZyhkdXJhdGlvbiwgSW5maW5pdHkpKVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIC8va2ljayBpdCBvZmYgaWYgdGhlIFRyYW5zcG9ydCBpcyBzdGFydGVkXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX2FkZEV2ZW50KGV2ZW50LCB0aGlzLl9yZXBlYXRlZEV2ZW50cyk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFNjaGVkdWxlIGFuIGV2ZW50IHRoYXQgd2lsbCBiZSByZW1vdmVkIGFmdGVyIGl0IGlzIGludm9rZWQuXG5cdFx0ICogIE5vdGUgdGhhdCBpZiB0aGUgZ2l2ZW4gdGltZSBpcyBsZXNzIHRoYW4gdGhlIGN1cnJlbnQgdHJhbnNwb3J0IHRpbWUsXG5cdFx0ICogIHRoZSBldmVudCB3aWxsIGJlIGludm9rZWQgaW1tZWRpYXRlbHkuXG5cdFx0ICogIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBpbnZva2Ugb25jZS5cblx0XHQgKiAgQHBhcmFtIHtUcmFuc3BvcnRUaW1lfSB0aW1lIFRoZSB0aW1lIHRoZSBjYWxsYmFjayBzaG91bGQgYmUgaW52b2tlZC5cblx0XHQgKiAgQHJldHVybnMge051bWJlcn0gVGhlIElEIG9mIHRoZSBzY2hlZHVsZWQgZXZlbnQuXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydC5wcm90b3R5cGUuc2NoZWR1bGVPbmNlID0gZnVuY3Rpb24gKGNhbGxiYWNrLCB0aW1lKSB7XG5cdCAgICAgICAgdmFyIGV2ZW50ID0gbmV3IFRvbmUuVHJhbnNwb3J0RXZlbnQodGhpcywge1xuXHQgICAgICAgICAgICAndGltZSc6IFRvbmUuVHJhbnNwb3J0VGltZSh0aW1lKSxcblx0ICAgICAgICAgICAgJ2NhbGxiYWNrJzogY2FsbGJhY2ssXG5cdCAgICAgICAgICAgICdvbmNlJzogdHJ1ZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9hZGRFdmVudChldmVudCwgdGhpcy5fdGltZWxpbmUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhciB0aGUgcGFzc2VkIGluIGV2ZW50IGlkIGZyb20gdGhlIHRpbWVsaW5lXG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfSBldmVudElkIFRoZSBpZCBvZiB0aGUgZXZlbnQuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlRyYW5zcG9ydH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UcmFuc3BvcnQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKGV2ZW50SWQpIHtcblx0ICAgICAgICBpZiAodGhpcy5fc2NoZWR1bGVkRXZlbnRzLmhhc093blByb3BlcnR5KGV2ZW50SWQpKSB7XG5cdCAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5fc2NoZWR1bGVkRXZlbnRzW2V2ZW50SWQudG9TdHJpbmcoKV07XG5cdCAgICAgICAgICAgIGl0ZW0udGltZWxpbmUucmVtb3ZlKGl0ZW0uZXZlbnQpO1xuXHQgICAgICAgICAgICBpdGVtLmV2ZW50LmRpc3Bvc2UoKTtcblx0ICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3NjaGVkdWxlZEV2ZW50c1tldmVudElkLnRvU3RyaW5nKCldO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBBZGQgYW4gZXZlbnQgdG8gdGhlIGNvcnJlY3QgdGltZWxpbmUuIEtlZXAgdHJhY2sgb2YgdGhlXG5cdFx0ICogdGltZWxpbmUgaXQgd2FzIGFkZGVkIHRvLlxuXHRcdCAqIEBwYXJhbSB7VG9uZS5UcmFuc3BvcnRFdmVudH1cdGV2ZW50XG5cdFx0ICogQHBhcmFtIHtUb25lLlRpbWVsaW5lfSB0aW1lbGluZVxuXHRcdCAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBldmVudCBpZCB3aGljaCB3YXMganVzdCBhZGRlZFxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydC5wcm90b3R5cGUuX2FkZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCB0aW1lbGluZSkge1xuXHQgICAgICAgIHRoaXMuX3NjaGVkdWxlZEV2ZW50c1tldmVudC5pZC50b1N0cmluZygpXSA9IHtcblx0ICAgICAgICAgICAgJ2V2ZW50JzogZXZlbnQsXG5cdCAgICAgICAgICAgICd0aW1lbGluZSc6IHRpbWVsaW5lXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB0aW1lbGluZS5hZGQoZXZlbnQpO1xuXHQgICAgICAgIHJldHVybiBldmVudC5pZDtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmVtb3ZlIHNjaGVkdWxlZCBldmVudHMgZnJvbSB0aGUgdGltZWxpbmUgYWZ0ZXJcblx0XHQgKiAgdGhlIGdpdmVuIHRpbWUuIFJlcGVhdGVkIGV2ZW50cyB3aWxsIGJlIHJlbW92ZWRcblx0XHQgKiAgaWYgdGhlaXIgc3RhcnRUaW1lIGlzIGFmdGVyIHRoZSBnaXZlbiB0aW1lXG5cdFx0ICogIEBwYXJhbSB7VHJhbnNwb3J0VGltZX0gW2FmdGVyPTBdIENsZWFyIGFsbCBldmVudHMgYWZ0ZXJcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyB0aW1lLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UcmFuc3BvcnR9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0LnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoYWZ0ZXIpIHtcblx0ICAgICAgICBhZnRlciA9IFRvbmUuZGVmYXVsdEFyZyhhZnRlciwgMCk7XG5cdCAgICAgICAgYWZ0ZXIgPSB0aGlzLnRvVGlja3MoYWZ0ZXIpO1xuXHQgICAgICAgIHRoaXMuX3RpbWVsaW5lLmZvckVhY2hGcm9tKGFmdGVyLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgdGhpcy5jbGVhcihldmVudC5pZCk7XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgICAgICB0aGlzLl9yZXBlYXRlZEV2ZW50cy5mb3JFYWNoRnJvbShhZnRlciwgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIHRoaXMuY2xlYXIoZXZlbnQuaWQpO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9cdFNUQVJUL1NUT1AvUEFVU0Vcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8qKlxuXHRcdCAqICBCaW5kIHN0YXJ0L3N0b3AvcGF1c2UgZXZlbnRzIGZyb20gdGhlIGNsb2NrIGFuZCBlbWl0IHRoZW0uXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydC5wcm90b3R5cGUuX2JpbmRDbG9ja0V2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLl9jbG9jay5vbignc3RhcnQnLCBmdW5jdGlvbiAodGltZSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIG9mZnNldCA9IFRvbmUuVGlja3Mob2Zmc2V0KS50b1NlY29uZHMoKTtcblx0ICAgICAgICAgICAgdGhpcy5lbWl0KCdzdGFydCcsIHRpbWUsIG9mZnNldCk7XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgICAgICB0aGlzLl9jbG9jay5vbignc3RvcCcsIGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZW1pdCgnc3RvcCcsIHRpbWUpO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICAgICAgdGhpcy5fY2xvY2sub24oJ3BhdXNlJywgZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICAgICAgdGhpcy5lbWl0KCdwYXVzZScsIHRpbWUpO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybnMgdGhlIHBsYXliYWNrIHN0YXRlIG9mIHRoZSBzb3VyY2UsIGVpdGhlciBcInN0YXJ0ZWRcIiwgXCJzdG9wcGVkXCIsIG9yIFwicGF1c2VkXCJcblx0XHQgKiAgQHR5cGUge1RvbmUuU3RhdGV9XG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5UcmFuc3BvcnQjXG5cdFx0ICogIEBuYW1lIHN0YXRlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5UcmFuc3BvcnQucHJvdG90eXBlLCAnc3RhdGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9jbG9jay5nZXRTdGF0ZUF0VGltZSh0aGlzLm5vdygpKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdGFydCB0aGUgdHJhbnNwb3J0IGFuZCBhbGwgc291cmNlcyBzeW5jZWQgdG8gdGhlIHRyYW5zcG9ydC5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XSBUaGUgdGltZSB3aGVuIHRoZSB0cmFuc3BvcnQgc2hvdWxkIHN0YXJ0LlxuXHRcdCAqICBAcGFyYW0gIHtUcmFuc3BvcnRUaW1lPX0gb2Zmc2V0IFRoZSB0aW1lbGluZSBvZmZzZXQgdG8gc3RhcnQgdGhlIHRyYW5zcG9ydC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuVHJhbnNwb3J0fSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9zdGFydCB0aGUgdHJhbnNwb3J0IGluIG9uZSBzZWNvbmQgc3RhcnRpbmcgYXQgYmVnaW5uaW5nIG9mIHRoZSA1dGggbWVhc3VyZS5cblx0XHQgKiBUb25lLlRyYW5zcG9ydC5zdGFydChcIisxXCIsIFwiNDowOjBcIik7XG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAodGltZSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgLy9zdGFydCB0aGUgY2xvY2tcblx0ICAgICAgICBpZiAoVG9uZS5pc0RlZmluZWQob2Zmc2V0KSkge1xuXHQgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLnRvVGlja3Mob2Zmc2V0KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fY2xvY2suc3RhcnQodGltZSwgb2Zmc2V0KTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU3RvcCB0aGUgdHJhbnNwb3J0IGFuZCBhbGwgc291cmNlcyBzeW5jZWQgdG8gdGhlIHRyYW5zcG9ydC5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XSBUaGUgdGltZSB3aGVuIHRoZSB0cmFuc3BvcnQgc2hvdWxkIHN0b3AuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlRyYW5zcG9ydH0gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIFRvbmUuVHJhbnNwb3J0LnN0b3AoKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aGlzLl9jbG9jay5zdG9wKHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBQYXVzZSB0aGUgdHJhbnNwb3J0IGFuZCBhbGwgc291cmNlcyBzeW5jZWQgdG8gdGhlIHRyYW5zcG9ydC5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UcmFuc3BvcnR9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0LnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fY2xvY2sucGF1c2UodGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVG9nZ2xlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSB0cmFuc3BvcnQuIElmIGl0IGlzXG5cdFx0ICogc3RhcnRlZCwgaXQgd2lsbCBzdG9wIGl0LCBvdGhlcndpc2UgaXQgd2lsbCBzdGFydCB0aGUgVHJhbnNwb3J0LlxuXHRcdCAqIEBwYXJhbSAge1RpbWU9fSB0aW1lIFRoZSB0aW1lIG9mIHRoZSBldmVudFxuXHRcdCAqIEByZXR1cm4ge1RvbmUuVHJhbnNwb3J0fSAgICAgIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0LnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICBpZiAodGhpcy5fY2xvY2suZ2V0U3RhdGVBdFRpbWUodGltZSkgIT09IFRvbmUuU3RhdGUuU3RhcnRlZCkge1xuXHQgICAgICAgICAgICB0aGlzLnN0YXJ0KHRpbWUpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuc3RvcCh0aW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9cdFNFVFRFUlMvR0VUVEVSU1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSB0aW1lIHNpZ25hdHVyZSBhcyBqdXN0IHRoZSBudW1lcmF0b3Igb3ZlciA0LlxuXHRcdCAqICBGb3IgZXhhbXBsZSA0LzQgd291bGQgYmUganVzdCA0IGFuZCA2Lzggd291bGQgYmUgMy5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuVHJhbnNwb3J0I1xuXHRcdCAqICBAdHlwZSB7TnVtYmVyfEFycmF5fVxuXHRcdCAqICBAbmFtZSB0aW1lU2lnbmF0dXJlXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9jb21tb24gdGltZVxuXHRcdCAqIFRvbmUuVHJhbnNwb3J0LnRpbWVTaWduYXR1cmUgPSA0O1xuXHRcdCAqIC8vIDcvOFxuXHRcdCAqIFRvbmUuVHJhbnNwb3J0LnRpbWVTaWduYXR1cmUgPSBbNywgOF07XG5cdFx0ICogLy90aGlzIHdpbGwgYmUgcmVkdWNlZCB0byBhIHNpbmdsZSBudW1iZXJcblx0XHQgKiBUb25lLlRyYW5zcG9ydC50aW1lU2lnbmF0dXJlOyAvL3JldHVybnMgMy41XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5UcmFuc3BvcnQucHJvdG90eXBlLCAndGltZVNpZ25hdHVyZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVTaWduYXR1cmU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0aW1lU2lnKSB7XG5cdCAgICAgICAgICAgIGlmIChUb25lLmlzQXJyYXkodGltZVNpZykpIHtcblx0ICAgICAgICAgICAgICAgIHRpbWVTaWcgPSB0aW1lU2lnWzBdIC8gdGltZVNpZ1sxXSAqIDQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5fdGltZVNpZ25hdHVyZSA9IHRpbWVTaWc7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBXaGVuIHRoZSBUb25lLlRyYW5zcG9ydC5sb29wID0gdHJ1ZSwgdGhpcyBpcyB0aGUgc3RhcnRpbmcgcG9zaXRpb24gb2YgdGhlIGxvb3AuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuVHJhbnNwb3J0I1xuXHRcdCAqIEB0eXBlIHtUaW1lfVxuXHRcdCAqIEBuYW1lIGxvb3BTdGFydFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuVHJhbnNwb3J0LnByb3RvdHlwZSwgJ2xvb3BTdGFydCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuVGlja3ModGhpcy5fbG9vcFN0YXJ0KS50b1NlY29uZHMoKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHN0YXJ0UG9zaXRpb24pIHtcblx0ICAgICAgICAgICAgdGhpcy5fbG9vcFN0YXJ0ID0gdGhpcy50b1RpY2tzKHN0YXJ0UG9zaXRpb24pO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogV2hlbiB0aGUgVG9uZS5UcmFuc3BvcnQubG9vcCA9IHRydWUsIHRoaXMgaXMgdGhlIGVuZGluZyBwb3NpdGlvbiBvZiB0aGUgbG9vcC5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5UcmFuc3BvcnQjXG5cdFx0ICogQHR5cGUge1RpbWV9XG5cdFx0ICogQG5hbWUgbG9vcEVuZFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuVHJhbnNwb3J0LnByb3RvdHlwZSwgJ2xvb3BFbmQnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBUb25lLlRpY2tzKHRoaXMuX2xvb3BFbmQpLnRvU2Vjb25kcygpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoZW5kUG9zaXRpb24pIHtcblx0ICAgICAgICAgICAgdGhpcy5fbG9vcEVuZCA9IHRoaXMudG9UaWNrcyhlbmRQb3NpdGlvbik7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgU2V0IHRoZSBsb29wIHN0YXJ0IGFuZCBzdG9wIGF0IHRoZSBzYW1lIHRpbWUuXG5cdFx0ICogIEBwYXJhbSB7VHJhbnNwb3J0VGltZX0gc3RhcnRQb3NpdGlvblxuXHRcdCAqICBAcGFyYW0ge1RyYW5zcG9ydFRpbWV9IGVuZFBvc2l0aW9uXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlRyYW5zcG9ydH0gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vbG9vcCBvdmVyIHRoZSBmaXJzdCBtZWFzdXJlXG5cdFx0ICogVG9uZS5UcmFuc3BvcnQuc2V0TG9vcFBvaW50cygwLCBcIjFtXCIpO1xuXHRcdCAqIFRvbmUuVHJhbnNwb3J0Lmxvb3AgPSB0cnVlO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UcmFuc3BvcnQucHJvdG90eXBlLnNldExvb3BQb2ludHMgPSBmdW5jdGlvbiAoc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24pIHtcblx0ICAgICAgICB0aGlzLmxvb3BTdGFydCA9IHN0YXJ0UG9zaXRpb247XG5cdCAgICAgICAgdGhpcy5sb29wRW5kID0gZW5kUG9zaXRpb247XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBzd2luZyB2YWx1ZS4gQmV0d2VlbiAwLTEgd2hlcmUgMSBlcXVhbCB0b1xuXHRcdCAqICB0aGUgbm90ZSArIGhhbGYgdGhlIHN1YmRpdmlzaW9uLlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5UcmFuc3BvcnQjXG5cdFx0ICogIEB0eXBlIHtOb3JtYWxSYW5nZX1cblx0XHQgKiAgQG5hbWUgc3dpbmdcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlRyYW5zcG9ydC5wcm90b3R5cGUsICdzd2luZycsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N3aW5nQW1vdW50O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoYW1vdW50KSB7XG5cdCAgICAgICAgICAgIC8vc2NhbGUgdGhlIHZhbHVlcyB0byBhIG5vcm1hbCByYW5nZVxuXHQgICAgICAgICAgICB0aGlzLl9zd2luZ0Ftb3VudCA9IGFtb3VudDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBTZXQgdGhlIHN1YmRpdmlzaW9uIHdoaWNoIHRoZSBzd2luZyB3aWxsIGJlIGFwcGxpZWQgdG8uXG5cdFx0ICogIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGFuIDh0aCBub3RlLiBWYWx1ZSBtdXN0IGJlIGxlc3Ncblx0XHQgKiAgdGhhbiBhIHF1YXJ0ZXIgbm90ZS5cblx0XHQgKlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5UcmFuc3BvcnQjXG5cdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdCAqICBAbmFtZSBzd2luZ1N1YmRpdmlzaW9uXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5UcmFuc3BvcnQucHJvdG90eXBlLCAnc3dpbmdTdWJkaXZpc2lvbicsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuVGlja3ModGhpcy5fc3dpbmdUaWNrcykudG9Ob3RhdGlvbigpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoc3ViZGl2aXNpb24pIHtcblx0ICAgICAgICAgICAgdGhpcy5fc3dpbmdUaWNrcyA9IHRoaXMudG9UaWNrcyhzdWJkaXZpc2lvbik7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIFRyYW5zcG9ydCdzIHBvc2l0aW9uIGluIEJhcnM6QmVhdHM6U2l4dGVlbnRocy5cblx0XHQgKiAgU2V0dGluZyB0aGUgdmFsdWUgd2lsbCBqdW1wIHRvIHRoYXQgcG9zaXRpb24gcmlnaHQgYXdheS5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuVHJhbnNwb3J0I1xuXHRcdCAqICBAdHlwZSB7QmFyc0JlYXRzU2l4dGVlbnRoc31cblx0XHQgKiAgQG5hbWUgcG9zaXRpb25cblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlRyYW5zcG9ydC5wcm90b3R5cGUsICdwb3NpdGlvbicsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIG5vdyA9IHRoaXMubm93KCk7XG5cdCAgICAgICAgICAgIHZhciB0aWNrcyA9IHRoaXMuX2Nsb2NrLmdldFRpY2tzQXRUaW1lKG5vdyk7XG5cdCAgICAgICAgICAgIHJldHVybiBUb25lLlRpY2tzKHRpY2tzKS50b0JhcnNCZWF0c1NpeHRlZW50aHMoKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHByb2dyZXNzKSB7XG5cdCAgICAgICAgICAgIHZhciB0aWNrcyA9IHRoaXMudG9UaWNrcyhwcm9ncmVzcyk7XG5cdCAgICAgICAgICAgIHRoaXMudGlja3MgPSB0aWNrcztcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgVHJhbnNwb3J0J3MgcG9zaXRpb24gaW4gc2Vjb25kc1xuXHRcdCAqICBTZXR0aW5nIHRoZSB2YWx1ZSB3aWxsIGp1bXAgdG8gdGhhdCBwb3NpdGlvbiByaWdodCBhd2F5LlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5UcmFuc3BvcnQjXG5cdFx0ICogIEB0eXBlIHtTZWNvbmRzfVxuXHRcdCAqICBAbmFtZSBzZWNvbmRzXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5UcmFuc3BvcnQucHJvdG90eXBlLCAnc2Vjb25kcycsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb2NrLnNlY29uZHM7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzKSB7XG5cdCAgICAgICAgICAgIHZhciBub3cgPSB0aGlzLm5vdygpO1xuXHQgICAgICAgICAgICB2YXIgdGlja3MgPSB0aGlzLmJwbS50aW1lVG9UaWNrcyhzLCBub3cpO1xuXHQgICAgICAgICAgICB0aGlzLnRpY2tzID0gdGlja3M7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIFRyYW5zcG9ydCdzIGxvb3AgcG9zaXRpb24gYXMgYSBub3JtYWxpemVkIHZhbHVlLiBBbHdheXNcblx0XHQgKiAgcmV0dXJucyAwIGlmIHRoZSB0cmFuc3BvcnQgaWYgbG9vcCBpcyBub3QgdHJ1ZS5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuVHJhbnNwb3J0I1xuXHRcdCAqICBAbmFtZSBwcm9ncmVzc1xuXHRcdCAqICBAdHlwZSB7Tm9ybWFsUmFuZ2V9XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5UcmFuc3BvcnQucHJvdG90eXBlLCAncHJvZ3Jlc3MnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmxvb3ApIHtcblx0ICAgICAgICAgICAgICAgIHZhciBub3cgPSB0aGlzLm5vdygpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHRpY2tzID0gdGhpcy5fY2xvY2suZ2V0VGlja3NBdFRpbWUobm93KTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAodGlja3MgLSB0aGlzLl9sb29wU3RhcnQpIC8gKHRoaXMuX2xvb3BFbmQgLSB0aGlzLl9sb29wU3RhcnQpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgdHJhbnNwb3J0cyBjdXJyZW50IHRpY2sgcG9zaXRpb24uXG5cdFx0ICpcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuVHJhbnNwb3J0I1xuXHRcdCAqICBAdHlwZSB7VGlja3N9XG5cdFx0ICogIEBuYW1lIHRpY2tzXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5UcmFuc3BvcnQucHJvdG90eXBlLCAndGlja3MnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9jbG9jay50aWNrcztcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHQpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX2Nsb2NrLnRpY2tzICE9PSB0KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgbm93ID0gdGhpcy5ub3coKTtcblx0ICAgICAgICAgICAgICAgIC8vc3RvcCBldmVyeXRoaW5nIHN5bmNlZCB0byB0aGUgdHJhbnNwb3J0XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdzdG9wJywgbm93KTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbG9jay5zZXRUaWNrc0F0VGltZSh0LCBub3cpO1xuXHQgICAgICAgICAgICAgICAgICAgIC8vcmVzdGFydCBpdCB3aXRoIHRoZSBuZXcgdGltZVxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnc3RhcnQnLCBub3csIHRoaXMuc2Vjb25kcyk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nsb2NrLnNldFRpY2tzQXRUaW1lKHQsIG5vdyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIEdldCB0aGUgY2xvY2sncyB0aWNrcyBhdCB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiBAcGFyYW0gIHtUaW1lfSB0aW1lICBXaGVuIHRvIGdldCB0aGUgdGljayB2YWx1ZVxuXHRcdCAqIEByZXR1cm4ge1RpY2tzfSAgICAgICBUaGUgdGljayB2YWx1ZSBhdCB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0LnByb3RvdHlwZS5nZXRUaWNrc0F0VGltZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy5fY2xvY2suZ2V0VGlja3NBdFRpbWUodGltZSkpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm4gdGhlIGVsYXBzZWQgc2Vjb25kcyBhdCB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gIHRpbWUgIFdoZW4gdG8gZ2V0IHRoZSBlbGFwc2VkIHNlY29uZHNcblx0XHQgKiAgQHJldHVybiAge1NlY29uZHN9ICBUaGUgbnVtYmVyIG9mIGVsYXBzZWQgc2Vjb25kc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UcmFuc3BvcnQucHJvdG90eXBlLmdldFNlY29uZHNBdFRpbWUgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9jbG9jay5nZXRTZWNvbmRzQXRUaW1lKHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBQdWxzZXMgUGVyIFF1YXJ0ZXIgbm90ZS4gVGhpcyBpcyB0aGUgc21hbGxlc3QgcmVzb2x1dGlvblxuXHRcdCAqICB0aGUgVHJhbnNwb3J0IHRpbWluZyBzdXBwb3J0cy4gVGhpcyBzaG91bGQgYmUgc2V0IG9uY2Vcblx0XHQgKiAgb24gaW5pdGlhbGl6YXRpb24gYW5kIG5vdCBzZXQgYWdhaW4uIENoYW5naW5nIHRoaXMgdmFsdWVcblx0XHQgKiAgYWZ0ZXIgb3RoZXIgb2JqZWN0cyBoYXZlIGJlZW4gY3JlYXRlZCBjYW4gY2F1c2UgcHJvYmxlbXMuXG5cdFx0ICpcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuVHJhbnNwb3J0I1xuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbmFtZSBQUFFcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlRyYW5zcG9ydC5wcm90b3R5cGUsICdQUFEnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcHE7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwcHEpIHtcblx0ICAgICAgICAgICAgdmFyIGJwbSA9IHRoaXMuYnBtLnZhbHVlO1xuXHQgICAgICAgICAgICB0aGlzLl9wcHEgPSBwcHE7XG5cdCAgICAgICAgICAgIHRoaXMuYnBtLnZhbHVlID0gYnBtO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIENvbnZlcnQgZnJvbSBCUE0gdG8gZnJlcXVlbmN5IChmYWN0b3JpbmcgaW4gUFBRKVxuXHRcdCAqICBAcGFyYW0gIHtCUE19ICBicG0gVGhlIEJQTSB2YWx1ZSB0byBjb252ZXJ0IHRvIGZyZXF1ZW5jeVxuXHRcdCAqICBAcmV0dXJuICB7RnJlcXVlbmN5fSAgVGhlIEJQTSBhcyBhIGZyZXF1ZW5jeSB3aXRoIFBQUSBmYWN0b3JlZCBpbi5cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0LnByb3RvdHlwZS5fZnJvbVVuaXRzID0gZnVuY3Rpb24gKGJwbSkge1xuXHQgICAgICAgIHJldHVybiAxIC8gKDYwIC8gYnBtIC8gdGhpcy5QUFEpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDb252ZXJ0IGZyb20gZnJlcXVlbmN5ICh3aXRoIFBQUSkgaW50byBCUE1cblx0XHQgKiAgQHBhcmFtICB7RnJlcXVlbmN5fSAgZnJlcSBUaGUgY2xvY2tzIGZyZXF1ZW5jeSB0byBjb252ZXJ0IHRvIEJQTVxuXHRcdCAqICBAcmV0dXJuICB7QlBNfSAgVGhlIGZyZXF1ZW5jeSB2YWx1ZSBhcyBCUE0uXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydC5wcm90b3R5cGUuX3RvVW5pdHMgPSBmdW5jdGlvbiAoZnJlcSkge1xuXHQgICAgICAgIHJldHVybiBmcmVxIC8gdGhpcy5QUFEgKiA2MDtcblx0ICAgIH07XG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0U1lOQ0lOR1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybnMgdGhlIHRpbWUgYWxpZ25lZCB0byB0aGUgbmV4dCBzdWJkaXZpc2lvblxuXHRcdCAqICBvZiB0aGUgVHJhbnNwb3J0LiBJZiB0aGUgVHJhbnNwb3J0IGlzIG5vdCBzdGFydGVkLFxuXHRcdCAqICBpdCB3aWxsIHJldHVybiAwLlxuXHRcdCAqICBOb3RlOiB0aGlzIHdpbGwgbm90IHdvcmsgcHJlY2lzZWx5IGR1cmluZyB0ZW1wbyByYW1wcy5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gIHN1YmRpdmlzaW9uICBUaGUgc3ViZGl2aXNpb24gdG8gcXVhbnRpemUgdG9cblx0XHQgKiAgQHJldHVybiAge051bWJlcn0gIFRoZSBjb250ZXh0IHRpbWUgb2YgdGhlIG5leHQgc3ViZGl2aXNpb24uXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogVG9uZS5UcmFuc3BvcnQuc3RhcnQoKTsgLy90aGUgdHJhbnNwb3J0IG11c3QgYmUgc3RhcnRlZFxuXHRcdCAqIFRvbmUuVHJhbnNwb3J0Lm5leHRTdWJkaXZpc2lvbihcIjRuXCIpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UcmFuc3BvcnQucHJvdG90eXBlLm5leHRTdWJkaXZpc2lvbiA9IGZ1bmN0aW9uIChzdWJkaXZpc2lvbikge1xuXHQgICAgICAgIHN1YmRpdmlzaW9uID0gdGhpcy50b1RpY2tzKHN1YmRpdmlzaW9uKTtcblx0ICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gVG9uZS5TdGF0ZS5TdGFydGVkKSB7XG5cdCAgICAgICAgICAgIC8vaWYgdGhlIHRyYW5zcG9ydCdzIG5vdCBzdGFydGVkLCByZXR1cm4gMFxuXHQgICAgICAgICAgICByZXR1cm4gMDtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgbm93ID0gdGhpcy5ub3coKTtcblx0ICAgICAgICAgICAgLy90aGUgcmVtYWluZGVyIG9mIHRoZSBjdXJyZW50IHRpY2tzIGFuZCB0aGUgc3ViZGl2aXNpb25cblx0ICAgICAgICAgICAgdmFyIHRyYW5zcG9ydFBvcyA9IHRoaXMuZ2V0VGlja3NBdFRpbWUobm93KTtcblx0ICAgICAgICAgICAgdmFyIHJlbWFpbmluZ1RpY2tzID0gc3ViZGl2aXNpb24gLSB0cmFuc3BvcnRQb3MgJSBzdWJkaXZpc2lvbjtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb2NrLm5leHRUaWNrVGltZShyZW1haW5pbmdUaWNrcywgbm93KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEF0dGFjaGVzIHRoZSBzaWduYWwgdG8gdGhlIHRlbXBvIGNvbnRyb2wgc2lnbmFsIHNvIHRoYXRcblx0XHQgKiAgYW55IGNoYW5nZXMgaW4gdGhlIHRlbXBvIHdpbGwgY2hhbmdlIHRoZSBzaWduYWwgaW4gdGhlIHNhbWVcblx0XHQgKiAgcmF0aW8uXG5cdFx0ICpcblx0XHQgKiAgQHBhcmFtICB7VG9uZS5TaWduYWx9IHNpZ25hbFxuXHRcdCAqICBAcGFyYW0ge251bWJlcj19IHJhdGlvIE9wdGlvbmFsbHkgcGFzcyBpbiB0aGUgcmF0aW8gYmV0d2VlblxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0d28gc2lnbmFscy4gT3RoZXJ3aXNlIGl0IHdpbGwgYmUgY29tcHV0ZWRcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlZCBvbiB0aGVpciBjdXJyZW50IHZhbHVlcy5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuVHJhbnNwb3J0fSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydC5wcm90b3R5cGUuc3luY1NpZ25hbCA9IGZ1bmN0aW9uIChzaWduYWwsIHJhdGlvKSB7XG5cdCAgICAgICAgaWYgKCFyYXRpbykge1xuXHQgICAgICAgICAgICAvL2dldCB0aGUgc3luYyByYXRpb1xuXHQgICAgICAgICAgICB2YXIgbm93ID0gdGhpcy5ub3coKTtcblx0ICAgICAgICAgICAgaWYgKHNpZ25hbC5nZXRWYWx1ZUF0VGltZShub3cpICE9PSAwKSB7XG5cdCAgICAgICAgICAgICAgICByYXRpbyA9IHNpZ25hbC5nZXRWYWx1ZUF0VGltZShub3cpIC8gdGhpcy5icG0uZ2V0VmFsdWVBdFRpbWUobm93KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJhdGlvID0gMDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgcmF0aW9TaWduYWwgPSBuZXcgVG9uZS5HYWluKHJhdGlvKTtcblx0ICAgICAgICB0aGlzLmJwbS5jaGFpbihyYXRpb1NpZ25hbCwgc2lnbmFsLl9wYXJhbSk7XG5cdCAgICAgICAgdGhpcy5fc3luY2VkU2lnbmFscy5wdXNoKHtcblx0ICAgICAgICAgICAgJ3JhdGlvJzogcmF0aW9TaWduYWwsXG5cdCAgICAgICAgICAgICdzaWduYWwnOiBzaWduYWwsXG5cdCAgICAgICAgICAgICdpbml0aWFsJzogc2lnbmFsLnZhbHVlXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgc2lnbmFsLnZhbHVlID0gMDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVW5zeW5jcyBhIHByZXZpb3VzbHkgc3luY2VkIHNpZ25hbCBmcm9tIHRoZSB0cmFuc3BvcnQncyBjb250cm9sLlxuXHRcdCAqICBTZWUgVG9uZS5UcmFuc3BvcnQuc3luY1NpZ25hbC5cblx0XHQgKiAgQHBhcmFtICB7VG9uZS5TaWduYWx9IHNpZ25hbFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UcmFuc3BvcnR9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0LnByb3RvdHlwZS51bnN5bmNTaWduYWwgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX3N5bmNlZFNpZ25hbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgICAgICAgdmFyIHN5bmNlZFNpZ25hbCA9IHRoaXMuX3N5bmNlZFNpZ25hbHNbaV07XG5cdCAgICAgICAgICAgIGlmIChzeW5jZWRTaWduYWwuc2lnbmFsID09PSBzaWduYWwpIHtcblx0ICAgICAgICAgICAgICAgIHN5bmNlZFNpZ25hbC5yYXRpby5kaXNwb3NlKCk7XG5cdCAgICAgICAgICAgICAgICBzeW5jZWRTaWduYWwuc2lnbmFsLnZhbHVlID0gc3luY2VkU2lnbmFsLmluaXRpYWw7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9zeW5jZWRTaWduYWxzLnNwbGljZShpLCAxKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlRyYW5zcG9ydH0gdGhpc1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5UcmFuc3BvcnQucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5FbWl0dGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fY2xvY2suZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2Nsb2NrID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZSgnYnBtJyk7XG5cdCAgICAgICAgdGhpcy5icG0gPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3RpbWVsaW5lLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl90aW1lbGluZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fcmVwZWF0ZWRFdmVudHMuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3JlcGVhdGVkRXZlbnRzID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvL1x0SU5JVElBTElaQVRJT05cblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIHZhciBUcmFuc3BvcnRDb25zdHJ1Y3RvciA9IFRvbmUuVHJhbnNwb3J0O1xuXHQgICAgVG9uZS5UcmFuc3BvcnQgPSBuZXcgVHJhbnNwb3J0Q29uc3RydWN0b3IoKTtcblx0ICAgIFRvbmUuQ29udGV4dC5vbignaW5pdCcsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG5cdCAgICAgICAgaWYgKGNvbnRleHQuVHJhbnNwb3J0IGluc3RhbmNlb2YgVHJhbnNwb3J0Q29uc3RydWN0b3IpIHtcblx0ICAgICAgICAgICAgVG9uZS5UcmFuc3BvcnQgPSBjb250ZXh0LlRyYW5zcG9ydDtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBUb25lLlRyYW5zcG9ydCA9IG5ldyBUcmFuc3BvcnRDb25zdHJ1Y3RvcigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvL3N0b3JlIHRoZSBUcmFuc3BvcnQgb24gdGhlIGNvbnRleHQgc28gaXQgY2FuIGJlIHJldHJpZXZlZCBsYXRlclxuXHQgICAgICAgIGNvbnRleHQuVHJhbnNwb3J0ID0gVG9uZS5UcmFuc3BvcnQ7XG5cdCAgICB9KTtcblx0ICAgIFRvbmUuQ29udGV4dC5vbignY2xvc2UnLCBmdW5jdGlvbiAoY29udGV4dCkge1xuXHQgICAgICAgIGlmIChjb250ZXh0LlRyYW5zcG9ydCBpbnN0YW5jZW9mIFRyYW5zcG9ydENvbnN0cnVjdG9yKSB7XG5cdCAgICAgICAgICAgIGNvbnRleHQuVHJhbnNwb3J0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBUb25lLlRyYW5zcG9ydDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuVm9sdW1lIGlzIGEgc2ltcGxlIHZvbHVtZSBub2RlLCB1c2VmdWwgZm9yIGNyZWF0aW5nIGEgdm9sdW1lIGZhZGVyLlxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkF1ZGlvTm9kZX1cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBwYXJhbSB7RGVjaWJlbHN9IFt2b2x1bWU9MF0gdGhlIGluaXRpYWwgdm9sdW1lXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIHZvbCA9IG5ldyBUb25lLlZvbHVtZSgtMTIpO1xuXHRcdCAqIGluc3RydW1lbnQuY2hhaW4odm9sLCBUb25lLk1hc3Rlcik7XG5cdFx0ICovXG5cdCAgICBUb25lLlZvbHVtZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbJ3ZvbHVtZSddLCBUb25lLlZvbHVtZSk7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIHRoZSBvdXRwdXQgbm9kZVxuXHRcdFx0ICogQHR5cGUge0dhaW5Ob2RlfVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMub3V0cHV0ID0gdGhpcy5pbnB1dCA9IG5ldyBUb25lLkdhaW4ob3B0aW9ucy52b2x1bWUsIFRvbmUuVHlwZS5EZWNpYmVscyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgdW5tdXRlZCB2b2x1bWVcblx0XHRcdCAqIEB0eXBlIHtEZWNpYmVsc31cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl91bm11dGVkVm9sdW1lID0gb3B0aW9ucy52b2x1bWU7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHZvbHVtZSBjb250cm9sIGluIGRlY2liZWxzLlxuXHRcdFx0ICogIEB0eXBlIHtEZWNpYmVsc31cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLnZvbHVtZSA9IHRoaXMub3V0cHV0LmdhaW47XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoJ3ZvbHVtZScpO1xuXHQgICAgICAgIC8vc2V0IHRoZSBtdXRlIGluaXRpYWxseVxuXHQgICAgICAgIHRoaXMubXV0ZSA9IG9wdGlvbnMubXV0ZTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlZvbHVtZSwgVG9uZS5BdWRpb05vZGUpO1xuXHQgICAgLyoqXG5cdFx0ICogIERlZmF1bHRzXG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqICBAY29uc3Rcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Wb2x1bWUuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ3ZvbHVtZSc6IDAsXG5cdCAgICAgICAgJ211dGUnOiBmYWxzZVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIE11dGUgdGhlIG91dHB1dC5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5Wb2x1bWUjXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQG5hbWUgbXV0ZVxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogLy9tdXRlIHRoZSBvdXRwdXRcblx0XHQgKiB2b2x1bWUubXV0ZSA9IHRydWU7XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Wb2x1bWUucHJvdG90eXBlLCAnbXV0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMudm9sdW1lLnZhbHVlID09PSAtSW5maW5pdHk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChtdXRlKSB7XG5cdCAgICAgICAgICAgIGlmICghdGhpcy5tdXRlICYmIG11dGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3VubXV0ZWRWb2x1bWUgPSB0aGlzLnZvbHVtZS52YWx1ZTtcblx0ICAgICAgICAgICAgICAgIC8vbWF5YmUgaXQgc2hvdWxkIHJhbXAgaGVyZT9cblx0ICAgICAgICAgICAgICAgIHRoaXMudm9sdW1lLnZhbHVlID0gLUluZmluaXR5O1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubXV0ZSAmJiAhbXV0ZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy52b2x1bWUudmFsdWUgPSB0aGlzLl91bm11dGVkVm9sdW1lO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgY2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuVm9sdW1lfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlZvbHVtZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmlucHV0LmRpc3Bvc2UoKTtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKCd2b2x1bWUnKTtcblx0ICAgICAgICB0aGlzLnZvbHVtZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy52b2x1bWUgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlZvbHVtZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBBIHNpbmdsZSBtYXN0ZXIgb3V0cHV0IHdoaWNoIGlzIGNvbm5lY3RlZCB0byB0aGVcblx0XHQgKiAgICAgICAgICBBdWRpb0Rlc3RpbmF0aW9uTm9kZSAoYWthIHlvdXIgc3BlYWtlcnMpLlxuXHRcdCAqICAgICAgICAgIEl0IHByb3ZpZGVzIHVzZWZ1bCBjb252ZW5pZW5jZXMgc3VjaCBhcyB0aGUgYWJpbGl0eVxuXHRcdCAqICAgICAgICAgIHRvIHNldCB0aGUgdm9sdW1lIGFuZCBtdXRlIHRoZSBlbnRpcmUgYXBwbGljYXRpb24uXG5cdFx0ICogICAgICAgICAgSXQgYWxzbyBnaXZlcyB5b3UgdGhlIGFiaWxpdHkgdG8gYXBwbHkgbWFzdGVyIGVmZmVjdHMgdG8geW91ciBhcHBsaWNhdGlvbi5cblx0XHQgKiAgICAgICAgICA8YnI+PGJyPlxuXHRcdCAqICAgICAgICAgIExpa2UgVG9uZS5UcmFuc3BvcnQsIEEgc2luZ2xlIFRvbmUuTWFzdGVyIGlzIGNyZWF0ZWRcblx0XHQgKiAgICAgICAgICBvbiBpbml0aWFsaXphdGlvbiBhbmQgeW91IGRvIG5vdCBuZWVkIHRvIGV4cGxpY2l0bHkgY29uc3RydWN0IG9uZS5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmV9XG5cdFx0ICogIEBzaW5nbGV0b25cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL3RoZSBhdWRpbyB3aWxsIGdvIGZyb20gdGhlIG9zY2lsbGF0b3IgdG8gdGhlIHNwZWFrZXJzXG5cdFx0ICogb3NjaWxsYXRvci5jb25uZWN0KFRvbmUuTWFzdGVyKTtcblx0XHQgKiAvL2EgY29udmVuaWVuY2UgZm9yIGNvbm5lY3RpbmcgdG8gdGhlIG1hc3RlciBvdXRwdXQgaXMgYWxzbyBwcm92aWRlZDpcblx0XHQgKiBvc2NpbGxhdG9yLnRvTWFzdGVyKCk7XG5cdFx0ICogLy90aGUgYWJvdmUgdHdvIGV4YW1wbGVzIGFyZSBlcXVpdmFsZW50LlxuXHRcdCAqL1xuXHQgICAgVG9uZS5NYXN0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICBUb25lLmdldENvbnRleHQoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLmNyZWF0ZUluc091dHMoMSwgMCk7XG5cdCAgICAgICAgICAgIC8qKlxuXHRcdFx0XHQgKiAgVGhlIHByaXZhdGUgdm9sdW1lIG5vZGVcblx0XHRcdFx0ICogIEB0eXBlICB7VG9uZS5Wb2x1bWV9XG5cdFx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0XHQgKi9cblx0ICAgICAgICAgICAgdGhpcy5fdm9sdW1lID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5Wb2x1bWUoKTtcblx0ICAgICAgICAgICAgLyoqXG5cdFx0XHRcdCAqIFRoZSB2b2x1bWUgb2YgdGhlIG1hc3RlciBvdXRwdXQuXG5cdFx0XHRcdCAqIEB0eXBlIHtEZWNpYmVsc31cblx0XHRcdFx0ICogQHNpZ25hbFxuXHRcdFx0XHQgKi9cblx0ICAgICAgICAgICAgdGhpcy52b2x1bWUgPSB0aGlzLl92b2x1bWUudm9sdW1lO1xuXHQgICAgICAgICAgICB0aGlzLl9yZWFkT25seSgndm9sdW1lJyk7XG5cdCAgICAgICAgICAgIC8vY29ubmVjdGlvbnNcblx0ICAgICAgICAgICAgdGhpcy5pbnB1dC5jaGFpbih0aGlzLm91dHB1dCwgdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uKTtcblx0ICAgICAgICB9LmJpbmQodGhpcykpO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuTWFzdGVyLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKiAgQGNvbnN0XG5cdFx0ICovXG5cdCAgICBUb25lLk1hc3Rlci5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAndm9sdW1lJzogMCxcblx0ICAgICAgICAnbXV0ZSc6IGZhbHNlXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogTXV0ZSB0aGUgb3V0cHV0LlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLk1hc3RlciNcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAbmFtZSBtdXRlXG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiAvL211dGUgdGhlIG91dHB1dFxuXHRcdCAqIFRvbmUuTWFzdGVyLm11dGUgPSB0cnVlO1xuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTWFzdGVyLnByb3RvdHlwZSwgJ211dGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl92b2x1bWUubXV0ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG11dGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fdm9sdW1lLm11dGUgPSBtdXRlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIEFkZCBhIG1hc3RlciBlZmZlY3RzIGNoYWluLiBOT1RFOiB0aGlzIHdpbGwgZGlzY29ubmVjdCBhbnkgbm9kZXMgd2hpY2ggd2VyZSBwcmV2aW91c2x5XG5cdFx0ICogIGNoYWluZWQgaW4gdGhlIG1hc3RlciBlZmZlY3RzIGNoYWluLlxuXHRcdCAqICBAcGFyYW0ge0F1ZGlvTm9kZXxUb25lfSBhcmdzLi4uIEFsbCBhcmd1bWVudHMgd2lsbCBiZSBjb25uZWN0ZWQgaW4gYSByb3dcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIE1hc3RlciB3aWxsIGJlIHJvdXRlZCB0aHJvdWdoIGl0LlxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5NYXN0ZXJ9ICB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9zb21lIG92ZXJhbGwgY29tcHJlc3Npb24gdG8ga2VlcCB0aGUgbGV2ZWxzIGluIGNoZWNrXG5cdFx0ICogdmFyIG1hc3RlckNvbXByZXNzb3IgPSBuZXcgVG9uZS5Db21wcmVzc29yKHtcblx0XHQgKiBcdFwidGhyZXNob2xkXCIgOiAtNixcblx0XHQgKiBcdFwicmF0aW9cIiA6IDMsXG5cdFx0ICogXHRcImF0dGFja1wiIDogMC41LFxuXHRcdCAqIFx0XCJyZWxlYXNlXCIgOiAwLjFcblx0XHQgKiB9KTtcblx0XHQgKiAvL2dpdmUgYSBsaXR0bGUgYm9vc3QgdG8gdGhlIGxvd3Ncblx0XHQgKiB2YXIgbG93QnVtcCA9IG5ldyBUb25lLkZpbHRlcigyMDAsIFwibG93c2hlbGZcIik7XG5cdFx0ICogLy9yb3V0ZSBldmVyeXRoaW5nIHRocm91Z2ggdGhlIGZpbHRlclxuXHRcdCAqIC8vYW5kIGNvbXByZXNzb3IgYmVmb3JlIGdvaW5nIHRvIHRoZSBzcGVha2Vyc1xuXHRcdCAqIFRvbmUuTWFzdGVyLmNoYWluKGxvd0J1bXAsIG1hc3RlckNvbXByZXNzb3IpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NYXN0ZXIucHJvdG90eXBlLmNoYWluID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuaW5wdXQuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMuaW5wdXQuY2hhaW4uYXBwbHkodGhpcy5pbnB1dCwgYXJndW1lbnRzKTtcblx0ICAgICAgICBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLmNvbm5lY3QodGhpcy5vdXRwdXQpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5NYXN0ZXJ9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk1hc3Rlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKCd2b2x1bWUnKTtcblx0ICAgICAgICB0aGlzLl92b2x1bWUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3ZvbHVtZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy52b2x1bWUgPSBudWxsO1xuXHQgICAgfTtcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9cdEFVR01FTlQgVE9ORSdzIFBST1RPVFlQRVxuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvKipcblx0XHQgKiAgQ29ubmVjdCAndGhpcycgdG8gdGhlIG1hc3RlciBvdXRwdXQuIFNob3J0aGFuZCBmb3IgdGhpcy5jb25uZWN0KFRvbmUuTWFzdGVyKVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5BdWRpb05vZGV9IHRoaXNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2Nvbm5lY3QgYW4gb3NjaWxsYXRvciB0byB0aGUgbWFzdGVyIG91dHB1dFxuXHRcdCAqIHZhciBvc2MgPSBuZXcgVG9uZS5Pc2NpbGxhdG9yKCkudG9NYXN0ZXIoKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS50b01hc3RlciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmNvbm5lY3QoVG9uZS5NYXN0ZXIpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIGlmICh3aW5kb3cuQXVkaW9Ob2RlKSB7XG5cdCAgICAgICAgLy8gQWxzbyBhdWdtZW50IEF1ZGlvTm9kZSdzIHByb3RvdHlwZSB0byBpbmNsdWRlIHRvTWFzdGVyIGFzIGEgY29udmVuaWVuY2Vcblx0ICAgICAgICBBdWRpb05vZGUucHJvdG90eXBlLnRvTWFzdGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLmNvbm5lY3QoVG9uZS5NYXN0ZXIpO1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdFx0ICogIGluaXRpYWxpemUgdGhlIG1vZHVsZSBhbmQgbGlzdGVuIGZvciBuZXcgYXVkaW8gY29udGV4dHNcblx0XHQgKi9cblx0ICAgIHZhciBNYXN0ZXJDb25zdHJ1Y3RvciA9IFRvbmUuTWFzdGVyO1xuXHQgICAgVG9uZS5NYXN0ZXIgPSBuZXcgTWFzdGVyQ29uc3RydWN0b3IoKTtcblx0ICAgIFRvbmUuQ29udGV4dC5vbignaW5pdCcsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG5cdCAgICAgICAgLy8gaWYgaXQgYWxyZWFkeSBleGlzdHMsIGp1c3QgcmVzdG9yZSBpdFxuXHQgICAgICAgIGlmIChjb250ZXh0Lk1hc3RlciBpbnN0YW5jZW9mIE1hc3RlckNvbnN0cnVjdG9yKSB7XG5cdCAgICAgICAgICAgIFRvbmUuTWFzdGVyID0gY29udGV4dC5NYXN0ZXI7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgVG9uZS5NYXN0ZXIgPSBuZXcgTWFzdGVyQ29uc3RydWN0b3IoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29udGV4dC5NYXN0ZXIgPSBUb25lLk1hc3Rlcjtcblx0ICAgIH0pO1xuXHQgICAgVG9uZS5Db250ZXh0Lm9uKCdjbG9zZScsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG5cdCAgICAgICAgaWYgKGNvbnRleHQuTWFzdGVyIGluc3RhbmNlb2YgTWFzdGVyQ29uc3RydWN0b3IpIHtcblx0ICAgICAgICAgICAgY29udGV4dC5NYXN0ZXIuZGlzcG9zZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIFRvbmUuTWFzdGVyO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIEJhc2UgY2xhc3MgZm9yIHNvdXJjZXMuIFNvdXJjZXMgaGF2ZSBzdGFydC9zdG9wIG1ldGhvZHNcblx0XHQgKiAgICAgICAgICBhbmQgdGhlIGFiaWxpdHkgdG8gYmUgc3luY2VkIHRvIHRoZVxuXHRcdCAqICAgICAgICAgIHN0YXJ0L3N0b3Agb2YgVG9uZS5UcmFuc3BvcnQuXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkF1ZGlvTm9kZX1cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL011bHRpcGxlIHN0YXRlIGNoYW5nZSBldmVudHMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIsXG5cdFx0ICogLy9idXQgbXVzdCBiZSBzZXQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIgYW5kIHdpdGggYXNjZW5kaW5nIHRpbWVzXG5cdFx0ICpcblx0XHQgKiAvLyBPS1xuXHRcdCAqIHN0YXRlLnN0YXJ0KCkuc3RvcChcIiswLjJcIik7XG5cdFx0ICogLy8gQU5EXG5cdFx0ICogc3RhdGUuc3RhcnQoKS5zdG9wKFwiKzAuMlwiKS5zdGFydChcIiswLjRcIikuc3RvcChcIiswLjdcIilcblx0XHQgKlxuXHRcdCAqIC8vIEJBRFxuXHRcdCAqIHN0YXRlLnN0b3AoXCIrMC4yXCIpLnN0YXJ0KCk7XG5cdFx0ICogLy8gT1Jcblx0XHQgKiBzdGF0ZS5zdGFydChcIiswLjNcIikuc3RvcChcIiswLjJcIik7XG5cdFx0ICpcblx0XHQgKi9cblx0ICAgIFRvbmUuU291cmNlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgICAgICBvcHRpb25zID0gVG9uZS5kZWZhdWx0QXJnKG9wdGlvbnMsIFRvbmUuU291cmNlLmRlZmF1bHRzKTtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBvdXRwdXQgdm9sdW1lIG5vZGVcblx0XHRcdCAqICBAdHlwZSAge1RvbmUuVm9sdW1lfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl92b2x1bWUgPSB0aGlzLm91dHB1dCA9IG5ldyBUb25lLlZvbHVtZShvcHRpb25zLnZvbHVtZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgdm9sdW1lIG9mIHRoZSBvdXRwdXQgaW4gZGVjaWJlbHMuXG5cdFx0XHQgKiBAdHlwZSB7RGVjaWJlbHN9XG5cdFx0XHQgKiBAc2lnbmFsXG5cdFx0XHQgKiBAZXhhbXBsZVxuXHRcdFx0ICogc291cmNlLnZvbHVtZS52YWx1ZSA9IC02O1xuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy52b2x1bWUgPSB0aGlzLl92b2x1bWUudm9sdW1lO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KCd2b2x1bWUnKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFx0S2VlcCB0cmFjayBvZiB0aGUgc2NoZWR1bGVkIHN0YXRlLlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLlRpbWVsaW5lU3RhdGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N0YXRlID0gbmV3IFRvbmUuVGltZWxpbmVTdGF0ZShUb25lLlN0YXRlLlN0b3BwZWQpO1xuXHQgICAgICAgIHRoaXMuX3N0YXRlLm1lbW9yeSA9IDEwMDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgc3luY2VkIGBzdGFydGAgY2FsbGJhY2sgZnVuY3Rpb24gZnJvbSB0aGUgdHJhbnNwb3J0XG5cdFx0XHQgKiAgQHR5cGUge0Z1bmN0aW9ufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zeW5jZWQgPSBmYWxzZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBLZWVwIHRyYWNrIG9mIGFsbCBvZiB0aGUgc2NoZWR1bGVkIGV2ZW50IGlkc1xuXHRcdFx0ICogIEB0eXBlICB7QXJyYXl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3NjaGVkdWxlZCA9IFtdO1xuXHQgICAgICAgIC8vbWFrZSB0aGUgb3V0cHV0IGV4cGxpY2l0bHkgc3RlcmVvXG5cdCAgICAgICAgdGhpcy5fdm9sdW1lLm91dHB1dC5vdXRwdXQuY2hhbm5lbENvdW50ID0gMjtcblx0ICAgICAgICB0aGlzLl92b2x1bWUub3V0cHV0Lm91dHB1dC5jaGFubmVsQ291bnRNb2RlID0gJ2V4cGxpY2l0Jztcblx0ICAgICAgICAvL211dGUgaW5pdGlhbGx5XG5cdCAgICAgICAgdGhpcy5tdXRlID0gb3B0aW9ucy5tdXRlO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuU291cmNlLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGRlZmF1bHQgcGFyYW1ldGVyc1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Tb3VyY2UuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ3ZvbHVtZSc6IDAsXG5cdCAgICAgICAgJ211dGUnOiBmYWxzZVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm5zIHRoZSBwbGF5YmFjayBzdGF0ZSBvZiB0aGUgc291cmNlLCBlaXRoZXIgXCJzdGFydGVkXCIgb3IgXCJzdG9wcGVkXCIuXG5cdFx0ICogIEB0eXBlIHtUb25lLlN0YXRlfVxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuU291cmNlI1xuXHRcdCAqICBAbmFtZSBzdGF0ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuU291cmNlLnByb3RvdHlwZSwgJ3N0YXRlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fc3luY2VkKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoVG9uZS5UcmFuc3BvcnQuc3RhdGUgPT09IFRvbmUuU3RhdGUuU3RhcnRlZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZS5nZXRWYWx1ZUF0VGltZShUb25lLlRyYW5zcG9ydC5zZWNvbmRzKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRvbmUuU3RhdGUuU3RvcHBlZDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZS5nZXRWYWx1ZUF0VGltZSh0aGlzLm5vdygpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogTXV0ZSB0aGUgb3V0cHV0LlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlNvdXJjZSNcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAbmFtZSBtdXRlXG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiAvL211dGUgdGhlIG91dHB1dFxuXHRcdCAqIHNvdXJjZS5tdXRlID0gdHJ1ZTtcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlNvdXJjZS5wcm90b3R5cGUsICdtdXRlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fdm9sdW1lLm11dGU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChtdXRlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3ZvbHVtZS5tdXRlID0gbXV0ZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8vb3ZlcndyaXRlIHRoZXNlIGZ1bmN0aW9uc1xuXHQgICAgVG9uZS5Tb3VyY2UucHJvdG90eXBlLl9zdGFydCA9IFRvbmUubm9PcDtcblx0ICAgIFRvbmUuU291cmNlLnByb3RvdHlwZS5yZXN0YXJ0ID0gVG9uZS5ub09wO1xuXHQgICAgVG9uZS5Tb3VyY2UucHJvdG90eXBlLl9zdG9wID0gVG9uZS5ub09wO1xuXHQgICAgLyoqXG5cdFx0ICogIFN0YXJ0IHRoZSBzb3VyY2UgYXQgdGhlIHNwZWNpZmllZCB0aW1lLiBJZiBubyB0aW1lIGlzIGdpdmVuLFxuXHRcdCAqICBzdGFydCB0aGUgc291cmNlIG5vdy5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XSBXaGVuIHRoZSBzb3VyY2Ugc2hvdWxkIGJlIHN0YXJ0ZWQuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlNvdXJjZX0gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHNvdXJjZS5zdGFydChcIiswLjVcIik7IC8vc3RhcnRzIHRoZSBzb3VyY2UgMC41IHNlY29uZHMgZnJvbSBub3dcblx0XHQgKi9cblx0ICAgIFRvbmUuU291cmNlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICh0aW1lLCBvZmZzZXQsIGR1cmF0aW9uKSB7XG5cdCAgICAgICAgaWYgKFRvbmUuaXNVbmRlZih0aW1lKSAmJiB0aGlzLl9zeW5jZWQpIHtcblx0ICAgICAgICAgICAgdGltZSA9IFRvbmUuVHJhbnNwb3J0LnNlY29uZHM7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvL2lmIGl0J3Mgc3RhcnRlZCwgc3RvcCBpdCBhbmQgcmVzdGFydCBpdFxuXHQgICAgICAgIGlmICh0aGlzLl9zdGF0ZS5nZXRWYWx1ZUF0VGltZSh0aW1lKSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3N0YXRlLmNhbmNlbCh0aW1lKTtcblx0ICAgICAgICAgICAgdGhpcy5fc3RhdGUuc2V0U3RhdGVBdFRpbWUoVG9uZS5TdGF0ZS5TdGFydGVkLCB0aW1lKTtcblx0ICAgICAgICAgICAgdGhpcy5yZXN0YXJ0KHRpbWUsIG9mZnNldCwgZHVyYXRpb24pO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3N0YXRlLnNldFN0YXRlQXRUaW1lKFRvbmUuU3RhdGUuU3RhcnRlZCwgdGltZSk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9zeW5jZWQpIHtcblx0ICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgb2Zmc2V0IHRpbWUgdG8gdGhlIGV2ZW50XG5cdCAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLl9zdGF0ZS5nZXQodGltZSk7XG5cdCAgICAgICAgICAgICAgICBldmVudC5vZmZzZXQgPSBUb25lLmRlZmF1bHRBcmcob2Zmc2V0LCAwKTtcblx0ICAgICAgICAgICAgICAgIGV2ZW50LmR1cmF0aW9uID0gZHVyYXRpb247XG5cdCAgICAgICAgICAgICAgICB2YXIgc2NoZWQgPSBUb25lLlRyYW5zcG9ydC5zY2hlZHVsZShmdW5jdGlvbiAodCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0KHQsIG9mZnNldCwgZHVyYXRpb24pO1xuXHQgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCB0aW1lKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlZC5wdXNoKHNjaGVkKTtcblx0ICAgICAgICAgICAgICAgIC8vaWYgaXQncyBhbHJlYWR5IHN0YXJ0ZWRcblx0ICAgICAgICAgICAgICAgIGlmIChUb25lLlRyYW5zcG9ydC5zdGF0ZSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3luY2VkU3RhcnQodGhpcy5ub3coKSwgVG9uZS5UcmFuc3BvcnQuc2Vjb25kcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9zdGFydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdG9wIHRoZSBzb3VyY2UgYXQgdGhlIHNwZWNpZmllZCB0aW1lLiBJZiBubyB0aW1lIGlzIGdpdmVuLFxuXHRcdCAqICBzdG9wIHRoZSBzb3VyY2Ugbm93LlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbdGltZT1ub3ddIFdoZW4gdGhlIHNvdXJjZSBzaG91bGQgYmUgc3RvcHBlZC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuU291cmNlfSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogc291cmNlLnN0b3AoKTsgLy8gc3RvcHMgdGhlIHNvdXJjZSBpbW1lZGlhdGVseVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Tb3VyY2UucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIGlmIChUb25lLmlzVW5kZWYodGltZSkgJiYgdGhpcy5fc3luY2VkKSB7XG5cdCAgICAgICAgICAgIHRpbWUgPSBUb25lLlRyYW5zcG9ydC5zZWNvbmRzO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCF0aGlzLl9zeW5jZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fc3RvcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBzY2hlZCA9IFRvbmUuVHJhbnNwb3J0LnNjaGVkdWxlKHRoaXMuX3N0b3AuYmluZCh0aGlzKSwgdGltZSk7XG5cdCAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlZC5wdXNoKHNjaGVkKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fc3RhdGUuY2FuY2VsKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX3N0YXRlLnNldFN0YXRlQXRUaW1lKFRvbmUuU3RhdGUuU3RvcHBlZCwgdGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFN5bmMgdGhlIHNvdXJjZSB0byB0aGUgVHJhbnNwb3J0IHNvIHRoYXQgYWxsIHN1YnNlcXVlbnRcblx0XHQgKiAgY2FsbHMgdG8gYHN0YXJ0YCBhbmQgYHN0b3BgIGFyZSBzeW5jZWQgdG8gdGhlIFRyYW5zcG9ydFRpbWVcblx0XHQgKiAgaW5zdGVhZCBvZiB0aGUgQXVkaW9Db250ZXh0IHRpbWUuXG5cdFx0ICpcblx0XHQgKiAgQHJldHVybnMge1RvbmUuU291cmNlfSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9zeW5jIHRoZSBzb3VyY2Ugc28gdGhhdCBpdCBwbGF5cyBiZXR3ZWVuIDAgYW5kIDAuMyBvbiB0aGUgVHJhbnNwb3J0J3MgdGltZWxpbmVcblx0XHQgKiBzb3VyY2Uuc3luYygpLnN0YXJ0KDApLnN0b3AoMC4zKTtcblx0XHQgKiAvL3N0YXJ0IHRoZSB0cmFuc3BvcnQuXG5cdFx0ICogVG9uZS5UcmFuc3BvcnQuc3RhcnQoKTtcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vc3RhcnQgdGhlIHRyYW5zcG9ydCB3aXRoIGFuIG9mZnNldCBhbmQgdGhlIHN5bmMnZWQgc291cmNlc1xuXHRcdCAqIC8vd2lsbCBzdGFydCBpbiB0aGUgY29ycmVjdCBwb3NpdGlvblxuXHRcdCAqIHNvdXJjZS5zeW5jKCkuc3RhcnQoMC4xKTtcblx0XHQgKiAvL3RoZSBzb3VyY2Ugd2lsbCBiZSBpbnZva2VkIHdpdGggYW4gb2Zmc2V0IG9mIDAuNFxuXHRcdCAqIFRvbmUuVHJhbnNwb3J0LnN0YXJ0KFwiKzAuNVwiLCAwLjUpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Tb3VyY2UucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5fc3luY2VkID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLl9zeW5jZWRTdGFydCA9IGZ1bmN0aW9uICh0aW1lLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgaWYgKG9mZnNldCA+IDApIHtcblx0ICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgcGxheWJhY2sgc3RhdGUgYXQgdGhhdCB0aW1lXG5cdCAgICAgICAgICAgICAgICB2YXIgc3RhdGVFdmVudCA9IHRoaXMuX3N0YXRlLmdldChvZmZzZXQpO1xuXHQgICAgICAgICAgICAgICAgLy8gbGlzdGVuIGZvciBzdGFydCBldmVudHMgd2hpY2ggbWF5IG9jY3VyIGluIHRoZSBtaWRkbGUgb2YgdGhlIHN5bmMnZWQgdGltZVxuXHQgICAgICAgICAgICAgICAgaWYgKHN0YXRlRXZlbnQgJiYgc3RhdGVFdmVudC5zdGF0ZSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkICYmIHN0YXRlRXZlbnQudGltZSAhPT0gb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBvZmZzZXRcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRPZmZzZXQgPSBvZmZzZXQgLSB0aGlzLnRvU2Vjb25kcyhzdGF0ZUV2ZW50LnRpbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbjtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGVFdmVudC5kdXJhdGlvbikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHRoaXMudG9TZWNvbmRzKHN0YXRlRXZlbnQuZHVyYXRpb24pIC0gc3RhcnRPZmZzZXQ7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0KHRpbWUsIHRoaXMudG9TZWNvbmRzKHN0YXRlRXZlbnQub2Zmc2V0KSArIHN0YXJ0T2Zmc2V0LCBkdXJhdGlvbik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LmJpbmQodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fc3luY2VkU3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgICAgIHZhciBzZWNvbmRzID0gVG9uZS5UcmFuc3BvcnQuZ2V0U2Vjb25kc0F0VGltZShNYXRoLm1heCh0aW1lIC0gdGhpcy5zYW1wbGVUaW1lLCAwKSk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZS5nZXRWYWx1ZUF0VGltZShzZWNvbmRzKSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9zdG9wKHRpbWUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpO1xuXHQgICAgICAgIFRvbmUuVHJhbnNwb3J0Lm9uKCdzdGFydCBsb29wU3RhcnQnLCB0aGlzLl9zeW5jZWRTdGFydCk7XG5cdCAgICAgICAgVG9uZS5UcmFuc3BvcnQub24oJ3N0b3AgcGF1c2UgbG9vcEVuZCcsIHRoaXMuX3N5bmNlZFN0b3ApO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBVbnN5bmMgdGhlIHNvdXJjZSB0byB0aGUgVHJhbnNwb3J0LiBTZWUgVG9uZS5Tb3VyY2Uuc3luY1xuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Tb3VyY2V9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuU291cmNlLnByb3RvdHlwZS51bnN5bmMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuX3N5bmNlZCkge1xuXHQgICAgICAgICAgICBUb25lLlRyYW5zcG9ydC5vZmYoJ3N0b3AgcGF1c2UgbG9vcEVuZCcsIHRoaXMuX3N5bmNlZFN0b3ApO1xuXHQgICAgICAgICAgICBUb25lLlRyYW5zcG9ydC5vZmYoJ3N0YXJ0IGxvb3BTdGFydCcsIHRoaXMuX3N5bmNlZFN0YXJ0KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fc3luY2VkID0gZmFsc2U7XG5cdCAgICAgICAgLy8gY2xlYXIgYWxsIG9mIHRoZSBzY2hlZHVsZWQgaWRzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zY2hlZHVsZWQubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5fc2NoZWR1bGVkW2ldO1xuXHQgICAgICAgICAgICBUb25lLlRyYW5zcG9ydC5jbGVhcihpZCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuX3NjaGVkdWxlZCA9IFtdO1xuXHQgICAgICAgIHRoaXMuX3N0YXRlLmNhbmNlbCgwKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKlx0Q2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm4ge1RvbmUuU291cmNlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMudW5zeW5jKCk7XG5cdCAgICAgICAgdGhpcy5fc2NoZWR1bGVkID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZSgndm9sdW1lJyk7XG5cdCAgICAgICAgdGhpcy5fdm9sdW1lLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl92b2x1bWUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMudm9sdW1lID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9zdGF0ZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fc3RhdGUgPSBudWxsO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlNvdXJjZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgLyoqXG5cdFx0ICogIEF1ZGlvQnVmZmVyLmNvcHlUby9Gcm9tQ2hhbm5lbCBwb2x5ZmlsbFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgaWYgKFRvbmUuc3VwcG9ydGVkKSB7XG5cdCAgICAgICAgaWYgKCFBdWRpb0J1ZmZlci5wcm90b3R5cGUuY29weVRvQ2hhbm5lbCkge1xuXHQgICAgICAgICAgICBBdWRpb0J1ZmZlci5wcm90b3R5cGUuY29weVRvQ2hhbm5lbCA9IGZ1bmN0aW9uIChzcmMsIGNoYW5OdW0sIHN0YXJ0KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2hhbm5lbCA9IHRoaXMuZ2V0Q2hhbm5lbERhdGEoY2hhbk51bSk7XG5cdCAgICAgICAgICAgICAgICBzdGFydCA9IHN0YXJ0IHx8IDA7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYW5uZWwubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBjaGFubmVsW2kgKyBzdGFydF0gPSBzcmNbaV07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIEF1ZGlvQnVmZmVyLnByb3RvdHlwZS5jb3B5RnJvbUNoYW5uZWwgPSBmdW5jdGlvbiAoZGVzdCwgY2hhbk51bSwgc3RhcnQpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjaGFubmVsID0gdGhpcy5nZXRDaGFubmVsRGF0YShjaGFuTnVtKTtcblx0ICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVzdC5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGRlc3RbaV0gPSBjaGFubmVsW2kgKyBzdGFydF07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIEJ1ZmZlciBsb2FkaW5nIGFuZCBzdG9yYWdlLiBUb25lLkJ1ZmZlciBpcyB1c2VkIGludGVybmFsbHkgYnkgYWxsXG5cdFx0ICogICAgICAgICAgY2xhc3NlcyB0aGF0IG1ha2UgcmVxdWVzdHMgZm9yIGF1ZGlvIGZpbGVzIHN1Y2ggYXMgVG9uZS5QbGF5ZXIsXG5cdFx0ICogICAgICAgICAgVG9uZS5TYW1wbGVyIGFuZCBUb25lLkNvbnZvbHZlci5cblx0XHQgKlxuXHRcdCAqICAgICAgICAgIEFzaWRlIGZyb20gbG9hZCBjYWxsYmFja3MgZnJvbSBpbmRpdmlkdWFsIGJ1ZmZlcnMsIFRvbmUuQnVmZmVyXG5cdFx0ICogIFx0XHRwcm92aWRlcyBldmVudHMgd2hpY2gga2VlcCB0cmFjayBvZiB0aGUgbG9hZGluZyBwcm9ncmVzc1xuXHRcdCAqICBcdFx0b2YgX2FsbF8gb2YgdGhlIGJ1ZmZlcnMuIFRoZXNlIGFyZSBUb25lLkJ1ZmZlci5vbihcImxvYWRcIiAvIFwicHJvZ3Jlc3NcIiAvIFwiZXJyb3JcIilcblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmV9XG5cdFx0ICogIEBwYXJhbSB7QXVkaW9CdWZmZXJ8U3RyaW5nfSB1cmwgVGhlIHVybCB0byBsb2FkLCBvciB0aGUgYXVkaW8gYnVmZmVyIHRvIHNldC5cblx0XHQgKiAgQHBhcmFtIHtGdW5jdGlvbj19IG9ubG9hZCBBIGNhbGxiYWNrIHdoaWNoIGlzIGludm9rZWQgYWZ0ZXIgdGhlIGJ1ZmZlciBpcyBsb2FkZWQuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgSXQncyByZWNvbW1lbmRlZCB0byB1c2UgYFRvbmUuQnVmZmVyLm9uKCdsb2FkJywgY2FsbGJhY2spYCBpbnN0ZWFkXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luY2UgaXQgd2lsbCBnaXZlIHlvdSBhIGNhbGxiYWNrIHdoZW4gX2FsbF8gYnVmZmVycyBhcmUgbG9hZGVkLlxuXHRcdCAqICBAcGFyYW0ge0Z1bmN0aW9uPX0gb25lcnJvciBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGlmIHRoZXJlIGlzIGFuIGVycm9yXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIGJ1ZmZlciA9IG5ldyBUb25lLkJ1ZmZlcihcInBhdGgvdG8vc291bmQubXAzXCIsIGZ1bmN0aW9uKCl7XG5cdFx0ICogXHQvL3RoZSBidWZmZXIgaXMgbm93IGF2YWlsYWJsZS5cblx0XHQgKiBcdHZhciBidWZmID0gYnVmZmVyLmdldCgpO1xuXHRcdCAqIH0pO1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vY2FuIGxvYWQgcHJvdmlkZSBmYWxsYmFjayBleHRlbnNpb24gdHlwZXMgaWYgdGhlIGZpcnN0IHR5cGUgaXMgbm90IHN1cHBvcnRlZC5cblx0XHQgKiB2YXIgYnVmZmVyID0gbmV3IFRvbmUuQnVmZmVyKFwicGF0aC90by9zb3VuZC5bbXAzfG9nZ3x3YXZdXCIpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAndXJsJyxcblx0ICAgICAgICAgICAgJ29ubG9hZCcsXG5cdCAgICAgICAgICAgICdvbmVycm9yJ1xuXHQgICAgICAgIF0sIFRvbmUuQnVmZmVyKTtcblx0ICAgICAgICBUb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgc3RvcmVzIHRoZSBsb2FkZWQgQXVkaW9CdWZmZXJcblx0XHRcdCAqICBAdHlwZSB7QXVkaW9CdWZmZXJ9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2J1ZmZlciA9IG51bGw7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgaW5kaWNhdGVzIGlmIHRoZSBidWZmZXIgc2hvdWxkIGJlIHJldmVyc2VkIG9yIG5vdFxuXHRcdFx0ICogIEB0eXBlIHtCb29sZWFufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9yZXZlcnNlZCA9IG9wdGlvbnMucmV2ZXJzZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgWEhSXG5cdFx0XHQgKiAgQHR5cGUgIHtYTUxIdHRwUmVxdWVzdH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5feGhyID0gbnVsbDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFByaXZhdGUgY2FsbGJhY2sgd2hlbiB0aGUgYnVmZmVyIGlzIGxvYWRlZC5cblx0XHRcdCAqIEB0eXBlIHtGdW5jdGlvbn1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9vbmxvYWQgPSBUb25lLm5vT3A7XG5cdCAgICAgICAgaWYgKG9wdGlvbnMudXJsIGluc3RhbmNlb2YgQXVkaW9CdWZmZXIgfHwgb3B0aW9ucy51cmwgaW5zdGFuY2VvZiBUb25lLkJ1ZmZlcikge1xuXHQgICAgICAgICAgICB0aGlzLnNldChvcHRpb25zLnVybCk7XG5cdCAgICAgICAgICAgIC8vIGludm9rZSB0aGUgb25sb2FkIGNhbGxiYWNrXG5cdCAgICAgICAgICAgIGlmIChvcHRpb25zLm9ubG9hZCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubG9hZGVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbmxvYWQodGhpcyk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX29ubG9hZCA9IG9wdGlvbnMub25sb2FkO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmIChUb25lLmlzU3RyaW5nKG9wdGlvbnMudXJsKSkge1xuXHQgICAgICAgICAgICB0aGlzLmxvYWQob3B0aW9ucy51cmwpLnRoZW4ob3B0aW9ucy5vbmxvYWQpLmNhdGNoKG9wdGlvbnMub25lcnJvcik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuQnVmZmVyKTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgZGVmYXVsdCBwYXJhbWV0ZXJzXG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlci5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAndXJsJzogdW5kZWZpbmVkLFxuXHQgICAgICAgICdyZXZlcnNlJzogZmFsc2UsXG5cdCAgICAgICAgJ29ubG9hZCc6IFRvbmUubm9PcCxcblx0ICAgICAgICAnb25lcnJvcic6IFRvbmUubm9PcFxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBQYXNzIGluIGFuIEF1ZGlvQnVmZmVyIG9yIFRvbmUuQnVmZmVyIHRvIHNldCB0aGUgdmFsdWVcblx0XHQgKiAgb2YgdGhpcyBidWZmZXIuXG5cdFx0ICogIEBwYXJhbSB7QXVkaW9CdWZmZXJ8VG9uZS5CdWZmZXJ9IGJ1ZmZlciB0aGUgYnVmZmVyXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkJ1ZmZlcn0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChidWZmZXIpIHtcblx0ICAgICAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgVG9uZS5CdWZmZXIpIHtcblx0ICAgICAgICAgICAgaWYgKGJ1ZmZlci5sb2FkZWQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlciA9IGJ1ZmZlci5nZXQoKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGJ1ZmZlci5fb25sb2FkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KGJ1ZmZlcik7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25sb2FkKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5fYnVmZmVyID0gYnVmZmVyO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQHJldHVybiB7QXVkaW9CdWZmZXJ9IFRoZSBhdWRpbyBidWZmZXIgc3RvcmVkIGluIHRoZSBvYmplY3QuXG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXI7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIE1ha2VzIGFuIHhociByZXFlc3QgZm9yIHRoZSBzZWxlY3RlZCB1cmwgdGhlbiBkZWNvZGVzXG5cdFx0ICogIHRoZSBmaWxlIGFzIGFuIGF1ZGlvIGJ1ZmZlci4gSW52b2tlc1xuXHRcdCAqICB0aGUgY2FsbGJhY2sgb25jZSB0aGUgYXVkaW8gYnVmZmVyIGxvYWRzLlxuXHRcdCAqICBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSB1cmwgb2YgdGhlIGJ1ZmZlciB0byBsb2FkLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlIHN1cHBvcnQgZGVwZW5kcyBvbiB0aGVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICBicm93c2VyLlxuXHRcdCAqICBAcmV0dXJucyB7UHJvbWlzZX0gcmV0dXJucyBhIFByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgd2l0aCB0aGUgVG9uZS5CdWZmZXJcblx0XHQgKi9cblx0ICAgIFRvbmUuQnVmZmVyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKHVybCwgb25sb2FkLCBvbmVycm9yKSB7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAobG9hZCwgZXJyb3IpIHtcblx0ICAgICAgICAgICAgdGhpcy5feGhyID0gVG9uZS5CdWZmZXIubG9hZCh1cmwsIC8vc3VjY2Vzc1xuXHQgICAgICAgICAgICBmdW5jdGlvbiAoYnVmZikge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5feGhyID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2V0KGJ1ZmYpO1xuXHQgICAgICAgICAgICAgICAgbG9hZCh0aGlzKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX29ubG9hZCh0aGlzKTtcblx0ICAgICAgICAgICAgICAgIGlmIChvbmxvYWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBvbmxvYWQodGhpcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgLy9lcnJvclxuXHQgICAgICAgICAgICBmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl94aHIgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgZXJyb3IoZXJyKTtcblx0ICAgICAgICAgICAgICAgIGlmIChvbmVycm9yKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgb25lcnJvcihlcnIpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIGRpc3Bvc2UgYW5kIGRpc2Nvbm5lY3Rcblx0XHQgKiAgQHJldHVybnMge1RvbmUuQnVmZmVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fYnVmZmVyID0gbnVsbDtcblx0ICAgICAgICBpZiAodGhpcy5feGhyKSB7XG5cdCAgICAgICAgICAgIFRvbmUuQnVmZmVyLl9yZW1vdmVGcm9tRG93bmxvYWRRdWV1ZSh0aGlzLl94aHIpO1xuXHQgICAgICAgICAgICB0aGlzLl94aHIuYWJvcnQoKTtcblx0ICAgICAgICAgICAgdGhpcy5feGhyID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogSWYgdGhlIGJ1ZmZlciBpcyBsb2FkZWQgb3Igbm90XG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQnVmZmVyI1xuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqIEBuYW1lIGxvYWRlZFxuXHRcdCAqIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQnVmZmVyLnByb3RvdHlwZSwgJ2xvYWRlZCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoID4gMDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgYnVmZmVyLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkJ1ZmZlciNcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBuYW1lIGR1cmF0aW9uXG5cdFx0ICogQHJlYWRPbmx5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5CdWZmZXIucHJvdG90eXBlLCAnZHVyYXRpb24nLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9idWZmZXIpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIuZHVyYXRpb247XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGxlbmd0aCBvZiB0aGUgYnVmZmVyIGluIHNhbXBsZXNcblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5CdWZmZXIjXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAbmFtZSBsZW5ndGhcblx0XHQgKiBAcmVhZE9ubHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkJ1ZmZlci5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9idWZmZXIpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIubGVuZ3RoO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBudW1iZXIgb2YgZGlzY3JldGUgYXVkaW8gY2hhbm5lbHMuIFJldHVybnMgMCBpZiBubyBidWZmZXJcblx0XHQgKiBpcyBsb2FkZWQuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQnVmZmVyI1xuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogQG5hbWUgbnVtYmVyT2ZDaGFubmVsc1xuXHRcdCAqIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQnVmZmVyLnByb3RvdHlwZSwgJ251bWJlck9mQ2hhbm5lbHMnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9idWZmZXIpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIubnVtYmVyT2ZDaGFubmVscztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAwO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgU2V0IHRoZSBhdWRpbyBidWZmZXIgZnJvbSB0aGUgYXJyYXkuIFRvIGNyZWF0ZSBhIG11bHRpY2hhbm5lbCBBdWRpb0J1ZmZlcixcblx0XHQgKiAgcGFzcyBpbiBhIG11bHRpZGltZW5zaW9uYWwgYXJyYXkuXG5cdFx0ICogIEBwYXJhbSB7RmxvYXQzMkFycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbCB0aGUgYXVkaW8gYnVmZmVyXG5cdFx0ICogIEByZXR1cm4ge1RvbmUuQnVmZmVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlci5wcm90b3R5cGUuZnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG5cdCAgICAgICAgdmFyIGlzTXVsdGlkaW1lbnNpb25hbCA9IGFycmF5WzBdLmxlbmd0aCA+IDA7XG5cdCAgICAgICAgdmFyIGNoYW5uZWxzID0gaXNNdWx0aWRpbWVuc2lvbmFsID8gYXJyYXkubGVuZ3RoIDogMTtcblx0ICAgICAgICB2YXIgbGVuID0gaXNNdWx0aWRpbWVuc2lvbmFsID8gYXJyYXlbMF0ubGVuZ3RoIDogYXJyYXkubGVuZ3RoO1xuXHQgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyKGNoYW5uZWxzLCBsZW4sIHRoaXMuY29udGV4dC5zYW1wbGVSYXRlKTtcblx0ICAgICAgICBpZiAoIWlzTXVsdGlkaW1lbnNpb25hbCAmJiBjaGFubmVscyA9PT0gMSkge1xuXHQgICAgICAgICAgICBhcnJheSA9IFthcnJheV07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgY2hhbm5lbHM7IGMrKykge1xuXHQgICAgICAgICAgICBidWZmZXIuY29weVRvQ2hhbm5lbChhcnJheVtjXSwgYyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuX2J1ZmZlciA9IGJ1ZmZlcjtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBcdFN1bXMgbXVsaXBsZSBjaGFubmVscyBpbnRvIDEgY2hhbm5lbFxuXHRcdCAqICBAcGFyYW0ge051bWJlcj19IGNoYW5uZWwgT3B0aW9uYWxseSBvbmx5IGNvcHkgYSBzaW5nbGUgY2hhbm5lbCBmcm9tIHRoZSBhcnJheS5cblx0XHQgKiAgQHJldHVybiB7QXJyYXl9XG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlci5wcm90b3R5cGUudG9Nb25vID0gZnVuY3Rpb24gKGNoYW5OdW0pIHtcblx0ICAgICAgICBpZiAoVG9uZS5pc051bWJlcihjaGFuTnVtKSkge1xuXHQgICAgICAgICAgICB0aGlzLmZyb21BcnJheSh0aGlzLnRvQXJyYXkoY2hhbk51bSkpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBvdXRwdXRBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5sZW5ndGgpO1xuXHQgICAgICAgICAgICB2YXIgbnVtQ2hhbm5lbHMgPSB0aGlzLm51bWJlck9mQ2hhbm5lbHM7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgbnVtQ2hhbm5lbHM7IGNoYW5uZWwrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGNoYW5uZWxBcnJheSA9IHRoaXMudG9BcnJheShjaGFubmVsKTtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhbm5lbEFycmF5Lmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgb3V0cHV0QXJyYXlbaV0gKz0gY2hhbm5lbEFycmF5W2ldO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIC8vZGl2aWRlIGJ5IHRoZSBudW1iZXIgb2YgY2hhbm5lbHNcblx0ICAgICAgICAgICAgb3V0cHV0QXJyYXkgPSBvdXRwdXRBcnJheS5tYXAoZnVuY3Rpb24gKHNhbXBsZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHNhbXBsZSAvIG51bUNoYW5uZWxzO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgdGhpcy5mcm9tQXJyYXkob3V0cHV0QXJyYXkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBcdEdldCB0aGUgYnVmZmVyIGFzIGFuIGFycmF5LiBTaW5nbGUgY2hhbm5lbCBidWZmZXJzIHdpbGwgcmV0dXJuIGEgMS1kaW1lbnNpb25hbFxuXHRcdCAqIFx0RmxvYXQzMkFycmF5LCBhbmQgbXVsdGljaGFubmVsIGJ1ZmZlcnMgd2lsbCByZXR1cm4gbXVsdGlkaW1lbnNpb25hbCBhcnJheXMuXG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyPX0gY2hhbm5lbCBPcHRpb25hbGx5IG9ubHkgY29weSBhIHNpbmdsZSBjaGFubmVsIGZyb20gdGhlIGFycmF5LlxuXHRcdCAqICBAcmV0dXJuIHtBcnJheX1cblx0XHQgKi9cblx0ICAgIFRvbmUuQnVmZmVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gKGNoYW5uZWwpIHtcblx0ICAgICAgICBpZiAoVG9uZS5pc051bWJlcihjaGFubmVsKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDaGFubmVsRGF0YShjaGFubmVsKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHRoaXMubnVtYmVyT2ZDaGFubmVscyA9PT0gMSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KDApO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciByZXQgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCB0aGlzLm51bWJlck9mQ2hhbm5lbHM7IGMrKykge1xuXHQgICAgICAgICAgICAgICAgcmV0W2NdID0gdGhpcy5nZXRDaGFubmVsRGF0YShjKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gcmV0O1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJucyB0aGUgRmxvYXQzMkFycmF5IHJlcHJlc2VudGluZyB0aGUgUENNIGF1ZGlvIGRhdGEgZm9yIHRoZSBzcGVjaWZpYyBjaGFubmVsLlxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICBjaGFubmVsICBUaGUgY2hhbm5lbCBudW1iZXIgdG8gcmV0dXJuXG5cdFx0ICogIEByZXR1cm4gIHtGbG9hdDMyQXJyYXl9ICBUaGUgYXVkaW8gYXMgYSBUeXBlZEFycmF5XG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlci5wcm90b3R5cGUuZ2V0Q2hhbm5lbERhdGEgPSBmdW5jdGlvbiAoY2hhbm5lbCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIuZ2V0Q2hhbm5lbERhdGEoY2hhbm5lbCk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEN1dCBhIHN1YnNlY3Rpb24gb2YgdGhlIGFycmF5IGFuZCByZXR1cm4gYSBidWZmZXIgb2YgdGhlXG5cdFx0ICogIHN1YnNlY3Rpb24uIERvZXMgbm90IG1vZGlmeSB0aGUgb3JpZ2luYWwgYnVmZmVyXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gc3RhcnQgVGhlIHRpbWUgdG8gc3RhcnQgdGhlIHNsaWNlXG5cdFx0ICogIEBwYXJhbSB7VGltZT19IGVuZCBUaGUgZW5kIHRpbWUgdG8gc2xpY2UuIElmIG5vbmUgaXMgZ2l2ZW5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgIHdpbGwgZGVmYXVsdCB0byB0aGUgZW5kIG9mIHRoZSBidWZmZXJcblx0XHQgKiAgQHJldHVybiB7VG9uZS5CdWZmZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG5cdCAgICAgICAgZW5kID0gVG9uZS5kZWZhdWx0QXJnKGVuZCwgdGhpcy5kdXJhdGlvbik7XG5cdCAgICAgICAgdmFyIHN0YXJ0U2FtcGxlcyA9IE1hdGguZmxvb3IodGhpcy5jb250ZXh0LnNhbXBsZVJhdGUgKiB0aGlzLnRvU2Vjb25kcyhzdGFydCkpO1xuXHQgICAgICAgIHZhciBlbmRTYW1wbGVzID0gTWF0aC5mbG9vcih0aGlzLmNvbnRleHQuc2FtcGxlUmF0ZSAqIHRoaXMudG9TZWNvbmRzKGVuZCkpO1xuXHQgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5udW1iZXJPZkNoYW5uZWxzOyBpKyspIHtcblx0ICAgICAgICAgICAgcmVwbGFjZW1lbnRbaV0gPSB0aGlzLnRvQXJyYXkoaSkuc2xpY2Uoc3RhcnRTYW1wbGVzLCBlbmRTYW1wbGVzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIHJldEJ1ZmZlciA9IG5ldyBUb25lLkJ1ZmZlcigpLmZyb21BcnJheShyZXBsYWNlbWVudCk7XG5cdCAgICAgICAgcmV0dXJuIHJldEJ1ZmZlcjtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV2ZXJzZSB0aGUgYnVmZmVyLlxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqICBAcmV0dXJuIHtUb25lLkJ1ZmZlcn0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXIucHJvdG90eXBlLl9yZXZlcnNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmxvYWRlZCkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubnVtYmVyT2ZDaGFubmVsczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucmV2ZXJzZS5jYWxsKHRoaXMuZ2V0Q2hhbm5lbERhdGEoaSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFJldmVyc2UgdGhlIGJ1ZmZlci5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5CdWZmZXIjXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XG5cdFx0ICogQG5hbWUgcmV2ZXJzZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQnVmZmVyLnByb3RvdHlwZSwgJ3JldmVyc2UnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXZlcnNlZDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHJldikge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fcmV2ZXJzZWQgIT09IHJldikge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fcmV2ZXJzZWQgPSByZXY7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9yZXZlcnNlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy8gU1RBVElDIE1FVEhPRFNcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9zdGF0aWNhbGx5IGluaGVyaXRzIEVtaXR0ZXIgbWV0aG9kc1xuXHQgICAgVG9uZS5FbWl0dGVyLm1peGluKFRvbmUuQnVmZmVyKTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgc3RhdGljIHF1ZXVlIGZvciBhbGwgb2YgdGhlIHhociByZXF1ZXN0c1xuXHRcdCAqICBAdHlwZSB7QXJyYXl9XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlci5fZG93bmxvYWRRdWV1ZSA9IFtdO1xuXHQgICAgLyoqXG5cdFx0ICogIEEgcGF0aCB3aGljaCBpcyBwcmVmaXhlZCBiZWZvcmUgZXZlcnkgdXJsLlxuXHRcdCAqICBAdHlwZSAge1N0cmluZ31cblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXIuYmFzZVVybCA9ICcnO1xuXHQgICAgLyoqXG5cdFx0ICogIENyZWF0ZSBhIFRvbmUuQnVmZmVyIGZyb20gdGhlIGFycmF5LiBUbyBjcmVhdGUgYSBtdWx0aWNoYW5uZWwgQXVkaW9CdWZmZXIsXG5cdFx0ICogIHBhc3MgaW4gYSBtdWx0aWRpbWVuc2lvbmFsIGFycmF5LlxuXHRcdCAqICBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwgdGhlIGF1ZGlvIGJ1ZmZlclxuXHRcdCAqICBAcmV0dXJuIHtUb25lLkJ1ZmZlcn0gQSBUb25lLkJ1ZmZlciBjcmVhdGVkIGZyb20gdGhlIGFycmF5XG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlci5mcm9tQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IFRvbmUuQnVmZmVyKCkuZnJvbUFycmF5KGFycmF5KTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBDcmVhdGVzIGEgVG9uZS5CdWZmZXIgZnJvbSBhIFVSTCwgcmV0dXJucyBhIHByb21pc2Vcblx0XHQgKiB3aGljaCByZXNvbHZlcyB0byBhIFRvbmUuQnVmZmVyXG5cdFx0ICogQHBhcmFtICB7U3RyaW5nfSB1cmwgVGhlIHVybCB0byBsb2FkLlxuXHRcdCAqIEByZXR1cm4ge1Byb21pc2U8VG9uZS5CdWZmZXI+fSAgICAgQSBwcm9taXNlIHdoaWNoIHJlc29sdmVzIHRvIGEgVG9uZS5CdWZmZXJcblx0XHQgKi9cblx0ICAgIFRvbmUuQnVmZmVyLmZyb21VcmwgPSBmdW5jdGlvbiAodXJsKSB7XG5cdCAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBUb25lLkJ1ZmZlcigpO1xuXHQgICAgICAgIHJldHVybiBidWZmZXIubG9hZCh1cmwpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFJlbW92ZSBhbiB4aHIgcmVxdWVzdCBmcm9tIHRoZSBkb3dubG9hZCBxdWV1ZVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlci5fcmVtb3ZlRnJvbURvd25sb2FkUXVldWUgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuXHQgICAgICAgIHZhciBpbmRleCA9IFRvbmUuQnVmZmVyLl9kb3dubG9hZFF1ZXVlLmluZGV4T2YocmVxdWVzdCk7XG5cdCAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuXHQgICAgICAgICAgICBUb25lLkJ1ZmZlci5fZG93bmxvYWRRdWV1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgTG9hZHMgYSB1cmwgdXNpbmcgWE1MSHR0cFJlcXVlc3QuXG5cdFx0ICogIEBwYXJhbSB7U3RyaW5nfSB1cmxcblx0XHQgKiAgQHBhcmFtIHtGdW5jdGlvbn0gb25sb2FkXG5cdFx0ICogIEBwYXJhbSB7RnVuY3Rpb259IG9uZXJyb3Jcblx0XHQgKiAgQHBhcmFtIHtGdW5jdGlvbn0gb25wcm9ncmVzc1xuXHRcdCAqICBAcmV0dXJuIHtYTUxIdHRwUmVxdWVzdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuQnVmZmVyLmxvYWQgPSBmdW5jdGlvbiAodXJsLCBvbmxvYWQsIG9uZXJyb3IpIHtcblx0ICAgICAgICAvL2RlZmF1bHRcblx0ICAgICAgICBvbmxvYWQgPSBUb25lLmRlZmF1bHRBcmcob25sb2FkLCBUb25lLm5vT3ApO1xuXHQgICAgICAgIC8vIHRlc3QgaWYgdGhlIHVybCBjb250YWlucyBtdWx0aXBsZSBleHRlbnNpb25zXG5cdCAgICAgICAgdmFyIG1hdGNoZXMgPSB1cmwubWF0Y2goL1xcWyguK1xcfD8pK1xcXSQvKTtcblx0ICAgICAgICBpZiAobWF0Y2hlcykge1xuXHQgICAgICAgICAgICB2YXIgZXh0ZW5zaW9ucyA9IG1hdGNoZXNbMV0uc3BsaXQoJ3wnKTtcblx0ICAgICAgICAgICAgdmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnNbMF07XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXh0ZW5zaW9ucy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKFRvbmUuQnVmZmVyLnN1cHBvcnRzVHlwZShleHRlbnNpb25zW2ldKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnNbaV07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UobWF0Y2hlc1swXSwgZXh0ZW5zaW9uKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZnVuY3Rpb24gb25FcnJvcihlKSB7XG5cdCAgICAgICAgICAgIFRvbmUuQnVmZmVyLl9yZW1vdmVGcm9tRG93bmxvYWRRdWV1ZShyZXF1ZXN0KTtcblx0ICAgICAgICAgICAgVG9uZS5CdWZmZXIuZW1pdCgnZXJyb3InLCBlKTtcblx0ICAgICAgICAgICAgaWYgKG9uZXJyb3IpIHtcblx0ICAgICAgICAgICAgICAgIG9uZXJyb3IoZSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZ1bmN0aW9uIG9uUHJvZ3Jlc3MoKSB7XG5cdCAgICAgICAgICAgIC8vY2FsY3VsYXRlIHRoZSBwcm9ncmVzc1xuXHQgICAgICAgICAgICB2YXIgdG90YWxQcm9ncmVzcyA9IDA7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgVG9uZS5CdWZmZXIuX2Rvd25sb2FkUXVldWUubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHRvdGFsUHJvZ3Jlc3MgKz0gVG9uZS5CdWZmZXIuX2Rvd25sb2FkUXVldWVbaV0ucHJvZ3Jlc3M7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgVG9uZS5CdWZmZXIuZW1pdCgncHJvZ3Jlc3MnLCB0b3RhbFByb2dyZXNzIC8gVG9uZS5CdWZmZXIuX2Rvd25sb2FkUXVldWUubGVuZ3RoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0ICAgICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIFRvbmUuQnVmZmVyLmJhc2VVcmwgKyB1cmwsIHRydWUpO1xuXHQgICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcblx0ICAgICAgICAvL3N0YXJ0IG91dCBhcyAwXG5cdCAgICAgICAgcmVxdWVzdC5wcm9ncmVzcyA9IDA7XG5cdCAgICAgICAgVG9uZS5CdWZmZXIuX2Rvd25sb2FkUXVldWUucHVzaChyZXF1ZXN0KTtcblx0ICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMjAwKSB7XG5cdCAgICAgICAgICAgICAgICBUb25lLmNvbnRleHQuZGVjb2RlQXVkaW9EYXRhKHJlcXVlc3QucmVzcG9uc2UpLnRoZW4oZnVuY3Rpb24gKGJ1ZmYpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnByb2dyZXNzID0gMTtcblx0ICAgICAgICAgICAgICAgICAgICBvblByb2dyZXNzKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgb25sb2FkKGJ1ZmYpO1xuXHQgICAgICAgICAgICAgICAgICAgIFRvbmUuQnVmZmVyLl9yZW1vdmVGcm9tRG93bmxvYWRRdWV1ZShyZXF1ZXN0KTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoVG9uZS5CdWZmZXIuX2Rvd25sb2FkUXVldWUubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vZW1pdCB0aGUgZXZlbnQgYXQgdGhlIGVuZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBUb25lLkJ1ZmZlci5lbWl0KCdsb2FkJyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIFRvbmUuQnVmZmVyLl9yZW1vdmVGcm9tRG93bmxvYWRRdWV1ZShyZXF1ZXN0KTtcblx0ICAgICAgICAgICAgICAgICAgICBvbkVycm9yKCdUb25lLkJ1ZmZlcjogY291bGQgbm90IGRlY29kZSBhdWRpbyBkYXRhOiAnICsgdXJsKTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgb25FcnJvcignVG9uZS5CdWZmZXI6IGNvdWxkIG5vdCBsb2NhdGUgZmlsZTogJyArIHVybCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG5cdCAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICBpZiAoZXZlbnQubGVuZ3RoQ29tcHV0YWJsZSkge1xuXHQgICAgICAgICAgICAgICAgLy9vbmx5IGdvIHRvIDk1JSwgdGhlIGxhc3QgNSUgaXMgd2hlbiB0aGUgYXVkaW8gaXMgZGVjb2RlZFxuXHQgICAgICAgICAgICAgICAgcmVxdWVzdC5wcm9ncmVzcyA9IGV2ZW50LmxvYWRlZCAvIGV2ZW50LnRvdGFsICogMC45NTtcblx0ICAgICAgICAgICAgICAgIG9uUHJvZ3Jlc3MoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJlcXVlc3Quc2VuZCgpO1xuXHQgICAgICAgIHJldHVybiByZXF1ZXN0O1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdG9wIGFsbCBvZiB0aGUgZG93bmxvYWRzIGluIHByb2dyZXNzXG5cdFx0ICogIEByZXR1cm4ge1RvbmUuQnVmZmVyfVxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlci5jYW5jZWxEb3dubG9hZHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5CdWZmZXIuX2Rvd25sb2FkUXVldWUuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG5cdCAgICAgICAgICAgIFRvbmUuQnVmZmVyLl9yZW1vdmVGcm9tRG93bmxvYWRRdWV1ZShyZXF1ZXN0KTtcblx0ICAgICAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybiBUb25lLkJ1ZmZlcjtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2hlY2tzIGEgdXJsJ3MgZXh0ZW5zaW9uIHRvIHNlZSBpZiB0aGUgY3VycmVudCBicm93c2VyIGNhbiBwbGF5IHRoYXQgZmlsZSB0eXBlLlxuXHRcdCAqICBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSB1cmwvZXh0ZW5zaW9uIHRvIHRlc3Rcblx0XHQgKiAgQHJldHVybiB7Qm9vbGVhbn0gSWYgdGhlIGZpbGUgZXh0ZW5zaW9uIGNhbiBiZSBwbGF5ZWRcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIFRvbmUuQnVmZmVyLnN1cHBvcnRzVHlwZShcIndhdlwiKTsgLy9yZXR1cm5zIHRydWVcblx0XHQgKiBUb25lLkJ1ZmZlci5zdXBwb3J0c1R5cGUoXCJwYXRoL3RvL2ZpbGUud2F2XCIpOyAvL3JldHVybnMgdHJ1ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXIuc3VwcG9ydHNUeXBlID0gZnVuY3Rpb24gKHVybCkge1xuXHQgICAgICAgIHZhciBleHRlbnNpb24gPSB1cmwuc3BsaXQoJy4nKTtcblx0ICAgICAgICBleHRlbnNpb24gPSBleHRlbnNpb25bZXh0ZW5zaW9uLmxlbmd0aCAtIDFdO1xuXHQgICAgICAgIHZhciByZXNwb25zZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJykuY2FuUGxheVR5cGUoJ2F1ZGlvLycgKyBleHRlbnNpb24pO1xuXHQgICAgICAgIHJldHVybiByZXNwb25zZSAhPT0gJyc7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybnMgYSBQcm9taXNlIHdoaWNoIHJlc29sdmVzIHdoZW4gYWxsIG9mIHRoZSBidWZmZXJzIGhhdmUgbG9hZGVkXG5cdFx0ICogIEByZXR1cm4ge1Byb21pc2V9XG5cdFx0ICovXG5cdCAgICBUb25lLmxvYWRlZCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb25sb2FkLCBvbmVycm9yO1xuXHQgICAgICAgIGZ1bmN0aW9uIHJlbW92ZUV2ZW50cygpIHtcblx0ICAgICAgICAgICAgLy9yZW1vdmUgdGhlIGV2ZW50cyB3aGVuIGl0J3MgcmVzb2x2ZWRcblx0ICAgICAgICAgICAgVG9uZS5CdWZmZXIub2ZmKCdsb2FkJywgb25sb2FkKTtcblx0ICAgICAgICAgICAgVG9uZS5CdWZmZXIub2ZmKCdlcnJvcicsIG9uZXJyb3IpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHN1Y2Nlc3MsIGZhaWwpIHtcblx0ICAgICAgICAgICAgb25sb2FkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgc3VjY2VzcygpO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICBvbmVycm9yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgZmFpbCgpO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAvL2FkZCB0aGUgZXZlbnQgbGlzdGVuZXJzXG5cdCAgICAgICAgICAgIFRvbmUuQnVmZmVyLm9uKCdsb2FkJywgb25sb2FkKTtcblx0ICAgICAgICAgICAgVG9uZS5CdWZmZXIub24oJ2Vycm9yJywgb25lcnJvcik7XG5cdCAgICAgICAgfSkudGhlbihyZW1vdmVFdmVudHMpLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgIHJlbW92ZUV2ZW50cygpO1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuQnVmZmVyO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFdyYXBwZXIgYXJvdW5kIHRoZSBuYXRpdmUgZmlyZS1hbmQtZm9yZ2V0IE9zY2lsbGF0b3JOb2RlLiBBZGRzIHRoZVxuXHRcdCAqICAgICBhYmlsaXR5IHRvIHJlc2NoZWR1bGUgdGhlIHN0b3AgbWV0aG9kLlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogIEBwYXJhbSAge0F1ZGlvQnVmZmVyfFRvbmUuQnVmZmVyfSAgYnVmZmVyICAgVGhlIGJ1ZmZlciB0byBwbGF5XG5cdFx0ICogIEBwYXJhbSAge0Z1bmN0aW9ufSAgb25sb2FkICBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gdGhlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyIGlzIGRvbmUgcGxheWluZy5cblx0XHQgKi9cblx0ICAgIFRvbmUuT3NjaWxsYXRvck5vZGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ3R5cGUnXG5cdCAgICAgICAgXSwgVG9uZS5Pc2NpbGxhdG9yTm9kZSk7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGFmdGVyIHRoZVxuXHRcdFx0ICogIGJ1ZmZlciBzb3VyY2UgaXMgZG9uZSBwbGF5aW5nLlxuXHRcdFx0ICogIEB0eXBlICB7RnVuY3Rpb259XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm9uZW5kZWQgPSBvcHRpb25zLm9uZW5kZWQ7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG9zY2lsbGF0b3Igc3RhcnQgdGltZVxuXHRcdFx0ICogIEB0eXBlICB7TnVtYmVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSAtMTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgb3NjaWxsYXRvciBzdG9wIHRpbWVcblx0XHRcdCAqICBAdHlwZSAge051bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc3RvcFRpbWUgPSAtMTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZ2FpbiBub2RlIHdoaWNoIGVudmVsb3BlcyB0aGUgT3NjaWxsYXRvck5vZGVcblx0XHRcdCAqICBAdHlwZSAge1RvbmUuR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZ2Fpbk5vZGUgPSB0aGlzLm91dHB1dCA9IG5ldyBUb25lLkdhaW4oKTtcblx0ICAgICAgICB0aGlzLl9nYWluTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKDAsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG9zY2lsbGF0b3Jcblx0XHRcdCAqICBAdHlwZSAge09zY2lsbGF0b3JOb2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yID0gdGhpcy5jb250ZXh0LmNyZWF0ZU9zY2lsbGF0b3IoKTtcblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLmNvbm5lY3QodGhpcy5fZ2Fpbk5vZGUpO1xuXHQgICAgICAgIHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZnJlcXVlbmN5IG9mIHRoZSBvc2NpbGxhdG9yXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG5ldyBUb25lLlBhcmFtKHRoaXMuX29zY2lsbGF0b3IuZnJlcXVlbmN5LCBUb25lLlR5cGUuRnJlcXVlbmN5KTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeS52YWx1ZSA9IG9wdGlvbnMuZnJlcXVlbmN5O1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBkZXR1bmUgb2YgdGhlIG9zY2lsbGF0b3Jcblx0XHRcdCAqICBAdHlwZSB7RnJlcXVlbmN5fVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gbmV3IFRvbmUuUGFyYW0odGhpcy5fb3NjaWxsYXRvci5kZXR1bmUsIFRvbmUuVHlwZS5DZW50cyk7XG5cdCAgICAgICAgdGhpcy5kZXR1bmUudmFsdWUgPSBvcHRpb25zLmRldHVuZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgdmFsdWUgdGhhdCB0aGUgYnVmZmVyIHJhbXBzIHRvXG5cdFx0XHQgKiAgQHR5cGUge0dhaW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2dhaW4gPSAxO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuT3NjaWxsYXRvck5vZGUsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdHNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Pc2NpbGxhdG9yTm9kZS5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnZnJlcXVlbmN5JzogNDQwLFxuXHQgICAgICAgICdkZXR1bmUnOiAwLFxuXHQgICAgICAgICd0eXBlJzogJ3NpbmUnLFxuXHQgICAgICAgICdvbmVuZGVkJzogVG9uZS5ub09wXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybnMgdGhlIHBsYXliYWNrIHN0YXRlIG9mIHRoZSBvc2NpbGxhdG9yLCBlaXRoZXIgXCJzdGFydGVkXCIgb3IgXCJzdG9wcGVkXCIuXG5cdFx0ICogIEB0eXBlIHtUb25lLlN0YXRlfVxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuT3NjaWxsYXRvck5vZGUjXG5cdFx0ICogIEBuYW1lIHN0YXRlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Pc2NpbGxhdG9yTm9kZS5wcm90b3R5cGUsICdzdGF0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGVBdFRpbWUodGhpcy5ub3coKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgR2V0IHRoZSBwbGF5YmFjayBzdGF0ZSBhdCB0aGUgZ2l2ZW4gdGltZVxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSAgdGltZSAgVGhlIHRpbWUgdG8gdGVzdCB0aGUgc3RhdGUgYXRcblx0XHQgKiAgQHJldHVybiAge1RvbmUuU3RhdGV9ICBUaGUgcGxheWJhY2sgc3RhdGUuIFxuXHRcdCAqL1xuXHQgICAgVG9uZS5Pc2NpbGxhdG9yTm9kZS5wcm90b3R5cGUuZ2V0U3RhdGVBdFRpbWUgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICBpZiAodGhpcy5fc3RhcnRUaW1lICE9PSAtMSAmJiB0aW1lID49IHRoaXMuX3N0YXJ0VGltZSAmJiAodGhpcy5fc3RvcFRpbWUgPT09IC0xIHx8IHRpbWUgPD0gdGhpcy5fc3RvcFRpbWUpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBUb25lLlN0YXRlLlN0YXJ0ZWQ7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuU3RhdGUuU3RvcHBlZDtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdCAgICAgKiBTdGFydCB0aGUgb3NjaWxsYXRvciBub2RlIGF0IHRoZSBnaXZlbiB0aW1lXG5cdCAgICAgKiBAcGFyYW0gIHtUaW1lPX0gdGltZSBXaGVuIHRvIHN0YXJ0IHRoZSBvc2NpbGxhdG9yXG5cdCAgICAgKiBAcmV0dXJuIHtPc2NpbGxhdG9yTm9kZX0gICAgICB0aGlzXG5cdCAgICAgKi9cblx0ICAgIFRvbmUuT3NjaWxsYXRvck5vZGUucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICBpZiAodGhpcy5fc3RhcnRUaW1lID09PSAtMSkge1xuXHQgICAgICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5zdGFydCh0aGlzLl9zdGFydFRpbWUpO1xuXHQgICAgICAgICAgICB2YXIgbm93ID0gdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lO1xuXHQgICAgICAgICAgICB0aGlzLl9nYWluTm9kZS5nYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyhub3cpO1xuXHQgICAgICAgICAgICB0aGlzLl9nYWluTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKDAsIG5vdyk7XG5cdCAgICAgICAgICAgIHRoaXMuX2dhaW5Ob2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUoMSwgdGhpcy5fc3RhcnRUaW1lKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBjYWxsIE9zY2lsbGF0b3JOb2RlLnN0YXJ0IG1vcmUgdGhhbiBvbmNlJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHQgICAgICogU2V0cyBhbiBhcmJpdHJhcnkgY3VzdG9tIHBlcmlvZGljIHdhdmVmb3JtIGdpdmVuIGEgUGVyaW9kaWNXYXZlLlxuXHQgICAgICogQHBhcmFtICB7UGVyaW9kaWNXYXZlfSBwZXJpb2RpY1dhdmUgUGVyaW9kaWNXYXZlIHNob3VsZCBiZSBjcmVhdGVkIHdpdGggY29udGV4dC5jcmVhdGVQZXJpb2RpY1dhdmVcblx0ICAgICAqIEByZXR1cm4ge09zY2lsbGF0b3JOb2RlfSB0aGlzXG5cdCAgICAgKi9cblx0ICAgIFRvbmUuT3NjaWxsYXRvck5vZGUucHJvdG90eXBlLnNldFBlcmlvZGljV2F2ZSA9IGZ1bmN0aW9uIChwZXJpb2RpY1dhdmUpIHtcblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLnNldFBlcmlvZGljV2F2ZShwZXJpb2RpY1dhdmUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHQgICAgICogU3RvcCB0aGUgb3NjaWxsYXRvciBub2RlIGF0IHRoZSBnaXZlbiB0aW1lXG5cdCAgICAgKiBAcGFyYW0gIHtUaW1lPX0gdGltZSBXaGVuIHRvIHN0b3AgdGhlIG9zY2lsbGF0b3Jcblx0ICAgICAqIEByZXR1cm4ge09zY2lsbGF0b3JOb2RlfSAgICAgIHRoaXNcblx0ICAgICAqL1xuXHQgICAgVG9uZS5Pc2NpbGxhdG9yTm9kZS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgLy9jYW5jZWwgdGhlIHByZXZpb3VzIHN0b3Bcblx0ICAgICAgICB0aGlzLmNhbmNlbFN0b3AoKTtcblx0ICAgICAgICAvL3Jlc2NoZWR1bGUgaXRcblx0ICAgICAgICB0aGlzLl9zdG9wVGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX2dhaW5Ob2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUoMCwgdGhpcy5fc3RvcFRpbWUpO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5jbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG5cdCAgICAgICAgdGhpcy5fdGltZW91dCA9IHRoaXMuY29udGV4dC5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5zdG9wKHRoaXMubm93KCkpO1xuXHQgICAgICAgICAgICB0aGlzLm9uZW5kZWQoKTtcblx0ICAgICAgICB9LmJpbmQodGhpcyksIHRoaXMuX3N0b3BUaW1lIC0gdGhpcy5ub3coKSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENhbmNlbCBhIHNjaGVkdWxlZCBzdG9wIGV2ZW50XG5cdFx0ICogIEByZXR1cm4gIHtUb25lLk9zY2lsbGF0b3JOb2RlfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Pc2NpbGxhdG9yTm9kZS5wcm90b3R5cGUuY2FuY2VsU3RvcCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5fc3RhcnRUaW1lICE9PSAtMSkge1xuXHQgICAgICAgICAgICAvL2NhbmNlbCB0aGUgc3RvcCBlbnZlbG9wZVxuXHQgICAgICAgICAgICB0aGlzLl9nYWluTm9kZS5nYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyh0aGlzLl9zdGFydFRpbWUgKyB0aGlzLnNhbXBsZVRpbWUpO1xuXHQgICAgICAgICAgICB0aGlzLl9nYWluTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKDEsIE1hdGgubWF4KHRoaXMubm93KCksIHRoaXMuX3N0YXJ0VGltZSkpO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuXHQgICAgICAgICAgICB0aGlzLl9zdG9wVGltZSA9IC0xO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBUaGUgb3NjaWxsYXRvciB0eXBlLiBFaXRoZXIgJ3NpbmUnLCAnc2F3dG9vdGgnLCAnc3F1YXJlJywgb3IgJ3RyaWFuZ2xlJ1xuXHRcdCAqIEBtZW1iZXJPZiBUb25lLk9zY2lsbGF0b3JOb2RlI1xuXHRcdCAqIEB0eXBlIHtUaW1lfVxuXHRcdCAqIEBuYW1lIHR5cGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLk9zY2lsbGF0b3JOb2RlLnByb3RvdHlwZSwgJ3R5cGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9vc2NpbGxhdG9yLnR5cGU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0eXBlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX29zY2lsbGF0b3IudHlwZSA9IHR5cGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLk9zY2lsbGF0b3JOb2RlfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Pc2NpbGxhdG9yTm9kZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5vbmVuZGVkID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9nYWluTm9kZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZ2Fpbk5vZGUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5kZXR1bmUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5Pc2NpbGxhdG9yTm9kZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuT3NjaWxsYXRvciBzdXBwb3J0cyBhIG51bWJlciBvZiBmZWF0dXJlcyBpbmNsdWRpbmdcblx0XHQgKiAgICAgICAgIHBoYXNlIHJvdGF0aW9uLCBtdWx0aXBsZSBvc2NpbGxhdG9yIHR5cGVzIChzZWUgVG9uZS5Pc2NpbGxhdG9yLnR5cGUpLFxuXHRcdCAqICAgICAgICAgYW5kIFRyYW5zcG9ydCBzeW5jaW5nIChzZWUgVG9uZS5Pc2NpbGxhdG9yLnN5bmNGcmVxdWVuY3kpLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5Tb3VyY2V9XG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fSBbZnJlcXVlbmN5XSBTdGFydGluZyBmcmVxdWVuY3lcblx0XHQgKiAgQHBhcmFtIHtzdHJpbmd9IFt0eXBlXSBUaGUgb3NjaWxsYXRvciB0eXBlLiBSZWFkIG1vcmUgYWJvdXQgdHlwZSBiZWxvdy5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL21ha2UgYW5kIHN0YXJ0IGEgNDQwaHogc2luZSB0b25lXG5cdFx0ICogdmFyIG9zYyA9IG5ldyBUb25lLk9zY2lsbGF0b3IoNDQwLCBcInNpbmVcIikudG9NYXN0ZXIoKS5zdGFydCgpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Pc2NpbGxhdG9yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICd0eXBlJ1xuXHQgICAgICAgIF0sIFRvbmUuT3NjaWxsYXRvcik7XG5cdCAgICAgICAgVG9uZS5Tb3VyY2UuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgbWFpbiBvc2NpbGxhdG9yXG5cdFx0XHQgKiAgQHR5cGUge09zY2lsbGF0b3JOb2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yID0gbnVsbDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZnJlcXVlbmN5IGNvbnRyb2wuXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG5ldyBUb25lLlNpZ25hbChvcHRpb25zLmZyZXF1ZW5jeSwgVG9uZS5UeXBlLkZyZXF1ZW5jeSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGRldHVuZSBjb250cm9sIHNpZ25hbC5cblx0XHRcdCAqICBAdHlwZSB7Q2VudHN9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5kZXR1bmUgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5kZXR1bmUsIFRvbmUuVHlwZS5DZW50cyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIHBlcmlvZGljIHdhdmVcblx0XHRcdCAqICBAdHlwZSB7UGVyaW9kaWNXYXZlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl93YXZlID0gbnVsbDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgcGFydGlhbHMgb2YgdGhlIG9zY2lsbGF0b3Jcblx0XHRcdCAqICBAdHlwZSB7QXJyYXl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3BhcnRpYWxzID0gVG9uZS5kZWZhdWx0QXJnKG9wdGlvbnMucGFydGlhbHMsIFsxXSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIHBoYXNlIG9mIHRoZSBvc2NpbGxhdG9yXG5cdFx0XHQgKiAgYmV0d2VlbiAwIC0gMzYwXG5cdFx0XHQgKiAgQHR5cGUge251bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcGhhc2UgPSBvcHRpb25zLnBoYXNlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSB0eXBlIG9mIHRoZSBvc2NpbGxhdG9yXG5cdFx0XHQgKiAgQHR5cGUge3N0cmluZ31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fdHlwZSA9IG51bGw7XG5cdCAgICAgICAgLy9zZXR1cFxuXHQgICAgICAgIHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZTtcblx0ICAgICAgICB0aGlzLnBoYXNlID0gdGhpcy5fcGhhc2U7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2RldHVuZSdcblx0ICAgICAgICBdKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLk9zY2lsbGF0b3IsIFRvbmUuU291cmNlKTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgZGVmYXVsdCBwYXJhbWV0ZXJzXG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLk9zY2lsbGF0b3IuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ3R5cGUnOiAnc2luZScsXG5cdCAgICAgICAgJ2ZyZXF1ZW5jeSc6IDQ0MCxcblx0ICAgICAgICAnZGV0dW5lJzogMCxcblx0ICAgICAgICAncGhhc2UnOiAwLFxuXHQgICAgICAgICdwYXJ0aWFscyc6IFtdXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBPc2NpbGxhdG9yIHR5cGVzXG5cdFx0ICogIEBlbnVtIHtTdHJpbmd9XG5cdFx0ICovXG5cdCAgICBUb25lLk9zY2lsbGF0b3IuVHlwZSA9IHtcblx0ICAgICAgICBTaW5lOiAnc2luZScsXG5cdCAgICAgICAgVHJpYW5nbGU6ICd0cmlhbmdsZScsXG5cdCAgICAgICAgU2F3dG9vdGg6ICdzYXd0b290aCcsXG5cdCAgICAgICAgU3F1YXJlOiAnc3F1YXJlJyxcblx0ICAgICAgICBDdXN0b206ICdjdXN0b20nXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIHN0YXJ0IHRoZSBvc2NpbGxhdG9yXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IFt0aW1lPW5vd11cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuT3NjaWxsYXRvci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICAvL25ldyBvc2NpbGxhdG9yIHdpdGggcHJldmlvdXMgdmFsdWVzXG5cdCAgICAgICAgdGhpcy5fb3NjaWxsYXRvciA9IG5ldyBUb25lLk9zY2lsbGF0b3JOb2RlKCk7XG5cdCAgICAgICAgaWYgKHRoaXMuX3dhdmUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5zZXRQZXJpb2RpY1dhdmUodGhpcy5fd2F2ZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci50eXBlID0gdGhpcy5fdHlwZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9jb25uZWN0IHRoZSBjb250cm9sIHNpZ25hbCB0byB0aGUgb3NjaWxsYXRvciBmcmVxdWVuY3kgJiBkZXR1bmVcblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLmNvbm5lY3QodGhpcy5vdXRwdXQpO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LmNvbm5lY3QodGhpcy5fb3NjaWxsYXRvci5mcmVxdWVuY3kpO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lLmNvbm5lY3QodGhpcy5fb3NjaWxsYXRvci5kZXR1bmUpO1xuXHQgICAgICAgIC8vc3RhcnQgdGhlIG9zY2lsbGF0b3Jcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5zdGFydCh0aW1lKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgc3RvcCB0aGUgb3NjaWxsYXRvclxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbdGltZT1ub3ddIChvcHRpb25hbCkgdGltaW5nIHBhcmFtZXRlclxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Pc2NpbGxhdG9yfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk9zY2lsbGF0b3IucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICBpZiAodGhpcy5fb3NjaWxsYXRvcikge1xuXHQgICAgICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgICAgIHRoaXMuX29zY2lsbGF0b3Iuc3RvcCh0aW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogUmVzdGFydCB0aGUgb3NjaWxsYXRvci4gRG9lcyBub3Qgc3RvcCB0aGUgb3NjaWxsYXRvciwgYnV0IGluc3RlYWRcblx0XHQgKiBqdXN0IGNhbmNlbHMgYW55IHNjaGVkdWxlZCAnc3RvcCcgZnJvbSBiZWluZyBpbnZva2VkLlxuXHRcdCAqIEBwYXJhbSAge1RpbWU9fSB0aW1lXG5cdFx0ICogQHJldHVybiB7VG9uZS5Pc2NpbGxhdG9yfSAgICAgIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuT3NjaWxsYXRvci5wcm90b3R5cGUucmVzdGFydCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5jYW5jZWxTdG9wKCk7XG5cdCAgICAgICAgdGhpcy5fc3RhdGUuY2FuY2VsKHRoaXMudG9TZWNvbmRzKHRpbWUpKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU3luYyB0aGUgc2lnbmFsIHRvIHRoZSBUcmFuc3BvcnQncyBicG0uIEFueSBjaGFuZ2VzIHRvIHRoZSB0cmFuc3BvcnRzIGJwbSxcblx0XHQgKiAgd2lsbCBhbHNvIGFmZmVjdCB0aGUgb3NjaWxsYXRvcnMgZnJlcXVlbmN5LlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Pc2NpbGxhdG9yfSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogVG9uZS5UcmFuc3BvcnQuYnBtLnZhbHVlID0gMTIwO1xuXHRcdCAqIG9zYy5mcmVxdWVuY3kudmFsdWUgPSA0NDA7XG5cdFx0ICogLy90aGUgcmF0aW9uIGJldHdlZW4gdGhlIGJwbSBhbmQgdGhlIGZyZXF1ZW5jeSB3aWxsIGJlIG1haW50YWluZWRcblx0XHQgKiBvc2Muc3luY0ZyZXF1ZW5jeSgpO1xuXHRcdCAqIFRvbmUuVHJhbnNwb3J0LmJwbS52YWx1ZSA9IDI0MDtcblx0XHQgKiAvLyB0aGUgZnJlcXVlbmN5IG9mIHRoZSBvc2NpbGxhdG9yIGlzIGRvdWJsZWQgdG8gODgwXG5cdFx0ICovXG5cdCAgICBUb25lLk9zY2lsbGF0b3IucHJvdG90eXBlLnN5bmNGcmVxdWVuY3kgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5UcmFuc3BvcnQuc3luY1NpZ25hbCh0aGlzLmZyZXF1ZW5jeSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFVuc3luYyB0aGUgb3NjaWxsYXRvcidzIGZyZXF1ZW5jeSBmcm9tIHRoZSBUcmFuc3BvcnQuXG5cdFx0ICogIFNlZSBUb25lLk9zY2lsbGF0b3Iuc3luY0ZyZXF1ZW5jeVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Pc2NpbGxhdG9yfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk9zY2lsbGF0b3IucHJvdG90eXBlLnVuc3luY0ZyZXF1ZW5jeSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlRyYW5zcG9ydC51bnN5bmNTaWduYWwodGhpcy5mcmVxdWVuY3kpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSB0eXBlIG9mIHRoZSBvc2NpbGxhdG9yOiBlaXRoZXIgc2luZSwgc3F1YXJlLCB0cmlhbmdsZSwgb3Igc2F3dG9vdGguIEFsc28gY2FwYWJsZSBvZlxuXHRcdCAqIHNldHRpbmcgdGhlIGZpcnN0IHggbnVtYmVyIG9mIHBhcnRpYWxzIG9mIHRoZSBvc2NpbGxhdG9yLiBGb3IgZXhhbXBsZTogXCJzaW5lNFwiIHdvdWxkXG5cdFx0ICogc2V0IGJlIHRoZSBmaXJzdCA0IHBhcnRpYWxzIG9mIHRoZSBzaW5lIHdhdmUgYW5kIFwidHJpYW5nbGU4XCIgd291bGQgc2V0IHRoZSBmaXJzdFxuXHRcdCAqIDggcGFydGlhbHMgb2YgdGhlIHRyaWFuZ2xlIHdhdmUuXG5cdFx0ICogPGJyPjxicj5cblx0XHQgKiBVc2VzIFBlcmlvZGljV2F2ZSBpbnRlcm5hbGx5IGV2ZW4gZm9yIG5hdGl2ZSB0eXBlcyBzbyB0aGF0IGl0IGNhbiBzZXQgdGhlIHBoYXNlLlxuXHRcdCAqIFBlcmlvZGljV2F2ZSBlcXVhdGlvbnMgYXJlIGZyb20gdGhlXG5cdFx0ICogW1dlYmtpdCBXZWIgQXVkaW8gaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vY29kZXNlYXJjaCNjaHJvbWl1bS9zcmMvdGhpcmRfcGFydHkvV2ViS2l0L1NvdXJjZS9tb2R1bGVzL3dlYmF1ZGlvL1BlcmlvZGljV2F2ZS5jcHAmc3E9cGFja2FnZTpjaHJvbWl1bSkuXG5cdFx0ICpcblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5Pc2NpbGxhdG9yI1xuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQG5hbWUgdHlwZVxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogLy9zZXQgaXQgdG8gYSBzcXVhcmUgd2F2ZVxuXHRcdCAqIG9zYy50eXBlID0gXCJzcXVhcmVcIjtcblx0XHQgKiBAZXhhbXBsZVxuXHRcdCAqIC8vc2V0IHRoZSBmaXJzdCA2IHBhcnRpYWxzIG9mIGEgc2F3dG9vdGggd2F2ZVxuXHRcdCAqIG9zYy50eXBlID0gXCJzYXd0b290aDZcIjtcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLk9zY2lsbGF0b3IucHJvdG90eXBlLCAndHlwZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0eXBlKSB7XG5cdCAgICAgICAgICAgIHZhciBpc0Jhc2ljVHlwZSA9IFtcblx0ICAgICAgICAgICAgICAgIFRvbmUuT3NjaWxsYXRvci5UeXBlLlNpbmUsXG5cdCAgICAgICAgICAgICAgICBUb25lLk9zY2lsbGF0b3IuVHlwZS5TcXVhcmUsXG5cdCAgICAgICAgICAgICAgICBUb25lLk9zY2lsbGF0b3IuVHlwZS5UcmlhbmdsZSxcblx0ICAgICAgICAgICAgICAgIFRvbmUuT3NjaWxsYXRvci5UeXBlLlNhd3Rvb3RoXG5cdCAgICAgICAgICAgIF0uaW5jbHVkZXModHlwZSk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9waGFzZSA9PT0gMCAmJiBpc0Jhc2ljVHlwZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fd2F2ZSA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICAvL2p1c3QgZ28gd2l0aCB0aGUgYmFzaWMgYXBwcm9hY2hcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vc2NpbGxhdG9yICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci50eXBlID09PSB0eXBlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdmFyIGNvZWZzID0gdGhpcy5fZ2V0UmVhbEltYWdpbmFyeSh0eXBlLCB0aGlzLl9waGFzZSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgcGVyaW9kaWNXYXZlID0gdGhpcy5jb250ZXh0LmNyZWF0ZVBlcmlvZGljV2F2ZShjb2Vmc1swXSwgY29lZnNbMV0pO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fd2F2ZSA9IHBlcmlvZGljV2F2ZTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vc2NpbGxhdG9yICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5zZXRQZXJpb2RpY1dhdmUodGhpcy5fd2F2ZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJucyB0aGUgcmVhbCBhbmQgaW1hZ2luYXJ5IGNvbXBvbmVudHMgYmFzZWRcblx0XHQgKiAgb24gdGhlIG9zY2lsbGF0b3IgdHlwZS5cblx0XHQgKiAgQHJldHVybnMge0FycmF5fSBbcmVhbCwgaW1hZ2luYXJ5XVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Pc2NpbGxhdG9yLnByb3RvdHlwZS5fZ2V0UmVhbEltYWdpbmFyeSA9IGZ1bmN0aW9uICh0eXBlLCBwaGFzZSkge1xuXHQgICAgICAgIHZhciBmZnRTaXplID0gNDA5Njtcblx0ICAgICAgICB2YXIgcGVyaW9kaWNXYXZlU2l6ZSA9IGZmdFNpemUgLyAyO1xuXHQgICAgICAgIHZhciByZWFsID0gbmV3IEZsb2F0MzJBcnJheShwZXJpb2RpY1dhdmVTaXplKTtcblx0ICAgICAgICB2YXIgaW1hZyA9IG5ldyBGbG9hdDMyQXJyYXkocGVyaW9kaWNXYXZlU2l6ZSk7XG5cdCAgICAgICAgdmFyIHBhcnRpYWxDb3VudCA9IDE7XG5cdCAgICAgICAgaWYgKHR5cGUgPT09IFRvbmUuT3NjaWxsYXRvci5UeXBlLkN1c3RvbSkge1xuXHQgICAgICAgICAgICBwYXJ0aWFsQ291bnQgPSB0aGlzLl9wYXJ0aWFscy5sZW5ndGggKyAxO1xuXHQgICAgICAgICAgICBwZXJpb2RpY1dhdmVTaXplID0gcGFydGlhbENvdW50O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBwYXJ0aWFsID0gL14oc2luZXx0cmlhbmdsZXxzcXVhcmV8c2F3dG9vdGgpKFxcZCspJC8uZXhlYyh0eXBlKTtcblx0ICAgICAgICAgICAgaWYgKHBhcnRpYWwpIHtcblx0ICAgICAgICAgICAgICAgIHBhcnRpYWxDb3VudCA9IHBhcnNlSW50KHBhcnRpYWxbMl0pICsgMTtcblx0ICAgICAgICAgICAgICAgIHR5cGUgPSBwYXJ0aWFsWzFdO1xuXHQgICAgICAgICAgICAgICAgcGFydGlhbENvdW50ID0gTWF0aC5tYXgocGFydGlhbENvdW50LCAyKTtcblx0ICAgICAgICAgICAgICAgIHBlcmlvZGljV2F2ZVNpemUgPSBwYXJ0aWFsQ291bnQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZm9yICh2YXIgbiA9IDE7IG4gPCBwZXJpb2RpY1dhdmVTaXplOyArK24pIHtcblx0ICAgICAgICAgICAgdmFyIHBpRmFjdG9yID0gMiAvIChuICogTWF0aC5QSSk7XG5cdCAgICAgICAgICAgIHZhciBiO1xuXHQgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcblx0ICAgICAgICAgICAgY2FzZSBUb25lLk9zY2lsbGF0b3IuVHlwZS5TaW5lOlxuXHQgICAgICAgICAgICAgICAgYiA9IG4gPD0gcGFydGlhbENvdW50ID8gMSA6IDA7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSBUb25lLk9zY2lsbGF0b3IuVHlwZS5TcXVhcmU6XG5cdCAgICAgICAgICAgICAgICBiID0gbiAmIDEgPyAyICogcGlGYWN0b3IgOiAwO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGNhc2UgVG9uZS5Pc2NpbGxhdG9yLlR5cGUuU2F3dG9vdGg6XG5cdCAgICAgICAgICAgICAgICBiID0gcGlGYWN0b3IgKiAobiAmIDEgPyAxIDogLTEpO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGNhc2UgVG9uZS5Pc2NpbGxhdG9yLlR5cGUuVHJpYW5nbGU6XG5cdCAgICAgICAgICAgICAgICBpZiAobiAmIDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICBiID0gMiAqIChwaUZhY3RvciAqIHBpRmFjdG9yKSAqIChuIC0gMSA+PiAxICYgMSA/IC0xIDogMSk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGIgPSAwO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGNhc2UgVG9uZS5Pc2NpbGxhdG9yLlR5cGUuQ3VzdG9tOlxuXHQgICAgICAgICAgICAgICAgYiA9IHRoaXMuX3BhcnRpYWxzW24gLSAxXTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVG9uZS5Pc2NpbGxhdG9yOiBpbnZhbGlkIHR5cGU6ICcgKyB0eXBlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAoYiAhPT0gMCkge1xuXHQgICAgICAgICAgICAgICAgcmVhbFtuXSA9IC1iICogTWF0aC5zaW4ocGhhc2UgKiBuKTtcblx0ICAgICAgICAgICAgICAgIGltYWdbbl0gPSBiICogTWF0aC5jb3MocGhhc2UgKiBuKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJlYWxbbl0gPSAwO1xuXHQgICAgICAgICAgICAgICAgaW1hZ1tuXSA9IDA7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIFtcblx0ICAgICAgICAgICAgcmVhbCxcblx0ICAgICAgICAgICAgaW1hZ1xuXHQgICAgICAgIF07XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENvbXB1dGUgdGhlIGludmVyc2UgRkZUIGZvciBhIGdpdmVuIHBoYXNlLlxuXHRcdCAqICBAcGFyYW0gIHtGbG9hdDMyQXJyYXl9ICByZWFsXG5cdFx0ICogIEBwYXJhbSAge0Zsb2F0MzJBcnJheX0gIGltYWdcblx0XHQgKiAgQHBhcmFtICB7Tm9ybWFsUmFuZ2V9ICBwaGFzZVxuXHRcdCAqICBAcmV0dXJuICB7QXVkaW9SYW5nZX1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuT3NjaWxsYXRvci5wcm90b3R5cGUuX2ludmVyc2VGRlQgPSBmdW5jdGlvbiAocmVhbCwgaW1hZywgcGhhc2UpIHtcblx0ICAgICAgICB2YXIgc3VtID0gMDtcblx0ICAgICAgICB2YXIgbGVuID0gcmVhbC5sZW5ndGg7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICAgICAgICBzdW0gKz0gcmVhbFtpXSAqIE1hdGguY29zKGkgKiBwaGFzZSkgKyBpbWFnW2ldICogTWF0aC5zaW4oaSAqIHBoYXNlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHN1bTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJucyB0aGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgb3NjaWxsYXRvci5cblx0XHQgKiAgQHJldHVybiAge0F1ZGlvUmFuZ2V9XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLk9zY2lsbGF0b3IucHJvdG90eXBlLl9nZXRJbml0aWFsVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGNvZWZzID0gdGhpcy5fZ2V0UmVhbEltYWdpbmFyeSh0aGlzLl90eXBlLCAwKTtcblx0ICAgICAgICB2YXIgcmVhbCA9IGNvZWZzWzBdO1xuXHQgICAgICAgIHZhciBpbWFnID0gY29lZnNbMV07XG5cdCAgICAgICAgdmFyIG1heFZhbHVlID0gMDtcblx0ICAgICAgICB2YXIgdHdvUGkgPSBNYXRoLlBJICogMjtcblx0ICAgICAgICAvL2NoZWNrIGZvciBwZWFrcyBpbiA4IHBsYWNlc1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG5cdCAgICAgICAgICAgIG1heFZhbHVlID0gTWF0aC5tYXgodGhpcy5faW52ZXJzZUZGVChyZWFsLCBpbWFnLCBpIC8gOCAqIHR3b1BpKSwgbWF4VmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gLXRoaXMuX2ludmVyc2VGRlQocmVhbCwgaW1hZywgdGhpcy5fcGhhc2UpIC8gbWF4VmFsdWU7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHBhcnRpYWxzIG9mIHRoZSB3YXZlZm9ybS4gQSBwYXJ0aWFsIHJlcHJlc2VudHNcblx0XHQgKiB0aGUgYW1wbGl0dWRlIGF0IGEgaGFybW9uaWMuIFRoZSBmaXJzdCBoYXJtb25pYyBpcyB0aGVcblx0XHQgKiBmdW5kYW1lbnRhbCBmcmVxdWVuY3ksIHRoZSBzZWNvbmQgaXMgdGhlIG9jdGF2ZSBhbmQgc28gb25cblx0XHQgKiBmb2xsb3dpbmcgdGhlIGhhcm1vbmljIHNlcmllcy5cblx0XHQgKiBTZXR0aW5nIHRoaXMgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IHNldCB0aGUgdHlwZSB0byBcImN1c3RvbVwiLlxuXHRcdCAqIFRoZSB2YWx1ZSBpcyBhbiBlbXB0eSBhcnJheSB3aGVuIHRoZSB0eXBlIGlzIG5vdCBcImN1c3RvbVwiLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLk9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge0FycmF5fVxuXHRcdCAqIEBuYW1lIHBhcnRpYWxzXG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiBvc2MucGFydGlhbHMgPSBbMSwgMC4yLCAwLjAxXTtcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLk9zY2lsbGF0b3IucHJvdG90eXBlLCAncGFydGlhbHMnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl90eXBlICE9PSBUb25lLk9zY2lsbGF0b3IuVHlwZS5DdXN0b20pIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBbXTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJ0aWFscztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocGFydGlhbHMpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcGFydGlhbHMgPSBwYXJ0aWFscztcblx0ICAgICAgICAgICAgdGhpcy50eXBlID0gVG9uZS5Pc2NpbGxhdG9yLlR5cGUuQ3VzdG9tO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHBoYXNlIG9mIHRoZSBvc2NpbGxhdG9yIGluIGRlZ3JlZXMuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuT3NjaWxsYXRvciNcblx0XHQgKiBAdHlwZSB7RGVncmVlc31cblx0XHQgKiBAbmFtZSBwaGFzZVxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogb3NjLnBoYXNlID0gMTgwOyAvL2ZsaXBzIHRoZSBwaGFzZSBvZiB0aGUgb3NjaWxsYXRvclxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuT3NjaWxsYXRvci5wcm90b3R5cGUsICdwaGFzZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BoYXNlICogKDE4MCAvIE1hdGguUEkpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocGhhc2UpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcGhhc2UgPSBwaGFzZSAqIE1hdGguUEkgLyAxODA7XG5cdCAgICAgICAgICAgIC8vcmVzZXQgdGhlIHR5cGVcblx0ICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5fdHlwZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBEaXNwb3NlIGFuZCBkaXNjb25uZWN0LlxuXHRcdCAqICBAcmV0dXJuIHtUb25lLk9zY2lsbGF0b3J9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuT3NjaWxsYXRvci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIGlmICh0aGlzLl9vc2NpbGxhdG9yICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX29zY2lsbGF0b3IuZGlzcG9zZSgpO1xuXHQgICAgICAgICAgICB0aGlzLl9vc2NpbGxhdG9yID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fd2F2ZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2RldHVuZSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmRldHVuZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fcGFydGlhbHMgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLk9zY2lsbGF0b3I7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBBdWRpb1RvR2FpbiBjb252ZXJ0cyBhbiBpbnB1dCBpbiBBdWRpb1JhbmdlIFstMSwxXSB0byBOb3JtYWxSYW5nZSBbMCwxXS4gXG5cdFx0ICogICAgICAgICBTZWUgVG9uZS5HYWluVG9BdWRpby5cblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5TaWduYWxCYXNlfVxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgdmFyIGEyZyA9IG5ldyBUb25lLkF1ZGlvVG9HYWluKCk7XG5cdFx0ICovXG5cdCAgICBUb25lLkF1ZGlvVG9HYWluID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsQmFzZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEB0eXBlIHtXYXZlU2hhcGVyTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbm9ybSA9IHRoaXMuaW5wdXQgPSB0aGlzLm91dHB1dCA9IG5ldyBUb25lLldhdmVTaGFwZXIoZnVuY3Rpb24gKHgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuICh4ICsgMSkgLyAyO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuQXVkaW9Ub0dhaW4sIFRvbmUuU2lnbmFsQmFzZSk7XG5cdCAgICAvKipcblx0XHQgKiAgY2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuQXVkaW9Ub0dhaW59IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQXVkaW9Ub0dhaW4ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fbm9ybS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbm9ybSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuQXVkaW9Ub0dhaW47XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgVG9uZS5aZXJvIG91dHB1dHMgMCdzIGF0IGF1ZGlvLXJhdGUuIFRoZSByZWFzb24gdGhpcyBoYXMgdG8gYmVcblx0XHQgKiAgICAgICAgIGl0J3Mgb3duIGNsYXNzIGlzIHRoYXQgbWFueSBicm93c2VycyBvcHRpbWl6ZSBvdXQgVG9uZS5TaWduYWxcblx0XHQgKiAgICAgICAgIHdpdGggYSB2YWx1ZSBvZiAwIGFuZCB3aWxsIG5vdCBwcm9jZXNzIG5vZGVzIGZ1cnRoZXIgZG93biB0aGUgZ3JhcGguXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLlNpZ25hbEJhc2V9XG5cdFx0ICovXG5cdCAgICBUb25lLlplcm8gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGdhaW4gbm9kZVxuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5HYWlufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9nYWluID0gdGhpcy5pbnB1dCA9IHRoaXMub3V0cHV0ID0gbmV3IFRvbmUuR2FpbigpO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5nZXRDb25zdGFudCgwKS5jb25uZWN0KHRoaXMuX2dhaW4pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuWmVybywgVG9uZS5TaWduYWxCYXNlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5aZXJvfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5aZXJvLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsQmFzZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX2dhaW4uZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2dhaW4gPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlplcm87XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgTEZPIHN0YW5kcyBmb3IgbG93IGZyZXF1ZW5jeSBvc2NpbGxhdG9yLiBUb25lLkxGTyBwcm9kdWNlcyBhbiBvdXRwdXQgc2lnbmFsXG5cdFx0ICogICAgICAgICAgd2hpY2ggY2FuIGJlIGF0dGFjaGVkIHRvIGFuIEF1ZGlvUGFyYW0gb3IgVG9uZS5TaWduYWxcblx0XHQgKiAgICAgICAgICBpbiBvcmRlciB0byBtb2R1bGF0ZSB0aGF0IHBhcmFtZXRlciB3aXRoIGFuIG9zY2lsbGF0b3IuIFRoZSBMRk8gY2FuXG5cdFx0ICogICAgICAgICAgYWxzbyBiZSBzeW5jZWQgdG8gdGhlIHRyYW5zcG9ydCB0byBzdGFydC9zdG9wIGFuZCBjaGFuZ2Ugd2hlbiB0aGUgdGVtcG8gY2hhbmdlcy5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAcGFyYW0ge0ZyZXF1ZW5jeXxPYmplY3R9IFtmcmVxdWVuY3ldIFRoZSBmcmVxdWVuY3kgb2YgdGhlIG9zY2lsbGF0aW9uLiBUeXBpY2FsbHksIExGT3Mgd2lsbCBiZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBmcmVxdWVuY3kgcmFuZ2Ugb2YgMC4xIHRvIDEwIGhlcnR6LlxuXHRcdCAqICBAcGFyYW0ge251bWJlcj19IG1pbiBUaGUgbWluaW11bSBvdXRwdXQgdmFsdWUgb2YgdGhlIExGTy5cblx0XHQgKiAgQHBhcmFtIHtudW1iZXI9fSBtYXggVGhlIG1heGltdW0gdmFsdWUgb2YgdGhlIExGTy5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgbGZvID0gbmV3IFRvbmUuTEZPKFwiNG5cIiwgNDAwLCA0MDAwKTtcblx0XHQgKiBsZm8uY29ubmVjdChmaWx0ZXIuZnJlcXVlbmN5KTtcblx0XHQgKi9cblx0ICAgIFRvbmUuTEZPID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdtaW4nLFxuXHQgICAgICAgICAgICAnbWF4J1xuXHQgICAgICAgIF0sIFRvbmUuTEZPKTtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBvc2NpbGxhdG9yLlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLk9zY2lsbGF0b3J9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX29zY2lsbGF0b3IgPSBuZXcgVG9uZS5Pc2NpbGxhdG9yKHtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeSc6IG9wdGlvbnMuZnJlcXVlbmN5LFxuXHQgICAgICAgICAgICAndHlwZSc6IG9wdGlvbnMudHlwZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBsZm8ncyBmcmVxdWVuY3lcblx0XHRcdCAqICBAdHlwZSB7RnJlcXVlbmN5fVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gdGhpcy5fb3NjaWxsYXRvci5mcmVxdWVuY3k7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgYW1wbGl0dWRlIG9mIHRoZSBMRk8sIHdoaWNoIGNvbnRyb2xzIHRoZSBvdXRwdXQgcmFuZ2UgYmV0d2VlblxuXHRcdFx0ICogdGhlIG1pbiBhbmQgbWF4IG91dHB1dC4gRm9yIGV4YW1wbGUgaWYgdGhlIG1pbiBpcyAtMTAgYW5kIHRoZSBtYXhcblx0XHRcdCAqIGlzIDEwLCBzZXR0aW5nIHRoZSBhbXBsaXR1ZGUgdG8gMC41IHdvdWxkIG1ha2UgdGhlIExGTyBtb2R1bGF0ZVxuXHRcdFx0ICogYmV0d2VlbiAtNSBhbmQgNS5cblx0XHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0XHQgKiBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmFtcGxpdHVkZSA9IHRoaXMuX29zY2lsbGF0b3Iudm9sdW1lO1xuXHQgICAgICAgIHRoaXMuYW1wbGl0dWRlLnVuaXRzID0gVG9uZS5UeXBlLk5vcm1hbFJhbmdlO1xuXHQgICAgICAgIHRoaXMuYW1wbGl0dWRlLnZhbHVlID0gb3B0aW9ucy5hbXBsaXR1ZGU7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHNpZ25hbCB3aGljaCBpcyBvdXRwdXQgd2hlbiB0aGUgTEZPIGlzIHN0b3BwZWRcblx0XHRcdCAqICBAdHlwZSAge1RvbmUuU2lnbmFsfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zdG9wcGVkU2lnbmFsID0gbmV3IFRvbmUuU2lnbmFsKDAsIFRvbmUuVHlwZS5BdWRpb1JhbmdlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBKdXN0IG91dHB1dHMgemVyb3MuXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuWmVyb31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5femVyb3MgPSBuZXcgVG9uZS5aZXJvKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHZhbHVlIHRoYXQgdGhlIExGTyBvdXRwdXRzIHdoZW4gaXQncyBzdG9wcGVkXG5cdFx0XHQgKiAgQHR5cGUge0F1ZGlvUmFuZ2V9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N0b3BwZWRWYWx1ZSA9IDA7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuQXVkaW9Ub0dhaW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2EyZyA9IG5ldyBUb25lLkF1ZGlvVG9HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuU2NhbGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3NjYWxlciA9IHRoaXMub3V0cHV0ID0gbmV3IFRvbmUuU2NhbGUob3B0aW9ucy5taW4sIG9wdGlvbnMubWF4KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgdW5pdHMgb2YgdGhlIExGTyAodXNlZCBmb3IgY29udmVydGluZylcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5UeXBlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl91bml0cyA9IFRvbmUuVHlwZS5EZWZhdWx0O1xuXHQgICAgICAgIHRoaXMudW5pdHMgPSBvcHRpb25zLnVuaXRzO1xuXHQgICAgICAgIC8vY29ubmVjdCBpdCB1cFxuXHQgICAgICAgIHRoaXMuX29zY2lsbGF0b3IuY2hhaW4odGhpcy5fYTJnLCB0aGlzLl9zY2FsZXIpO1xuXHQgICAgICAgIHRoaXMuX3plcm9zLmNvbm5lY3QodGhpcy5fYTJnKTtcblx0ICAgICAgICB0aGlzLl9zdG9wcGVkU2lnbmFsLmNvbm5lY3QodGhpcy5fYTJnKTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbXG5cdCAgICAgICAgICAgICdhbXBsaXR1ZGUnLFxuXHQgICAgICAgICAgICAnZnJlcXVlbmN5J1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIHRoaXMucGhhc2UgPSBvcHRpb25zLnBoYXNlO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuTEZPLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgdGhlIGRlZmF1bHQgcGFyYW1ldGVyc1xuXHRcdCAqXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLkxGTy5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAndHlwZSc6ICdzaW5lJyxcblx0ICAgICAgICAnbWluJzogMCxcblx0ICAgICAgICAnbWF4JzogMSxcblx0ICAgICAgICAncGhhc2UnOiAwLFxuXHQgICAgICAgICdmcmVxdWVuY3knOiAnNG4nLFxuXHQgICAgICAgICdhbXBsaXR1ZGUnOiAxLFxuXHQgICAgICAgICd1bml0cyc6IFRvbmUuVHlwZS5EZWZhdWx0XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFN0YXJ0IHRoZSBMRk8uXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IFt0aW1lPW5vd10gdGhlIHRpbWUgdGhlIExGTyB3aWxsIHN0YXJ0XG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkxGT30gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5MRk8ucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy5fc3RvcHBlZFNpZ25hbC5zZXRWYWx1ZUF0VGltZSgwLCB0aW1lKTtcblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLnN0YXJ0KHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdG9wIHRoZSBMRk8uXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IFt0aW1lPW5vd10gdGhlIHRpbWUgdGhlIExGTyB3aWxsIHN0b3Bcblx0XHQgKiAgQHJldHVybnMge1RvbmUuTEZPfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkxGTy5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX3N0b3BwZWRTaWduYWwuc2V0VmFsdWVBdFRpbWUodGhpcy5fc3RvcHBlZFZhbHVlLCB0aW1lKTtcblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLnN0b3AodGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFN5bmMgdGhlIHN0YXJ0L3N0b3AvcGF1c2UgdG8gdGhlIHRyYW5zcG9ydFxuXHRcdCAqICBhbmQgdGhlIGZyZXF1ZW5jeSB0byB0aGUgYnBtIG9mIHRoZSB0cmFuc3BvcnRcblx0XHQgKiAgQHJldHVybnMge1RvbmUuTEZPfSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogIGxmby5mcmVxdWVuY3kudmFsdWUgPSBcIjhuXCI7XG5cdFx0ICogIGxmby5zeW5jKCkuc3RhcnQoMClcblx0XHQgKiAgLy90aGUgcmF0ZSBvZiB0aGUgTEZPIHdpbGwgYWx3YXlzIGJlIGFuIGVpZ2h0aCBub3RlLFxuXHRcdCAqICAvL2V2ZW4gYXMgdGhlIHRlbXBvIGNoYW5nZXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTEZPLnByb3RvdHlwZS5zeW5jID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX29zY2lsbGF0b3Iuc3luYygpO1xuXHQgICAgICAgIHRoaXMuX29zY2lsbGF0b3Iuc3luY0ZyZXF1ZW5jeSgpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICB1bnN5bmMgdGhlIExGTyBmcm9tIHRyYW5zcG9ydCBjb250cm9sXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkxGT30gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5MRk8ucHJvdG90eXBlLnVuc3luYyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLnVuc3luYygpO1xuXHQgICAgICAgIHRoaXMuX29zY2lsbGF0b3IudW5zeW5jRnJlcXVlbmN5KCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIG1pbml1bXVtIG91dHB1dCBvZiB0aGUgTEZPLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkxGTyNcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBuYW1lIG1pblxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTEZPLnByb3RvdHlwZSwgJ21pbicsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RvVW5pdHModGhpcy5fc2NhbGVyLm1pbik7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChtaW4pIHtcblx0ICAgICAgICAgICAgbWluID0gdGhpcy5fZnJvbVVuaXRzKG1pbik7XG5cdCAgICAgICAgICAgIHRoaXMuX3NjYWxlci5taW4gPSBtaW47XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgbWF4aW11bSBvdXRwdXQgb2YgdGhlIExGTy5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5MRk8jXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAbmFtZSBtYXhcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkxGTy5wcm90b3R5cGUsICdtYXgnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl90b1VuaXRzKHRoaXMuX3NjYWxlci5tYXgpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAobWF4KSB7XG5cdCAgICAgICAgICAgIG1heCA9IHRoaXMuX2Zyb21Vbml0cyhtYXgpO1xuXHQgICAgICAgICAgICB0aGlzLl9zY2FsZXIubWF4ID0gbWF4O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHR5cGUgb2YgdGhlIG9zY2lsbGF0b3I6IHNpbmUsIHNxdWFyZSwgc2F3dG9vdGgsIHRyaWFuZ2xlLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkxGTyNcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBuYW1lIHR5cGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkxGTy5wcm90b3R5cGUsICd0eXBlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3NjaWxsYXRvci50eXBlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLnR5cGUgPSB0eXBlO1xuXHQgICAgICAgICAgICB0aGlzLl9zdG9wcGVkVmFsdWUgPSB0aGlzLl9vc2NpbGxhdG9yLl9nZXRJbml0aWFsVmFsdWUoKTtcblx0ICAgICAgICAgICAgdGhpcy5fc3RvcHBlZFNpZ25hbC52YWx1ZSA9IHRoaXMuX3N0b3BwZWRWYWx1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBwaGFzZSBvZiB0aGUgTEZPLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkxGTyNcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBuYW1lIHBoYXNlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5MRk8ucHJvdG90eXBlLCAncGhhc2UnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9vc2NpbGxhdG9yLnBoYXNlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocGhhc2UpIHtcblx0ICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5waGFzZSA9IHBoYXNlO1xuXHQgICAgICAgICAgICB0aGlzLl9zdG9wcGVkVmFsdWUgPSB0aGlzLl9vc2NpbGxhdG9yLl9nZXRJbml0aWFsVmFsdWUoKTtcblx0ICAgICAgICAgICAgdGhpcy5fc3RvcHBlZFNpZ25hbC52YWx1ZSA9IHRoaXMuX3N0b3BwZWRWYWx1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBvdXRwdXQgdW5pdHMgb2YgdGhlIExGTy5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5MRk8jXG5cdFx0ICogQHR5cGUge1RvbmUuVHlwZX1cblx0XHQgKiBAbmFtZSB1bml0c1xuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTEZPLnByb3RvdHlwZSwgJ3VuaXRzJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fdW5pdHM7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgICAgICAgdmFyIGN1cnJlbnRNaW4gPSB0aGlzLm1pbjtcblx0ICAgICAgICAgICAgdmFyIGN1cnJlbnRNYXggPSB0aGlzLm1heDtcblx0ICAgICAgICAgICAgLy9jb252ZXJ0IHRoZSBtaW4gYW5kIHRoZSBtYXhcblx0ICAgICAgICAgICAgdGhpcy5fdW5pdHMgPSB2YWw7XG5cdCAgICAgICAgICAgIHRoaXMubWluID0gY3VycmVudE1pbjtcblx0ICAgICAgICAgICAgdGhpcy5tYXggPSBjdXJyZW50TWF4O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogTXV0ZSB0aGUgb3V0cHV0LlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkxGTyNcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiBAbmFtZSBtdXRlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5MRk8ucHJvdG90eXBlLCAnbXV0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29zY2lsbGF0b3IubXV0ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG11dGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5tdXRlID0gbXV0ZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm5zIHRoZSBwbGF5YmFjayBzdGF0ZSBvZiB0aGUgc291cmNlLCBlaXRoZXIgXCJzdGFydGVkXCIgb3IgXCJzdG9wcGVkXCIuXG5cdFx0ICogIEB0eXBlIHtUb25lLlN0YXRlfVxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuTEZPI1xuXHRcdCAqICBAbmFtZSBzdGF0ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTEZPLnByb3RvdHlwZSwgJ3N0YXRlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3NjaWxsYXRvci5zdGF0ZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDb25uZWN0IHRoZSBvdXRwdXQgb2YgdGhlIExGTyB0byBhbiBBdWRpb1BhcmFtLCBBdWRpb05vZGUsIG9yIFRvbmUgTm9kZS5cblx0XHQgKiAgVG9uZS5MRk8gd2lsbCBhdXRvbWF0aWNhbGx5IGNvbnZlcnQgdG8gdGhlIGRlc3RpbmF0aW9uIHVuaXRzIG9mIHRoZVxuXHRcdCAqICB3aWxsIGdldCB0aGUgdW5pdHMgZnJvbSB0aGUgY29ubmVjdGVkIG5vZGUuXG5cdFx0ICogIEBwYXJhbSAge1RvbmUgfCBBdWRpb1BhcmFtIHwgQXVkaW9Ob2RlfSBub2RlXG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyfSBbb3V0cHV0TnVtPTBdIG9wdGlvbmFsbHkgd2hpY2ggb3V0cHV0IHRvIGNvbm5lY3QgZnJvbVxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gW2lucHV0TnVtPTBdIG9wdGlvbmFsbHkgd2hpY2ggaW5wdXQgdG8gY29ubmVjdCB0b1xuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5MRk99IHRoaXNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuTEZPLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKG5vZGUpIHtcblx0ICAgICAgICBpZiAobm9kZS5jb25zdHJ1Y3RvciA9PT0gVG9uZS5TaWduYWwgfHwgbm9kZS5jb25zdHJ1Y3RvciA9PT0gVG9uZS5QYXJhbSkge1xuXHQgICAgICAgICAgICB0aGlzLmNvbnZlcnQgPSBub2RlLmNvbnZlcnQ7XG5cdCAgICAgICAgICAgIHRoaXMudW5pdHMgPSBub2RlLnVuaXRzO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBUb25lLlNpZ25hbEJhc2UucHJvdG90eXBlLmNvbm5lY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgcHJpdmF0ZSBtZXRob2QgYm9ycm93ZWQgZnJvbSBQYXJhbSBjb252ZXJ0c1xuXHRcdCAqICB1bml0cyBmcm9tIHRoZWlyIGRlc3RpbmF0aW9uIHZhbHVlXG5cdFx0ICogIEBmdW5jdGlvblxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5MRk8ucHJvdG90eXBlLl9mcm9tVW5pdHMgPSBUb25lLlBhcmFtLnByb3RvdHlwZS5fZnJvbVVuaXRzO1xuXHQgICAgLyoqXG5cdFx0ICogIHByaXZhdGUgbWV0aG9kIGJvcnJvd2VkIGZyb20gUGFyYW0gY29udmVydHNcblx0XHQgKiAgdW5pdHMgdG8gdGhlaXIgZGVzdGluYXRpb24gdmFsdWVcblx0XHQgKiAgQGZ1bmN0aW9uXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkxGTy5wcm90b3R5cGUuX3RvVW5pdHMgPSBUb25lLlBhcmFtLnByb3RvdHlwZS5fdG9Vbml0cztcblx0ICAgIC8qKlxuXHRcdCAqICBkaXNjb25uZWN0IGFuZCBkaXNwb3NlXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkxGT30gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5MRk8ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdhbXBsaXR1ZGUnLFxuXHQgICAgICAgICAgICAnZnJlcXVlbmN5J1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIHRoaXMuX29zY2lsbGF0b3IuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX29zY2lsbGF0b3IgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3N0b3BwZWRTaWduYWwuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3N0b3BwZWRTaWduYWwgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3plcm9zLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl96ZXJvcyA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fc2NhbGVyLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9zY2FsZXIgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2EyZy5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fYTJnID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5hbXBsaXR1ZGUgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkxGTztcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuTGltaXRlciB3aWxsIGxpbWl0IHRoZSBsb3VkbmVzcyBvZiBhbiBpbmNvbWluZyBzaWduYWwuXG5cdFx0ICogICAgICAgICBJdCBpcyBjb21wb3NlZCBvZiBhIFRvbmUuQ29tcHJlc3NvciB3aXRoIGEgZmFzdCBhdHRhY2tcblx0XHQgKiAgICAgICAgIGFuZCByZWxlYXNlLiBMaW1pdGVycyBhcmUgY29tbW9ubHkgdXNlZCB0byBzYWZlZ3VhcmQgYWdhaW5zdFxuXHRcdCAqICAgICAgICAgc2lnbmFsIGNsaXBwaW5nLiBVbmxpa2UgYSBjb21wcmVzc29yLCBsaW1pdGVycyBkbyBub3QgcHJvdmlkZVxuXHRcdCAqICAgICAgICAgc21vb3RoIGdhaW4gcmVkdWN0aW9uIGFuZCBhbG1vc3QgY29tcGxldGVseSBwcmV2ZW50XG5cdFx0ICogICAgICAgICBhZGRpdGlvbmFsIGdhaW4gYWJvdmUgdGhlIHRocmVzaG9sZC5cblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gdGhyZXNob2xkIFRoZSB0aGVzaG9sZCBhYm92ZSB3aGljaCB0aGUgbGltaXRpbmcgaXMgYXBwbGllZC5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgdmFyIGxpbWl0ZXIgPSBuZXcgVG9uZS5MaW1pdGVyKC02KTtcblx0XHQgKi9cblx0ICAgIFRvbmUuTGltaXRlciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbJ3RocmVzaG9sZCddLCBUb25lLkxpbWl0ZXIpO1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGNvbXByZXNzb3Jcblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkNvbXByZXNzb3J9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9jb21wcmVzc29yID0gdGhpcy5pbnB1dCA9IHRoaXMub3V0cHV0ID0gbmV3IFRvbmUuQ29tcHJlc3Nvcih7XG5cdCAgICAgICAgICAgICdhdHRhY2snOiAwLjAwMSxcblx0ICAgICAgICAgICAgJ2RlY2F5JzogMC4wMDEsXG5cdCAgICAgICAgICAgICd0aHJlc2hvbGQnOiBvcHRpb25zLnRocmVzaG9sZFxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIHRocmVzaG9sZCBvZiBvZiB0aGUgbGltaXRlclxuXHRcdFx0ICogQHR5cGUge0RlY2liZWx9XG5cdFx0XHQgKiBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLnRocmVzaG9sZCA9IHRoaXMuX2NvbXByZXNzb3IudGhyZXNob2xkO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KCd0aHJlc2hvbGQnKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkxpbWl0ZXIsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdCB2YWx1ZVxuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqICBAY29uc3Rcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqL1xuXHQgICAgVG9uZS5MaW1pdGVyLmRlZmF1bHRzID0geyAndGhyZXNob2xkJzogLTEyIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkxpbWl0ZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTGltaXRlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX2NvbXByZXNzb3IuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2NvbXByZXNzb3IgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKCd0aHJlc2hvbGQnKTtcblx0ICAgICAgICB0aGlzLnRocmVzaG9sZCA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuTGltaXRlcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuTG93cGFzcyBpcyBhIGxvd3Bhc3MgZmVlZGJhY2sgY29tYiBmaWx0ZXIuIEl0IGlzIHNpbWlsYXIgdG9cblx0XHQgKiAgICAgICAgIFRvbmUuRmVlZGJhY2tDb21iRmlsdGVyLCBidXQgaW5jbHVkZXMgYSBsb3dwYXNzIGZpbHRlci5cblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAcGFyYW0ge1RpbWV8T2JqZWN0fSBbZGVsYXlUaW1lXSBUaGUgZGVsYXkgdGltZSBvZiB0aGUgY29tYiBmaWx0ZXJcblx0XHQgKiAgQHBhcmFtIHtOb3JtYWxSYW5nZT19IHJlc29uYW5jZSBUaGUgcmVzb25hbmNlIChmZWVkYmFjaykgb2YgdGhlIGNvbWIgZmlsdGVyXG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5PX0gZGFtcGVuaW5nIFRoZSBjdXRvZmYgb2YgdGhlIGxvd3Bhc3MgZmlsdGVyIGRhbXBlbnMgdGhlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbCBhcyBpdCBpcyBmZWRiYWNrLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5Mb3dwYXNzQ29tYkZpbHRlciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdkZWxheVRpbWUnLFxuXHQgICAgICAgICAgICAncmVzb25hbmNlJyxcblx0ICAgICAgICAgICAgJ2RhbXBlbmluZydcblx0ICAgICAgICBdLCBUb25lLkxvd3Bhc3NDb21iRmlsdGVyKTtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuY3JlYXRlSW5zT3V0cygxLCAxKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgZGVsYXkgbm9kZVxuXHRcdFx0ICogIEB0eXBlIHtEZWxheU5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2RlbGF5ID0gdGhpcy5pbnB1dCA9IG5ldyBUb25lLkRlbGF5KG9wdGlvbnMuZGVsYXlUaW1lKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZGVsYXlUaW1lIG9mIHRoZSBjb21iIGZpbHRlci5cblx0XHRcdCAqICBAdHlwZSB7VGltZX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmRlbGF5VGltZSA9IHRoaXMuX2RlbGF5LmRlbGF5VGltZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgbG93cGFzcyBmaWx0ZXJcblx0XHRcdCAqICBAdHlwZSAge0JpcXVhZEZpbHRlck5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2xvd3Bhc3MgPSB0aGlzLm91dHB1dCA9IHRoaXMuY29udGV4dC5jcmVhdGVCaXF1YWRGaWx0ZXIoKTtcblx0ICAgICAgICB0aGlzLl9sb3dwYXNzLlEudmFsdWUgPSAtMy4wMTAyOTk5NTY2Mzk4MTI1O1xuXHQgICAgICAgIHRoaXMuX2xvd3Bhc3MudHlwZSA9ICdsb3dwYXNzJztcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZGFtcGVuaW5nIGNvbnRyb2wgb2YgdGhlIGZlZWRiYWNrXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmRhbXBlbmluZyA9IG5ldyBUb25lLlBhcmFtKHtcblx0ICAgICAgICAgICAgJ3BhcmFtJzogdGhpcy5fbG93cGFzcy5mcmVxdWVuY3ksXG5cdCAgICAgICAgICAgICd1bml0cyc6IFRvbmUuVHlwZS5GcmVxdWVuY3ksXG5cdCAgICAgICAgICAgICd2YWx1ZSc6IG9wdGlvbnMuZGFtcGVuaW5nXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGZlZWRiYWNrIGdhaW5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5HYWlufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9mZWVkYmFjayA9IG5ldyBUb25lLkdhaW4ob3B0aW9ucy5yZXNvbmFuY2UsIFRvbmUuVHlwZS5Ob3JtYWxSYW5nZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGFtb3VudCBvZiBmZWVkYmFjayBvZiB0aGUgZGVsYXllZCBzaWduYWwuXG5cdFx0XHQgKiAgQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMucmVzb25hbmNlID0gdGhpcy5fZmVlZGJhY2suZ2Fpbjtcblx0ICAgICAgICAvL2Nvbm5lY3Rpb25zXG5cdCAgICAgICAgdGhpcy5fZGVsYXkuY2hhaW4odGhpcy5fbG93cGFzcywgdGhpcy5fZmVlZGJhY2ssIHRoaXMuX2RlbGF5KTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbXG5cdCAgICAgICAgICAgICdkYW1wZW5pbmcnLFxuXHQgICAgICAgICAgICAncmVzb25hbmNlJyxcblx0ICAgICAgICAgICAgJ2RlbGF5VGltZSdcblx0ICAgICAgICBdKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkxvd3Bhc3NDb21iRmlsdGVyLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgdGhlIGRlZmF1bHQgcGFyYW1ldGVyc1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Mb3dwYXNzQ29tYkZpbHRlci5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnZGVsYXlUaW1lJzogMC4xLFxuXHQgICAgICAgICdyZXNvbmFuY2UnOiAwLjUsXG5cdCAgICAgICAgJ2RhbXBlbmluZyc6IDMwMDBcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkxvd3Bhc3NDb21iRmlsdGVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkxvd3Bhc3NDb21iRmlsdGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoW1xuXHQgICAgICAgICAgICAnZGFtcGVuaW5nJyxcblx0ICAgICAgICAgICAgJ3Jlc29uYW5jZScsXG5cdCAgICAgICAgICAgICdkZWxheVRpbWUnXG5cdCAgICAgICAgXSk7XG5cdCAgICAgICAgdGhpcy5kYW1wZW5pbmcuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuZGFtcGVuaW5nID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnJlc29uYW5jZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5yZXNvbmFuY2UgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2RlbGF5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9kZWxheSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5kZWxheVRpbWUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2xvd3Bhc3MuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMuX2xvd3Bhc3MgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2ZlZWRiYWNrLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICB0aGlzLl9mZWVkYmFjayA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuTG93cGFzc0NvbWJGaWx0ZXI7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgVG9uZS5NZXJnZSBicmluZ3MgdHdvIHNpZ25hbHMgaW50byB0aGUgbGVmdCBhbmQgcmlnaHRcblx0XHQgKiAgICAgICAgICBjaGFubmVscyBvZiBhIHNpbmdsZSBzdGVyZW8gY2hhbm5lbC5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBtZXJnZSA9IG5ldyBUb25lLk1lcmdlKCkudG9NYXN0ZXIoKTtcblx0XHQgKiAvL3JvdXRpbmcgYSBzaW5lIHRvbmUgaW4gdGhlIGxlZnQgY2hhbm5lbFxuXHRcdCAqIC8vYW5kIG5vaXNlIGluIHRoZSByaWdodCBjaGFubmVsXG5cdFx0ICogdmFyIG9zYyA9IG5ldyBUb25lLk9zY2lsbGF0b3IoKS5jb25uZWN0KG1lcmdlLmxlZnQpO1xuXHRcdCAqIHZhciBub2lzZSA9IG5ldyBUb25lLk5vaXNlKCkuY29ubmVjdChtZXJnZS5yaWdodCk7XG5cdFx0ICogLy9zdGFydGluZyBvdXIgb3NjaWxsYXRvcnNcblx0XHQgKiBub2lzZS5zdGFydCgpO1xuXHRcdCAqIG9zYy5zdGFydCgpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NZXJnZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuY3JlYXRlSW5zT3V0cygyLCAwKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbGVmdCBpbnB1dCBjaGFubmVsLlxuXHRcdFx0ICogIEFsaWFzIGZvciA8Y29kZT5pbnB1dFswXTwvY29kZT5cblx0XHRcdCAqICBAdHlwZSB7R2Fpbk5vZGV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmxlZnQgPSB0aGlzLmlucHV0WzBdID0gbmV3IFRvbmUuR2FpbigpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSByaWdodCBpbnB1dCBjaGFubmVsLlxuXHRcdFx0ICogIEFsaWFzIGZvciA8Y29kZT5pbnB1dFsxXTwvY29kZT4uXG5cdFx0XHQgKiAgQHR5cGUge0dhaW5Ob2RlfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMuaW5wdXRbMV0gPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIG1lcmdlciBub2RlIGZvciB0aGUgdHdvIGNoYW5uZWxzXG5cdFx0XHQgKiAgQHR5cGUge0NoYW5uZWxNZXJnZXJOb2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9tZXJnZXIgPSB0aGlzLm91dHB1dCA9IHRoaXMuY29udGV4dC5jcmVhdGVDaGFubmVsTWVyZ2VyKDIpO1xuXHQgICAgICAgIC8vY29ubmVjdGlvbnNcblx0ICAgICAgICB0aGlzLmxlZnQuY29ubmVjdCh0aGlzLl9tZXJnZXIsIDAsIDApO1xuXHQgICAgICAgIHRoaXMucmlnaHQuY29ubmVjdCh0aGlzLl9tZXJnZXIsIDAsIDEpO1xuXHQgICAgICAgIHRoaXMubGVmdC5jaGFubmVsQ291bnQgPSAxO1xuXHQgICAgICAgIHRoaXMucmlnaHQuY2hhbm5lbENvdW50ID0gMTtcblx0ICAgICAgICB0aGlzLmxlZnQuY2hhbm5lbENvdW50TW9kZSA9ICdleHBsaWNpdCc7XG5cdCAgICAgICAgdGhpcy5yaWdodC5jaGFubmVsQ291bnRNb2RlID0gJ2V4cGxpY2l0Jztcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLk1lcmdlLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLk1lcmdlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk1lcmdlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5sZWZ0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmxlZnQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMucmlnaHQuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMucmlnaHQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX21lcmdlci5kaXNjb25uZWN0KCk7XG5cdCAgICAgICAgdGhpcy5fbWVyZ2VyID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5NZXJnZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBUb25lLk1ldGVyIGdldHMgdGhlIFtSTVNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Jvb3RfbWVhbl9zcXVhcmUpXG5cdFx0ICogICAgICAgICAgb2YgYW4gaW5wdXQgc2lnbmFsIHdpdGggc29tZSBhdmVyYWdpbmcgYXBwbGllZC4gSXQgY2FuIGFsc28gZ2V0IHRoZSByYXdcblx0XHQgKiAgICAgICAgICB2YWx1ZSBvZiB0aGUgaW5wdXQgc2lnbmFsLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfSBzbW9vdGhpbmcgVGhlIGFtb3VudCBvZiBzbW9vdGhpbmcgYXBwbGllZCBiZXR3ZWVuIGZyYW1lcy5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgbWV0ZXIgPSBuZXcgVG9uZS5NZXRlcigpO1xuXHRcdCAqIHZhciBtaWMgPSBuZXcgVG9uZS5Vc2VyTWVkaWEoKS5vcGVuKCk7XG5cdFx0ICogLy9jb25uZWN0IG1pYyB0byB0aGUgbWV0ZXJcblx0XHQgKiBtaWMuY29ubmVjdChtZXRlcik7XG5cdFx0ICogLy90aGUgY3VycmVudCBsZXZlbCBvZiB0aGUgbWljIGlucHV0IGluIGRlY2liZWxzXG5cdFx0ICogdmFyIGxldmVsID0gbWV0ZXIuZ2V0VmFsdWUoKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuTWV0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWydzbW9vdGhpbmcnXSwgVG9uZS5NZXRlcik7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW5hbHlzZXIgbm9kZSB3aGljaCBjb21wdXRlcyB0aGUgbGV2ZWxzLlxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLkFuYWx5c2VyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5pbnB1dCA9IHRoaXMub3V0cHV0ID0gdGhpcy5fYW5hbHlzZXIgPSBuZXcgVG9uZS5BbmFseXNlcignd2F2ZWZvcm0nLCAxMDI0KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW1vdW50IG9mIGNhcnJ5b3ZlciBiZXR3ZWVuIHRoZSBjdXJyZW50IGFuZCBsYXN0IGZyYW1lLlxuXHRcdFx0ICogIE9ubHkgYXBwbGllZCBtZXRlciBmb3IgXCJsZXZlbFwiIHR5cGUuXG5cdFx0XHQgKiAgQHR5cGUgIHtOdW1iZXJ9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLnNtb290aGluZyA9IG9wdGlvbnMuc21vb3RoaW5nO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuTWV0ZXIsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdHNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAY29uc3Rcblx0XHQgKi9cblx0ICAgIFRvbmUuTWV0ZXIuZGVmYXVsdHMgPSB7ICdzbW9vdGhpbmcnOiAwLjggfTtcblx0ICAgIC8qKlxuXHRcdCAqICBHZXQgdGhlIGN1cnJlbnQgZGVjaWJlbCB2YWx1ZSBvZiB0aGUgaW5jb21pbmcgc2lnbmFsXG5cdFx0ICogIEByZXR1cm5zIHtEZWNpYmVsc31cblx0XHQgKi9cblx0ICAgIFRvbmUuTWV0ZXIucHJvdG90eXBlLmdldExldmVsID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX2FuYWx5c2VyLnR5cGUgPSAnZmZ0Jztcblx0ICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy5fYW5hbHlzZXIuZ2V0VmFsdWUoKTtcblx0ICAgICAgICB2YXIgb2Zmc2V0ID0gMjg7XG5cdCAgICAgICAgLy8gbm9ybWFsaXplcyBtb3N0IHNpZ25hbCBsZXZlbHNcblx0ICAgICAgICAvLyBUT0RPOiBjb21wdXRlIGxvdWRuZXNzIGZyb20gRkZUXG5cdCAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KHRoaXMsIHZhbHVlcykgKyBvZmZzZXQ7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEdldCB0aGUgc2lnbmFsIHZhbHVlIG9mIHRoZSBpbmNvbWluZyBzaWduYWxcblx0XHQgKiAgQHJldHVybnMge051bWJlcn1cblx0XHQgKi9cblx0ICAgIFRvbmUuTWV0ZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX2FuYWx5c2VyLnR5cGUgPSAnd2F2ZWZvcm0nO1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX2FuYWx5c2VyLmdldFZhbHVlKCk7XG5cdCAgICAgICAgcmV0dXJuIHZhbHVlWzBdO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIEEgdmFsdWUgZnJvbSAwIC0+IDEgd2hlcmUgMCByZXByZXNlbnRzIG5vIHRpbWUgYXZlcmFnaW5nIHdpdGggdGhlIGxhc3QgYW5hbHlzaXMgZnJhbWUuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuTWV0ZXIjXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAbmFtZSBzbW9vdGhpbmdcblx0XHQgKiBAcmVhZE9ubHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLk1ldGVyLnByb3RvdHlwZSwgJ3Ntb290aGluZycsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FuYWx5c2VyLnNtb290aGluZztcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xuXHQgICAgICAgICAgICB0aGlzLl9hbmFseXNlci5zbW9vdGhpbmcgPSB2YWw7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLk1ldGVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk1ldGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fYW5hbHlzZXIuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2FuYWx5c2VyID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5NZXRlcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKlx0QGNsYXNzICBUb25lLlNwbGl0IHNwbGl0cyBhbiBpbmNvbWluZyBzaWduYWwgaW50byBsZWZ0IGFuZCByaWdodCBjaGFubmVscy5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBzcGxpdCA9IG5ldyBUb25lLlNwbGl0KCk7XG5cdFx0ICogc3RlcmVvU2lnbmFsLmNvbm5lY3Qoc3BsaXQpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5TcGxpdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuY3JlYXRlSW5zT3V0cygwLCAyKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBAdHlwZSB7Q2hhbm5lbFNwbGl0dGVyTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc3BsaXR0ZXIgPSB0aGlzLmlucHV0ID0gdGhpcy5jb250ZXh0LmNyZWF0ZUNoYW5uZWxTcGxpdHRlcigyKTtcblx0ICAgICAgICB0aGlzLl9zcGxpdHRlci5jaGFubmVsQ291bnQgPSAyO1xuXHQgICAgICAgIHRoaXMuX3NwbGl0dGVyLmNoYW5uZWxDb3VudE1vZGUgPSAnZXhwbGljaXQnO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIExlZnQgY2hhbm5lbCBvdXRwdXQuXG5cdFx0XHQgKiAgQWxpYXMgZm9yIDxjb2RlPm91dHB1dFswXTwvY29kZT5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5HYWlufVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5vdXRwdXRbMF0gPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgUmlnaHQgY2hhbm5lbCBvdXRwdXQuXG5cdFx0XHQgKiAgQWxpYXMgZm9yIDxjb2RlPm91dHB1dFsxXTwvY29kZT5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5HYWlufVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMub3V0cHV0WzFdID0gbmV3IFRvbmUuR2FpbigpO1xuXHQgICAgICAgIC8vY29ubmVjdGlvbnNcblx0ICAgICAgICB0aGlzLl9zcGxpdHRlci5jb25uZWN0KHRoaXMubGVmdCwgMCwgMCk7XG5cdCAgICAgICAgdGhpcy5fc3BsaXR0ZXIuY29ubmVjdCh0aGlzLnJpZ2h0LCAxLCAwKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlNwbGl0LCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlNwbGl0fSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlNwbGl0LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fc3BsaXR0ZXIuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMubGVmdC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5sZWZ0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnJpZ2h0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLnJpZ2h0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9zcGxpdHRlciA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuU3BsaXQ7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBNaWQvU2lkZSBwcm9jZXNzaW5nIHNlcGFyYXRlcyB0aGUgdGhlICdtaWQnIHNpZ25hbFxuXHRcdCAqICAgICAgICAgKHdoaWNoIGNvbWVzIG91dCBvZiBib3RoIHRoZSBsZWZ0IGFuZCB0aGUgcmlnaHQgY2hhbm5lbClcblx0XHQgKiAgICAgICAgIGFuZCB0aGUgJ3NpZGUnICh3aGljaCBvbmx5IGNvbWVzIG91dCBvZiB0aGUgdGhlIHNpZGUgY2hhbm5lbHMpLiA8YnI+PGJyPlxuXHRcdCAqICAgICAgICAgPGNvZGU+XG5cdFx0ICogICAgICAgICBNaWQgPSAoTGVmdCtSaWdodCkvc3FydCgyKTsgICAvLyBvYnRhaW4gbWlkLXNpZ25hbCBmcm9tIGxlZnQgYW5kIHJpZ2h0PGJyPlxuXHRcdCAqICAgICAgICAgU2lkZSA9IChMZWZ0LVJpZ2h0KS9zcXJ0KDIpOyAgIC8vIG9idGFpbiBzaWRlLXNpZ25hbCBmcm9tIGxlZnQgYW5kIHJpZ2g8YnI+XG5cdFx0ICogICAgICAgICA8L2NvZGU+XG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKi9cblx0ICAgIFRvbmUuTWlkU2lkZVNwbGl0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5jcmVhdGVJbnNPdXRzKDAsIDIpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHNwbGl0IHRoZSBpbmNvbWluZyBzaWduYWwgaW50byBsZWZ0IGFuZCByaWdodCBjaGFubmVsc1xuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5TcGxpdH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc3BsaXQgPSB0aGlzLmlucHV0ID0gbmV3IFRvbmUuU3BsaXQoKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbWlkIHNlbmQuIENvbm5lY3QgdG8gbWlkIHByb2Nlc3NpbmcuIEFsaWFzIGZvclxuXHRcdFx0ICogIDxjb2RlPm91dHB1dFswXTwvY29kZT5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5BZGR9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9taWRBZGQgPSBuZXcgVG9uZS5BZGQoKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIE11bHRpcGx5IHRoZSBfbWlkQWRkIGJ5IHNxcnQoMS8yKVxuXHRcdFx0ICogQHR5cGUge1RvbmUuTXVsdGlwbHl9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm1pZCA9IHRoaXMub3V0cHV0WzBdID0gbmV3IFRvbmUuTXVsdGlwbHkoTWF0aC5TUVJUMV8yKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgc2lkZSBvdXRwdXQuIENvbm5lY3QgdG8gc2lkZSBwcm9jZXNzaW5nLiBBbHNvIE91dHB1dCAxXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuU3VidHJhY3R9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zaWRlU3VidHJhY3QgPSBuZXcgVG9uZS5TdWJ0cmFjdCgpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogTXVsdGlwbHkgdGhlIF9taWRBZGQgYnkgc3FydCgxLzIpXG5cdFx0XHQgKiBAdHlwZSB7VG9uZS5NdWx0aXBseX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuc2lkZSA9IHRoaXMub3V0cHV0WzFdID0gbmV3IFRvbmUuTXVsdGlwbHkoTWF0aC5TUVJUMV8yKTtcblx0ICAgICAgICB0aGlzLl9zcGxpdC5jb25uZWN0KHRoaXMuX21pZEFkZCwgMCwgMCk7XG5cdCAgICAgICAgdGhpcy5fc3BsaXQuY29ubmVjdCh0aGlzLl9taWRBZGQsIDEsIDEpO1xuXHQgICAgICAgIHRoaXMuX3NwbGl0LmNvbm5lY3QodGhpcy5fc2lkZVN1YnRyYWN0LCAwLCAwKTtcblx0ICAgICAgICB0aGlzLl9zcGxpdC5jb25uZWN0KHRoaXMuX3NpZGVTdWJ0cmFjdCwgMSwgMSk7XG5cdCAgICAgICAgdGhpcy5fbWlkQWRkLmNvbm5lY3QodGhpcy5taWQpO1xuXHQgICAgICAgIHRoaXMuX3NpZGVTdWJ0cmFjdC5jb25uZWN0KHRoaXMuc2lkZSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5NaWRTaWRlU3BsaXQsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5NaWRTaWRlU3BsaXR9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTWlkU2lkZVNwbGl0LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5taWQuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMubWlkID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnNpZGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuc2lkZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbWlkQWRkLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9taWRBZGQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3NpZGVTdWJ0cmFjdC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fc2lkZVN1YnRyYWN0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9zcGxpdC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fc3BsaXQgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLk1pZFNpZGVTcGxpdDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIE1pZC9TaWRlIHByb2Nlc3Npbmcgc2VwYXJhdGVzIHRoZSB0aGUgJ21pZCcgc2lnbmFsXG5cdFx0ICogICAgICAgICAod2hpY2ggY29tZXMgb3V0IG9mIGJvdGggdGhlIGxlZnQgYW5kIHRoZSByaWdodCBjaGFubmVsKVxuXHRcdCAqICAgICAgICAgYW5kIHRoZSAnc2lkZScgKHdoaWNoIG9ubHkgY29tZXMgb3V0IG9mIHRoZSB0aGUgc2lkZSBjaGFubmVscykuXG5cdFx0ICogICAgICAgICBNaWRTaWRlTWVyZ2UgbWVyZ2VzIHRoZSBtaWQgYW5kIHNpZGUgc2lnbmFsIGFmdGVyIHRoZXkndmUgYmVlbiBzZXBlcmF0ZWRcblx0XHQgKiAgICAgICAgIGJ5IFRvbmUuTWlkU2lkZVNwbGl0Ljxicj48YnI+XG5cdFx0ICogICAgICAgICA8Y29kZT5cblx0XHQgKiAgICAgICAgIExlZnQgPSAoTWlkK1NpZGUpL3NxcnQoMik7ICAgLy8gb2J0YWluIGxlZnQgc2lnbmFsIGZyb20gbWlkIGFuZCBzaWRlPGJyPlxuXHRcdCAqICAgICAgICAgUmlnaHQgPSAoTWlkLVNpZGUpL3NxcnQoMik7ICAgLy8gb2J0YWluIHJpZ2h0IHNpZ25hbCBmcm9tIG1pZCBhbmQgc2lkZTxicj5cblx0XHQgKiAgICAgICAgIDwvY29kZT5cblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHQgICAgVG9uZS5NaWRTaWRlTWVyZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLmNyZWF0ZUluc091dHMoMiwgMCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG1pZCBzaWduYWwgaW5wdXQuIEFsaWFzIGZvclxuXHRcdFx0ICogIDxjb2RlPmlucHV0WzBdPC9jb2RlPlxuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5HYWlufVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5taWQgPSB0aGlzLmlucHV0WzBdID0gbmV3IFRvbmUuR2FpbigpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHJlY29tYmluZSB0aGUgbWlkL3NpZGUgaW50byBMZWZ0XG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuQWRkfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sZWZ0ID0gbmV3IFRvbmUuQWRkKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBNdWx0aXBseSB0aGUgbGVmdCBieSBzcXJ0KDEvMilcblx0XHRcdCAqIEB0eXBlIHtUb25lLk11bHRpcGx5fVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fdGltZXNUd29MZWZ0ID0gbmV3IFRvbmUuTXVsdGlwbHkoTWF0aC5TUVJUMV8yKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgc2lkZSBzaWduYWwgaW5wdXQuIEFsaWFzIGZvclxuXHRcdFx0ICogIDxjb2RlPmlucHV0WzFdPC9jb2RlPlxuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5HYWlufVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5zaWRlID0gdGhpcy5pbnB1dFsxXSA9IG5ldyBUb25lLkdhaW4oKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICByZWNvbWJpbmUgdGhlIG1pZC9zaWRlIGludG8gUmlnaHRcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5TdWJ0cmFjdH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcmlnaHQgPSBuZXcgVG9uZS5TdWJ0cmFjdCgpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogTXVsdGlwbHkgdGhlIHJpZ2h0IGJ5IHNxcnQoMS8yKVxuXHRcdFx0ICogQHR5cGUge1RvbmUuTXVsdGlwbHl9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl90aW1lc1R3b1JpZ2h0ID0gbmV3IFRvbmUuTXVsdGlwbHkoTWF0aC5TUVJUMV8yKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBNZXJnZSB0aGUgbGVmdC9yaWdodCBzaWduYWwgYmFjayBpbnRvIGEgc3RlcmVvIHNpZ25hbC5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5NZXJnZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbWVyZ2UgPSB0aGlzLm91dHB1dCA9IG5ldyBUb25lLk1lcmdlKCk7XG5cdCAgICAgICAgdGhpcy5taWQuY29ubmVjdCh0aGlzLl9sZWZ0LCAwLCAwKTtcblx0ICAgICAgICB0aGlzLnNpZGUuY29ubmVjdCh0aGlzLl9sZWZ0LCAwLCAxKTtcblx0ICAgICAgICB0aGlzLm1pZC5jb25uZWN0KHRoaXMuX3JpZ2h0LCAwLCAwKTtcblx0ICAgICAgICB0aGlzLnNpZGUuY29ubmVjdCh0aGlzLl9yaWdodCwgMCwgMSk7XG5cdCAgICAgICAgdGhpcy5fbGVmdC5jb25uZWN0KHRoaXMuX3RpbWVzVHdvTGVmdCk7XG5cdCAgICAgICAgdGhpcy5fcmlnaHQuY29ubmVjdCh0aGlzLl90aW1lc1R3b1JpZ2h0KTtcblx0ICAgICAgICB0aGlzLl90aW1lc1R3b0xlZnQuY29ubmVjdCh0aGlzLl9tZXJnZSwgMCwgMCk7XG5cdCAgICAgICAgdGhpcy5fdGltZXNUd29SaWdodC5jb25uZWN0KHRoaXMuX21lcmdlLCAwLCAxKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLk1pZFNpZGVNZXJnZSwgVG9uZS5BdWRpb05vZGUpO1xuXHQgICAgLyoqXG5cdFx0ICogIGNsZWFuIHVwXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLk1pZFNpZGVNZXJnZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NaWRTaWRlTWVyZ2UucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLm1pZC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5taWQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuc2lkZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5zaWRlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9sZWZ0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9sZWZ0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl90aW1lc1R3b0xlZnQuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3RpbWVzVHdvTGVmdCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fcmlnaHQuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3JpZ2h0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl90aW1lc1R3b1JpZ2h0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl90aW1lc1R3b1JpZ2h0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9tZXJnZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbWVyZ2UgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLk1pZFNpZGVNZXJnZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuTWlkU2lkZUNvbXByZXNzb3IgYXBwbGllcyB0d28gZGlmZmVyZW50IGNvbXByZXNzb3JzIHRvIHRoZSBtaWRcblx0XHQgKiAgICAgICAgIGFuZCBzaWRlIHNpZ25hbCBjb21wb25lbnRzLiBTZWUgVG9uZS5NaWRTaWRlU3BsaXQuXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIG1pZCBhbmQgc2lkZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wcmVzc29ycy5cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICovXG5cdCAgICBUb25lLk1pZFNpZGVDb21wcmVzc29yID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRBcmcob3B0aW9ucywgVG9uZS5NaWRTaWRlQ29tcHJlc3Nvci5kZWZhdWx0cyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIG1pZC9zaWRlIHNwbGl0XG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLk1pZFNpZGVTcGxpdH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbWlkU2lkZVNwbGl0ID0gdGhpcy5pbnB1dCA9IG5ldyBUb25lLk1pZFNpZGVTcGxpdCgpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBtaWQvc2lkZSByZWNvbWJpbmF0aW9uXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLk1pZFNpZGVNZXJnZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbWlkU2lkZU1lcmdlID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5NaWRTaWRlTWVyZ2UoKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgY29tcHJlc3NvciBhcHBsaWVkIHRvIHRoZSBtaWQgc2lnbmFsXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLkNvbXByZXNzb3J9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm1pZCA9IG5ldyBUb25lLkNvbXByZXNzb3Iob3B0aW9ucy5taWQpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBjb21wcmVzc29yIGFwcGxpZWQgdG8gdGhlIHNpZGUgc2lnbmFsXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLkNvbXByZXNzb3J9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLnNpZGUgPSBuZXcgVG9uZS5Db21wcmVzc29yKG9wdGlvbnMuc2lkZSk7XG5cdCAgICAgICAgdGhpcy5fbWlkU2lkZVNwbGl0Lm1pZC5jaGFpbih0aGlzLm1pZCwgdGhpcy5fbWlkU2lkZU1lcmdlLm1pZCk7XG5cdCAgICAgICAgdGhpcy5fbWlkU2lkZVNwbGl0LnNpZGUuY2hhaW4odGhpcy5zaWRlLCB0aGlzLl9taWRTaWRlTWVyZ2Uuc2lkZSk7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAnbWlkJyxcblx0ICAgICAgICAgICAgJ3NpZGUnXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5NaWRTaWRlQ29tcHJlc3NvciwgVG9uZS5BdWRpb05vZGUpO1xuXHQgICAgLyoqXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLk1pZFNpZGVDb21wcmVzc29yLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdtaWQnOiB7XG5cdCAgICAgICAgICAgICdyYXRpbyc6IDMsXG5cdCAgICAgICAgICAgICd0aHJlc2hvbGQnOiAtMjQsXG5cdCAgICAgICAgICAgICdyZWxlYXNlJzogMC4wMyxcblx0ICAgICAgICAgICAgJ2F0dGFjayc6IDAuMDIsXG5cdCAgICAgICAgICAgICdrbmVlJzogMTZcblx0ICAgICAgICB9LFxuXHQgICAgICAgICdzaWRlJzoge1xuXHQgICAgICAgICAgICAncmF0aW8nOiA2LFxuXHQgICAgICAgICAgICAndGhyZXNob2xkJzogLTMwLFxuXHQgICAgICAgICAgICAncmVsZWFzZSc6IDAuMjUsXG5cdCAgICAgICAgICAgICdhdHRhY2snOiAwLjAzLFxuXHQgICAgICAgICAgICAna25lZSc6IDEwXG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuTWlkU2lkZUNvbXByZXNzb3J9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTWlkU2lkZUNvbXByZXNzb3IucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdtaWQnLFxuXHQgICAgICAgICAgICAnc2lkZSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLm1pZC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5taWQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuc2lkZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5zaWRlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9taWRTaWRlU3BsaXQuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX21pZFNpZGVTcGxpdCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbWlkU2lkZU1lcmdlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9taWRTaWRlTWVyZ2UgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLk1pZFNpZGVDb21wcmVzc29yO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgVG9uZS5Nb25vIGNvZXJjZXMgdGhlIGluY29taW5nIG1vbm8gb3Igc3RlcmVvIHNpZ25hbCBpbnRvIGEgbW9ubyBzaWduYWxcblx0XHQgKiAgICAgICAgIHdoZXJlIGJvdGggbGVmdCBhbmQgcmlnaHQgY2hhbm5lbHMgaGF2ZSB0aGUgc2FtZSB2YWx1ZS4gVGhpcyBjYW4gYmUgdXNlZnVsXG5cdFx0ICogICAgICAgICBmb3IgW3N0ZXJlbyBpbWFnaW5nXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TdGVyZW9faW1hZ2luZykuXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKi9cblx0ICAgIFRvbmUuTW9ubyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuY3JlYXRlSW5zT3V0cygxLCAwKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBtZXJnZSB0aGUgc2lnbmFsXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuTWVyZ2V9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX21lcmdlID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5NZXJnZSgpO1xuXHQgICAgICAgIHRoaXMuaW5wdXQuY29ubmVjdCh0aGlzLl9tZXJnZSwgMCwgMCk7XG5cdCAgICAgICAgdGhpcy5pbnB1dC5jb25uZWN0KHRoaXMuX21lcmdlLCAwLCAxKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLk1vbm8sIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Nb25vfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk1vbm8ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9tZXJnZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbWVyZ2UgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLk1vbm87XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBBIGNvbXByZXNzb3Igd2l0aCBzZXBlcmF0ZSBjb250cm9scyBvdmVyIGxvdy9taWQvaGlnaCBkeW5hbWljc1xuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkF1ZGlvTm9kZX1cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFRoZSBsb3cvbWlkL2hpZ2ggY29tcHJlc3NvciBzZXR0aW5ncy5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgdmFyIG11bHRpYmFuZCA9IG5ldyBUb25lLk11bHRpYmFuZENvbXByZXNzb3Ioe1xuXHRcdCAqICBcdFwibG93RnJlcXVlbmN5XCIgOiAyMDAsXG5cdFx0ICogIFx0XCJoaWdoRnJlcXVlbmN5XCIgOiAxMzAwXG5cdFx0ICogIFx0XCJsb3dcIiA6IHtcblx0XHQgKiAgXHRcdFwidGhyZXNob2xkXCIgOiAtMTJcblx0XHQgKiAgXHR9XG5cdFx0ICogIH0pXG5cdFx0ICovXG5cdCAgICBUb25lLk11bHRpYmFuZENvbXByZXNzb3IgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdEFyZyhhcmd1bWVudHMsIFRvbmUuTXVsdGliYW5kQ29tcHJlc3Nvci5kZWZhdWx0cyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgc3BsaXQgdGhlIGluY29taW5nIHNpZ25hbCBpbnRvIGhpZ2gvbWlkL2xvd1xuXHRcdFx0ICogIEB0eXBlIHtUb25lLk11bHRpYmFuZFNwbGl0fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zcGxpdHRlciA9IHRoaXMuaW5wdXQgPSBuZXcgVG9uZS5NdWx0aWJhbmRTcGxpdCh7XG5cdCAgICAgICAgICAgICdsb3dGcmVxdWVuY3knOiBvcHRpb25zLmxvd0ZyZXF1ZW5jeSxcblx0ICAgICAgICAgICAgJ2hpZ2hGcmVxdWVuY3knOiBvcHRpb25zLmhpZ2hGcmVxdWVuY3lcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBsb3cvbWlkIGNyb3Nzb3ZlciBmcmVxdWVuY3kuXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmxvd0ZyZXF1ZW5jeSA9IHRoaXMuX3NwbGl0dGVyLmxvd0ZyZXF1ZW5jeTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBtaWQvaGlnaCBjcm9zc292ZXIgZnJlcXVlbmN5LlxuXHRcdFx0ICogIEB0eXBlIHtGcmVxdWVuY3l9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5oaWdoRnJlcXVlbmN5ID0gdGhpcy5fc3BsaXR0ZXIuaGlnaEZyZXF1ZW5jeTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgb3V0cHV0XG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGNvbXByZXNzb3IgYXBwbGllZCB0byB0aGUgbG93IGZyZXF1ZW5jaWVzLlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkNvbXByZXNzb3J9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmxvdyA9IG5ldyBUb25lLkNvbXByZXNzb3Iob3B0aW9ucy5sb3cpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBjb21wcmVzc29yIGFwcGxpZWQgdG8gdGhlIG1pZCBmcmVxdWVuY2llcy5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5Db21wcmVzc29yfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5taWQgPSBuZXcgVG9uZS5Db21wcmVzc29yKG9wdGlvbnMubWlkKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgY29tcHJlc3NvciBhcHBsaWVkIHRvIHRoZSBoaWdoIGZyZXF1ZW5jaWVzLlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkNvbXByZXNzb3J9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmhpZ2ggPSBuZXcgVG9uZS5Db21wcmVzc29yKG9wdGlvbnMuaGlnaCk7XG5cdCAgICAgICAgLy9jb25uZWN0IHRoZSBjb21wcmVzc29yXG5cdCAgICAgICAgdGhpcy5fc3BsaXR0ZXIubG93LmNoYWluKHRoaXMubG93LCB0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgdGhpcy5fc3BsaXR0ZXIubWlkLmNoYWluKHRoaXMubWlkLCB0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgdGhpcy5fc3BsaXR0ZXIuaGlnaC5jaGFpbih0aGlzLmhpZ2gsIHRoaXMub3V0cHV0KTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbXG5cdCAgICAgICAgICAgICdoaWdoJyxcblx0ICAgICAgICAgICAgJ21pZCcsXG5cdCAgICAgICAgICAgICdsb3cnLFxuXHQgICAgICAgICAgICAnaGlnaEZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdsb3dGcmVxdWVuY3knXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5NdWx0aWJhbmRDb21wcmVzc29yLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuTXVsdGliYW5kQ29tcHJlc3Nvci5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnbG93JzogVG9uZS5Db21wcmVzc29yLmRlZmF1bHRzLFxuXHQgICAgICAgICdtaWQnOiBUb25lLkNvbXByZXNzb3IuZGVmYXVsdHMsXG5cdCAgICAgICAgJ2hpZ2gnOiBUb25lLkNvbXByZXNzb3IuZGVmYXVsdHMsXG5cdCAgICAgICAgJ2xvd0ZyZXF1ZW5jeSc6IDI1MCxcblx0ICAgICAgICAnaGlnaEZyZXF1ZW5jeSc6IDIwMDBcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgY2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuTXVsdGliYW5kQ29tcHJlc3Nvcn0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NdWx0aWJhbmRDb21wcmVzc29yLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fc3BsaXR0ZXIuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFtcblx0ICAgICAgICAgICAgJ2hpZ2gnLFxuXHQgICAgICAgICAgICAnbWlkJyxcblx0ICAgICAgICAgICAgJ2xvdycsXG5cdCAgICAgICAgICAgICdoaWdoRnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2xvd0ZyZXF1ZW5jeSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLmxvdy5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5taWQuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuaGlnaC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fc3BsaXR0ZXIgPSBudWxsO1xuXHQgICAgICAgIHRoaXMubG93ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLm1pZCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5oaWdoID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmxvd0ZyZXF1ZW5jeSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5oaWdoRnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5NdWx0aWJhbmRDb21wcmVzc29yO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBpZiAoVG9uZS5zdXBwb3J0ZWQgJiYgIXdpbmRvdy5TdGVyZW9QYW5uZXJOb2RlKSB7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBAY2xhc3MgU2hpbW1lZCBTdGVyZW9QYW5uZXJOb2RlXG5cdFx0XHQgKiBAcGFyYW0gIHtBdWRpb0NvbnRleHR9IGNvbnRleHRcblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB2YXIgU3RlcmVvUGFubmVyTm9kZSA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG5cdCAgICAgICAgICAgIC8qKlxuXHRcdFx0XHQgKiBUaGUgYXVkaW8gY29udGV4dFxuXHRcdFx0XHQgKiBAdHlwZSB7QXVkaW9Db250ZXh0fVxuXHRcdFx0XHQgKi9cblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcblx0ICAgICAgICAgICAgLyoqXG5cdFx0XHRcdCAqIFRoZSBsZWZ0L3JpZ2h0IHBhbm5pbmcuIFstMSwgMV1cblx0XHRcdFx0ICogQHR5cGUge0F1ZGlvUmFuZ2V9XG5cdFx0XHRcdCAqIEBzaWduYWxcblx0XHRcdFx0ICovXG5cdCAgICAgICAgICAgIHRoaXMucGFuID0gbmV3IFRvbmUuU2lnbmFsKDAsIFRvbmUuVHlwZS5BdWRpb1JhbmdlKTtcblx0ICAgICAgICAgICAgLyoqXG5cdFx0XHRcdCAqIEVxdWFsIHBvd2VyIHNjYWxpbmcgb2YgdGhlIHJpZ2h0IGdhaW5cblx0XHRcdFx0ICogQHR5cGUge1RvbmUuV2F2ZVNoYXBlcn1cblx0XHRcdFx0ICovXG5cdCAgICAgICAgICAgIHZhciByaWdodFdhdmVTaGFwZXIgPSBuZXcgVG9uZS5XYXZlU2hhcGVyKGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBUb25lLmVxdWFsUG93ZXJTY2FsZSgodmFsICsgMSkgLyAyKTtcblx0ICAgICAgICAgICAgfSwgNDA5Nik7XG5cdCAgICAgICAgICAgIC8qKlxuXHRcdFx0XHQgKiBFcXVhbCBwb3dlciBzY2FsaW5nIG9mIHRoZSBsZWZ0IGdhaW5cblx0XHRcdFx0ICogQHR5cGUge1RvbmUuV2F2ZVNoYXBlcn1cblx0XHRcdFx0ICogQHByaXZhdGVcblx0XHRcdFx0ICovXG5cdCAgICAgICAgICAgIHZhciBsZWZ0V2F2ZVNoYXBlciA9IG5ldyBUb25lLldhdmVTaGFwZXIoZnVuY3Rpb24gKHZhbCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIFRvbmUuZXF1YWxQb3dlclNjYWxlKDEgLSAodmFsICsgMSkgLyAyKTtcblx0ICAgICAgICAgICAgfSwgNDA5Nik7XG5cdCAgICAgICAgICAgIC8qKlxuXHRcdFx0XHQgKiBUaGUgbGVmdCBnYWluIHZhbHVlXG5cdFx0XHRcdCAqIEB0eXBlIHtUb25lLkdhaW59XG5cdFx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHRcdCAqL1xuXHQgICAgICAgICAgICB2YXIgbGVmdEdhaW4gPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgICAgIC8qKlxuXHRcdFx0XHQgKiBUaGUgcmlnaHQgZ2FpbiB2YWx1ZVxuXHRcdFx0XHQgKiBAdHlwZSB7VG9uZS5HYWlufVxuXHRcdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0XHQgKi9cblx0ICAgICAgICAgICAgdmFyIHJpZ2h0R2FpbiA9IG5ldyBUb25lLkdhaW4oKTtcblx0ICAgICAgICAgICAgLyoqXG5cdFx0XHRcdCAqIFNwbGl0IHRoZSBpbmNvbWluZyBzaWduYWxcblx0XHRcdFx0ICogQHR5cGUge1RvbmUuU3BsaXR9XG5cdFx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHRcdCAqL1xuXHQgICAgICAgICAgICB2YXIgc3BsaXQgPSB0aGlzLmlucHV0ID0gbmV3IFRvbmUuU3BsaXQoKTtcblx0ICAgICAgICAgICAgLyoqXG5cdFx0XHRcdCAqIEtlZXBzIHRoZSB3YXZlc2hhcGVycyBmcm9tIG9wdGltaXppbmcgMHNcblx0XHRcdFx0ICogQHR5cGUge1RvbmUuWmVyb31cblx0XHRcdFx0ICogQHByaXZhdGVcblx0XHRcdFx0ICovXG5cdCAgICAgICAgICAgIHZhciB6ZXJvID0gbmV3IFRvbmUuWmVybygpO1xuXHQgICAgICAgICAgICB6ZXJvLmZhbihyaWdodFdhdmVTaGFwZXIsIGxlZnRXYXZlU2hhcGVyKTtcblx0ICAgICAgICAgICAgLyoqXG5cdFx0XHRcdCAqIE1lcmdlIHRoZSBvdXRnb2luZyBzaWduYWxcblx0XHRcdFx0ICogQHR5cGUge1RvbmUuTWVyZ2V9XG5cdFx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHRcdCAqL1xuXHQgICAgICAgICAgICB2YXIgbWVyZ2UgPSB0aGlzLm91dHB1dCA9IG5ldyBUb25lLk1lcmdlKCk7XG5cdCAgICAgICAgICAgIC8vY29ubmVjdGlvbnNcblx0ICAgICAgICAgICAgc3BsaXQubGVmdC5jaGFpbihsZWZ0R2FpbiwgbWVyZ2UubGVmdCk7XG5cdCAgICAgICAgICAgIHNwbGl0LnJpZ2h0LmNoYWluKHJpZ2h0R2FpbiwgbWVyZ2UucmlnaHQpO1xuXHQgICAgICAgICAgICB0aGlzLnBhbi5jaGFpbihsZWZ0V2F2ZVNoYXBlciwgbGVmdEdhaW4uZ2Fpbik7XG5cdCAgICAgICAgICAgIHRoaXMucGFuLmNoYWluKHJpZ2h0V2F2ZVNoYXBlciwgcmlnaHRHYWluLmdhaW4pO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgU3RlcmVvUGFubmVyTm9kZS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5vdXRwdXQuZGlzY29ubmVjdC5hcHBseSh0aGlzLm91dHB1dCwgYXJndW1lbnRzKTtcblx0ICAgICAgICB9O1xuXHQgICAgICAgIFN0ZXJlb1Bhbm5lck5vZGUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMub3V0cHV0LmNvbm5lY3QuYXBwbHkodGhpcy5vdXRwdXQsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgfTtcblx0ICAgICAgICAvL2FkZCBpdCB0byB0aGUgQXVkaW9Db250ZXh0XG5cdCAgICAgICAgQXVkaW9Db250ZXh0LnByb3RvdHlwZS5jcmVhdGVTdGVyZW9QYW5uZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgU3RlcmVvUGFubmVyTm9kZSh0aGlzKTtcblx0ICAgICAgICB9O1xuXHQgICAgICAgIFRvbmUuQ29udGV4dC5wcm90b3R5cGUuY3JlYXRlU3RlcmVvUGFubmVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFN0ZXJlb1Bhbm5lck5vZGUodGhpcyk7XG5cdCAgICAgICAgfTtcblx0ICAgIH1cblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBUb25lLlBhbm5lciBpcyBhbiBlcXVhbCBwb3dlciBMZWZ0L1JpZ2h0IFBhbm5lciBhbmQgZG9lcyBub3Rcblx0XHQgKiAgICAgICAgICBzdXBwb3J0IDNELiBQYW5uZXIgdXNlcyB0aGUgU3RlcmVvUGFubmVyTm9kZSB3aGVuIGF2YWlsYWJsZS5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlfSBbaW5pdGlhbFBhbj0wXSBUaGUgaW5pdGFpbCBwYW5uZXIgdmFsdWUgKGNlbnRlcikuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogIC8vcGFuIHRoZSBpbnB1dCBzaWduYWwgaGFyZCByaWdodC5cblx0XHQgKiAgdmFyIHBhbm5lciA9IG5ldyBUb25lLlBhbm5lcigxKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFubmVyID0gZnVuY3Rpb24gKGluaXRpYWxQYW4pIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0KiAgdGhlIHBhbm5lciBub2RlXG5cdFx0XHQqICBAdHlwZSB7U3RlcmVvUGFubmVyTm9kZX1cblx0XHRcdCogIEBwcml2YXRlXG5cdFx0XHQqL1xuXHQgICAgICAgIHRoaXMuX3Bhbm5lciA9IHRoaXMuaW5wdXQgPSB0aGlzLm91dHB1dCA9IHRoaXMuY29udGV4dC5jcmVhdGVTdGVyZW9QYW5uZXIoKTtcblx0ICAgICAgICAvKipcblx0XHRcdCogIFRoZSBwYW4gY29udHJvbC4gLTEgPSBoYXJkIGxlZnQsIDEgPSBoYXJkIHJpZ2h0LlxuXHRcdFx0KiAgQHR5cGUge0F1ZGlvUmFuZ2V9XG5cdFx0XHQqICBAc2lnbmFsXG5cdFx0XHQqL1xuXHQgICAgICAgIHRoaXMucGFuID0gdGhpcy5fcGFubmVyLnBhbjtcblx0ICAgICAgICAvL2luaXRpYWwgdmFsdWVcblx0ICAgICAgICB0aGlzLnBhbi52YWx1ZSA9IFRvbmUuZGVmYXVsdEFyZyhpbml0aWFsUGFuLCAwKTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seSgncGFuJyk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5QYW5uZXIsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuUGFubmVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBhbm5lci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKCdwYW4nKTtcblx0ICAgICAgICB0aGlzLl9wYW5uZXIuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMuX3Bhbm5lciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5wYW4gPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlBhbm5lcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBBIHNwYXRpYWxpemVkIHBhbm5lciBub2RlIHdoaWNoIHN1cHBvcnRzIGVxdWFscG93ZXIgb3IgSFJURiBwYW5uaW5nLlxuXHRcdCAqICAgICAgICAgIFRyaWVzIHRvIG5vcm1hbGl6ZSB0aGUgQVBJIGFjcm9zcyB2YXJpb3VzIGJyb3dzZXJzLiBTZWUgVG9uZS5MaXN0ZW5lclxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvblggVGhlIGluaXRpYWwgeCBwb3NpdGlvbi5cblx0XHQgKiAgQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uWSBUaGUgaW5pdGlhbCB5IHBvc2l0aW9uLlxuXHRcdCAqICBAcGFyYW0ge051bWJlcn0gcG9zaXRpb25aIFRoZSBpbml0aWFsIHogcG9zaXRpb24uXG5cdFx0ICovXG5cdCAgICBUb25lLlBhbm5lcjNEID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ3Bvc2l0aW9uWCcsXG5cdCAgICAgICAgICAgICdwb3NpdGlvblknLFxuXHQgICAgICAgICAgICAncG9zaXRpb25aJ1xuXHQgICAgICAgIF0sIFRvbmUuUGFubmVyM0QpO1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHBhbm5lciBub2RlXG5cdFx0XHQgKiAgQHR5cGUge1Bhbm5lck5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3Bhbm5lciA9IHRoaXMuaW5wdXQgPSB0aGlzLm91dHB1dCA9IHRoaXMuY29udGV4dC5jcmVhdGVQYW5uZXIoKTtcblx0ICAgICAgICAvL3NldCBzb21lIHZhbHVlc1xuXHQgICAgICAgIHRoaXMuX3Bhbm5lci5wYW5uaW5nTW9kZWwgPSBvcHRpb25zLnBhbm5pbmdNb2RlbDtcblx0ICAgICAgICB0aGlzLl9wYW5uZXIubWF4RGlzdGFuY2UgPSBvcHRpb25zLm1heERpc3RhbmNlO1xuXHQgICAgICAgIHRoaXMuX3Bhbm5lci5kaXN0YW5jZU1vZGVsID0gb3B0aW9ucy5kaXN0YW5jZU1vZGVsO1xuXHQgICAgICAgIHRoaXMuX3Bhbm5lci5jb25lT3V0ZXJHYWluID0gb3B0aW9ucy5jb25lT3V0ZXJHYWluO1xuXHQgICAgICAgIHRoaXMuX3Bhbm5lci5jb25lT3V0ZXJBbmdsZSA9IG9wdGlvbnMuY29uZU91dGVyQW5nbGU7XG5cdCAgICAgICAgdGhpcy5fcGFubmVyLmNvbmVJbm5lckFuZ2xlID0gb3B0aW9ucy5jb25lSW5uZXJBbmdsZTtcblx0ICAgICAgICB0aGlzLl9wYW5uZXIucmVmRGlzdGFuY2UgPSBvcHRpb25zLnJlZkRpc3RhbmNlO1xuXHQgICAgICAgIHRoaXMuX3Bhbm5lci5yb2xsb2ZmRmFjdG9yID0gb3B0aW9ucy5yb2xsb2ZmRmFjdG9yO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEhvbGRzIHRoZSBjdXJyZW50IG9yaWVudGF0aW9uXG5cdFx0XHQgKiAgQHR5cGUgIHtBcnJheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSBbXG5cdCAgICAgICAgICAgIG9wdGlvbnMub3JpZW50YXRpb25YLFxuXHQgICAgICAgICAgICBvcHRpb25zLm9yaWVudGF0aW9uWSxcblx0ICAgICAgICAgICAgb3B0aW9ucy5vcmllbnRhdGlvblpcblx0ICAgICAgICBdO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEhvbGRzIHRoZSBjdXJyZW50IHBvc2l0aW9uXG5cdFx0XHQgKiAgQHR5cGUgIHtBcnJheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBbXG5cdCAgICAgICAgICAgIG9wdGlvbnMucG9zaXRpb25YLFxuXHQgICAgICAgICAgICBvcHRpb25zLnBvc2l0aW9uWSxcblx0ICAgICAgICAgICAgb3B0aW9ucy5wb3NpdGlvblpcblx0ICAgICAgICBdO1xuXHQgICAgICAgIC8vIHNldCB0aGUgZGVmYXVsdCBwb3NpdGlvbi9vcmllbnRhdGlvblxuXHQgICAgICAgIHRoaXMub3JpZW50YXRpb25YID0gb3B0aW9ucy5vcmllbnRhdGlvblg7XG5cdCAgICAgICAgdGhpcy5vcmllbnRhdGlvblkgPSBvcHRpb25zLm9yaWVudGF0aW9uWTtcblx0ICAgICAgICB0aGlzLm9yaWVudGF0aW9uWiA9IG9wdGlvbnMub3JpZW50YXRpb25aO1xuXHQgICAgICAgIHRoaXMucG9zaXRpb25YID0gb3B0aW9ucy5wb3NpdGlvblg7XG5cdCAgICAgICAgdGhpcy5wb3NpdGlvblkgPSBvcHRpb25zLnBvc2l0aW9uWTtcblx0ICAgICAgICB0aGlzLnBvc2l0aW9uWiA9IG9wdGlvbnMucG9zaXRpb25aO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuUGFubmVyM0QsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBEZWZhdWx0cyBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb25cblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAY29uc3Rcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuUGFubmVyM0QuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ3Bvc2l0aW9uWCc6IDAsXG5cdCAgICAgICAgJ3Bvc2l0aW9uWSc6IDAsXG5cdCAgICAgICAgJ3Bvc2l0aW9uWic6IDAsXG5cdCAgICAgICAgJ29yaWVudGF0aW9uWCc6IDAsXG5cdCAgICAgICAgJ29yaWVudGF0aW9uWSc6IDAsXG5cdCAgICAgICAgJ29yaWVudGF0aW9uWic6IDAsXG5cdCAgICAgICAgJ3Bhbm5pbmdNb2RlbCc6ICdlcXVhbHBvd2VyJyxcblx0ICAgICAgICAnbWF4RGlzdGFuY2UnOiAxMDAwMCxcblx0ICAgICAgICAnZGlzdGFuY2VNb2RlbCc6ICdpbnZlcnNlJyxcblx0ICAgICAgICAnY29uZU91dGVyR2Fpbic6IDAsXG5cdCAgICAgICAgJ2NvbmVPdXRlckFuZ2xlJzogMzYwLFxuXHQgICAgICAgICdjb25lSW5uZXJBbmdsZSc6IDM2MCxcblx0ICAgICAgICAncmVmRGlzdGFuY2UnOiAxLFxuXHQgICAgICAgICdyb2xsb2ZmRmFjdG9yJzogMVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSByYW1wIHRpbWUgd2hpY2ggaXMgYXBwbGllZCB0byB0aGUgc2V0VGFyZ2V0QXRUaW1lXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYW5uZXIzRC5wcm90b3R5cGUuX3JhbXBUaW1lQ29uc3RhbnQgPSAwLjAxO1xuXHQgICAgLyoqXG5cdFx0ICogIFNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBzb3VyY2UgaW4gM2Qgc3BhY2UuXG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIHhcblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgeVxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB6XG5cdFx0ICogIEByZXR1cm4ge1RvbmUuUGFubmVyM0R9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFubmVyM0QucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24gKHgsIHksIHopIHtcblx0ICAgICAgICBpZiAodGhpcy5fcGFubmVyLnBvc2l0aW9uWCkge1xuXHQgICAgICAgICAgICB2YXIgbm93ID0gdGhpcy5ub3coKTtcblx0ICAgICAgICAgICAgdGhpcy5fcGFubmVyLnBvc2l0aW9uWC5zZXRUYXJnZXRBdFRpbWUoeCwgbm93LCB0aGlzLl9yYW1wVGltZUNvbnN0YW50KTtcblx0ICAgICAgICAgICAgdGhpcy5fcGFubmVyLnBvc2l0aW9uWS5zZXRUYXJnZXRBdFRpbWUoeSwgbm93LCB0aGlzLl9yYW1wVGltZUNvbnN0YW50KTtcblx0ICAgICAgICAgICAgdGhpcy5fcGFubmVyLnBvc2l0aW9uWi5zZXRUYXJnZXRBdFRpbWUoeiwgbm93LCB0aGlzLl9yYW1wVGltZUNvbnN0YW50KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLl9wYW5uZXIuc2V0UG9zaXRpb24oeCwgeSwgeik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU2V0cyB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHNvdXJjZSBpbiAzZCBzcGFjZS5cblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgeFxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB5XG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIHpcblx0XHQgKiAgQHJldHVybiB7VG9uZS5QYW5uZXIzRH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QYW5uZXIzRC5wcm90b3R5cGUuc2V0T3JpZW50YXRpb24gPSBmdW5jdGlvbiAoeCwgeSwgeikge1xuXHQgICAgICAgIGlmICh0aGlzLl9wYW5uZXIub3JpZW50YXRpb25YKSB7XG5cdCAgICAgICAgICAgIHZhciBub3cgPSB0aGlzLm5vdygpO1xuXHQgICAgICAgICAgICB0aGlzLl9wYW5uZXIub3JpZW50YXRpb25YLnNldFRhcmdldEF0VGltZSh4LCBub3csIHRoaXMuX3JhbXBUaW1lQ29uc3RhbnQpO1xuXHQgICAgICAgICAgICB0aGlzLl9wYW5uZXIub3JpZW50YXRpb25ZLnNldFRhcmdldEF0VGltZSh5LCBub3csIHRoaXMuX3JhbXBUaW1lQ29uc3RhbnQpO1xuXHQgICAgICAgICAgICB0aGlzLl9wYW5uZXIub3JpZW50YXRpb25aLnNldFRhcmdldEF0VGltZSh6LCBub3csIHRoaXMuX3JhbXBUaW1lQ29uc3RhbnQpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3Bhbm5lci5zZXRPcmllbnRhdGlvbih4LCB5LCB6KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgeCBwb3NpdGlvbiBvZiB0aGUgcGFubmVyIG9iamVjdC5cblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuUGFubmVyM0QjXG5cdFx0ICogIEBuYW1lIHBvc2l0aW9uWFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGFubmVyM0QucHJvdG90eXBlLCAncG9zaXRpb25YJywge1xuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHBvcykge1xuXHQgICAgICAgICAgICB0aGlzLl9wb3NpdGlvblswXSA9IHBvcztcblx0ICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbi5hcHBseSh0aGlzLCB0aGlzLl9wb3NpdGlvbik7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uWzBdO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSB5IHBvc2l0aW9uIG9mIHRoZSBwYW5uZXIgb2JqZWN0LlxuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5QYW5uZXIzRCNcblx0XHQgKiAgQG5hbWUgcG9zaXRpb25ZXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QYW5uZXIzRC5wcm90b3R5cGUsICdwb3NpdGlvblknLCB7XG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocG9zKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uWzFdID0gcG9zO1xuXHQgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uLmFwcGx5KHRoaXMsIHRoaXMuX3Bvc2l0aW9uKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb25bMV07XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHogcG9zaXRpb24gb2YgdGhlIHBhbm5lciBvYmplY3QuXG5cdFx0ICogIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLlBhbm5lcjNEI1xuXHRcdCAqICBAbmFtZSBwb3NpdGlvblpcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBhbm5lcjNELnByb3RvdHlwZSwgJ3Bvc2l0aW9uWicsIHtcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwb3MpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25bMl0gPSBwb3M7XG5cdCAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24uYXBwbHkodGhpcywgdGhpcy5fcG9zaXRpb24pO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9wb3NpdGlvblsyXTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgeCBvcmllbnRhdGlvbiBvZiB0aGUgcGFubmVyIG9iamVjdC5cblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuUGFubmVyM0QjXG5cdFx0ICogIEBuYW1lIG9yaWVudGF0aW9uWFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGFubmVyM0QucHJvdG90eXBlLCAnb3JpZW50YXRpb25YJywge1xuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHBvcykge1xuXHQgICAgICAgICAgICB0aGlzLl9vcmllbnRhdGlvblswXSA9IHBvcztcblx0ICAgICAgICAgICAgdGhpcy5zZXRPcmllbnRhdGlvbi5hcHBseSh0aGlzLCB0aGlzLl9vcmllbnRhdGlvbik7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29yaWVudGF0aW9uWzBdO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSB5IG9yaWVudGF0aW9uIG9mIHRoZSBwYW5uZXIgb2JqZWN0LlxuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5QYW5uZXIzRCNcblx0XHQgKiAgQG5hbWUgb3JpZW50YXRpb25ZXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QYW5uZXIzRC5wcm90b3R5cGUsICdvcmllbnRhdGlvblknLCB7XG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocG9zKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX29yaWVudGF0aW9uWzFdID0gcG9zO1xuXHQgICAgICAgICAgICB0aGlzLnNldE9yaWVudGF0aW9uLmFwcGx5KHRoaXMsIHRoaXMuX29yaWVudGF0aW9uKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3JpZW50YXRpb25bMV07XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHogb3JpZW50YXRpb24gb2YgdGhlIHBhbm5lciBvYmplY3QuXG5cdFx0ICogIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLlBhbm5lcjNEI1xuXHRcdCAqICBAbmFtZSBvcmllbnRhdGlvblpcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBhbm5lcjNELnByb3RvdHlwZSwgJ29yaWVudGF0aW9uWicsIHtcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwb3MpIHtcblx0ICAgICAgICAgICAgdGhpcy5fb3JpZW50YXRpb25bMl0gPSBwb3M7XG5cdCAgICAgICAgICAgIHRoaXMuc2V0T3JpZW50YXRpb24uYXBwbHkodGhpcywgdGhpcy5fb3JpZW50YXRpb24pO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcmllbnRhdGlvblsyXTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBQcm94eSBhIHByb3BlcnR5IG9uIHRoZSBwYW5uZXIgdG8gYW4gZXhwb3NlZCBwdWJsaWMgcHJvcGVyeVxuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmd9ICBwcm9wXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlBhbm5lcjNELl9hbGlhc1Byb3BlcnR5ID0gZnVuY3Rpb24gKHByb3ApIHtcblx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QYW5uZXIzRC5wcm90b3R5cGUsIHByb3AsIHtcblx0ICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9wYW5uZXJbcHJvcF0gPSB2YWw7XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Bhbm5lcltwcm9wXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgcGFubmluZyBtb2RlbC4gRWl0aGVyIFwiZXF1YWxwb3dlclwiIG9yIFwiSFJURlwiLlxuXHRcdCAqICBAdHlwZSB7U3RyaW5nfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5QYW5uZXIzRCNcblx0XHQgKiAgQG5hbWUgcGFubmluZ01vZGVsXG5cdFx0ICovXG5cdCAgICBUb25lLlBhbm5lcjNELl9hbGlhc1Byb3BlcnR5KCdwYW5uaW5nTW9kZWwnKTtcblx0ICAgIC8qKlxuXHRcdCAqICBBIHJlZmVyZW5jZSBkaXN0YW5jZSBmb3IgcmVkdWNpbmcgdm9sdW1lIGFzIHNvdXJjZSBtb3ZlIGZ1cnRoZXIgZnJvbSB0aGUgbGlzdGVuZXJcblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuUGFubmVyM0QjXG5cdFx0ICogIEBuYW1lIHJlZkRpc3RhbmNlXG5cdFx0ICovXG5cdCAgICBUb25lLlBhbm5lcjNELl9hbGlhc1Byb3BlcnR5KCdyZWZEaXN0YW5jZScpO1xuXHQgICAgLyoqXG5cdFx0ICogIERlc2NyaWJlcyBob3cgcXVpY2tseSB0aGUgdm9sdW1lIGlzIHJlZHVjZWQgYXMgc291cmNlIG1vdmVzIGF3YXkgZnJvbSBsaXN0ZW5lci5cblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuUGFubmVyM0QjXG5cdFx0ICogIEBuYW1lIHJvbGxvZmZGYWN0b3Jcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFubmVyM0QuX2FsaWFzUHJvcGVydHkoJ3JvbGxvZmZGYWN0b3InKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGlzdGFuY2UgbW9kZWwgdXNlZCBieSwgIFwibGluZWFyXCIsIFwiaW52ZXJzZVwiLCBvciBcImV4cG9uZW50aWFsXCIuXG5cdFx0ICogIEB0eXBlIHtTdHJpbmd9XG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLlBhbm5lcjNEI1xuXHRcdCAqICBAbmFtZSBkaXN0YW5jZU1vZGVsXG5cdFx0ICovXG5cdCAgICBUb25lLlBhbm5lcjNELl9hbGlhc1Byb3BlcnR5KCdkaXN0YW5jZU1vZGVsJyk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGFuZ2xlLCBpbiBkZWdyZWVzLCBpbnNpZGUgb2Ygd2hpY2ggdGhlcmUgd2lsbCBiZSBubyB2b2x1bWUgcmVkdWN0aW9uXG5cdFx0ICogIEB0eXBlIHtEZWdyZWVzfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5QYW5uZXIzRCNcblx0XHQgKiAgQG5hbWUgY29uZUlubmVyQW5nbGVcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFubmVyM0QuX2FsaWFzUHJvcGVydHkoJ2NvbmVJbm5lckFuZ2xlJyk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGFuZ2xlLCBpbiBkZWdyZWVzLCBvdXRzaWRlIG9mIHdoaWNoIHRoZSB2b2x1bWUgd2lsbCBiZSByZWR1Y2VkXG5cdFx0ICogIHRvIGEgY29uc3RhbnQgdmFsdWUgb2YgY29uZU91dGVyR2FpblxuXHRcdCAqICBAdHlwZSB7RGVncmVlc31cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuUGFubmVyM0QjXG5cdFx0ICogIEBuYW1lIGNvbmVPdXRlckFuZ2xlXG5cdFx0ICovXG5cdCAgICBUb25lLlBhbm5lcjNELl9hbGlhc1Byb3BlcnR5KCdjb25lT3V0ZXJBbmdsZScpO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBnYWluIG91dHNpZGUgb2YgdGhlIGNvbmVPdXRlckFuZ2xlXG5cdFx0ICogIEB0eXBlIHtHYWlufVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5QYW5uZXIzRCNcblx0XHQgKiAgQG5hbWUgY29uZU91dGVyR2FpblxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYW5uZXIzRC5fYWxpYXNQcm9wZXJ0eSgnY29uZU91dGVyR2FpbicpO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBtYXhpbXVtIGRpc3RhbmNlIGJldHdlZW4gc291cmNlIGFuZCBsaXN0ZW5lcixcblx0XHQgKiAgYWZ0ZXIgd2hpY2ggdGhlIHZvbHVtZSB3aWxsIG5vdCBiZSByZWR1Y2VkIGFueSBmdXJ0aGVyLlxuXHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLlBhbm5lcjNEI1xuXHRcdCAqICBAbmFtZSBtYXhEaXN0YW5jZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYW5uZXIzRC5fYWxpYXNQcm9wZXJ0eSgnbWF4RGlzdGFuY2UnKTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuUGFubmVyM0R9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFubmVyM0QucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9wYW5uZXIuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMuX3Bhbm5lciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5QYW5uZXIzRDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuUGFuVm9sIGlzIGEgVG9uZS5QYW5uZXIgYW5kIFRvbmUuVm9sdW1lIGluIG9uZS5cblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAcGFyYW0ge0F1ZGlvUmFuZ2V9IHBhbiB0aGUgaW5pdGlhbCBwYW5cblx0XHQgKiAgQHBhcmFtIHtudW1iZXJ9IHZvbHVtZSBUaGUgb3V0cHV0IHZvbHVtZS5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL3BhbiB0aGUgaW5jb21pbmcgc2lnbmFsIGxlZnQgYW5kIGRyb3AgdGhlIHZvbHVtZVxuXHRcdCAqIHZhciBwYW5Wb2wgPSBuZXcgVG9uZS5QYW5Wb2woLTAuMjUsIC0xMik7XG5cdFx0ICovXG5cdCAgICBUb25lLlBhblZvbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdwYW4nLFxuXHQgICAgICAgICAgICAndm9sdW1lJ1xuXHQgICAgICAgIF0sIFRvbmUuUGFuVm9sKTtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBwYW5uaW5nIG5vZGVcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5QYW5uZXJ9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3Bhbm5lciA9IHRoaXMuaW5wdXQgPSBuZXcgVG9uZS5QYW5uZXIob3B0aW9ucy5wYW4pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBML1IgcGFubmluZyBjb250cm9sLlxuXHRcdFx0ICogIEB0eXBlIHtBdWRpb1JhbmdlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMucGFuID0gdGhpcy5fcGFubmVyLnBhbjtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgdm9sdW1lIG5vZGVcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5Wb2x1bWV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3ZvbHVtZSA9IHRoaXMub3V0cHV0ID0gbmV3IFRvbmUuVm9sdW1lKG9wdGlvbnMudm9sdW1lKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgdm9sdW1lIGNvbnRyb2wgaW4gZGVjaWJlbHMuXG5cdFx0XHQgKiAgQHR5cGUge0RlY2liZWxzfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMudm9sdW1lID0gdGhpcy5fdm9sdW1lLnZvbHVtZTtcblx0ICAgICAgICAvL2Nvbm5lY3Rpb25zXG5cdCAgICAgICAgdGhpcy5fcGFubmVyLmNvbm5lY3QodGhpcy5fdm9sdW1lKTtcblx0ICAgICAgICB0aGlzLm11dGUgPSBvcHRpb25zLm11dGU7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAncGFuJyxcblx0ICAgICAgICAgICAgJ3ZvbHVtZSdcblx0ICAgICAgICBdKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlBhblZvbCwgVG9uZS5BdWRpb05vZGUpO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBkZWZhdWx0c1xuXHRcdCAqICBAdHlwZSAge09iamVjdH1cblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFuVm9sLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdwYW4nOiAwLFxuXHQgICAgICAgICd2b2x1bWUnOiAwLFxuXHQgICAgICAgICdtdXRlJzogZmFsc2Vcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBNdXRlL3VubXV0ZSB0aGUgdm9sdW1lXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuUGFuVm9sI1xuXHRcdCAqIEBuYW1lIG11dGVcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBhblZvbC5wcm90b3R5cGUsICdtdXRlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fdm9sdW1lLm11dGU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChtdXRlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3ZvbHVtZS5tdXRlID0gbXV0ZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5QYW5Wb2x9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFuVm9sLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoW1xuXHQgICAgICAgICAgICAncGFuJyxcblx0ICAgICAgICAgICAgJ3ZvbHVtZSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLl9wYW5uZXIuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3Bhbm5lciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5wYW4gPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3ZvbHVtZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fdm9sdW1lID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnZvbHVtZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuUGFuVm9sO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuU29sbyBsZXRzIHlvdSBpc29sYXRlIGEgc3BlY2lmaWMgYXVkaW8gc3RyZWFtLiBXaGVuXG5cdFx0ICogICAgICAgICBhbiBpbnN0YW5jZSBpcyBzZXQgdG8gYHNvbG89dHJ1ZWAsIGl0IHdpbGwgbXV0ZSBhbGwgb3RoZXIgaW5zdGFuY2VzLlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIHNvbG9BID0gbmV3IFRvbmUuU29sbygpXG5cdFx0ICogdmFyIHNvbG9CID0gbmV3IFRvbmUuU29sbygpXG5cdFx0ICogc29sb0Euc29sbyA9IHRydWVcblx0XHQgKiAvL25vIGF1ZGlvIHdpbGwgcGFzcyB0aHJvdWdoIHNvbG9CXG5cdFx0ICovXG5cdCAgICBUb25lLlNvbG8gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWydzb2xvJ10sIFRvbmUuU29sbyk7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgaW5wdXQgYW5kIG91dHB1dCBub2RlXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLkdhaW59XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmlucHV0ID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQSBib3VuZCBfc29sb2VkIG1ldGhvZFxuXHRcdFx0ICogIEB0eXBlICB7RnVuY3Rpb259XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3NvbG9CaW5kID0gdGhpcy5fc29sb2VkLmJpbmQodGhpcyk7XG5cdCAgICAgICAgLy9saXN0ZW4gZm9yIHNvbG8gZXZlbnRzIGNsYXNzLXdpZGUuXG5cdCAgICAgICAgdGhpcy5jb250ZXh0Lm9uKCdzb2xvJywgdGhpcy5fc29sb0JpbmQpO1xuXHQgICAgICAgIC8vc2V0IGluaXRpYWxseVxuXHQgICAgICAgIHRoaXMuc29sbyA9IG9wdGlvbnMuc29sbztcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlNvbG8sIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdHNcblx0XHQgKiAgQHR5cGUgIHtPYmplY3R9XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKi9cblx0ICAgIFRvbmUuU29sby5kZWZhdWx0cyA9IHsgc29sbzogZmFsc2UgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBJc29sYXRlcyB0aGlzIGluc3RhbmNlIGFuZCBtdXRlcyBhbGwgb3RoZXIgaW5zdGFuY2VzIG9mIFRvbmUuU29sby5cblx0XHQgKiAgT25seSBvbmUgaW5zdGFuY2UgY2FuIGJlIHNvbG9lZCBhdCBhIHRpbWUuIEEgc29sb2VkXG5cdFx0ICogIGluc3RhbmNlIHdpbGwgcmVwb3J0IGBzb2xvPWZhbHNlYCB3aGVuIGFub3RoZXIgaW5zdGFuY2UgaXMgc29sb2VkLlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5Tb2xvI1xuXHRcdCAqICBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiAgQG5hbWUgc29sb1xuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuU29sby5wcm90b3R5cGUsICdzb2xvJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNTb2xvZWQoKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHNvbG8pIHtcblx0ICAgICAgICAgICAgaWYgKHNvbG8pIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2FkZFNvbG8oKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVNvbG8oKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuZW1pdCgnc29sbycsIHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIElmIHRoZSBjdXJyZW50IGluc3RhbmNlIGlzIG11dGVkLCBpLmUuIGFub3RoZXIgaW5zdGFuY2UgaXMgc29sb2VkXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLlNvbG8jXG5cdFx0ICogIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqICBAbmFtZSBtdXRlZFxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlNvbG8ucHJvdG90eXBlLCAnbXV0ZWQnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0LmdhaW4udmFsdWUgPT09IDA7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBBZGQgdGhpcyB0byB0aGUgc29sb2VkIGFycmF5XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuU29sby5wcm90b3R5cGUuX2FkZFNvbG8gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKCFUb25lLmlzQXJyYXkodGhpcy5jb250ZXh0Ll9jdXJyZW50U29sbykpIHtcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0Ll9jdXJyZW50U29sbyA9IFtdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIXRoaXMuX2lzU29sb2VkKCkpIHtcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0Ll9jdXJyZW50U29sby5wdXNoKHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBSZW1vdmUgdGhpcyBmcm9tIHRoZSBzb2xvZWQgYXJyYXlcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Tb2xvLnByb3RvdHlwZS5fcmVtb3ZlU29sbyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5faXNTb2xvZWQoKSkge1xuXHQgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRleHQuX2N1cnJlbnRTb2xvLmluZGV4T2YodGhpcyk7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5fY3VycmVudFNvbG8uc3BsaWNlKGluZGV4LCAxKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogQHJldHVybiB7Qm9vbGVhbn0gSXMgdGhpcyBvbiB0aGUgc29sb2VkIGFycmF5XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuU29sby5wcm90b3R5cGUuX2lzU29sb2VkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChUb25lLmlzQXJyYXkodGhpcy5jb250ZXh0Ll9jdXJyZW50U29sbykpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5fY3VycmVudFNvbG8ubGVuZ3RoICE9PSAwICYmIHRoaXMuY29udGV4dC5fY3VycmVudFNvbG8uaW5kZXhPZih0aGlzKSAhPT0gLTE7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIHRydWUgaWYgbm8gb25lIGlzIHNvbG9lZFxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlNvbG8ucHJvdG90eXBlLl9ub1NvbG9zID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiAhVG9uZS5pc0FycmF5KHRoaXMuY29udGV4dC5fY3VycmVudFNvbG8pIHx8IHRoaXMuY29udGV4dC5fY3VycmVudFNvbG8ubGVuZ3RoID09PSAwO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTb2xvIHRoZSBjdXJyZW50IGluc3RhbmNlIGFuZCB1bnNvbG8gYWxsIG90aGVyIGluc3RhbmNlcy5cblx0XHQgKiAgQHBhcmFtICB7VG9uZS5Tb2xvfSAgaW5zdGFuY2UgIFRoZSBpbnN0YW5jZSB3aGljaCBpcyBiZWluZyBzb2xvZWQvdW5zb2xvZWQuXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlNvbG8ucHJvdG90eXBlLl9zb2xvZWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuX2lzU29sb2VkKCkpIHtcblx0ICAgICAgICAgICAgdGhpcy5pbnB1dC5nYWluLnZhbHVlID0gMTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX25vU29sb3MoKSkge1xuXHQgICAgICAgICAgICAvL25vIG9uZSBpcyBzb2xvZWRcblx0ICAgICAgICAgICAgdGhpcy5pbnB1dC5nYWluLnZhbHVlID0gMTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmlucHV0LmdhaW4udmFsdWUgPSAwO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXBcblx0XHQgKiAgQHJldHVybiAge1RvbmUuU29sb30gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuU29sby5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmNvbnRleHQub2ZmKCdzb2xvJywgdGhpcy5fc29sb0JpbmQpO1xuXHQgICAgICAgIHRoaXMuX3JlbW92ZVNvbG8oKTtcblx0ICAgICAgICB0aGlzLl9zb2xvQmluZCA9IG51bGw7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5Tb2xvO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBHZXQgdGhlIGN1cnJlbnQgd2F2ZWZvcm0gZGF0YSBvZiB0aGUgY29ubmVjdGVkIGF1ZGlvIHNvdXJjZS5cblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQXVkaW9Ob2RlfVxuXHRcdCAqICBAcGFyYW0ge051bWJlcj19IHNpemUgVGhlIHNpemUgb2YgdGhlIEZGVC4gVmFsdWUgbXVzdCBiZSBhIHBvd2VyIG9mXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgIHR3byBpbiB0aGUgcmFuZ2UgMzIgdG8gMzI3NjguXG5cdFx0ICovXG5cdCAgICBUb25lLldhdmVmb3JtID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFsnc2l6ZSddLCBUb25lLldhdmVmb3JtKTtcblx0ICAgICAgICBvcHRpb25zLnR5cGUgPSBUb25lLkFuYWx5c2VyLlR5cGUuV2F2ZWZvcm07XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW5hbHlzZXIgbm9kZS5cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkFuYWx5c2VyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYW5hbHlzZXIgPSB0aGlzLmlucHV0ID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5BbmFseXNlcihvcHRpb25zKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLldhdmVmb3JtLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGRlZmF1bHQgdmFsdWVzLlxuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqICBAY29uc3Rcblx0XHQgKi9cblx0ICAgIFRvbmUuV2F2ZWZvcm0uZGVmYXVsdHMgPSB7ICdzaXplJzogMTAyNCB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEdldHMgdGhlIHdhdmVmb3JtIG9mIHRoZSBhdWRpbyBzb3VyY2UuIFJldHVybnMgdGhlIHdhdmVmb3JtIGRhdGFcblx0XHQgKiAgb2YgbGVuZ3RoIFtzaXplXSgjc2l6ZSkgYXMgYSBGbG9hdDMyQXJyYXkgd2l0aCB2YWx1ZXMgYmV0d2VlbiAtMSBhbmQgMS5cblx0XHQgKiAgQHJldHVybnMge1R5cGVkQXJyYXl9XG5cdFx0ICovXG5cdCAgICBUb25lLldhdmVmb3JtLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fYW5hbHlzZXIuZ2V0VmFsdWUoKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHNpemUgb2YgYW5hbHlzaXMuIFRoaXMgbXVzdCBiZSBhIHBvd2VyIG9mIHR3byBpbiB0aGUgcmFuZ2UgMzIgdG8gMzI3NjguXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLldhdmVmb3JtI1xuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbmFtZSBzaXplXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5XYXZlZm9ybS5wcm90b3R5cGUsICdzaXplJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5hbHlzZXIuc2l6ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHNpemUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fYW5hbHlzZXIuc2l6ZSA9IHNpemU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLldhdmVmb3JtfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5XYXZlZm9ybS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkF1ZGlvTm9kZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX2FuYWx5c2VyLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9hbmFseXNlciA9IG51bGw7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuV2F2ZWZvcm07XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLkN0cmxJbnRlcnBvbGF0ZSB3aWxsIGludGVycG9sYXRlIGJldHdlZW4gZ2l2ZW4gdmFsdWVzIGJhc2VkXG5cdFx0ICogICAgICAgICBvbiB0aGUgXCJpbmRleFwiIHByb3BlcnR5LiBQYXNzaW5nIGluIGFuIGFycmF5IG9yIG9iamVjdCBsaXRlcmFsXG5cdFx0ICogICAgICAgICB3aWxsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIHBhcmFtZXRlcnMuIE5vdGUgKGkuZS4gXCJDM1wiKVxuXHRcdCAqICAgICAgICAgYW5kIFRpbWUgKGkuZS4gXCI0biArIDJcIikgY2FuIGJlIGludGVycG9sYXRlZC4gQWxsIG90aGVyIHZhbHVlcyBhcmVcblx0XHQgKiAgICAgICAgIGFzc3VtZWQgdG8gYmUgbnVtYmVycy4gXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIGludGVycCA9IG5ldyBUb25lLkN0cmxJbnRlcnBvbGF0ZShbMCwgMiwgOSwgNF0pO1xuXHRcdCAqIGludGVycC5pbmRleCA9IDAuNzU7XG5cdFx0ICogaW50ZXJwLnZhbHVlOyAvL3JldHVybnMgMS41XG5cdFx0ICpcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgaW50ZXJwID0gbmV3IFRvbmUuQ3RybEludGVycG9sYXRlKFtcblx0XHQgKiBcdFsyLCA0LCA1XSxcblx0XHQgKiBcdFs5LCAzLCAyXSxcblx0XHQgKiBdKTtcblx0XHQgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIGFycmF5IG9mIHZhbHVlcyB0byBpbnRlcnBvbGF0ZSBvdmVyXG5cdFx0ICogQHBhcmFtIHtQb3NpdGl2ZX0gaW5kZXggVGhlIGluaXRpYWwgaW50ZXJwb2xhdGlvbiBpbmRleC5cblx0XHQgKiBAZXh0ZW5kcyB7VG9uZX1cblx0XHQgKi9cblx0ICAgIFRvbmUuQ3RybEludGVycG9sYXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ3ZhbHVlcycsXG5cdCAgICAgICAgICAgICdpbmRleCdcblx0ICAgICAgICBdLCBUb25lLkN0cmxJbnRlcnBvbGF0ZSk7XG5cdCAgICAgICAgVG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSB2YWx1ZXMgdG8gaW50ZXJwb2xhdGUgYmV0d2VlblxuXHRcdFx0ICogIEB0eXBlICB7QXJyYXl9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLnZhbHVlcyA9IG9wdGlvbnMudmFsdWVzO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBpbnRlcnBvbGF0ZWQgaW5kZXggYmV0d2VlbiB2YWx1ZXMuIEZvciBleGFtcGxlOiBhIHZhbHVlIG9mIDEuNVxuXHRcdFx0ICogIHdvdWxkIGludGVycG9sYXRlIGVxdWFsbHkgYmV0d2VlbiB0aGUgdmFsdWUgYXQgaW5kZXggMVxuXHRcdFx0ICogIGFuZCB0aGUgdmFsdWUgYXQgaW5kZXggMi4gXG5cdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdCAqIGludGVycC5pbmRleCA9IDA7IFxuXHRcdFx0ICogaW50ZXJwLnZhbHVlOyAvL3JldHVybnMgdGhlIHZhbHVlIGF0IDBcblx0XHRcdCAqIGludGVycC5pbmRleCA9IDAuNTtcblx0XHRcdCAqIGludGVycC52YWx1ZTsgLy9yZXR1cm5zIHRoZSB2YWx1ZSBiZXR3ZWVuIGluZGljZXMgMCBhbmQgMS4gXG5cdFx0XHQgKiAgQHR5cGUgIHtQb3NpdGl2ZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSBvcHRpb25zLmluZGV4O1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuQ3RybEludGVycG9sYXRlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdHNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5DdHJsSW50ZXJwb2xhdGUuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2luZGV4JzogMCxcblx0ICAgICAgICAndmFsdWVzJzogW11cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGN1cnJlbnQgaW50ZXJwb2xhdGVkIHZhbHVlIGJhc2VkIG9uIHRoZSBpbmRleFxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuQ3RybEludGVycG9sYXRlI1xuXHRcdCAqICBAdHlwZSB7Kn1cblx0XHQgKiAgQG5hbWUgdmFsdWVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkN0cmxJbnRlcnBvbGF0ZS5wcm90b3R5cGUsICd2YWx1ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleDtcblx0ICAgICAgICAgICAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdGhpcy52YWx1ZXMubGVuZ3RoIC0gMSk7XG5cdCAgICAgICAgICAgIHZhciBsb3dlclBvc2l0aW9uID0gTWF0aC5mbG9vcihpbmRleCk7XG5cdCAgICAgICAgICAgIHZhciBsb3dlciA9IHRoaXMudmFsdWVzW2xvd2VyUG9zaXRpb25dO1xuXHQgICAgICAgICAgICB2YXIgdXBwZXIgPSB0aGlzLnZhbHVlc1tNYXRoLmNlaWwoaW5kZXgpXTtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVycG9sYXRlKGluZGV4IC0gbG93ZXJQb3NpdGlvbiwgbG93ZXIsIHVwcGVyKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBJbnRlcm5hbCBpbnRlcnBvbGF0aW9uIHJvdXRpbmVcblx0XHQgKiAgQHBhcmFtICB7Tm9ybWFsUmFuZ2V9ICBpbmRleCAgVGhlIGluZGV4IGJldHdlZW4gdGhlIGxvd2VyIGFuZCB1cHBlclxuXHRcdCAqICBAcGFyYW0gIHsqfSAgbG93ZXIgXG5cdFx0ICogIEBwYXJhbSAgeyp9ICB1cHBlciBcblx0XHQgKiAgQHJldHVybiAgeyp9ICBUaGUgaW50ZXJwb2xhdGVkIHZhbHVlXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkN0cmxJbnRlcnBvbGF0ZS5wcm90b3R5cGUuX2ludGVycG9sYXRlID0gZnVuY3Rpb24gKGluZGV4LCBsb3dlciwgdXBwZXIpIHtcblx0ICAgICAgICBpZiAoVG9uZS5pc0FycmF5KGxvd2VyKSkge1xuXHQgICAgICAgICAgICB2YXIgcmV0QXJyYXkgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb3dlci5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgcmV0QXJyYXlbaV0gPSB0aGlzLl9pbnRlcnBvbGF0ZShpbmRleCwgbG93ZXJbaV0sIHVwcGVyW2ldKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gcmV0QXJyYXk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChUb25lLmlzT2JqZWN0KGxvd2VyKSkge1xuXHQgICAgICAgICAgICB2YXIgcmV0T2JqID0ge307XG5cdCAgICAgICAgICAgIGZvciAodmFyIGF0dHIgaW4gbG93ZXIpIHtcblx0ICAgICAgICAgICAgICAgIHJldE9ialthdHRyXSA9IHRoaXMuX2ludGVycG9sYXRlKGluZGV4LCBsb3dlclthdHRyXSwgdXBwZXJbYXR0cl0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiByZXRPYmo7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgbG93ZXIgPSB0aGlzLl90b051bWJlcihsb3dlcik7XG5cdCAgICAgICAgICAgIHVwcGVyID0gdGhpcy5fdG9OdW1iZXIodXBwZXIpO1xuXHQgICAgICAgICAgICByZXR1cm4gKDEgLSBpbmRleCkgKiBsb3dlciArIGluZGV4ICogdXBwZXI7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDb252ZXJ0IGZyb20gdGhlIGdpdmVuIHR5cGUgaW50byBhIG51bWJlclxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ8U3RyaW5nfSAgdmFsdWVcblx0XHQgKiAgQHJldHVybiAge051bWJlcn1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuQ3RybEludGVycG9sYXRlLnByb3RvdHlwZS5fdG9OdW1iZXIgPSBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgaWYgKFRvbmUuaXNOdW1iZXIodmFsKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdmFsO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIC8vb3RoZXJ3aXNlIGFzc3VtZSB0aGF0IGl0J3MgVGltZS4uLlxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy50b1NlY29uZHModmFsKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkN0cmxJbnRlcnBvbGF0ZX0gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQ3RybEludGVycG9sYXRlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMudmFsdWVzID0gbnVsbDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5DdHJsSW50ZXJwb2xhdGU7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLkN0cmxNYXJrb3YgcmVwcmVzZW50cyBhIE1hcmtvdiBDaGFpbiB3aGVyZSBlYWNoIGNhbGxcblx0XHQgKiAgICAgICAgIHRvIFRvbmUuQ3RybE1hcmtvdi5uZXh0IHdpbGwgbW92ZSB0byB0aGUgbmV4dCBzdGF0ZS4gSWYgdGhlIG5leHRcblx0XHQgKiAgICAgICAgIHN0YXRlIGNob2ljZSBpcyBhbiBhcnJheSwgdGhlIG5leHQgc3RhdGUgaXMgY2hvc2VuIHJhbmRvbWx5IHdpdGhcblx0XHQgKiAgICAgICAgIGV2ZW4gcHJvYmFiaWxpdHkgZm9yIGFsbCBvZiB0aGUgY2hvaWNlcy4gRm9yIGEgd2VpZ2h0ZWQgcHJvYmFiaWxpdHlcblx0XHQgKiAgICAgICAgIG9mIHRoZSBuZXh0IGNob2ljZXMsIHBhc3MgaW4gYW4gb2JqZWN0IHdpdGggXCJzdGF0ZVwiIGFuZCBcInByb2JhYmlsaXR5XCIgYXR0cmlidXRlcy4gXG5cdFx0ICogICAgICAgICBUaGUgcHJvYmFiaWxpdGllcyB3aWxsIGJlIG5vcm1hbGl6ZWQgYW5kIHRoZW4gY2hvc2VuLiBJZiBubyBuZXh0IG9wdGlvbnNcblx0XHQgKiAgICAgICAgIGFyZSBnaXZlbiBmb3IgdGhlIGN1cnJlbnQgc3RhdGUsIHRoZSBzdGF0ZSB3aWxsIHN0YXkgdGhlcmUuIFxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgY2hhaW4gPSBuZXcgVG9uZS5DdHJsTWFya292KHtcblx0XHQgKiBcdFwiYmVnaW5uaW5nXCIgOiBbXCJlbmRcIiwgXCJtaWRkbGVcIl0sXG5cdFx0ICogXHRcIm1pZGRsZVwiIDogXCJlbmRcIlxuXHRcdCAqIH0pO1xuXHRcdCAqIGNoYWluLnZhbHVlID0gXCJiZWdpbm5pbmdcIjtcblx0XHQgKiBjaGFpbi5uZXh0KCk7IC8vcmV0dXJucyBcImVuZFwiIG9yIFwibWlkZGxlXCIgd2l0aCA1MCUgcHJvYmFiaWxpdHlcblx0XHQgKlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBjaGFpbiA9IG5ldyBUb25lLkN0cmxNYXJrb3Yoe1xuXHRcdCAqIFx0XCJiZWdpbm5pbmdcIiA6IFt7XCJ2YWx1ZVwiIDogXCJlbmRcIiwgXCJwcm9iYWJpbGl0eVwiIDogMC44fSwgXG5cdFx0ICogXHRcdFx0XHRcdHtcInZhbHVlXCIgOiBcIm1pZGRsZVwiLCBcInByb2JhYmlsaXR5XCIgOiAwLjJ9XSxcblx0XHQgKiBcdFwibWlkZGxlXCIgOiBcImVuZFwiXG5cdFx0ICogfSk7XG5cdFx0ICogY2hhaW4udmFsdWUgPSBcImJlZ2lubmluZ1wiO1xuXHRcdCAqIGNoYWluLm5leHQoKTsgLy9yZXR1cm5zIFwiZW5kXCIgd2l0aCA4MCUgcHJvYmFiaWxpdHkgb3IgXCJtaWRkbGVcIiB3aXRoIDIwJS5cblx0XHQgKiAgQHBhcmFtIHtPYmplY3R9IHZhbHVlcyBBbiBvYmplY3Qgd2l0aCB0aGUgc3RhdGUgbmFtZXMgYXMgdGhlIGtleXNcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIG5leHQgc3RhdGUocykgYXMgdGhlIHZhbHVlcy4gXG5cdFx0ICovXG5cdCAgICBUb25lLkN0cmxNYXJrb3YgPSBmdW5jdGlvbiAodmFsdWVzLCBpbml0aWFsKSB7XG5cdCAgICAgICAgVG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBNYXJrb3YgdmFsdWVzIHdpdGggc3RhdGVzIGFzIHRoZSBrZXlzXG5cdFx0XHQgKiAgYW5kIG5leHQgc3RhdGUocykgYXMgdGhlIHZhbHVlcy4gXG5cdFx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMudmFsdWVzID0gVG9uZS5kZWZhdWx0QXJnKHZhbHVlcywge30pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBNYXJrb3YgdmFsdWVzLiBUaGUgbmV4dFxuXHRcdFx0ICogIHN0YXRlIHdpbGwgYmUgZXZhbHVhdGVkIGFuZCByZXR1cm5lZCB3aGVuIFRvbmUuQ3RybE1hcmtvdi5uZXh0XG5cdFx0XHQgKiAgaXMgaW52b2tlZC5cblx0XHRcdCAqICBAdHlwZSB7U3RyaW5nfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy52YWx1ZSA9IFRvbmUuZGVmYXVsdEFyZyhpbml0aWFsLCBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcylbMF0pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuQ3RybE1hcmtvdik7XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJucyB0aGUgbmV4dCBzdGF0ZSBvZiB0aGUgTWFya292IHZhbHVlcy4gXG5cdFx0ICogIEByZXR1cm4gIHtTdHJpbmd9XG5cdFx0ICovXG5cdCAgICBUb25lLkN0cmxNYXJrb3YucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMudmFsdWVzLmhhc093blByb3BlcnR5KHRoaXMudmFsdWUpKSB7XG5cdCAgICAgICAgICAgIHZhciBuZXh0ID0gdGhpcy52YWx1ZXNbdGhpcy52YWx1ZV07XG5cdCAgICAgICAgICAgIGlmIChUb25lLmlzQXJyYXkobmV4dCkpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBkaXN0cmlidXRpb24gPSB0aGlzLl9nZXRQcm9iRGlzdHJpYnV0aW9uKG5leHQpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHJhbmQgPSBNYXRoLnJhbmRvbSgpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHRvdGFsID0gMDtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzdHJpYnV0aW9uLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3QgPSBkaXN0cmlidXRpb25baV07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmQgPiB0b3RhbCAmJiByYW5kIDwgdG90YWwgKyBkaXN0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaG9zZW4gPSBuZXh0W2ldO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVG9uZS5pc09iamVjdChjaG9zZW4pKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gY2hvc2VuLnZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGNob3Nlbjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSBkaXN0O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5leHQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENob29zZSByYW5kb21seSBmcm9tIGFuIGFycmF5IHdlaWdodGVkIG9wdGlvbnMgaW4gdGhlIGZvcm0gXG5cdFx0ICogIHtcInN0YXRlXCIgOiBzdHJpbmcsIFwicHJvYmFiaWxpdHlcIiA6IG51bWJlcn0gb3IgYW4gYXJyYXkgb2YgdmFsdWVzXG5cdFx0ICogIEBwYXJhbSAge0FycmF5fSAgb3B0aW9ucyBcblx0XHQgKiAgQHJldHVybiAge0FycmF5fSAgVGhlIHJhbmRvbWx5IHNlbGVjdGVkIGNob2ljZVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5DdHJsTWFya292LnByb3RvdHlwZS5fZ2V0UHJvYkRpc3RyaWJ1dGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdCAgICAgICAgdmFyIGRpc3RyaWJ1dGlvbiA9IFtdO1xuXHQgICAgICAgIHZhciB0b3RhbCA9IDA7XG5cdCAgICAgICAgdmFyIG5lZWRzTm9ybWFsaXppbmcgPSBmYWxzZTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG9wdGlvbnNbaV07XG5cdCAgICAgICAgICAgIGlmIChUb25lLmlzT2JqZWN0KG9wdGlvbikpIHtcblx0ICAgICAgICAgICAgICAgIG5lZWRzTm9ybWFsaXppbmcgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgZGlzdHJpYnV0aW9uW2ldID0gb3B0aW9uLnByb2JhYmlsaXR5O1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgZGlzdHJpYnV0aW9uW2ldID0gMSAvIG9wdGlvbnMubGVuZ3RoO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRvdGFsICs9IGRpc3RyaWJ1dGlvbltpXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKG5lZWRzTm9ybWFsaXppbmcpIHtcblx0ICAgICAgICAgICAgLy9ub3JtYWxpemUgdGhlIHZhbHVlc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRpc3RyaWJ1dGlvbi5sZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICAgICAgZGlzdHJpYnV0aW9uW2pdID0gZGlzdHJpYnV0aW9uW2pdIC8gdG90YWw7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGRpc3RyaWJ1dGlvbjtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXBcblx0XHQgKiAgQHJldHVybiAge1RvbmUuQ3RybE1hcmtvdn0gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQ3RybE1hcmtvdi5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLnZhbHVlcyA9IG51bGw7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuQ3RybE1hcmtvdjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIEdlbmVyYXRlIHBhdHRlcm5zIGZyb20gYW4gYXJyYXkgb2YgdmFsdWVzLlxuXHRcdCAqICAgICAgICAgSGFzIGEgbnVtYmVyIG9mIGFycGVnZ2lhdGlvbiBhbmQgcmFuZG9taXplZFxuXHRcdCAqICAgICAgICAgc2VsZWN0aW9uIHBhdHRlcm5zLiBcblx0XHQgKiAgICAgICAgICAgPHVsPlxuXHRcdCAqICBcdCAgICAgICAgPGxpPlwidXBcIiAtIGN5Y2xlcyB1cHdhcmQ8L2xpPlxuXHRcdCAqICBcdFx0XHQ8bGk+XCJkb3duXCIgLSBjeWNsZXMgZG93bndhcmQ8L2xpPlxuXHRcdCAqICBcdFx0XHQ8bGk+XCJ1cERvd25cIiAtIHVwIHRoZW4gYW5kIGRvd248L2xpPlxuXHRcdCAqICBcdFx0XHQ8bGk+XCJkb3duVXBcIiAtIGN5Y2xlcyBkb3duIHRoZW4gYW5kIHVwPC9saT5cblx0XHQgKiAgXHRcdFx0PGxpPlwiYWx0ZXJuYXRlVXBcIiAtIGp1bXAgdXAgdHdvIGFuZCBkb3duIG9uZTwvbGk+XG5cdFx0ICogIFx0XHRcdDxsaT5cImFsdGVybmF0ZURvd25cIiAtIGp1bXAgZG93biB0d28gYW5kIHVwIG9uZTwvbGk+XG5cdFx0ICogIFx0XHRcdDxsaT5cInJhbmRvbVwiIC0gcmFuZG9tbHkgc2VsZWN0IGFuIGluZGV4PC9saT5cblx0XHQgKiAgXHRcdFx0PGxpPlwicmFuZG9tV2Fsa1wiIC0gcmFuZG9tbHkgbW92ZXMgb25lIGluZGV4IGF3YXkgZnJvbSB0aGUgY3VycmVudCBwb3NpdGlvbjwvbGk+XG5cdFx0ICogIFx0XHRcdDxsaT5cInJhbmRvbU9uY2VcIiAtIHJhbmRvbWx5IHNlbGVjdCBhbiBpbmRleCB3aXRob3V0IHJlcGVhdGluZyB1bnRpbCBhbGwgdmFsdWVzIGhhdmUgYmVlbiBjaG9zZW4uPC9saT5cblx0XHQgKiAgICAgXHRcdDwvdWw+XG5cdFx0ICogIEBwYXJhbSAge0FycmF5fSAgdmFsdWVzICAgQW4gYXJyYXkgb2Ygb3B0aW9ucyB0byBjaG9vc2UgZnJvbS5cblx0XHQgKiAgQHBhcmFtICB7VG9uZS5DdHJsUGF0dGVybi5UeXBlPX0gIHR5cGUgIFRoZSBuYW1lIG9mIHRoZSBwYXR0ZXJuLlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0XHQgKi9cblx0ICAgIFRvbmUuQ3RybFBhdHRlcm4gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAndmFsdWVzJyxcblx0ICAgICAgICAgICAgJ3R5cGUnXG5cdCAgICAgICAgXSwgVG9uZS5DdHJsUGF0dGVybik7XG5cdCAgICAgICAgVG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBhcnJheSBvZiB2YWx1ZXMgdG8gYXJwZWdnaWF0ZSBvdmVyXG5cdFx0XHQgKiAgQHR5cGUge0FycmF5fVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy52YWx1ZXMgPSBvcHRpb25zLnZhbHVlcztcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgY3VycmVudCBwb3NpdGlvbiBpbiB0aGUgdmFsdWVzIGFycmF5XG5cdFx0XHQgKiAgQHR5cGUgIHtOdW1iZXJ9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmluZGV4ID0gMDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgdHlwZSBwbGFjZWhvbGRlclxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkN0cmxQYXR0ZXJuLlR5cGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3R5cGUgPSBudWxsO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFNodWZmbGVkIHZhbHVlcyBmb3IgdGhlIFJhbmRvbU9uY2UgdHlwZVxuXHRcdFx0ICogIEB0eXBlIHtBcnJheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc2h1ZmZsZWQgPSBudWxsO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBkaXJlY3Rpb24gb2YgdGhlIG1vdmVtZW50XG5cdFx0XHQgKiAgQHR5cGUge1N0cmluZ31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGU7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5DdHJsUGF0dGVybik7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIENvbnRyb2wgUGF0dGVybnNcblx0XHQgKiAgQHR5cGUgIHtPYmplY3R9XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKi9cblx0ICAgIFRvbmUuQ3RybFBhdHRlcm4uVHlwZSA9IHtcblx0ICAgICAgICBVcDogJ3VwJyxcblx0ICAgICAgICBEb3duOiAnZG93bicsXG5cdCAgICAgICAgVXBEb3duOiAndXBEb3duJyxcblx0ICAgICAgICBEb3duVXA6ICdkb3duVXAnLFxuXHQgICAgICAgIEFsdGVybmF0ZVVwOiAnYWx0ZXJuYXRlVXAnLFxuXHQgICAgICAgIEFsdGVybmF0ZURvd246ICdhbHRlcm5hdGVEb3duJyxcblx0ICAgICAgICBSYW5kb206ICdyYW5kb20nLFxuXHQgICAgICAgIFJhbmRvbVdhbGs6ICdyYW5kb21XYWxrJyxcblx0ICAgICAgICBSYW5kb21PbmNlOiAncmFuZG9tT25jZSdcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGRlZmF1bHQgdmFsdWVzLiBcblx0XHQgKiAgQHR5cGUgIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLkN0cmxQYXR0ZXJuLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICd0eXBlJzogVG9uZS5DdHJsUGF0dGVybi5UeXBlLlVwLFxuXHQgICAgICAgICd2YWx1ZXMnOiBbXVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgdmFsdWUgYXQgdGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIHBhdHRlcm4uXG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5DdHJsUGF0dGVybiNcblx0XHQgKiAgQHR5cGUgeyp9XG5cdFx0ICogIEBuYW1lIHZhbHVlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5DdHJsUGF0dGVybi5wcm90b3R5cGUsICd2YWx1ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy9zb21lIHNhZmVndWFyZHNcblx0ICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudmFsdWVzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzBdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuaW5kZXggPSBNYXRoLm1pbih0aGlzLmluZGV4LCB0aGlzLnZhbHVlcy5sZW5ndGggLSAxKTtcblx0ICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMudmFsdWVzW3RoaXMuaW5kZXhdO1xuXHQgICAgICAgICAgICBpZiAodGhpcy50eXBlID09PSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuUmFuZG9tT25jZSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVzLmxlbmd0aCAhPT0gdGhpcy5fc2h1ZmZsZWQubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2h1ZmZsZVZhbHVlcygpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdmFsID0gdGhpcy52YWx1ZXNbdGhpcy5fc2h1ZmZsZWRbdGhpcy5pbmRleF1dO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiB2YWw7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHBhdHRlcm4gdXNlZCB0byBzZWxlY3QgdGhlIG5leHRcblx0XHQgKiAgaXRlbSBmcm9tIHRoZSB2YWx1ZXMgYXJyYXlcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuQ3RybFBhdHRlcm4jXG5cdFx0ICogIEB0eXBlIHtUb25lLkN0cmxQYXR0ZXJuLlR5cGV9XG5cdFx0ICogIEBuYW1lIHR5cGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkN0cmxQYXR0ZXJuLnByb3RvdHlwZSwgJ3R5cGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZSkge1xuXHQgICAgICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcblx0ICAgICAgICAgICAgdGhpcy5fc2h1ZmZsZWQgPSBudWxsO1xuXHQgICAgICAgICAgICAvL3RoZSBmaXJzdCBpbmRleFxuXHQgICAgICAgICAgICBpZiAodGhpcy5fdHlwZSA9PT0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLlVwIHx8IHRoaXMuX3R5cGUgPT09IFRvbmUuQ3RybFBhdHRlcm4uVHlwZS5VcERvd24gfHwgdGhpcy5fdHlwZSA9PT0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLlJhbmRvbU9uY2UgfHwgdGhpcy5fdHlwZSA9PT0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLkFsdGVybmF0ZVVwKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl90eXBlID09PSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuRG93biB8fCB0aGlzLl90eXBlID09PSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuRG93blVwIHx8IHRoaXMuX3R5cGUgPT09IFRvbmUuQ3RybFBhdHRlcm4uVHlwZS5BbHRlcm5hdGVEb3duKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy52YWx1ZXMubGVuZ3RoIC0gMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvL3RoZSBkaXJlY3Rpb25cblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3R5cGUgPT09IFRvbmUuQ3RybFBhdHRlcm4uVHlwZS5VcERvd24gfHwgdGhpcy5fdHlwZSA9PT0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLkFsdGVybmF0ZVVwKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuVXA7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdHlwZSA9PT0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLkRvd25VcCB8fCB0aGlzLl90eXBlID09PSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuQWx0ZXJuYXRlRG93bikge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLkRvd247XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy9yYW5kb21zXG5cdCAgICAgICAgICAgIGlmICh0aGlzLl90eXBlID09PSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuUmFuZG9tT25jZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fc2h1ZmZsZVZhbHVlcygpO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3R5cGUgPT09IFRvbmUuQ3RybFBhdHRlcm4uUmFuZG9tKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy52YWx1ZXMubGVuZ3RoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybiB0aGUgbmV4dCB2YWx1ZSBnaXZlbiB0aGUgY3VycmVudCBwb3NpdGlvblxuXHRcdCAqICBhbmQgcGF0dGVybi5cblx0XHQgKiAgQHJldHVybiB7Kn0gVGhlIG5leHQgdmFsdWVcblx0XHQgKi9cblx0ICAgIFRvbmUuQ3RybFBhdHRlcm4ucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cdCAgICAgICAgLy9jaG9vc2UgdGhlIG5leHQgaW5kZXhcblx0ICAgICAgICBpZiAodHlwZSA9PT0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLlVwKSB7XG5cdCAgICAgICAgICAgIHRoaXMuaW5kZXgrKztcblx0ICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggPj0gdGhpcy52YWx1ZXMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLkRvd24pIHtcblx0ICAgICAgICAgICAgdGhpcy5pbmRleC0tO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5pbmRleCA8IDApIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLnZhbHVlcy5sZW5ndGggLSAxO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuVXBEb3duIHx8IHR5cGUgPT09IFRvbmUuQ3RybFBhdHRlcm4uVHlwZS5Eb3duVXApIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLlVwKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4Kys7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4LS07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggPCAwKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gMTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IFRvbmUuQ3RybFBhdHRlcm4uVHlwZS5VcDtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmluZGV4ID49IHRoaXMudmFsdWVzLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMudmFsdWVzLmxlbmd0aCAtIDI7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuRG93bjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLlJhbmRvbSkge1xuXHQgICAgICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy52YWx1ZXMubGVuZ3RoKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFRvbmUuQ3RybFBhdHRlcm4uVHlwZS5SYW5kb21XYWxrKSB7XG5cdCAgICAgICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgMC41KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4LS07XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5tYXgodGhpcy5pbmRleCwgMCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4Kys7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5taW4odGhpcy5pbmRleCwgdGhpcy52YWx1ZXMubGVuZ3RoIC0gMSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFRvbmUuQ3RybFBhdHRlcm4uVHlwZS5SYW5kb21PbmNlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuaW5kZXgrKztcblx0ICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggPj0gdGhpcy52YWx1ZXMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcblx0ICAgICAgICAgICAgICAgIC8vcmVzaHVmZmxlIHRoZSB2YWx1ZXMgZm9yIG5leHQgdGltZVxuXHQgICAgICAgICAgICAgICAgdGhpcy5fc2h1ZmZsZVZhbHVlcygpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuQWx0ZXJuYXRlVXApIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLlVwKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4ICs9IDI7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuRG93bjtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggLT0gMTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IFRvbmUuQ3RybFBhdHRlcm4uVHlwZS5VcDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAodGhpcy5pbmRleCA+PSB0aGlzLnZhbHVlcy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLlVwO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuQWx0ZXJuYXRlRG93bikge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uID09PSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuVXApIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggKz0gMTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IFRvbmUuQ3RybFBhdHRlcm4uVHlwZS5Eb3duO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5pbmRleCAtPSAyO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gVG9uZS5DdHJsUGF0dGVybi5UeXBlLlVwO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmluZGV4IDwgMCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMudmFsdWVzLmxlbmd0aCAtIDE7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuRG93bjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU2h1ZmZsZXMgdGhlIHZhbHVlcyBhbmQgcGxhY2VzIHRoZSByZXN1bHRzIGludG8gdGhlIF9zaHVmZmxlZFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5DdHJsUGF0dGVybi5wcm90b3R5cGUuX3NodWZmbGVWYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGNvcHkgPSBbXTtcblx0ICAgICAgICB0aGlzLl9zaHVmZmxlZCA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy52YWx1ZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgY29weVtpXSA9IGk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHdoaWxlIChjb3B5Lmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgdmFyIHJhbmRWYWwgPSBjb3B5LnNwbGljZShNYXRoLmZsb29yKGNvcHkubGVuZ3RoICogTWF0aC5yYW5kb20oKSksIDEpO1xuXHQgICAgICAgICAgICB0aGlzLl9zaHVmZmxlZC5wdXNoKHJhbmRWYWxbMF0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuQ3RybFBhdHRlcm59IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQ3RybFBhdHRlcm4ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5fc2h1ZmZsZWQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMudmFsdWVzID0gbnVsbDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5DdHJsUGF0dGVybjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBDaG9vc2UgYSByYW5kb20gdmFsdWUuXG5cdFx0ICogIEBleHRlbmRzIHtUb25lfVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciByYW5kb21XYWxrID0gbmV3IFRvbmUuQ3RybFJhbmRvbSh7XG5cdFx0ICogXHRcIm1pblwiIDogMCxcblx0XHQgKiBcdFwibWF4XCIgOiAxMCxcblx0XHQgKiBcdFwiaW50ZWdlclwiIDogdHJ1ZVxuXHRcdCAqIH0pO1xuXHRcdCAqIHJhbmRvbVdhbGsuZXZhbCgpO1xuXHRcdCAqXG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfFRpbWU9fSBtaW4gVGhlIG1pbmltdW0gcmV0dXJuIHZhbHVlLlxuXHRcdCAqICBAcGFyYW0ge051bWJlcnxUaW1lPX0gbWF4IFRoZSBtYXhpbXVtIHJldHVybiB2YWx1ZS5cblx0XHQgKi9cblx0ICAgIFRvbmUuQ3RybFJhbmRvbSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdtaW4nLFxuXHQgICAgICAgICAgICAnbWF4J1xuXHQgICAgICAgIF0sIFRvbmUuQ3RybFJhbmRvbSk7XG5cdCAgICAgICAgVG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBtaW5pbXVtIHJldHVybiB2YWx1ZVxuXHRcdFx0ICogIEB0eXBlICB7TnVtYmVyfFRpbWV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm1pbiA9IG9wdGlvbnMubWluO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBtYXhpbXVtIHJldHVybiB2YWx1ZVxuXHRcdFx0ICogIEB0eXBlICB7TnVtYmVyfFRpbWV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm1heCA9IG9wdGlvbnMubWF4O1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIElmIHRoZSByZXR1cm4gdmFsdWUgc2hvdWxkIGJlIGFuIGludGVnZXJcblx0XHRcdCAqICBAdHlwZSAge0Jvb2xlYW59XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmludGVnZXIgPSBvcHRpb25zLmludGVnZXI7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5DdHJsUmFuZG9tKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdHNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5DdHJsUmFuZG9tLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdtaW4nOiAwLFxuXHQgICAgICAgICdtYXgnOiAxLFxuXHQgICAgICAgICdpbnRlZ2VyJzogZmFsc2Vcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJuIGEgcmFuZG9tIHZhbHVlIGJldHdlZW4gbWluIGFuZCBtYXguIFxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuQ3RybFJhbmRvbSNcblx0XHQgKiAgQHR5cGUgeyp9XG5cdFx0ICogIEBuYW1lIHZhbHVlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5DdHJsUmFuZG9tLnByb3RvdHlwZSwgJ3ZhbHVlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgbWluID0gdGhpcy50b1NlY29uZHModGhpcy5taW4pO1xuXHQgICAgICAgICAgICB2YXIgbWF4ID0gdGhpcy50b1NlY29uZHModGhpcy5tYXgpO1xuXHQgICAgICAgICAgICB2YXIgcmFuZCA9IE1hdGgucmFuZG9tKCk7XG5cdCAgICAgICAgICAgIHZhciB2YWwgPSByYW5kICogbWluICsgKDEgLSByYW5kKSAqIG1heDtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuaW50ZWdlcikge1xuXHQgICAgICAgICAgICAgICAgdmFsID0gTWF0aC5mbG9vcih2YWwpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiB2YWw7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gVG9uZS5DdHJsUmFuZG9tO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIEEgZGF0YSBzdHJ1Y3R1cmUgZm9yIGhvbGRpbmcgbXVsdGlwbGUgYnVmZmVycy5cblx0XHQgKiAgXG5cdFx0ICogIEBwYXJhbSAge09iamVjdHxBcnJheX0gICAgdXJscyAgICAgIEFuIG9iamVjdCBsaXRlcmFsIG9yIGFycmF5XG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHVybHMgdG8gbG9hZC5cblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb249fSAgY2FsbGJhY2sgIFRoZSBjYWxsYmFjayB0byBpbnZva2Ugd2hlblxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGJ1ZmZlcnMgYXJlIGxvYWRlZC4gXG5cdFx0ICogIEBleHRlbmRzIHtUb25lfVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vbG9hZCBhIHdob2xlIGJhbmsgb2YgcGlhbm8gc2FtcGxlc1xuXHRcdCAqIHZhciBwaWFub1NhbXBsZXMgPSBuZXcgVG9uZS5CdWZmZXJzKHtcblx0XHQgKiBcdFwiQzRcIiA6IFwicGF0aC90by9DNC5tcDNcIlxuXHRcdCAqIFx0XCJDIzRcIiA6IFwicGF0aC90by9DIzQubXAzXCJcblx0XHQgKiBcdFwiRDRcIiA6IFwicGF0aC90by9ENC5tcDNcIlxuXHRcdCAqIFx0XCJEIzRcIiA6IFwicGF0aC90by9EIzQubXAzXCJcblx0XHQgKiBcdC4uLlxuXHRcdCAqIH0sIGZ1bmN0aW9uKCl7XG5cdFx0ICogXHQvL3BsYXkgb25lIG9mIHRoZSBzYW1wbGVzIHdoZW4gdGhleSBhbGwgbG9hZFxuXHRcdCAqIFx0cGxheWVyLmJ1ZmZlciA9IHBpYW5vU2FtcGxlcy5nZXQoXCJDNFwiKTtcblx0XHQgKiBcdHBsYXllci5zdGFydCgpO1xuXHRcdCAqIH0pO1xuXHRcdCAqIFx0QGV4YW1wbGVcblx0XHQgKiAvL1RvIHBhc3MgaW4gYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGluIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG5cdFx0ICogdmFyIGJ1ZmZlcnMgPSBuZXcgVG9uZS5CdWZmZXJzKHVybHMsIHtcblx0XHQgKiBcdFwib25sb2FkXCIgOiBjYWxsYmFjayxcblx0XHQgKiBcdFwiYmFzZVVybFwiIDogXCIuLi9wYXRoL3RvL2F1ZGlvL1wiXG5cdFx0ICogfSlcblx0XHQgKi9cblx0ICAgIFRvbmUuQnVmZmVycyA9IGZ1bmN0aW9uICh1cmxzKSB7XG5cdCAgICAgICAgLy9yZW1vdmUgdGhlIHVybHMgZnJvbSB0aGUgb3B0aW9uc1xuXHQgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0ICAgICAgICBhcmdzLnNoaWZ0KCk7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3MsIFtcblx0ICAgICAgICAgICAgJ29ubG9hZCcsXG5cdCAgICAgICAgICAgICdiYXNlVXJsJ1xuXHQgICAgICAgIF0sIFRvbmUuQnVmZmVycyk7XG5cdCAgICAgICAgVG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEFsbCBvZiB0aGUgYnVmZmVyc1xuXHRcdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9idWZmZXJzID0ge307XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQSBwYXRoIHdoaWNoIGlzIHByZWZpeGVkIGJlZm9yZSBldmVyeSB1cmwuXG5cdFx0XHQgKiAgQHR5cGUgIHtTdHJpbmd9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmJhc2VVcmwgPSBvcHRpb25zLmJhc2VVcmw7XG5cdCAgICAgICAgdGhpcy5fbG9hZGluZ0NvdW50ID0gMDtcblx0ICAgICAgICAvL2FkZCBlYWNoIG9uZVxuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiB1cmxzKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdDb3VudCsrO1xuXHQgICAgICAgICAgICB0aGlzLmFkZChrZXksIHVybHNba2V5XSwgdGhpcy5fYnVmZmVyTG9hZGVkLmJpbmQodGhpcywgb3B0aW9ucy5vbmxvYWQpKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5CdWZmZXJzKTtcblx0ICAgIC8qKlxuXHRcdCAqICBEZWZhdWx0c1xuXHRcdCAqICBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuQnVmZmVycy5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnb25sb2FkJzogVG9uZS5ub09wLFxuXHQgICAgICAgICdiYXNlVXJsJzogJydcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVHJ1ZSBpZiB0aGUgYnVmZmVycyBvYmplY3QgaGFzIGEgYnVmZmVyIGJ5IHRoYXQgbmFtZS5cblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfE51bWJlcn0gIG5hbWUgIFRoZSBrZXkgb3IgaW5kZXggb2YgdGhlIFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyLlxuXHRcdCAqICBAcmV0dXJuICB7Qm9vbGVhbn1cblx0XHQgKi9cblx0ICAgIFRvbmUuQnVmZmVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fYnVmZmVycy5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgR2V0IGEgYnVmZmVyIGJ5IG5hbWUuIElmIGFuIGFycmF5IHdhcyBsb2FkZWQsIFxuXHRcdCAqICB0aGVuIHVzZSB0aGUgYXJyYXkgaW5kZXguXG5cdFx0ICogIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9ICBuYW1lICBUaGUga2V5IG9yIGluZGV4IG9mIHRoZSBcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuQnVmZmVyfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAobmFtZSkge1xuXHQgICAgICAgIGlmICh0aGlzLmhhcyhuYW1lKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fYnVmZmVyc1tuYW1lXTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbmUuQnVmZmVyczogbm8gYnVmZmVyIG5hbWVkICcgKyBuYW1lKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEEgYnVmZmVyIHdhcyBsb2FkZWQuIGRlY3JlbWVudCB0aGUgY291bnRlci5cblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb259ICBjYWxsYmFjayBcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuQnVmZmVycy5wcm90b3R5cGUuX2J1ZmZlckxvYWRlZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHQgICAgICAgIHRoaXMuX2xvYWRpbmdDb3VudC0tO1xuXHQgICAgICAgIGlmICh0aGlzLl9sb2FkaW5nQ291bnQgPT09IDAgJiYgY2FsbGJhY2spIHtcblx0ICAgICAgICAgICAgY2FsbGJhY2sodGhpcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIElmIHRoZSBidWZmZXJzIGFyZSBsb2FkZWQgb3Igbm90XG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQnVmZmVycyNcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiBAbmFtZSBsb2FkZWRcblx0XHQgKiBAcmVhZE9ubHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkJ1ZmZlcnMucHJvdG90eXBlLCAnbG9hZGVkJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgaXNMb2FkZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBidWZmTmFtZSBpbiB0aGlzLl9idWZmZXJzKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYnVmZiA9IHRoaXMuZ2V0KGJ1ZmZOYW1lKTtcblx0ICAgICAgICAgICAgICAgIGlzTG9hZGVkID0gaXNMb2FkZWQgJiYgYnVmZi5sb2FkZWQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIGlzTG9hZGVkO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIEFkZCBhIGJ1ZmZlciBieSBuYW1lIGFuZCB1cmwgdG8gdGhlIEJ1ZmZlcnNcblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfSAgICBuYW1lICAgICAgQSB1bmlxdWUgbmFtZSB0byBnaXZlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBidWZmZXJcblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfFRvbmUuQnVmZmVyfEF1ZGlvYnVmZmVyfSAgdXJsICBFaXRoZXIgdGhlIHVybCBvZiB0aGUgYnVmZXIsIFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGEgYnVmZmVyIHdoaWNoIHdpbGwgYmUgYWRkZWRcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuXHRcdCAqICBAcGFyYW0gIHtGdW5jdGlvbj19ICBjYWxsYmFjayAgVGhlIGNhbGxiYWNrIHRvIGludm9rZSBcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHVybCBpcyBsb2FkZWQuXG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlcnMucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChuYW1lLCB1cmwsIGNhbGxiYWNrKSB7XG5cdCAgICAgICAgY2FsbGJhY2sgPSBUb25lLmRlZmF1bHRBcmcoY2FsbGJhY2ssIFRvbmUubm9PcCk7XG5cdCAgICAgICAgaWYgKHVybCBpbnN0YW5jZW9mIFRvbmUuQnVmZmVyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2J1ZmZlcnNbbmFtZV0gPSB1cmw7XG5cdCAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAodXJsIGluc3RhbmNlb2YgQXVkaW9CdWZmZXIpIHtcblx0ICAgICAgICAgICAgdGhpcy5fYnVmZmVyc1tuYW1lXSA9IG5ldyBUb25lLkJ1ZmZlcih1cmwpO1xuXHQgICAgICAgICAgICBjYWxsYmFjayh0aGlzKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKFRvbmUuaXNTdHJpbmcodXJsKSkge1xuXHQgICAgICAgICAgICB0aGlzLl9idWZmZXJzW25hbWVdID0gbmV3IFRvbmUuQnVmZmVyKHRoaXMuYmFzZVVybCArIHVybCwgY2FsbGJhY2spO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkJ1ZmZlcnN9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQnVmZmVycy5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLl9idWZmZXJzKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2J1ZmZlcnNbbmFtZV0uZGlzcG9zZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9idWZmZXJzID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5CdWZmZXJzO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBidXNlcyBhcmUgYW5vdGhlciB3YXkgb2Ygcm91dGluZyBhdWRpb1xuXHRcdCAqXG5cdFx0ICogIGF1Z21lbnRzIFRvbmUucHJvdG90eXBlIHRvIGluY2x1ZGUgc2VuZCBhbmQgcmVjaWV2ZVxuXHRcdCAqL1xuXHQgICAgLyoqXG5cdFx0ICogIEFsbCBvZiB0aGUgcm91dGVzXG5cdFx0ICpcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgdmFyIEJ1c2VzID0ge307XG5cdCAgICAvKipcblx0XHQgKiAgU2VuZCB0aGlzIHNpZ25hbCB0byB0aGUgY2hhbm5lbCBuYW1lLlxuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmd9IGNoYW5uZWxOYW1lIEEgbmFtZWQgY2hhbm5lbCB0byBzZW5kIHRoZSBzaWduYWwgdG8uXG5cdFx0ICogIEBwYXJhbSAge0RlY2liZWxzfSBhbW91bnQgVGhlIGFtb3VudCBvZiB0aGUgc291cmNlIHRvIHNlbmQgdG8gdGhlIGJ1cy5cblx0XHQgKiAgQHJldHVybiB7R2Fpbk5vZGV9IFRoZSBnYWluIG5vZGUgd2hpY2ggY29ubmVjdHMgdGhpcyBub2RlIHRvIHRoZSBkZXNpcmVkIGNoYW5uZWwuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICBDYW4gYmUgdXNlZCB0byBhZGp1c3QgdGhlIGxldmVscyBvZiB0aGUgc2VuZC5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiBzb3VyY2Uuc2VuZChcInJldmVyYlwiLCAtMTIpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChjaGFubmVsTmFtZSwgYW1vdW50KSB7XG5cdCAgICAgICAgaWYgKCFCdXNlcy5oYXNPd25Qcm9wZXJ0eShjaGFubmVsTmFtZSkpIHtcblx0ICAgICAgICAgICAgQnVzZXNbY2hhbm5lbE5hbWVdID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYW1vdW50ID0gVG9uZS5kZWZhdWx0QXJnKGFtb3VudCwgMCk7XG5cdCAgICAgICAgdmFyIHNlbmRLbm9iID0gbmV3IFRvbmUuR2FpbihhbW91bnQsIFRvbmUuVHlwZS5EZWNpYmVscyk7XG5cdCAgICAgICAgdGhpcy5jb25uZWN0KHNlbmRLbm9iKTtcblx0ICAgICAgICBzZW5kS25vYi5jb25uZWN0KEJ1c2VzW2NoYW5uZWxOYW1lXSk7XG5cdCAgICAgICAgcmV0dXJuIHNlbmRLbm9iO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZWNpZXZlIHRoZSBpbnB1dCBmcm9tIHRoZSBkZXNpcmVkIGNoYW5uZWxOYW1lIHRvIHRoZSBpbnB1dFxuXHRcdCAqXG5cdFx0ICogIEBwYXJhbSAge1N0cmluZ30gY2hhbm5lbE5hbWUgQSBuYW1lZCBjaGFubmVsIHRvIHNlbmQgdGhlIHNpZ25hbCB0by5cblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyPX0gY2hhbm5lbE51bWJlciBUaGUgY2hhbm5lbCB0byBjb25uZWN0IHRvXG5cdFx0ICogIEByZXR1cm5zIHtUb25lfSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogcmV2ZXJiRWZmZWN0LnJlY2VpdmUoXCJyZXZlcmJcIik7XG5cdFx0ICovXG5cdCAgICBUb25lLnByb3RvdHlwZS5yZWNlaXZlID0gZnVuY3Rpb24gKGNoYW5uZWxOYW1lLCBpbnB1dE51bSkge1xuXHQgICAgICAgIGlmICghQnVzZXMuaGFzT3duUHJvcGVydHkoY2hhbm5lbE5hbWUpKSB7XG5cdCAgICAgICAgICAgIEJ1c2VzW2NoYW5uZWxOYW1lXSA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIEJ1c2VzW2NoYW5uZWxOYW1lXS5jb25uZWN0KHRoaXMsIDAsIGlucHV0TnVtKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvL3JlbW92ZSBhbGwgdGhlIHNlbmQvcmVjZWl2ZXMgd2hlbiBhIG5ldyBhdWRpbyBjb250ZXh0IGlzIHBhc3NlZCBpblxuXHQgICAgVG9uZS5Db250ZXh0Lm9uKCdpbml0JywgZnVuY3Rpb24gKGNvbnRleHQpIHtcblx0ICAgICAgICBpZiAoY29udGV4dC5CdXNlcykge1xuXHQgICAgICAgICAgICBCdXNlcyA9IGNvbnRleHQuQnVzZXM7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgQnVzZXMgPSB7fTtcblx0ICAgICAgICAgICAgY29udGV4dC5CdXNlcyA9IEJ1c2VzO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIFRvbmU7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLkRyYXcgaXMgdXNlZnVsIGZvciBzeW5jaHJvbml6aW5nIHZpc3VhbHMgYW5kIGF1ZGlvIGV2ZW50cy5cblx0XHQgKiAgICAgICAgIENhbGxiYWNrcyBmcm9tIFRvbmUuVHJhbnNwb3J0IG9yIGFueSBvZiB0aGUgVG9uZS5FdmVudCBjbGFzc2VzXG5cdFx0ICogICAgICAgICBhbHdheXMgaGFwcGVuIF9iZWZvcmVfIHRoZSBzY2hlZHVsZWQgdGltZSBhbmQgYXJlIG5vdCBzeW5jaHJvbml6ZWRcblx0XHQgKiAgICAgICAgIHRvIHRoZSBhbmltYXRpb24gZnJhbWUgc28gdGhleSBhcmUgbm90IGdvb2QgZm9yIHRyaWdnZXJpbmcgdGlnaHRseVxuXHRcdCAqICAgICAgICAgc3luY2hyb25pemVkIHZpc3VhbHMgYW5kIHNvdW5kLiBUb25lLkRyYXcgbWFrZXMgaXQgZWFzeSB0byBzY2hlZHVsZVxuXHRcdCAqICAgICAgICAgY2FsbGJhY2tzIHVzaW5nIHRoZSBBdWRpb0NvbnRleHQgdGltZSBhbmQgdXNlcyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuXG5cdFx0ICogICAgICAgICBcblx0XHQgKiAgQHNpbmdsZXRvblxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiBUb25lLlRyYW5zcG9ydC5zY2hlZHVsZShmdW5jdGlvbih0aW1lKXtcblx0XHQgKiBcdC8vdXNlIHRoZSB0aW1lIGFyZ3VtZW50IHRvIHNjaGVkdWxlIGEgY2FsbGJhY2sgd2l0aCBUb25lLkRyYXdcblx0XHQgKiBcdFRvbmUuRHJhdy5zY2hlZHVsZShmdW5jdGlvbigpe1xuXHRcdCAqIFx0XHQvL2RvIGRyYXdpbmcgb3IgRE9NIG1hbmlwdWxhdGlvbiBoZXJlXG5cdFx0ICogXHR9LCB0aW1lKVxuXHRcdCAqIH0sIFwiKzAuNVwiKVxuXHRcdCAqL1xuXHQgICAgVG9uZS5EcmF3ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBBbGwgb2YgdGhlIGV2ZW50cy5cblx0XHRcdCAqICBAdHlwZSAge1RvbmUuVGltZWxpbmV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBUb25lLlRpbWVsaW5lKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGR1cmF0aW9uIGFmdGVyIHdoaWNoIGV2ZW50cyBhcmUgbm90IGludm9rZWQuXG5cdFx0XHQgKiAgQHR5cGUgIHtOdW1iZXJ9XG5cdFx0XHQgKiAgQGRlZmF1bHQgMC4yNVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5leHBpcmF0aW9uID0gMC4yNTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW1vdW50IG9mIHRpbWUgYmVmb3JlIHRoZSBzY2hlZHVsZWQgdGltZSBcblx0XHRcdCAqICB0aGF0IHRoZSBjYWxsYmFjayBjYW4gYmUgaW52b2tlZC4gRGVmYXVsdCBpc1xuXHRcdFx0ICogIGhhbGYgdGhlIHRpbWUgb2YgYW4gYW5pbWF0aW9uIGZyYW1lICgwLjAwOCBzZWNvbmRzKS5cblx0XHRcdCAqICBAdHlwZSAge051bWJlcn1cblx0XHRcdCAqICBAZGVmYXVsdCAwLjAwOFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5hbnRpY2lwYXRpb24gPSAwLjAwODtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZHJhdyBsb29wXG5cdFx0XHQgKiAgQHR5cGUgIHtGdW5jdGlvbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYm91bmREcmF3TG9vcCA9IHRoaXMuX2RyYXdMb29wLmJpbmQodGhpcyk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5EcmF3KTtcblx0ICAgIC8qKlxuXHRcdCAqICBTY2hlZHVsZSBhIGZ1bmN0aW9uIGF0IHRoZSBnaXZlbiB0aW1lIHRvIGJlIGludm9rZWRcblx0XHQgKiAgb24gdGhlIG5lYXJlc3QgYW5pbWF0aW9uIGZyYW1lLlxuXHRcdCAqICBAcGFyYW0gIHtGdW5jdGlvbn0gIGNhbGxiYWNrICBDYWxsYmFjayBpcyBpbnZva2VkIGF0IHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSAgICB0aW1lICAgICAgVGhlIHRpbWUgcmVsYXRpdmUgdG8gdGhlIEF1ZGlvQ29udGV4dCB0aW1lXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBpbnZva2UgdGhlIGNhbGxiYWNrLlxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5EcmF3fSAgICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkRyYXcucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKGNhbGxiYWNrLCB0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fZXZlbnRzLmFkZCh7XG5cdCAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcblx0ICAgICAgICAgICAgdGltZTogdGhpcy50b1NlY29uZHModGltZSlcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvL3N0YXJ0IHRoZSBkcmF3IGxvb3Agb24gdGhlIGZpcnN0IGV2ZW50XG5cdCAgICAgICAgaWYgKHRoaXMuX2V2ZW50cy5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX2JvdW5kRHJhd0xvb3ApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2FuY2VsIGV2ZW50cyBzY2hlZHVsZWQgYWZ0ZXIgdGhlIGdpdmVuIHRpbWVcblx0XHQgKiAgQHBhcmFtICB7VGltZT19ICBhZnRlciAgVGltZSBhZnRlciB3aGljaCBzY2hlZHVsZWQgZXZlbnRzIHdpbGwgXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgIGJlIHJlbW92ZWQgZnJvbSB0aGUgc2NoZWR1bGluZyB0aW1lbGluZS5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuRHJhd30gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRHJhdy5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKGFmdGVyKSB7XG5cdCAgICAgICAgdGhpcy5fZXZlbnRzLmNhbmNlbCh0aGlzLnRvU2Vjb25kcyhhZnRlcikpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZHJhdyBsb29wXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkRyYXcucHJvdG90eXBlLl9kcmF3TG9vcCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm93ID0gVG9uZS5ub3coKTtcblx0ICAgICAgICB3aGlsZSAodGhpcy5fZXZlbnRzLmxlbmd0aCAmJiB0aGlzLl9ldmVudHMucGVlaygpLnRpbWUgLSB0aGlzLmFudGljaXBhdGlvbiA8PSBub3cpIHtcblx0ICAgICAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5fZXZlbnRzLnNoaWZ0KCk7XG5cdCAgICAgICAgICAgIGlmIChub3cgLSBldmVudC50aW1lIDw9IHRoaXMuZXhwaXJhdGlvbikge1xuXHQgICAgICAgICAgICAgICAgZXZlbnQuY2FsbGJhY2soKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5fZXZlbnRzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX2JvdW5kRHJhd0xvb3ApO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvL21ha2UgYSBzaW5nbGV0b25cblx0ICAgIFRvbmUuRHJhdyA9IG5ldyBUb25lLkRyYXcoKTtcblx0ICAgIHJldHVybiBUb25lLkRyYXc7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgQm90aCBUb25lLlBhbm5lcjNEIGFuZCBUb25lLkxpc3RlbmVyIGhhdmUgYSBwb3NpdGlvbiBpbiAzRCBzcGFjZVxuXHRcdCAqICAgICAgICAgIHVzaW5nIGEgcmlnaHQtaGFuZGVkIGNhcnRlc2lhbiBjb29yZGluYXRlIHN5c3RlbS5cblx0XHQgKiAgICAgICAgICBUaGUgdW5pdHMgdXNlZCBpbiB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gYXJlIG5vdCBkZWZpbmVkO1xuXHRcdCAqICAgICAgICAgIHRoZXNlIGNvb3JkaW5hdGVzIGFyZSBpbmRlcGVuZGVudC9pbnZhcmlhbnQgb2YgYW55IHBhcnRpY3VsYXJcblx0XHQgKiAgICAgICAgICB1bml0cyBzdWNoIGFzIG1ldGVycyBvciBmZWV0LiBUb25lLlBhbm5lcjNEIG9iamVjdHMgaGF2ZSBhbiBmb3J3YXJkXG5cdFx0ICogICAgICAgICAgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgZGlyZWN0aW9uIHRoZSBzb3VuZCBpcyBwcm9qZWN0aW5nLiBBZGRpdGlvbmFsbHksXG5cdFx0ICogICAgICAgICAgdGhleSBoYXZlIGEgc291bmQgY29uZSByZXByZXNlbnRpbmcgaG93IGRpcmVjdGlvbmFsIHRoZSBzb3VuZCBpcy5cblx0XHQgKiAgICAgICAgICBGb3IgZXhhbXBsZSwgdGhlIHNvdW5kIGNvdWxkIGJlIG9tbmlkaXJlY3Rpb25hbCwgaW4gd2hpY2ggY2FzZSBpdCB3b3VsZFxuXHRcdCAqICAgICAgICAgIGJlIGhlYXJkIGFueXdoZXJlIHJlZ2FyZGxlc3Mgb2YgaXRzIGZvcndhcmQsIG9yIGl0IGNhbiBiZSBtb3JlIGRpcmVjdGlvbmFsXG5cdFx0ICogICAgICAgICAgYW5kIGhlYXJkIG9ubHkgaWYgaXQgaXMgZmFjaW5nIHRoZSBsaXN0ZW5lci4gVG9uZS5MaXN0ZW5lciBvYmplY3RzXG5cdFx0ICogICAgICAgICAgKHJlcHJlc2VudGluZyBhIHBlcnNvbidzIGVhcnMpIGhhdmUgYW4gZm9yd2FyZCBhbmQgdXAgdmVjdG9yXG5cdFx0ICogICAgICAgICAgcmVwcmVzZW50aW5nIGluIHdoaWNoIGRpcmVjdGlvbiB0aGUgcGVyc29uIGlzIGZhY2luZy4gQmVjYXVzZSBib3RoIHRoZVxuXHRcdCAqICAgICAgICAgIHNvdXJjZSBzdHJlYW0gYW5kIHRoZSBsaXN0ZW5lciBjYW4gYmUgbW92aW5nLCB0aGV5IGJvdGggaGF2ZSBhIHZlbG9jaXR5XG5cdFx0ICogICAgICAgICAgdmVjdG9yIHJlcHJlc2VudGluZyBib3RoIHRoZSBzcGVlZCBhbmQgZGlyZWN0aW9uIG9mIG1vdmVtZW50LiBUYWtlbiB0b2dldGhlcixcblx0XHQgKiAgICAgICAgICB0aGVzZSB0d28gdmVsb2NpdGllcyBjYW4gYmUgdXNlZCB0byBnZW5lcmF0ZSBhIGRvcHBsZXIgc2hpZnQgZWZmZWN0IHdoaWNoIGNoYW5nZXMgdGhlIHBpdGNoLlxuXHRcdCAqICAgICAgICAgIDxicj48YnI+XG5cdFx0ICogICAgICAgICAgTm90ZTogdGhlIHBvc2l0aW9uIG9mIHRoZSBMaXN0ZW5lciB3aWxsIGhhdmUgbm8gZWZmZWN0IG9uIG5vZGVzIG5vdCBjb25uZWN0ZWQgdG8gYSBUb25lLlBhbm5lcjNEXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lfVxuXHRcdCAqICBAc2luZ2xldG9uXG5cdFx0ICovXG5cdCAgICBUb25lLkxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBIb2xkcyB0aGUgY3VycmVudCBmb3J3YXJkIG9yaWVudGF0aW9uXG5cdFx0XHQgKiAgQHR5cGUgIHtBcnJheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSBbXG5cdCAgICAgICAgICAgIDAsXG5cdCAgICAgICAgICAgIDAsXG5cdCAgICAgICAgICAgIDAsXG5cdCAgICAgICAgICAgIDAsXG5cdCAgICAgICAgICAgIDAsXG5cdCAgICAgICAgICAgIDBcblx0ICAgICAgICBdO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEhvbGRzIHRoZSBjdXJyZW50IHBvc2l0aW9uXG5cdFx0XHQgKiAgQHR5cGUgIHtBcnJheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBbXG5cdCAgICAgICAgICAgIDAsXG5cdCAgICAgICAgICAgIDAsXG5cdCAgICAgICAgICAgIDBcblx0ICAgICAgICBdO1xuXHQgICAgICAgIFRvbmUuZ2V0Q29udGV4dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIHNldCB0aGUgZGVmYXVsdCBwb3NpdGlvbi9mb3J3YXJkXG5cdCAgICAgICAgICAgIHRoaXMuc2V0KExpc3RlbmVyQ29uc3RydWN0b3IuZGVmYXVsdHMpO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5MaXN0ZW5lcik7XG5cdCAgICAvKipcblx0XHQgKiAgRGVmYXVsdHMgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLkxpc3RlbmVyLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdwb3NpdGlvblgnOiAwLFxuXHQgICAgICAgICdwb3NpdGlvblknOiAwLFxuXHQgICAgICAgICdwb3NpdGlvblonOiAwLFxuXHQgICAgICAgICdmb3J3YXJkWCc6IDAsXG5cdCAgICAgICAgJ2ZvcndhcmRZJzogMCxcblx0ICAgICAgICAnZm9yd2FyZFonOiAxLFxuXHQgICAgICAgICd1cFgnOiAwLFxuXHQgICAgICAgICd1cFknOiAxLFxuXHQgICAgICAgICd1cFonOiAwXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHJhbXAgdGltZSB3aGljaCBpcyBhcHBsaWVkIHRvIHRoZSBzZXRUYXJnZXRBdFRpbWVcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkxpc3RlbmVyLnByb3RvdHlwZS5fcmFtcFRpbWVDb25zdGFudCA9IDAuMDE7XG5cdCAgICAvKipcblx0XHQgKiAgU2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIGxpc3RlbmVyIGluIDNkIHNwYWNlLlxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB4XG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIHlcblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgelxuXHRcdCAqICBAcmV0dXJuIHtUb25lLkxpc3RlbmVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkxpc3RlbmVyLnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XG5cdCAgICAgICAgaWYgKHRoaXMuY29udGV4dC5saXN0ZW5lci5wb3NpdGlvblgpIHtcblx0ICAgICAgICAgICAgdmFyIG5vdyA9IHRoaXMubm93KCk7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5saXN0ZW5lci5wb3NpdGlvblguc2V0VGFyZ2V0QXRUaW1lKHgsIG5vdywgdGhpcy5fcmFtcFRpbWVDb25zdGFudCk7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5saXN0ZW5lci5wb3NpdGlvblkuc2V0VGFyZ2V0QXRUaW1lKHksIG5vdywgdGhpcy5fcmFtcFRpbWVDb25zdGFudCk7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5saXN0ZW5lci5wb3NpdGlvblouc2V0VGFyZ2V0QXRUaW1lKHosIG5vdywgdGhpcy5fcmFtcFRpbWVDb25zdGFudCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0Lmxpc3RlbmVyLnNldFBvc2l0aW9uKHgsIHksIHopO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFNldHMgdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBsaXN0ZW5lciB1c2luZyB0d28gdmVjdG9ycywgdGhlIGZvcndhcmRcblx0XHQgKiAgdmVjdG9yICh3aGljaCBkaXJlY3Rpb24gdGhlIGxpc3RlbmVyIGlzIGZhY2luZykgYW5kIHRoZSB1cCB2ZWN0b3Jcblx0XHQgKiAgKHdoaWNoIHRoZSB1cCBkaXJlY3Rpb24gb2YgdGhlIGxpc3RlbmVyKS4gQW4gdXAgdmVjdG9yXG5cdFx0ICogIG9mIDAsIDAsIDEgaXMgZXF1aXZhbGVudCB0byB0aGUgbGlzdGVuZXIgc3RhbmRpbmcgdXAgaW4gdGhlIFogZGlyZWN0aW9uLlxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB4XG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIHlcblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgelxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB1cFhcblx0XHQgKiAgQHBhcmFtICB7TnVtYmVyfSAgdXBZXG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIHVwWlxuXHRcdCAqICBAcmV0dXJuIHtUb25lLkxpc3RlbmVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkxpc3RlbmVyLnByb3RvdHlwZS5zZXRPcmllbnRhdGlvbiA9IGZ1bmN0aW9uICh4LCB5LCB6LCB1cFgsIHVwWSwgdXBaKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuY29udGV4dC5saXN0ZW5lci5mb3J3YXJkWCkge1xuXHQgICAgICAgICAgICB2YXIgbm93ID0gdGhpcy5ub3coKTtcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0Lmxpc3RlbmVyLmZvcndhcmRYLnNldFRhcmdldEF0VGltZSh4LCBub3csIHRoaXMuX3JhbXBUaW1lQ29uc3RhbnQpO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQubGlzdGVuZXIuZm9yd2FyZFkuc2V0VGFyZ2V0QXRUaW1lKHksIG5vdywgdGhpcy5fcmFtcFRpbWVDb25zdGFudCk7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5saXN0ZW5lci5mb3J3YXJkWi5zZXRUYXJnZXRBdFRpbWUoeiwgbm93LCB0aGlzLl9yYW1wVGltZUNvbnN0YW50KTtcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0Lmxpc3RlbmVyLnVwWC5zZXRUYXJnZXRBdFRpbWUodXBYLCBub3csIHRoaXMuX3JhbXBUaW1lQ29uc3RhbnQpO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQubGlzdGVuZXIudXBZLnNldFRhcmdldEF0VGltZSh1cFksIG5vdywgdGhpcy5fcmFtcFRpbWVDb25zdGFudCk7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5saXN0ZW5lci51cFouc2V0VGFyZ2V0QXRUaW1lKHVwWiwgbm93LCB0aGlzLl9yYW1wVGltZUNvbnN0YW50KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQubGlzdGVuZXIuc2V0T3JpZW50YXRpb24oeCwgeSwgeiwgdXBYLCB1cFksIHVwWik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuX29yaWVudGF0aW9uID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHggcG9zaXRpb24gb2YgdGhlIHBhbm5lciBvYmplY3QuXG5cdFx0ICogIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkxpc3RlbmVyI1xuXHRcdCAqICBAbmFtZSBwb3NpdGlvblhcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkxpc3RlbmVyLnByb3RvdHlwZSwgJ3Bvc2l0aW9uWCcsIHtcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwb3MpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25bMF0gPSBwb3M7XG5cdCAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24uYXBwbHkodGhpcywgdGhpcy5fcG9zaXRpb24pO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9wb3NpdGlvblswXTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgeSBwb3NpdGlvbiBvZiB0aGUgcGFubmVyIG9iamVjdC5cblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuTGlzdGVuZXIjXG5cdFx0ICogIEBuYW1lIHBvc2l0aW9uWVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTGlzdGVuZXIucHJvdG90eXBlLCAncG9zaXRpb25ZJywge1xuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHBvcykge1xuXHQgICAgICAgICAgICB0aGlzLl9wb3NpdGlvblsxXSA9IHBvcztcblx0ICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbi5hcHBseSh0aGlzLCB0aGlzLl9wb3NpdGlvbik7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uWzFdO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSB6IHBvc2l0aW9uIG9mIHRoZSBwYW5uZXIgb2JqZWN0LlxuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5MaXN0ZW5lciNcblx0XHQgKiAgQG5hbWUgcG9zaXRpb25aXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5MaXN0ZW5lci5wcm90b3R5cGUsICdwb3NpdGlvblonLCB7XG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocG9zKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uWzJdID0gcG9zO1xuXHQgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uLmFwcGx5KHRoaXMsIHRoaXMuX3Bvc2l0aW9uKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb25bMl07XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgbGlzdGVuZXJzIGZyb250IGRpcmVjdGlvbi4gaS5lLlxuXHRcdCAqICB3aGljaCB3YXkgdGhleSBhcmUgZmFjaW5nLlxuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5MaXN0ZW5lciNcblx0XHQgKiAgQG5hbWUgZm9yd2FyZFhcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkxpc3RlbmVyLnByb3RvdHlwZSwgJ2ZvcndhcmRYJywge1xuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHBvcykge1xuXHQgICAgICAgICAgICB0aGlzLl9vcmllbnRhdGlvblswXSA9IHBvcztcblx0ICAgICAgICAgICAgdGhpcy5zZXRPcmllbnRhdGlvbi5hcHBseSh0aGlzLCB0aGlzLl9vcmllbnRhdGlvbik7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29yaWVudGF0aW9uWzBdO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIGxpc3RlbmVycyBmcm9udCBkaXJlY3Rpb24uIGkuZS5cblx0XHQgKiAgd2hpY2ggd2F5IHRoZXkgYXJlIGZhY2luZy5cblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuTGlzdGVuZXIjXG5cdFx0ICogIEBuYW1lIGZvcndhcmRZXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5MaXN0ZW5lci5wcm90b3R5cGUsICdmb3J3YXJkWScsIHtcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwb3MpIHtcblx0ICAgICAgICAgICAgdGhpcy5fb3JpZW50YXRpb25bMV0gPSBwb3M7XG5cdCAgICAgICAgICAgIHRoaXMuc2V0T3JpZW50YXRpb24uYXBwbHkodGhpcywgdGhpcy5fb3JpZW50YXRpb24pO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcmllbnRhdGlvblsxXTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgeiBjb29yZGluYXRlIG9mIHRoZSBsaXN0ZW5lcnMgZnJvbnQgZGlyZWN0aW9uLiBpLmUuXG5cdFx0ICogIHdoaWNoIHdheSB0aGV5IGFyZSBmYWNpbmcuXG5cdFx0ICogIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkxpc3RlbmVyI1xuXHRcdCAqICBAbmFtZSBmb3J3YXJkWlxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTGlzdGVuZXIucHJvdG90eXBlLCAnZm9yd2FyZFonLCB7XG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocG9zKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX29yaWVudGF0aW9uWzJdID0gcG9zO1xuXHQgICAgICAgICAgICB0aGlzLnNldE9yaWVudGF0aW9uLmFwcGx5KHRoaXMsIHRoaXMuX29yaWVudGF0aW9uKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3JpZW50YXRpb25bMl07XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgbGlzdGVuZXIncyB1cCBkaXJlY3Rpb24uIGkuZS5cblx0XHQgKiAgdGhlIGRpcmVjdGlvbiB0aGUgbGlzdGVuZXIgaXMgc3RhbmRpbmcgaW4uXG5cdFx0ICogIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkxpc3RlbmVyI1xuXHRcdCAqICBAbmFtZSB1cFhcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkxpc3RlbmVyLnByb3RvdHlwZSwgJ3VwWCcsIHtcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwb3MpIHtcblx0ICAgICAgICAgICAgdGhpcy5fb3JpZW50YXRpb25bM10gPSBwb3M7XG5cdCAgICAgICAgICAgIHRoaXMuc2V0T3JpZW50YXRpb24uYXBwbHkodGhpcywgdGhpcy5fb3JpZW50YXRpb24pO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcmllbnRhdGlvblszXTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBsaXN0ZW5lcidzIHVwIGRpcmVjdGlvbi4gaS5lLlxuXHRcdCAqICB0aGUgZGlyZWN0aW9uIHRoZSBsaXN0ZW5lciBpcyBzdGFuZGluZyBpbi5cblx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuTGlzdGVuZXIjXG5cdFx0ICogIEBuYW1lIHVwWVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTGlzdGVuZXIucHJvdG90eXBlLCAndXBZJywge1xuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHBvcykge1xuXHQgICAgICAgICAgICB0aGlzLl9vcmllbnRhdGlvbls0XSA9IHBvcztcblx0ICAgICAgICAgICAgdGhpcy5zZXRPcmllbnRhdGlvbi5hcHBseSh0aGlzLCB0aGlzLl9vcmllbnRhdGlvbik7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29yaWVudGF0aW9uWzRdO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSB6IGNvb3JkaW5hdGUgb2YgdGhlIGxpc3RlbmVyJ3MgdXAgZGlyZWN0aW9uLiBpLmUuXG5cdFx0ICogIHRoZSBkaXJlY3Rpb24gdGhlIGxpc3RlbmVyIGlzIHN0YW5kaW5nIGluLlxuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5MaXN0ZW5lciNcblx0XHQgKiAgQG5hbWUgdXBaXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5MaXN0ZW5lci5wcm90b3R5cGUsICd1cFonLCB7XG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocG9zKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX29yaWVudGF0aW9uWzVdID0gcG9zO1xuXHQgICAgICAgICAgICB0aGlzLnNldE9yaWVudGF0aW9uLmFwcGx5KHRoaXMsIHRoaXMuX29yaWVudGF0aW9uKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3JpZW50YXRpb25bNV07XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkxpc3RlbmVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkxpc3RlbmVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX29yaWVudGF0aW9uID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLy9TSU5HTEVUT04gU0VUVVBcblx0ICAgIHZhciBMaXN0ZW5lckNvbnN0cnVjdG9yID0gVG9uZS5MaXN0ZW5lcjtcblx0ICAgIFRvbmUuTGlzdGVuZXIgPSBuZXcgTGlzdGVuZXJDb25zdHJ1Y3RvcigpO1xuXHQgICAgVG9uZS5Db250ZXh0Lm9uKCdpbml0JywgZnVuY3Rpb24gKGNvbnRleHQpIHtcblx0ICAgICAgICBpZiAoY29udGV4dC5MaXN0ZW5lciBpbnN0YW5jZW9mIExpc3RlbmVyQ29uc3RydWN0b3IpIHtcblx0ICAgICAgICAgICAgLy9hIHNpbmdsZSBsaXN0ZW5lciBvYmplY3Rcblx0ICAgICAgICAgICAgVG9uZS5MaXN0ZW5lciA9IGNvbnRleHQuTGlzdGVuZXI7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgLy9tYWtlIG5ldyBMaXN0ZW5lciBpbnNpZGVzXG5cdCAgICAgICAgICAgIFRvbmUuTGlzdGVuZXIgPSBuZXcgTGlzdGVuZXJDb25zdHJ1Y3RvcigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjb250ZXh0Lkxpc3RlbmVyID0gVG9uZS5MaXN0ZW5lcjtcblx0ICAgIH0pO1xuXHQgICAgLy9FTkQgU0lOR0xFVE9OIFNFVFVQXG5cdCAgICByZXR1cm4gVG9uZS5MaXN0ZW5lcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgLyoqXG5cdFx0ICogQmVjYXVzZSBvZiBhIGJ1ZyBpbiBpT1MgY2F1c2luZyB0aGUgY3VycmVudFRpbWUgdG8gaW5jcmVtZW50XG5cdFx0ICogYmVmb3JlIHRoZSByZW5kZXJpbmcgaXMgc3RhcnRlZCwgc29tZXRpbWVzIGl0IHRha2VzIG11bHRpcGxlXG5cdFx0ICogYXR0ZW1wdHMgdG8gcmVuZGVyIHRoZSBhdWRpbyBjb3JyZWN0bHkuXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIGZ1bmN0aW9uIGF0dGVtcHRSZW5kZXIoY2FsbGJhY2ssIGR1cmF0aW9uLCBzYW1wbGVSYXRlLCB0cmllcykge1xuXHQgICAgICAgIHRyaWVzID0gVG9uZS5kZWZhdWx0QXJnKHRyaWVzLCAwKTtcblx0ICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBUb25lLk9mZmxpbmVDb250ZXh0KDIsIGR1cmF0aW9uLCBzYW1wbGVSYXRlKTtcblx0ICAgICAgICBUb25lLmNvbnRleHQgPSBjb250ZXh0O1xuXHQgICAgICAgIC8vaW52b2tlIHRoZSBjYWxsYmFjay9zY2hlZHVsaW5nXG5cdCAgICAgICAgdmFyIHJlc3BvbnNlID0gY2FsbGJhY2soVG9uZS5UcmFuc3BvcnQpO1xuXHQgICAgICAgIGlmIChjb250ZXh0LmN1cnJlbnRUaW1lID4gMCAmJiB0cmllcyA8IDEwMDApIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGF0dGVtcHRSZW5kZXIoY2FsbGJhY2ssIGR1cmF0aW9uLCBzYW1wbGVSYXRlLCArK3RyaWVzKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgJ3Jlc3BvbnNlJzogcmVzcG9uc2UsXG5cdCAgICAgICAgICAgICAgICAnY29udGV4dCc6IGNvbnRleHRcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICAvKipcblx0XHQgKiAgR2VuZXJhdGUgYSBidWZmZXIgYnkgcmVuZGVyaW5nIGFsbCBvZiB0aGUgVG9uZS5qcyBjb2RlIHdpdGhpbiB0aGUgY2FsbGJhY2sgdXNpbmcgdGhlIE9mZmxpbmVBdWRpb0NvbnRleHQuXG5cdFx0ICogIFRoZSBPZmZsaW5lQXVkaW9Db250ZXh0IGlzIGNhcGFibGUgb2YgcmVuZGVyaW5nIG11Y2ggZmFzdGVyIHRoYW4gcmVhbCB0aW1lIGluIG1hbnkgY2FzZXMuXG5cdFx0ICogIFRoZSBjYWxsYmFjayBmdW5jdGlvbiBhbHNvIHBhc3NlcyBpbiBhbiBvZmZsaW5lIGluc3RhbmNlIG9mIFRvbmUuVHJhbnNwb3J0IHdoaWNoIGNhbiBiZSB1c2VkXG5cdFx0ICogIHRvIHNjaGVkdWxlIGV2ZW50cyBhbG9uZyB0aGUgVHJhbnNwb3J0LiAqKk5PVEUqKiBPZmZsaW5lQXVkaW9Db250ZXh0IGhhcyB0aGUgc2FtZSByZXN0cmljdGlvbnNcblx0XHQgKiAgYXMgdGhlIEF1ZGlvQ29udGV4dCBpbiB0aGF0IG9uIGNlcnRhaW4gcGxhdGZvcm1zIChsaWtlIGlPUykgaXQgbXVzdCBiZSBpbnZva2VkIGJ5IGFuIGV4cGxpY2l0XG5cdFx0ICogIHVzZXIgYWN0aW9uIGxpa2UgYSBjbGljayBvciB0YXAuIFxuXHRcdCAqICBAcGFyYW0gIHtGdW5jdGlvbn0gIGNhbGxiYWNrICBBbGwgVG9uZS5qcyBub2RlcyB3aGljaCBhcmUgY3JlYXRlZCBhbmQgc2NoZWR1bGVkIHdpdGhpbiB0aGlzIGNhbGxiYWNrIGFyZSByZWNvcmRlZCBpbnRvIHRoZSBvdXRwdXQgQnVmZmVyLlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSAgZHVyYXRpb24gICAgIHRoZSBhbW91bnQgb2YgdGltZSB0byByZWNvcmQgZm9yLlxuXHRcdCAqICBAcmV0dXJuICB7UHJvbWlzZX0gIFRoZSBwcm9taXNlIHdoaWNoIGlzIGludm9rZWQgd2l0aCB0aGUgVG9uZS5CdWZmZXIgb2YgdGhlIHJlY29yZGVkIG91dHB1dC5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL3JlbmRlciAyIHNlY29uZHMgb2YgdGhlIG9zY2lsbGF0b3Jcblx0XHQgKiBUb25lLk9mZmxpbmUoZnVuY3Rpb24oKXtcblx0XHQgKiBcdC8vb25seSBub2RlcyBjcmVhdGVkIGluIHRoaXMgY2FsbGJhY2sgd2lsbCBiZSByZWNvcmRlZFxuXHRcdCAqIFx0dmFyIG9zY2lsbGF0b3IgPSBuZXcgVG9uZS5Pc2NpbGxhdG9yKCkudG9NYXN0ZXIoKS5zdGFydCgwKVxuXHRcdCAqIFx0Ly9zY2hlZHVsZSB0aGVpciBldmVudHNcblx0XHQgKiB9LCAyKS50aGVuKGZ1bmN0aW9uKGJ1ZmZlcil7XG5cdFx0ICogXHQvL2RvIHNvbWV0aGluZyB3aXRoIHRoZSBvdXRwdXQgYnVmZmVyXG5cdFx0ICogfSlcblx0XHQgKiBAZXhhbXBsZVxuXHRcdCAqIC8vY2FuIGFsc28gc2NoZWR1bGUgZXZlbnRzIGFsb25nIHRoZSBUcmFuc3BvcnRcblx0XHQgKiAvL3VzaW5nIHRoZSBwYXNzZWQgaW4gT2ZmbGluZSBUcmFuc3BvcnRcblx0XHQgKiBUb25lLk9mZmxpbmUoZnVuY3Rpb24oVHJhbnNwb3J0KXtcblx0XHQgKiBcdHZhciBvc2MgPSBuZXcgVG9uZS5Pc2NpbGxhdG9yKCkudG9NYXN0ZXIoKVxuXHRcdCAqIFx0VHJhbnNwb3J0LnNjaGVkdWxlKGZ1bmN0aW9uKHRpbWUpe1xuXHRcdCAqIFx0XHRvc2Muc3RhcnQodGltZSkuc3RvcCh0aW1lICsgMC4xKVxuXHRcdCAqIFx0fSwgMSlcblx0XHQgKiBcdFRyYW5zcG9ydC5zdGFydCgwLjIpXG5cdFx0ICogfSwgNCkudGhlbihmdW5jdGlvbihidWZmZXIpe1xuXHRcdCAqIFx0Ly9kbyBzb21ldGhpbmcgd2l0aCB0aGUgb3V0cHV0IGJ1ZmZlclxuXHRcdCAqIH0pXG5cdFx0ICovXG5cdCAgICBUb25lLk9mZmxpbmUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGR1cmF0aW9uKSB7XG5cdCAgICAgICAgLy9zZXQgdGhlIE9mZmxpbmVBdWRpb0NvbnRleHRcblx0ICAgICAgICB2YXIgc2FtcGxlUmF0ZSA9IFRvbmUuY29udGV4dC5zYW1wbGVSYXRlO1xuXHQgICAgICAgIHZhciBvcmlnaW5hbENvbnRleHQgPSBUb25lLmNvbnRleHQ7XG5cdCAgICAgICAgdmFyIHJlbmRlclJldCA9IGF0dGVtcHRSZW5kZXIoY2FsbGJhY2ssIGR1cmF0aW9uLCBzYW1wbGVSYXRlKTtcblx0ICAgICAgICB2YXIgcmVzcG9uc2UgPSByZW5kZXJSZXQucmVzcG9uc2U7XG5cdCAgICAgICAgdmFyIGNvbnRleHQgPSByZW5kZXJSZXQuY29udGV4dDtcblx0ICAgICAgICB2YXIgcmV0O1xuXHQgICAgICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcblx0ICAgICAgICAgICAgLy93YWl0IGZvciB0aGUgcHJvbWlzZSB0byByZXNvbHZlXG5cdCAgICAgICAgICAgIHJldCA9IHJlc3BvbnNlLnRoZW4oZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgLy90aGVuIHJlbmRlciB0aGUgYXVkaW9cblx0ICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnJlbmRlcigpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAvL3Byb2Nlc3MgdGhlIGF1ZGlvXG5cdCAgICAgICAgICAgIHJldCA9IGNvbnRleHQucmVuZGVyKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vcmV0dXJuIHRoZSBvcmlnaW5hbCBBdWRpb0NvbnRleHRcblx0ICAgICAgICBUb25lLmNvbnRleHQgPSBvcmlnaW5hbENvbnRleHQ7XG5cdCAgICAgICAgLy9yZXR1cm4gdGhlIGF1ZGlvXG5cdCAgICAgICAgcmV0dXJuIHJldC50aGVuKGZ1bmN0aW9uIChidWZmZXIpIHtcblx0ICAgICAgICAgICAgLy93cmFwIGl0IGluIGEgVG9uZS5CdWZmZXJcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBUb25lLkJ1ZmZlcihidWZmZXIpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLk9mZmxpbmU7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogXHRAY2xhc3MgIFRvbmUuRWZmZWN0IGlzIHRoZSBiYXNlIGNsYXNzIGZvciBlZmZlY3RzLiBDb25uZWN0IHRoZSBlZmZlY3QgYmV0d2VlblxuXHRcdCAqIFx0ICAgICAgICB0aGUgZWZmZWN0U2VuZCBhbmQgZWZmZWN0UmV0dXJuIEdhaW5Ob2RlcywgdGhlbiBjb250cm9sIHRoZSBhbW91bnQgb2Zcblx0XHQgKiBcdCAgICAgICAgZWZmZWN0IHdoaWNoIGdvZXMgdG8gdGhlIG91dHB1dCB1c2luZyB0aGUgd2V0IGNvbnRyb2wuXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkF1ZGlvTm9kZX1cblx0XHQgKiAgQHBhcmFtIHtOb3JtYWxSYW5nZXxPYmplY3R9IFt3ZXRdIFRoZSBzdGFydGluZyB3ZXQgdmFsdWUuXG5cdFx0ICovXG5cdCAgICBUb25lLkVmZmVjdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbJ3dldCddLCBUb25lLkVmZmVjdCk7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLmNyZWF0ZUluc091dHMoMSwgMSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGRyeXdldCBrbm9iIHRvIGNvbnRyb2wgdGhlIGFtb3VudCBvZiBlZmZlY3Rcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5Dcm9zc0ZhZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2RyeVdldCA9IG5ldyBUb25lLkNyb3NzRmFkZShvcHRpb25zLndldCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHdldCBjb250cm9sIGlzIGhvdyBtdWNoIG9mIHRoZSBlZmZlY3RlZFxuXHRcdFx0ICogIHdpbGwgcGFzcyB0aHJvdWdoIHRvIHRoZSBvdXRwdXQuIDEgPSAxMDAlIGVmZmVjdGVkXG5cdFx0XHQgKiAgc2lnbmFsLCAwID0gMTAwJSBkcnkgc2lnbmFsLlxuXHRcdFx0ICogIEB0eXBlIHtOb3JtYWxSYW5nZX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLndldCA9IHRoaXMuX2RyeVdldC5mYWRlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIGNvbm5lY3QgdGhlIGVmZmVjdFNlbmQgdG8gdGhlIGlucHV0IG9mIGh0ZSBlZmZlY3Rcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5HYWlufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmVmZmVjdFNlbmQgPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgY29ubmVjdCB0aGUgb3V0cHV0IG9mIHRoZSBlZmZlY3QgdG8gdGhlIGVmZmVjdFJldHVyblxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkdhaW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZWZmZWN0UmV0dXJuID0gbmV3IFRvbmUuR2FpbigpO1xuXHQgICAgICAgIC8vY29ubmVjdGlvbnNcblx0ICAgICAgICB0aGlzLmlucHV0LmNvbm5lY3QodGhpcy5fZHJ5V2V0LmEpO1xuXHQgICAgICAgIHRoaXMuaW5wdXQuY29ubmVjdCh0aGlzLmVmZmVjdFNlbmQpO1xuXHQgICAgICAgIHRoaXMuZWZmZWN0UmV0dXJuLmNvbm5lY3QodGhpcy5fZHJ5V2V0LmIpO1xuXHQgICAgICAgIHRoaXMuX2RyeVdldC5jb25uZWN0KHRoaXMub3V0cHV0KTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbJ3dldCddKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkVmZmVjdCwgVG9uZS5BdWRpb05vZGUpO1xuXHQgICAgLyoqXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuRWZmZWN0LmRlZmF1bHRzID0geyAnd2V0JzogMSB9O1xuXHQgICAgLyoqXG5cdFx0ICogIGNoYWlucyB0aGUgZWZmZWN0IGluIGJldHdlZW4gdGhlIGVmZmVjdFNlbmQgYW5kIGVmZmVjdFJldHVyblxuXHRcdCAqICBAcGFyYW0gIHtUb25lfSBlZmZlY3Rcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKiAgQHJldHVybnMge1RvbmUuRWZmZWN0fSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkVmZmVjdC5wcm90b3R5cGUuY29ubmVjdEVmZmVjdCA9IGZ1bmN0aW9uIChlZmZlY3QpIHtcblx0ICAgICAgICB0aGlzLmVmZmVjdFNlbmQuY2hhaW4oZWZmZWN0LCB0aGlzLmVmZmVjdFJldHVybik7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5FZmZlY3R9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fZHJ5V2V0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9kcnlXZXQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZWZmZWN0U2VuZC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5lZmZlY3RTZW5kID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmVmZmVjdFJldHVybi5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5lZmZlY3RSZXR1cm4gPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFsnd2V0J10pO1xuXHQgICAgICAgIHRoaXMud2V0ID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5FZmZlY3Q7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLkF1dG9GaWx0ZXIgaXMgYSBUb25lLkZpbHRlciB3aXRoIGEgVG9uZS5MRk8gY29ubmVjdGVkIHRvIHRoZSBmaWx0ZXIgY3V0b2ZmIGZyZXF1ZW5jeS5cblx0XHQgKiAgICAgICAgIFNldHRpbmcgdGhlIExGTyByYXRlIGFuZCBkZXB0aCBhbGxvd3MgZm9yIGNvbnRyb2wgb3ZlciB0aGUgZmlsdGVyIG1vZHVsYXRpb24gcmF0ZSBcblx0XHQgKiAgICAgICAgIGFuZCBkZXB0aC5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuRWZmZWN0fVxuXHRcdCAqICBAcGFyYW0ge1RpbWV8T2JqZWN0fSBbZnJlcXVlbmN5XSBUaGUgcmF0ZSBvZiB0aGUgTEZPLlxuXHRcdCAqICBAcGFyYW0ge0ZyZXF1ZW5jeT19IGJhc2VGcmVxdWVuY3kgVGhlIGxvd2VyIHZhbHVlIG9mIHRoZSBMRk9zIG9zY2lsbGF0aW9uXG5cdCBcdCAqICBAcGFyYW0ge0ZyZXF1ZW5jeT19IG9jdGF2ZXMgVGhlIG51bWJlciBvZiBvY3RhdmVzIGFib3ZlIHRoZSBiYXNlRnJlcXVlbmN5XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9jcmVhdGUgYW4gYXV0b2ZpbHRlciBhbmQgc3RhcnQgaXQncyBMRk9cblx0XHQgKiB2YXIgYXV0b0ZpbHRlciA9IG5ldyBUb25lLkF1dG9GaWx0ZXIoXCI0blwiKS50b01hc3RlcigpLnN0YXJ0KCk7XG5cdFx0ICogLy9yb3V0ZSBhbiBvc2NpbGxhdG9yIHRocm91Z2ggdGhlIGZpbHRlciBhbmQgc3RhcnQgaXRcblx0XHQgKiB2YXIgb3NjaWxsYXRvciA9IG5ldyBUb25lLk9zY2lsbGF0b3IoKS5jb25uZWN0KGF1dG9GaWx0ZXIpLnN0YXJ0KCk7XG5cdFx0ICovXG5cdCAgICBUb25lLkF1dG9GaWx0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2Jhc2VGcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnb2N0YXZlcydcblx0ICAgICAgICBdLCBUb25lLkF1dG9GaWx0ZXIpO1xuXHQgICAgICAgIFRvbmUuRWZmZWN0LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGxmbyB3aGljaCBkcml2ZXMgdGhlIGZpbHRlciBjdXRvZmZcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5MRk99XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2xmbyA9IG5ldyBUb25lLkxGTyh7XG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knOiBvcHRpb25zLmZyZXF1ZW5jeSxcblx0ICAgICAgICAgICAgJ2FtcGxpdHVkZSc6IG9wdGlvbnMuZGVwdGhcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSByYW5nZSBvZiB0aGUgZmlsdGVyIG1vZHVsYXRpbmcgYmV0d2VlbiB0aGUgbWluIGFuZCBtYXggZnJlcXVlbmN5LiBcblx0XHRcdCAqIDAgPSBubyBtb2R1bGF0aW9uLiAxID0gZnVsbCBtb2R1bGF0aW9uLlxuXHRcdFx0ICogQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdFx0ICogQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5kZXB0aCA9IHRoaXMuX2xmby5hbXBsaXR1ZGU7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBIb3cgZmFzdCB0aGUgZmlsdGVyIG1vZHVsYXRlcyBiZXR3ZWVuIG1pbiBhbmQgbWF4LiBcblx0XHRcdCAqIEB0eXBlIHtGcmVxdWVuY3l9XG5cdFx0XHQgKiBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IHRoaXMuX2xmby5mcmVxdWVuY3k7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGZpbHRlciBub2RlXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuRmlsdGVyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5maWx0ZXIgPSBuZXcgVG9uZS5GaWx0ZXIob3B0aW9ucy5maWx0ZXIpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBvY3RhdmVzIHBsYWNlaG9sZGVyXG5cdFx0XHQgKiAgQHR5cGUge1Bvc2l0aXZlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9vY3RhdmVzID0gMDtcblx0ICAgICAgICAvL2Nvbm5lY3Rpb25zXG5cdCAgICAgICAgdGhpcy5jb25uZWN0RWZmZWN0KHRoaXMuZmlsdGVyKTtcblx0ICAgICAgICB0aGlzLl9sZm8uY29ubmVjdCh0aGlzLmZpbHRlci5mcmVxdWVuY3kpO1xuXHQgICAgICAgIHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZGVwdGgnXG5cdCAgICAgICAgXSk7XG5cdCAgICAgICAgdGhpcy5vY3RhdmVzID0gb3B0aW9ucy5vY3RhdmVzO1xuXHQgICAgICAgIHRoaXMuYmFzZUZyZXF1ZW5jeSA9IG9wdGlvbnMuYmFzZUZyZXF1ZW5jeTtcblx0ICAgIH07XG5cdCAgICAvL2V4dGVuZCBFZmZlY3Rcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuQXV0b0ZpbHRlciwgVG9uZS5FZmZlY3QpO1xuXHQgICAgLyoqXG5cdFx0ICogIGRlZmF1bHRzXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuQXV0b0ZpbHRlci5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnZnJlcXVlbmN5JzogMSxcblx0ICAgICAgICAndHlwZSc6ICdzaW5lJyxcblx0ICAgICAgICAnZGVwdGgnOiAxLFxuXHQgICAgICAgICdiYXNlRnJlcXVlbmN5JzogMjAwLFxuXHQgICAgICAgICdvY3RhdmVzJzogMi42LFxuXHQgICAgICAgICdmaWx0ZXInOiB7XG5cdCAgICAgICAgICAgICd0eXBlJzogJ2xvd3Bhc3MnLFxuXHQgICAgICAgICAgICAncm9sbG9mZic6IC0xMixcblx0ICAgICAgICAgICAgJ1EnOiAxXG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFN0YXJ0IHRoZSBlZmZlY3QuXG5cdFx0ICogQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIFdoZW4gdGhlIExGTyB3aWxsIHN0YXJ0LiBcblx0XHQgKiBAcmV0dXJucyB7VG9uZS5BdXRvRmlsdGVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkF1dG9GaWx0ZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aGlzLl9sZm8uc3RhcnQodGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogU3RvcCB0aGUgZWZmZWN0LlxuXHRcdCAqIEBwYXJhbSB7VGltZX0gW3RpbWU9bm93XSBXaGVuIHRoZSBMRk8gd2lsbCBzdG9wLiBcblx0XHQgKiBAcmV0dXJucyB7VG9uZS5BdXRvRmlsdGVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkF1dG9GaWx0ZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRoaXMuX2xmby5zdG9wKHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFN5bmMgdGhlIGZpbHRlciB0byB0aGUgdHJhbnNwb3J0LlxuXHRcdCAqIEBwYXJhbSB7VGltZX0gW2RlbGF5PTBdIERlbGF5IHRpbWUgYmVmb3JlIHN0YXJ0aW5nIHRoZSBlZmZlY3QgYWZ0ZXIgdGhlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVHJhbnNwb3J0IGhhcyBzdGFydGVkLiBcblx0XHQgKiBAcmV0dXJucyB7VG9uZS5BdXRvRmlsdGVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkF1dG9GaWx0ZXIucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbiAoZGVsYXkpIHtcblx0ICAgICAgICB0aGlzLl9sZm8uc3luYyhkZWxheSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVW5zeW5jIHRoZSBmaWx0ZXIgZnJvbSB0aGUgdHJhbnNwb3J0LlxuXHRcdCAqIEByZXR1cm5zIHtUb25lLkF1dG9GaWx0ZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQXV0b0ZpbHRlci5wcm90b3R5cGUudW5zeW5jID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX2xmby51bnN5bmMoKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBUeXBlIG9mIG9zY2lsbGF0b3IgYXR0YWNoZWQgdG8gdGhlIEF1dG9GaWx0ZXIuIFxuXHRcdCAqIFBvc3NpYmxlIHZhbHVlczogXCJzaW5lXCIsIFwic3F1YXJlXCIsIFwidHJpYW5nbGVcIiwgXCJzYXd0b290aFwiLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkF1dG9GaWx0ZXIjXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAbmFtZSB0eXBlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5BdXRvRmlsdGVyLnByb3RvdHlwZSwgJ3R5cGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9sZm8udHlwZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHR5cGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbGZvLnR5cGUgPSB0eXBlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIG1pbmltdW0gdmFsdWUgb2YgdGhlIGZpbHRlcidzIGN1dG9mZiBmcmVxdWVuY3kuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQXV0b0ZpbHRlciNcblx0XHQgKiBAdHlwZSB7RnJlcXVlbmN5fVxuXHRcdCAqIEBuYW1lIG1pblxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQXV0b0ZpbHRlci5wcm90b3R5cGUsICdiYXNlRnJlcXVlbmN5Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGZvLm1pbjtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGZyZXEpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbGZvLm1pbiA9IHRoaXMudG9GcmVxdWVuY3koZnJlcSk7XG5cdCAgICAgICAgICAgIC8vYW5kIHNldCB0aGUgbWF4XG5cdCAgICAgICAgICAgIHRoaXMub2N0YXZlcyA9IHRoaXMuX29jdGF2ZXM7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgbWF4aW11bSB2YWx1ZSBvZiB0aGUgZmlsdGVyJ3MgY3V0b2ZmIGZyZXF1ZW5jeS4gXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQXV0b0ZpbHRlciNcblx0XHQgKiBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0ICogQG5hbWUgb2N0YXZlc1xuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQXV0b0ZpbHRlci5wcm90b3R5cGUsICdvY3RhdmVzJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fb2N0YXZlcztcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG9jdCkge1xuXHQgICAgICAgICAgICB0aGlzLl9vY3RhdmVzID0gb2N0O1xuXHQgICAgICAgICAgICB0aGlzLl9sZm8ubWF4ID0gdGhpcy5iYXNlRnJlcXVlbmN5ICogTWF0aC5wb3coMiwgb2N0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC4gXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkF1dG9GaWx0ZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQXV0b0ZpbHRlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkVmZmVjdC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX2xmby5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbGZvID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmZpbHRlci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5maWx0ZXIgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdkZXB0aCdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5kZXB0aCA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuQXV0b0ZpbHRlcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuQXV0b1Bhbm5lciBpcyBhIFRvbmUuUGFubmVyIHdpdGggYW4gTEZPIGNvbm5lY3RlZCB0byB0aGUgcGFuIGFtb3VudC4gXG5cdFx0ICogICAgICAgICBNb3JlIG9uIHVzaW5nIGF1dG9wYW5uZXJzIFtoZXJlXShodHRwczovL3d3dy5hYmxldG9uLmNvbS9lbi9ibG9nL2F1dG9wYW4tY2hvcHBlci1lZmZlY3QtYW5kLW1vcmUtbGl2ZXNjaG9vbC8pLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5FZmZlY3R9XG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fE9iamVjdH0gW2ZyZXF1ZW5jeV0gUmF0ZSBvZiBsZWZ0LXJpZ2h0IG9zY2lsbGF0aW9uLiBcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2NyZWF0ZSBhbiBhdXRvcGFubmVyIGFuZCBzdGFydCBpdCdzIExGT1xuXHRcdCAqIHZhciBhdXRvUGFubmVyID0gbmV3IFRvbmUuQXV0b1Bhbm5lcihcIjRuXCIpLnRvTWFzdGVyKCkuc3RhcnQoKTtcblx0XHQgKiAvL3JvdXRlIGFuIG9zY2lsbGF0b3IgdGhyb3VnaCB0aGUgcGFubmVyIGFuZCBzdGFydCBpdFxuXHRcdCAqIHZhciBvc2NpbGxhdG9yID0gbmV3IFRvbmUuT3NjaWxsYXRvcigpLmNvbm5lY3QoYXV0b1Bhbm5lcikuc3RhcnQoKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuQXV0b1Bhbm5lciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbJ2ZyZXF1ZW5jeSddLCBUb25lLkF1dG9QYW5uZXIpO1xuXHQgICAgICAgIFRvbmUuRWZmZWN0LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGxmbyB3aGljaCBkcml2ZXMgdGhlIHBhbm5pbmdcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5MRk99XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2xmbyA9IG5ldyBUb25lLkxGTyh7XG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knOiBvcHRpb25zLmZyZXF1ZW5jeSxcblx0ICAgICAgICAgICAgJ2FtcGxpdHVkZSc6IG9wdGlvbnMuZGVwdGgsXG5cdCAgICAgICAgICAgICdtaW4nOiAtMSxcblx0ICAgICAgICAgICAgJ21heCc6IDFcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSBhbW91bnQgb2YgcGFubmluZyBiZXR3ZWVuIGxlZnQgYW5kIHJpZ2h0LiBcblx0XHRcdCAqIDAgPSBhbHdheXMgY2VudGVyLiAxID0gZnVsbCByYW5nZSBiZXR3ZWVuIGxlZnQgYW5kIHJpZ2h0LiBcblx0XHRcdCAqIEB0eXBlIHtOb3JtYWxSYW5nZX1cblx0XHRcdCAqIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGVwdGggPSB0aGlzLl9sZm8uYW1wbGl0dWRlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBwYW5uZXIgbm9kZSB3aGljaCBkb2VzIHRoZSBwYW5uaW5nXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuUGFubmVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9wYW5uZXIgPSBuZXcgVG9uZS5QYW5uZXIoKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIEhvdyBmYXN0IHRoZSBwYW5uZXIgbW9kdWxhdGVzIGJldHdlZW4gbGVmdCBhbmQgcmlnaHQuIFxuXHRcdFx0ICogQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gdGhpcy5fbGZvLmZyZXF1ZW5jeTtcblx0ICAgICAgICAvL2Nvbm5lY3Rpb25zXG5cdCAgICAgICAgdGhpcy5jb25uZWN0RWZmZWN0KHRoaXMuX3Bhbm5lcik7XG5cdCAgICAgICAgdGhpcy5fbGZvLmNvbm5lY3QodGhpcy5fcGFubmVyLnBhbik7XG5cdCAgICAgICAgdGhpcy50eXBlID0gb3B0aW9ucy50eXBlO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KFtcblx0ICAgICAgICAgICAgJ2RlcHRoJyxcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeSdcblx0ICAgICAgICBdKTtcblx0ICAgIH07XG5cdCAgICAvL2V4dGVuZCBFZmZlY3Rcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuQXV0b1Bhbm5lciwgVG9uZS5FZmZlY3QpO1xuXHQgICAgLyoqXG5cdFx0ICogIGRlZmF1bHRzXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuQXV0b1Bhbm5lci5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnZnJlcXVlbmN5JzogMSxcblx0ICAgICAgICAndHlwZSc6ICdzaW5lJyxcblx0ICAgICAgICAnZGVwdGgnOiAxXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogU3RhcnQgdGhlIGVmZmVjdC5cblx0XHQgKiBAcGFyYW0ge1RpbWV9IFt0aW1lPW5vd10gV2hlbiB0aGUgTEZPIHdpbGwgc3RhcnQuIFxuXHRcdCAqIEByZXR1cm5zIHtUb25lLkF1dG9QYW5uZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQXV0b1Bhbm5lci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRoaXMuX2xmby5zdGFydCh0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBTdG9wIHRoZSBlZmZlY3QuXG5cdFx0ICogQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIFdoZW4gdGhlIExGTyB3aWxsIHN0b3AuIFxuXHRcdCAqIEByZXR1cm5zIHtUb25lLkF1dG9QYW5uZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQXV0b1Bhbm5lci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fbGZvLnN0b3AodGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogU3luYyB0aGUgcGFubmVyIHRvIHRoZSB0cmFuc3BvcnQuXG5cdFx0ICogQHBhcmFtIHtUaW1lfSBbZGVsYXk9MF0gRGVsYXkgdGltZSBiZWZvcmUgc3RhcnRpbmcgdGhlIGVmZmVjdCBhZnRlciB0aGVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUcmFuc3BvcnQgaGFzIHN0YXJ0ZWQuIFxuXHRcdCAqIEByZXR1cm5zIHtUb25lLkF1dG9QYW5uZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQXV0b1Bhbm5lci5wcm90b3R5cGUuc3luYyA9IGZ1bmN0aW9uIChkZWxheSkge1xuXHQgICAgICAgIHRoaXMuX2xmby5zeW5jKGRlbGF5KTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBVbnN5bmMgdGhlIHBhbm5lciBmcm9tIHRoZSB0cmFuc3BvcnRcblx0XHQgKiBAcmV0dXJucyB7VG9uZS5BdXRvUGFubmVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkF1dG9QYW5uZXIucHJvdG90eXBlLnVuc3luYyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLl9sZm8udW5zeW5jKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVHlwZSBvZiBvc2NpbGxhdG9yIGF0dGFjaGVkIHRvIHRoZSBBdXRvRmlsdGVyLiBcblx0XHQgKiBQb3NzaWJsZSB2YWx1ZXM6IFwic2luZVwiLCBcInNxdWFyZVwiLCBcInRyaWFuZ2xlXCIsIFwic2F3dG9vdGhcIi5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5BdXRvRmlsdGVyI1xuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQG5hbWUgdHlwZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQXV0b1Bhbm5lci5wcm90b3R5cGUsICd0eXBlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGZvLnR5cGU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0eXBlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2xmby50eXBlID0gdHlwZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5BdXRvUGFubmVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkF1dG9QYW5uZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5FZmZlY3QucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9sZm8uZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2xmbyA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fcGFubmVyLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9wYW5uZXIgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFtcblx0ICAgICAgICAgICAgJ2RlcHRoJyxcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5kZXB0aCA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuQXV0b1Bhbm5lcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBUb25lLkF1dG9XYWggY29ubmVjdHMgYSBUb25lLkZvbGxvd2VyIHRvIGEgYmFuZHBhc3MgZmlsdGVyIChUb25lLkZpbHRlcikuXG5cdFx0ICogICAgICAgICAgVGhlIGZyZXF1ZW5jeSBvZiB0aGUgZmlsdGVyIGlzIGFkanVzdGVkIHByb3BvcnRpb25hbGx5IHRvIHRoZVxuXHRcdCAqICAgICAgICAgIGluY29taW5nIHNpZ25hbCdzIGFtcGxpdHVkZS4gSW5zcGlyYXRpb24gZnJvbSBbVHVuYS5qc10oaHR0cHM6Ly9naXRodWIuY29tL0RpbmFobW9lL3R1bmEpLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5FZmZlY3R9XG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fE9iamVjdH0gW2Jhc2VGcmVxdWVuY3ldIFRoZSBmcmVxdWVuY3kgdGhlIGZpbHRlciBpcyBzZXRcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYXQgdGhlIGxvdyBwb2ludCBvZiB0aGUgd2FoXG5cdFx0ICogIEBwYXJhbSB7UG9zaXRpdmV9IFtvY3RhdmVzXSBUaGUgbnVtYmVyIG9mIG9jdGF2ZXMgYWJvdmUgdGhlIGJhc2VGcmVxdWVuY3lcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGZpbHRlciB3aWxsIHN3ZWVwIHRvIHdoZW4gZnVsbHkgb3BlblxuXHRcdCAqICBAcGFyYW0ge0RlY2liZWxzfSBbc2Vuc2l0aXZpdHldIFRoZSBkZWNpYmVsIHRocmVzaG9sZCBzZW5zaXRpdml0eSBmb3Jcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGluY29taW5nIHNpZ25hbC4gTm9ybWFsIHJhbmdlIG9mIC00MCB0byAwLlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBhdXRvV2FoID0gbmV3IFRvbmUuQXV0b1dhaCg1MCwgNiwgLTMwKS50b01hc3RlcigpO1xuXHRcdCAqIC8vaW5pdGlhbGl6ZSB0aGUgc3ludGggYW5kIGNvbm5lY3QgdG8gYXV0b3dhaFxuXHRcdCAqIHZhciBzeW50aCA9IG5ldyBTeW50aC5jb25uZWN0KGF1dG9XYWgpO1xuXHRcdCAqIC8vUSB2YWx1ZSBpbmZsdWVuY2VzIHRoZSBlZmZlY3Qgb2YgdGhlIHdhaCAtIGRlZmF1bHQgaXMgMlxuXHRcdCAqIGF1dG9XYWguUS52YWx1ZSA9IDY7XG5cdFx0ICogLy9tb3JlIGF1ZGlibGUgb24gaGlnaGVyIG5vdGVzXG5cdFx0ICogc3ludGgudHJpZ2dlckF0dGFja1JlbGVhc2UoXCJDNFwiLCBcIjhuXCIpXG5cdFx0ICovXG5cdCAgICBUb25lLkF1dG9XYWggPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnYmFzZUZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdvY3RhdmVzJyxcblx0ICAgICAgICAgICAgJ3NlbnNpdGl2aXR5J1xuXHQgICAgICAgIF0sIFRvbmUuQXV0b1dhaCk7XG5cdCAgICAgICAgVG9uZS5FZmZlY3QuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZW52ZWxvcGUgZm9sbG93ZXIuIFNldCB0aGUgYXR0YWNrL3JlbGVhc2Vcblx0XHRcdCAqICB0aW1pbmcgdG8gYWRqdXN0IGhvdyB0aGUgZW52ZWxvcGUgaXMgZm9sbG93ZWQuXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuRm9sbG93ZXJ9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZm9sbG93ZXIgPSBuZXcgVG9uZS5Gb2xsb3dlcihvcHRpb25zLmZvbGxvd2VyKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBzY2FsZXMgdGhlIGZvbGxvd2VyIHZhbHVlIHRvIHRoZSBmcmVxdWVuY3kgZG9tYWluXG5cdFx0XHQgKiAgQHR5cGUge1RvbmV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N3ZWVwUmFuZ2UgPSBuZXcgVG9uZS5TY2FsZUV4cCgwLCAxLCAwLjUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEB0eXBlIHtudW1iZXJ9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2Jhc2VGcmVxdWVuY3kgPSBvcHRpb25zLmJhc2VGcmVxdWVuY3k7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUge251bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fb2N0YXZlcyA9IG9wdGlvbnMub2N0YXZlcztcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgaW5wdXQgZ2FpbiB0byBhZGp1c3QgdGhlIHNlbnNpdGl2aXR5XG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5faW5wdXRCb29zdCA9IG5ldyBUb25lLkdhaW4oKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBAdHlwZSB7QmlxdWFkRmlsdGVyTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYmFuZHBhc3MgPSBuZXcgVG9uZS5GaWx0ZXIoe1xuXHQgICAgICAgICAgICAncm9sbG9mZic6IC00OCxcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeSc6IDAsXG5cdCAgICAgICAgICAgICdRJzogb3B0aW9ucy5RXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuRmlsdGVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9wZWFraW5nID0gbmV3IFRvbmUuRmlsdGVyKDAsICdwZWFraW5nJyk7XG5cdCAgICAgICAgdGhpcy5fcGVha2luZy5nYWluLnZhbHVlID0gb3B0aW9ucy5nYWluO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIGdhaW4gb2YgdGhlIGZpbHRlci5cblx0XHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0XHQgKiBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmdhaW4gPSB0aGlzLl9wZWFraW5nLmdhaW47XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgcXVhbGl0eSBvZiB0aGUgZmlsdGVyLlxuXHRcdFx0ICogQHR5cGUge1Bvc2l0aXZlfVxuXHRcdFx0ICogQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5RID0gdGhpcy5fYmFuZHBhc3MuUTtcblx0ICAgICAgICAvL3RoZSBjb250cm9sIHNpZ25hbCBwYXRoXG5cdCAgICAgICAgdGhpcy5lZmZlY3RTZW5kLmNoYWluKHRoaXMuX2lucHV0Qm9vc3QsIHRoaXMuZm9sbG93ZXIsIHRoaXMuX3N3ZWVwUmFuZ2UpO1xuXHQgICAgICAgIHRoaXMuX3N3ZWVwUmFuZ2UuY29ubmVjdCh0aGlzLl9iYW5kcGFzcy5mcmVxdWVuY3kpO1xuXHQgICAgICAgIHRoaXMuX3N3ZWVwUmFuZ2UuY29ubmVjdCh0aGlzLl9wZWFraW5nLmZyZXF1ZW5jeSk7XG5cdCAgICAgICAgLy90aGUgZmlsdGVyZWQgcGF0aFxuXHQgICAgICAgIHRoaXMuZWZmZWN0U2VuZC5jaGFpbih0aGlzLl9iYW5kcGFzcywgdGhpcy5fcGVha2luZywgdGhpcy5lZmZlY3RSZXR1cm4pO1xuXHQgICAgICAgIC8vc2V0IHRoZSBpbml0aWFsIHZhbHVlXG5cdCAgICAgICAgdGhpcy5fc2V0U3dlZXBSYW5nZSgpO1xuXHQgICAgICAgIHRoaXMuc2Vuc2l0aXZpdHkgPSBvcHRpb25zLnNlbnNpdGl2aXR5O1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KFtcblx0ICAgICAgICAgICAgJ2dhaW4nLFxuXHQgICAgICAgICAgICAnUSdcblx0ICAgICAgICBdKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkF1dG9XYWgsIFRvbmUuRWZmZWN0KTtcblx0ICAgIC8qKlxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLkF1dG9XYWguZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2Jhc2VGcmVxdWVuY3knOiAxMDAsXG5cdCAgICAgICAgJ29jdGF2ZXMnOiA2LFxuXHQgICAgICAgICdzZW5zaXRpdml0eSc6IDAsXG5cdCAgICAgICAgJ1EnOiAyLFxuXHQgICAgICAgICdnYWluJzogMixcblx0ICAgICAgICAnZm9sbG93ZXInOiB7XG5cdCAgICAgICAgICAgICdhdHRhY2snOiAwLjMsXG5cdCAgICAgICAgICAgICdyZWxlYXNlJzogMC41XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBudW1iZXIgb2Ygb2N0YXZlcyB0aGF0IHRoZSBmaWx0ZXIgd2lsbCBzd2VlcCBhYm92ZSB0aGVcblx0XHQgKiBiYXNlRnJlcXVlbmN5LlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkF1dG9XYWgjXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAbmFtZSBvY3RhdmVzXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5BdXRvV2FoLnByb3RvdHlwZSwgJ29jdGF2ZXMnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9vY3RhdmVzO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAob2N0YXZlcykge1xuXHQgICAgICAgICAgICB0aGlzLl9vY3RhdmVzID0gb2N0YXZlcztcblx0ICAgICAgICAgICAgdGhpcy5fc2V0U3dlZXBSYW5nZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGJhc2UgZnJlcXVlbmN5IGZyb20gd2hpY2ggdGhlIHN3ZWVwIHdpbGwgc3RhcnQgZnJvbS5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5BdXRvV2FoI1xuXHRcdCAqIEB0eXBlIHtGcmVxdWVuY3l9XG5cdFx0ICogQG5hbWUgYmFzZUZyZXF1ZW5jeVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQXV0b1dhaC5wcm90b3R5cGUsICdiYXNlRnJlcXVlbmN5Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmFzZUZyZXF1ZW5jeTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGJhc2VGcmVxKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2Jhc2VGcmVxdWVuY3kgPSBiYXNlRnJlcTtcblx0ICAgICAgICAgICAgdGhpcy5fc2V0U3dlZXBSYW5nZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHNlbnNpdGl2aXR5IHRvIGNvbnRyb2wgaG93IHJlc3BvbnNpdmUgdG8gdGhlIGlucHV0IHNpZ25hbCB0aGUgZmlsdGVyIGlzLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkF1dG9XYWgjXG5cdFx0ICogQHR5cGUge0RlY2liZWxzfVxuXHRcdCAqIEBuYW1lIHNlbnNpdGl2aXR5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5BdXRvV2FoLnByb3RvdHlwZSwgJ3NlbnNpdGl2aXR5Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gVG9uZS5nYWluVG9EYigxIC8gdGhpcy5faW5wdXRCb29zdC5nYWluLnZhbHVlKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHNlbnNpdGl2eSkge1xuXHQgICAgICAgICAgICB0aGlzLl9pbnB1dEJvb3N0LmdhaW4udmFsdWUgPSAxIC8gVG9uZS5kYlRvR2FpbihzZW5zaXRpdnkpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIHNldHMgdGhlIHN3ZWVwIHJhbmdlIG9mIHRoZSBzY2FsZXJcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuQXV0b1dhaC5wcm90b3R5cGUuX3NldFN3ZWVwUmFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5fc3dlZXBSYW5nZS5taW4gPSB0aGlzLl9iYXNlRnJlcXVlbmN5O1xuXHQgICAgICAgIHRoaXMuX3N3ZWVwUmFuZ2UubWF4ID0gTWF0aC5taW4odGhpcy5fYmFzZUZyZXF1ZW5jeSAqIE1hdGgucG93KDIsIHRoaXMuX29jdGF2ZXMpLCB0aGlzLmNvbnRleHQuc2FtcGxlUmF0ZSAvIDIpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuQXV0b1dhaH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5BdXRvV2FoLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5mb2xsb3dlci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5mb2xsb3dlciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fc3dlZXBSYW5nZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fc3dlZXBSYW5nZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fYmFuZHBhc3MuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2JhbmRwYXNzID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9wZWFraW5nLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9wZWFraW5nID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9pbnB1dEJvb3N0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9pbnB1dEJvb3N0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdnYWluJyxcblx0ICAgICAgICAgICAgJ1EnXG5cdCAgICAgICAgXSk7XG5cdCAgICAgICAgdGhpcy5nYWluID0gbnVsbDtcblx0ICAgICAgICB0aGlzLlEgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkF1dG9XYWg7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBTaWduYWwtcmF0ZSBtb2R1bG8gb3BlcmF0b3IuIE9ubHkgd29ya3MgaW4gQXVkaW9SYW5nZSBbLTEsIDFdIGFuZCBmb3IgbW9kdWx1c1xuXHRcdCAqICAgICAgICAgdmFsdWVzIGluIHRoZSBOb3JtYWxSYW5nZS5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuU2lnbmFsQmFzZX1cblx0XHQgKiAgQHBhcmFtIHtOb3JtYWxSYW5nZX0gbW9kdWx1cyBUaGUgbW9kdWx1cyB0byBhcHBseS5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgbW9kID0gbmV3IFRvbmUuTW9kdWxvKDAuMilcblx0XHQgKiB2YXIgc2lnID0gbmV3IFRvbmUuU2lnbmFsKDAuNSkuY29ubmVjdChtb2QpO1xuXHRcdCAqIC8vbW9kIG91dHB1dHMgMC4xXG5cdFx0ICovXG5cdCAgICBUb25lLk1vZHVsbyA9IGZ1bmN0aW9uIChtb2R1bHVzKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5jcmVhdGVJbnNPdXRzKDEsIDApO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEEgd2F2ZXNoYXBlciBnZXRzIHRoZSBpbnRlZ2VyIG11bHRpcGxlIG9mXG5cdFx0XHQgKiAgdGhlIGlucHV0IHNpZ25hbCBhbmQgdGhlIG1vZHVsdXMuXG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5XYXZlU2hhcGVyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc2hhcGVyID0gbmV3IFRvbmUuV2F2ZVNoYXBlcihNYXRoLnBvdygyLCAxNikpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBpbnRlZ2VyIG11bHRpcGxlIGlzIG11bHRpcGxpZWQgYnkgdGhlIG1vZHVsdXNcblx0XHRcdCAqICBAdHlwZSAge1RvbmUuTXVsdGlwbHl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX211bHRpcGx5ID0gbmV3IFRvbmUuTXVsdGlwbHkoKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBhbmQgc3VidHJhY3RlZCBmcm9tIHRoZSBpbnB1dCBzaWduYWxcblx0XHRcdCAqICBAdHlwZSAge1RvbmUuU3VidHJhY3R9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N1YnRyYWN0ID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5TdWJ0cmFjdCgpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBtb2R1bHVzIHNpZ25hbFxuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5TaWduYWx9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX21vZFNpZ25hbCA9IG5ldyBUb25lLlNpZ25hbChtb2R1bHVzKTtcblx0ICAgICAgICAvL2Nvbm5lY3Rpb25zXG5cdCAgICAgICAgdGhpcy5pbnB1dC5mYW4odGhpcy5fc2hhcGVyLCB0aGlzLl9zdWJ0cmFjdCk7XG5cdCAgICAgICAgdGhpcy5fbW9kU2lnbmFsLmNvbm5lY3QodGhpcy5fbXVsdGlwbHksIDAsIDApO1xuXHQgICAgICAgIHRoaXMuX3NoYXBlci5jb25uZWN0KHRoaXMuX211bHRpcGx5LCAwLCAxKTtcblx0ICAgICAgICB0aGlzLl9tdWx0aXBseS5jb25uZWN0KHRoaXMuX3N1YnRyYWN0LCAwLCAxKTtcblx0ICAgICAgICB0aGlzLl9zZXRXYXZlU2hhcGVyKG1vZHVsdXMpO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuTW9kdWxvLCBUb25lLlNpZ25hbEJhc2UpO1xuXHQgICAgLyoqXG5cdFx0ICogIEBwYXJhbSAge251bWJlcn0gIG1vZCAgdGhlIG1vZHVsdXMgdG8gYXBwbHlcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuTW9kdWxvLnByb3RvdHlwZS5fc2V0V2F2ZVNoYXBlciA9IGZ1bmN0aW9uIChtb2QpIHtcblx0ICAgICAgICB0aGlzLl9zaGFwZXIuc2V0TWFwKGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgICAgICAgdmFyIG11bHRpcGxlID0gTWF0aC5mbG9vcigodmFsICsgMC4wMDAxKSAvIG1vZCk7XG5cdCAgICAgICAgICAgIHJldHVybiBtdWx0aXBsZTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBUaGUgbW9kdWx1cyB2YWx1ZS5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5Nb2R1bG8jXG5cdFx0ICogQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdCAqIEBuYW1lIHZhbHVlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Nb2R1bG8ucHJvdG90eXBlLCAndmFsdWUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2RTaWduYWwudmFsdWU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChtb2QpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbW9kU2lnbmFsLnZhbHVlID0gbW9kO1xuXHQgICAgICAgICAgICB0aGlzLl9zZXRXYXZlU2hhcGVyKG1vZCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Nb2R1bG99IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTW9kdWxvLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsQmFzZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3NoYXBlci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fc2hhcGVyID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9tdWx0aXBseS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbXVsdGlwbHkgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3N1YnRyYWN0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9zdWJ0cmFjdCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbW9kU2lnbmFsLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9tb2RTaWduYWwgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLk1vZHVsbztcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuQml0Y3J1c2hlciBkb3duc2FtcGxlcyB0aGUgaW5jb21pbmcgc2lnbmFsIHRvIGEgZGlmZmVyZW50IGJpdGRlcHRoLlxuXHRcdCAqICAgICAgICAgTG93ZXJpbmcgdGhlIGJpdGRlcHRoIG9mIHRoZSBzaWduYWwgY3JlYXRlcyBkaXN0b3J0aW9uLiBSZWFkIG1vcmUgYWJvdXQgQml0Y3J1c2hpbmdcblx0XHQgKiAgICAgICAgIG9uIFtXaWtpcGVkaWFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JpdGNydXNoZXIpLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5FZmZlY3R9XG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfSBiaXRzIFRoZSBudW1iZXIgb2YgYml0cyB0byBkb3duc2FtcGxlIHRoZSBzaWduYWwuIE5vbWluYWwgcmFuZ2Vcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgb2YgMSB0byA4LlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vaW5pdGlhbGl6ZSBjcnVzaGVyIGFuZCByb3V0ZSBhIHN5bnRoIHRocm91Z2ggaXRcblx0XHQgKiB2YXIgY3J1c2hlciA9IG5ldyBUb25lLkJpdENydXNoZXIoNCkudG9NYXN0ZXIoKTtcblx0XHQgKiB2YXIgc3ludGggPSBuZXcgVG9uZS5Nb25vU3ludGgoKS5jb25uZWN0KGNydXNoZXIpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5CaXRDcnVzaGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFsnYml0cyddLCBUb25lLkJpdENydXNoZXIpO1xuXHQgICAgICAgIFRvbmUuRWZmZWN0LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgdmFyIGludlN0ZXBTaXplID0gMSAvIE1hdGgucG93KDIsIG9wdGlvbnMuYml0cyAtIDEpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFN1YnRyYWN0IHRoZSBpbnB1dCBzaWduYWwgYW5kIHRoZSBtb2R1bHVzIG9mIHRoZSBpbnB1dCBzaWduYWxcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5TdWJ0cmFjdH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc3VidHJhY3QgPSBuZXcgVG9uZS5TdWJ0cmFjdCgpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBtb2QgZnVuY3Rpb25cblx0XHRcdCAqICBAdHlwZSAge1RvbmUuTW9kdWxvfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9tb2R1bG8gPSBuZXcgVG9uZS5Nb2R1bG8oaW52U3RlcFNpemUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIGtlZXBzIHRyYWNrIG9mIHRoZSBiaXRzXG5cdFx0XHQgKiAgQHR5cGUge251bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYml0cyA9IG9wdGlvbnMuYml0cztcblx0ICAgICAgICAvL2Nvbm5lY3QgaXQgdXBcblx0ICAgICAgICB0aGlzLmVmZmVjdFNlbmQuZmFuKHRoaXMuX3N1YnRyYWN0LCB0aGlzLl9tb2R1bG8pO1xuXHQgICAgICAgIHRoaXMuX21vZHVsby5jb25uZWN0KHRoaXMuX3N1YnRyYWN0LCAwLCAxKTtcblx0ICAgICAgICB0aGlzLl9zdWJ0cmFjdC5jb25uZWN0KHRoaXMuZWZmZWN0UmV0dXJuKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkJpdENydXNoZXIsIFRvbmUuRWZmZWN0KTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgZGVmYXVsdCB2YWx1ZXNcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5CaXRDcnVzaGVyLmRlZmF1bHRzID0geyAnYml0cyc6IDQgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBiaXQgZGVwdGggb2YgdGhlIGVmZmVjdC4gTm9taW5hbCByYW5nZSBvZiAxLTguXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQml0Q3J1c2hlciNcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBuYW1lIGJpdHNcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkJpdENydXNoZXIucHJvdG90eXBlLCAnYml0cycsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JpdHM7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChiaXRzKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2JpdHMgPSBiaXRzO1xuXHQgICAgICAgICAgICB2YXIgaW52U3RlcFNpemUgPSAxIC8gTWF0aC5wb3coMiwgYml0cyAtIDEpO1xuXHQgICAgICAgICAgICB0aGlzLl9tb2R1bG8udmFsdWUgPSBpbnZTdGVwU2l6ZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuQml0Q3J1c2hlcn0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5CaXRDcnVzaGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fc3VidHJhY3QuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3N1YnRyYWN0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9tb2R1bG8uZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX21vZHVsbyA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuQml0Q3J1c2hlcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuQ2hlYnlTaGV2IGlzIGEgQ2hlYnlzaGV2IHdhdmVzaGFwZXIsIGFuIGVmZmVjdCB3aGljaCBpcyBnb29kIFxuXHRcdCAqICAgICAgICAgZm9yIG1ha2luZyBkaWZmZXJlbnQgdHlwZXMgb2YgZGlzdG9ydGlvbiBzb3VuZHMuXG5cdFx0ICogICAgICAgICBOb3RlIHRoYXQgb2RkIG9yZGVycyBzb3VuZCB2ZXJ5IGRpZmZlcmVudCBmcm9tIGV2ZW4gb25lcywgXG5cdFx0ICogICAgICAgICBhbmQgb3JkZXIgPSAxIGlzIG5vIGNoYW5nZS4gXG5cdFx0ICogICAgICAgICBSZWFkIG1vcmUgYXQgW211c2ljLmNvbHVtYmlhLmVkdV0oaHR0cDovL211c2ljLmNvbHVtYmlhLmVkdS9jbWMvbXVzaWNhbmRjb21wdXRlcnMvY2hhcHRlcjQvMDRfMDYucGhwKS5cblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5FZmZlY3R9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAcGFyYW0ge1Bvc2l0aXZlfE9iamVjdH0gW29yZGVyXSBUaGUgb3JkZXIgb2YgdGhlIGNoZWJ5c2hldiBwb2x5bm9taWFsLiBOb3JtYWwgcmFuZ2UgYmV0d2VlbiAxLTEwMC4gXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9jcmVhdGUgYSBuZXcgY2hlYnlcblx0XHQgKiB2YXIgY2hlYnkgPSBuZXcgVG9uZS5DaGVieXNoZXYoNTApO1xuXHRcdCAqIC8vY3JlYXRlIGEgbW9ub3N5bnRoIGNvbm5lY3RlZCB0byBvdXIgY2hlYnlcblx0XHQgKiBzeW50aCA9IG5ldyBUb25lLk1vbm9TeW50aCgpLmNvbm5lY3QoY2hlYnkpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5DaGVieXNoZXYgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWydvcmRlciddLCBUb25lLkNoZWJ5c2hldik7XG5cdCAgICAgICAgVG9uZS5FZmZlY3QuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBAdHlwZSB7V2F2ZVNoYXBlck5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3NoYXBlciA9IG5ldyBUb25lLldhdmVTaGFwZXIoNDA5Nik7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBob2xkcyBvbnRvIHRoZSBvcmRlciBvZiB0aGUgZmlsdGVyXG5cdFx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX29yZGVyID0gb3B0aW9ucy5vcmRlcjtcblx0ICAgICAgICB0aGlzLmNvbm5lY3RFZmZlY3QodGhpcy5fc2hhcGVyKTtcblx0ICAgICAgICB0aGlzLm9yZGVyID0gb3B0aW9ucy5vcmRlcjtcblx0ICAgICAgICB0aGlzLm92ZXJzYW1wbGUgPSBvcHRpb25zLm92ZXJzYW1wbGU7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5DaGVieXNoZXYsIFRvbmUuRWZmZWN0KTtcblx0ICAgIC8qKlxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5DaGVieXNoZXYuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ29yZGVyJzogMSxcblx0ICAgICAgICAnb3ZlcnNhbXBsZSc6ICdub25lJ1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBnZXQgdGhlIGNvZWZmaWNpZW50IGZvciB0aGF0IGRlZ3JlZVxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0geCB0aGUgeCB2YWx1ZVxuXHRcdCAqICBAcGFyYW0gICB7bnVtYmVyfSBkZWdyZWUgXG5cdFx0ICogIEBwYXJhbSB7T2JqZWN0fSBtZW1vIG1lbW9pemUgdGhlIGNvbXB1dGVkIHZhbHVlLiBcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBzcGVlZHMgdXAgY29tcHV0YXRpb24gZ3JlYXRseS4gXG5cdFx0ICogIEByZXR1cm4gIHtudW1iZXJ9ICAgICAgIHRoZSBjb2VmZmljaWVudCBcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuQ2hlYnlzaGV2LnByb3RvdHlwZS5fZ2V0Q29lZmZpY2llbnQgPSBmdW5jdGlvbiAoeCwgZGVncmVlLCBtZW1vKSB7XG5cdCAgICAgICAgaWYgKG1lbW8uaGFzT3duUHJvcGVydHkoZGVncmVlKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gbWVtb1tkZWdyZWVdO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoZGVncmVlID09PSAwKSB7XG5cdCAgICAgICAgICAgIG1lbW9bZGVncmVlXSA9IDA7XG5cdCAgICAgICAgfSBlbHNlIGlmIChkZWdyZWUgPT09IDEpIHtcblx0ICAgICAgICAgICAgbWVtb1tkZWdyZWVdID0geDtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBtZW1vW2RlZ3JlZV0gPSAyICogeCAqIHRoaXMuX2dldENvZWZmaWNpZW50KHgsIGRlZ3JlZSAtIDEsIG1lbW8pIC0gdGhpcy5fZ2V0Q29lZmZpY2llbnQoeCwgZGVncmVlIC0gMiwgbWVtbyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBtZW1vW2RlZ3JlZV07XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIG9yZGVyIG9mIHRoZSBDaGVieXNoZXYgcG9seW5vbWlhbCB3aGljaCBjcmVhdGVzXG5cdFx0ICogdGhlIGVxdWF0aW9uIHdoaWNoIGlzIGFwcGxpZWQgdG8gdGhlIGluY29taW5nIFxuXHRcdCAqIHNpZ25hbCB0aHJvdWdoIGEgVG9uZS5XYXZlU2hhcGVyLiBUaGUgZXF1YXRpb25zXG5cdFx0ICogYXJlIGluIHRoZSBmb3JtOjxicj5cblx0XHQgKiBvcmRlciAyOiAyeF4yICsgMTxicj5cblx0XHQgKiBvcmRlciAzOiA0eF4zICsgM3ggPGJyPlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkNoZWJ5c2hldiNcblx0XHQgKiBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0ICogQG5hbWUgb3JkZXJcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkNoZWJ5c2hldi5wcm90b3R5cGUsICdvcmRlcicsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29yZGVyO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAob3JkZXIpIHtcblx0ICAgICAgICAgICAgdGhpcy5fb3JkZXIgPSBvcmRlcjtcblx0ICAgICAgICAgICAgdmFyIGN1cnZlID0gbmV3IEFycmF5KDQwOTYpO1xuXHQgICAgICAgICAgICB2YXIgbGVuID0gY3VydmUubGVuZ3RoO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgeCA9IGkgKiAyIC8gbGVuIC0gMTtcblx0ICAgICAgICAgICAgICAgIGlmICh4ID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy9zaG91bGQgb3V0cHV0IDAgd2hlbiBpbnB1dCBpcyAwXG5cdCAgICAgICAgICAgICAgICAgICAgY3VydmVbaV0gPSAwO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBjdXJ2ZVtpXSA9IHRoaXMuX2dldENvZWZmaWNpZW50KHgsIG9yZGVyLCB7fSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5fc2hhcGVyLmN1cnZlID0gY3VydmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgb3ZlcnNhbXBsaW5nIG9mIHRoZSBlZmZlY3QuIENhbiBlaXRoZXIgYmUgXCJub25lXCIsIFwiMnhcIiBvciBcIjR4XCIuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQ2hlYnlzaGV2I1xuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQG5hbWUgb3ZlcnNhbXBsZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQ2hlYnlzaGV2LnByb3RvdHlwZSwgJ292ZXJzYW1wbGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaGFwZXIub3ZlcnNhbXBsZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG92ZXJzYW1wbGluZykge1xuXHQgICAgICAgICAgICB0aGlzLl9zaGFwZXIub3ZlcnNhbXBsZSA9IG92ZXJzYW1wbGluZztcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC4gXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkNoZWJ5c2hldn0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5DaGVieXNoZXYucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5FZmZlY3QucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9zaGFwZXIuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3NoYXBlciA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuQ2hlYnlzaGV2O1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgQmFzZSBjbGFzcyBmb3IgU3RlcmVvIGVmZmVjdHMuIFByb3ZpZGVzIGVmZmVjdFNlbmRML1IgYW5kIGVmZmVjdFJldHVybkwvUi5cblx0XHQgKlxuXHRcdCAqXHRAY29uc3RydWN0b3Jcblx0XHQgKlx0QGV4dGVuZHMge1RvbmUuRWZmZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5TdGVyZW9FZmZlY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLy9nZXQgdGhlIGRlZmF1bHRzXG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzKTtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbJ3dldCddLCBUb25lLkVmZmVjdCk7XG5cdCAgICAgICAgdGhpcy5jcmVhdGVJbnNPdXRzKDEsIDEpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBkcnl3ZXQga25vYiB0byBjb250cm9sIHRoZSBhbW91bnQgb2YgZWZmZWN0XG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuQ3Jvc3NGYWRlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9kcnlXZXQgPSBuZXcgVG9uZS5Dcm9zc0ZhZGUob3B0aW9ucy53ZXQpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSB3ZXQgY29udHJvbCwgaS5lLiBob3cgbXVjaCBvZiB0aGUgZWZmZWN0ZWRcblx0XHRcdCAqICB3aWxsIHBhc3MgdGhyb3VnaCB0byB0aGUgb3V0cHV0LlxuXHRcdFx0ICogIEB0eXBlIHtOb3JtYWxSYW5nZX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLndldCA9IHRoaXMuX2RyeVdldC5mYWRlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZW4gc3BsaXQgaXRcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5TcGxpdH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc3BsaXQgPSBuZXcgVG9uZS5TcGxpdCgpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBlZmZlY3RzIHNlbmQgTEVGVFxuXHRcdFx0ICogIEB0eXBlIHtHYWluTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5lZmZlY3RTZW5kTCA9IHRoaXMuX3NwbGl0LmxlZnQ7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGVmZmVjdHMgc2VuZCBSSUdIVFxuXHRcdFx0ICogIEB0eXBlIHtHYWluTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5lZmZlY3RTZW5kUiA9IHRoaXMuX3NwbGl0LnJpZ2h0O1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBzdGVyZW8gZWZmZWN0IG1lcmdlclxuXHRcdFx0ICogIEB0eXBlIHtUb25lLk1lcmdlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9tZXJnZSA9IG5ldyBUb25lLk1lcmdlKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGVmZmVjdCByZXR1cm4gTEVGVFxuXHRcdFx0ICogIEB0eXBlIHtHYWluTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5lZmZlY3RSZXR1cm5MID0gdGhpcy5fbWVyZ2UubGVmdDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgZWZmZWN0IHJldHVybiBSSUdIVFxuXHRcdFx0ICogIEB0eXBlIHtHYWluTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5lZmZlY3RSZXR1cm5SID0gdGhpcy5fbWVyZ2UucmlnaHQ7XG5cdCAgICAgICAgLy9jb25uZWN0aW9uc1xuXHQgICAgICAgIHRoaXMuaW5wdXQuY29ubmVjdCh0aGlzLl9zcGxpdCk7XG5cdCAgICAgICAgLy9kcnkgd2V0IGNvbm5lY3Rpb25zXG5cdCAgICAgICAgdGhpcy5pbnB1dC5jb25uZWN0KHRoaXMuX2RyeVdldCwgMCwgMCk7XG5cdCAgICAgICAgdGhpcy5fbWVyZ2UuY29ubmVjdCh0aGlzLl9kcnlXZXQsIDAsIDEpO1xuXHQgICAgICAgIHRoaXMuX2RyeVdldC5jb25uZWN0KHRoaXMub3V0cHV0KTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbJ3dldCddKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlN0ZXJlb0VmZmVjdCwgVG9uZS5FZmZlY3QpO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5TdGVyZW9FZmZlY3R9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuU3RlcmVvRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fZHJ5V2V0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9kcnlXZXQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3NwbGl0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9zcGxpdCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbWVyZ2UuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX21lcmdlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmVmZmVjdFNlbmRMID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmVmZmVjdFNlbmRSID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmVmZmVjdFJldHVybkwgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZWZmZWN0UmV0dXJuUiA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoWyd3ZXQnXSk7XG5cdCAgICAgICAgdGhpcy53ZXQgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlN0ZXJlb0VmZmVjdDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuQ2hvcnVzIGlzIGEgc3RlcmVvIGNob3J1cyBlZmZlY3QgY29tcG9zZWQgb2Zcblx0XHQgKiAgICAgICAgIGEgbGVmdCBhbmQgcmlnaHQgZGVsYXkgd2l0aCBhIFRvbmUuTEZPIGFwcGxpZWQgdG8gdGhlIGRlbGF5VGltZSBvZiBlYWNoIGNoYW5uZWwuXG5cdFx0ICogICAgICAgICBJbnNwaXJhdGlvbiBmcm9tIFtUdW5hLmpzXShodHRwczovL2dpdGh1Yi5jb20vRGluYWhtb2UvdHVuYS9ibG9iL21hc3Rlci90dW5hLmpzKS5cblx0XHQgKiAgICAgICAgIFJlYWQgbW9yZSBvbiB0aGUgY2hvcnVzIGVmZmVjdCBvbiBbU291bmRPblNvdW5kXShodHRwOi8vd3d3LnNvdW5kb25zb3VuZC5jb20vc29zL2p1bjA0L2FydGljbGVzL3N5bnRoc2VjcmV0cy5odG0pLlxuXHRcdCAqXG5cdFx0ICpcdEBjb25zdHJ1Y3RvclxuXHRcdCAqXHRAZXh0ZW5kcyB7VG9uZS5TdGVyZW9FZmZlY3R9XG5cdFx0ICpcdEBwYXJhbSB7RnJlcXVlbmN5fE9iamVjdH0gW2ZyZXF1ZW5jeV0gVGhlIGZyZXF1ZW5jeSBvZiB0aGUgTEZPLlxuXHRcdCAqXHRAcGFyYW0ge01pbGxpc2Vjb25kc30gW2RlbGF5VGltZV0gVGhlIGRlbGF5IG9mIHRoZSBjaG9ydXMgZWZmZWN0IGluIG1zLlxuXHRcdCAqXHRAcGFyYW0ge05vcm1hbFJhbmdlfSBbZGVwdGhdIFRoZSBkZXB0aCBvZiB0aGUgY2hvcnVzLlxuXHRcdCAqXHRAZXhhbXBsZVxuXHRcdCAqIHZhciBjaG9ydXMgPSBuZXcgVG9uZS5DaG9ydXMoNCwgMi41LCAwLjUpO1xuXHRcdCAqIHZhciBzeW50aCA9IG5ldyBUb25lLlBvbHlTeW50aCg0LCBUb25lLk1vbm9TeW50aCkuY29ubmVjdChjaG9ydXMpO1xuXHRcdCAqIHN5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKFtcIkMzXCIsXCJFM1wiLFwiRzNcIl0sIFwiOG5cIik7XG5cdFx0ICovXG5cdCAgICBUb25lLkNob3J1cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZGVsYXlUaW1lJyxcblx0ICAgICAgICAgICAgJ2RlcHRoJ1xuXHQgICAgICAgIF0sIFRvbmUuQ2hvcnVzKTtcblx0ICAgICAgICBUb25lLlN0ZXJlb0VmZmVjdC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBkZXB0aCBvZiB0aGUgY2hvcnVzXG5cdFx0XHQgKiAgQHR5cGUge251bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZGVwdGggPSBvcHRpb25zLmRlcHRoO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBkZWxheVRpbWVcblx0XHRcdCAqICBAdHlwZSB7bnVtYmVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9kZWxheVRpbWUgPSBvcHRpb25zLmRlbGF5VGltZSAvIDEwMDA7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGxmbyB3aGljaCBjb250cm9scyB0aGUgZGVsYXlUaW1lXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuTEZPfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sZm9MID0gbmV3IFRvbmUuTEZPKHtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeSc6IG9wdGlvbnMuZnJlcXVlbmN5LFxuXHQgICAgICAgICAgICAnbWluJzogMCxcblx0ICAgICAgICAgICAgJ21heCc6IDFcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBhbm90aGVyIExGTyBmb3IgdGhlIHJpZ2h0IHNpZGUgd2l0aCBhIDE4MCBkZWdyZWUgcGhhc2UgZGlmZlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkxGT31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbGZvUiA9IG5ldyBUb25lLkxGTyh7XG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knOiBvcHRpb25zLmZyZXF1ZW5jeSxcblx0ICAgICAgICAgICAgJ21pbic6IDAsXG5cdCAgICAgICAgICAgICdtYXgnOiAxLFxuXHQgICAgICAgICAgICAncGhhc2UnOiAxODBcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBkZWxheSBmb3IgbGVmdFxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkRlbGF5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9kZWxheU5vZGVMID0gbmV3IFRvbmUuRGVsYXkoKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBkZWxheSBmb3IgcmlnaHRcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5EZWxheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZGVsYXlOb2RlUiA9IG5ldyBUb25lLkRlbGF5KCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgZnJlcXVlbmN5IG9mIHRoZSBMRk8gd2hpY2ggbW9kdWxhdGVzIHRoZSBkZWxheVRpbWUuXG5cdFx0XHQgKiBAdHlwZSB7RnJlcXVlbmN5fVxuXHRcdFx0ICogQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSB0aGlzLl9sZm9MLmZyZXF1ZW5jeTtcblx0ICAgICAgICAvL2Nvbm5lY3Rpb25zXG5cdCAgICAgICAgdGhpcy5lZmZlY3RTZW5kTC5jaGFpbih0aGlzLl9kZWxheU5vZGVMLCB0aGlzLmVmZmVjdFJldHVybkwpO1xuXHQgICAgICAgIHRoaXMuZWZmZWN0U2VuZFIuY2hhaW4odGhpcy5fZGVsYXlOb2RlUiwgdGhpcy5lZmZlY3RSZXR1cm5SKTtcblx0ICAgICAgICAvL2FuZCBwYXNzIHRocm91Z2ggdG8gbWFrZSB0aGUgZGV0dW5lIGFwcGFyZW50XG5cdCAgICAgICAgdGhpcy5lZmZlY3RTZW5kTC5jb25uZWN0KHRoaXMuZWZmZWN0UmV0dXJuTCk7XG5cdCAgICAgICAgdGhpcy5lZmZlY3RTZW5kUi5jb25uZWN0KHRoaXMuZWZmZWN0UmV0dXJuUik7XG5cdCAgICAgICAgLy9sZm8gc2V0dXBcblx0ICAgICAgICB0aGlzLl9sZm9MLmNvbm5lY3QodGhpcy5fZGVsYXlOb2RlTC5kZWxheVRpbWUpO1xuXHQgICAgICAgIHRoaXMuX2xmb1IuY29ubmVjdCh0aGlzLl9kZWxheU5vZGVSLmRlbGF5VGltZSk7XG5cdCAgICAgICAgLy9zdGFydCB0aGUgbGZvXG5cdCAgICAgICAgdGhpcy5fbGZvTC5zdGFydCgpO1xuXHQgICAgICAgIHRoaXMuX2xmb1Iuc3RhcnQoKTtcblx0ICAgICAgICAvL2hhdmUgb25lIExGTyBmcmVxdWVuY3kgY29udHJvbCB0aGUgb3RoZXJcblx0ICAgICAgICB0aGlzLl9sZm9MLmZyZXF1ZW5jeS5jb25uZWN0KHRoaXMuX2xmb1IuZnJlcXVlbmN5KTtcblx0ICAgICAgICAvL3NldCB0aGUgaW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICB0aGlzLmRlcHRoID0gdGhpcy5fZGVwdGg7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kudmFsdWUgPSBvcHRpb25zLmZyZXF1ZW5jeTtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGU7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoWydmcmVxdWVuY3knXSk7XG5cdCAgICAgICAgdGhpcy5zcHJlYWQgPSBvcHRpb25zLnNwcmVhZDtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkNob3J1cywgVG9uZS5TdGVyZW9FZmZlY3QpO1xuXHQgICAgLyoqXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuQ2hvcnVzLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdmcmVxdWVuY3knOiAxLjUsXG5cdCAgICAgICAgJ2RlbGF5VGltZSc6IDMuNSxcblx0ICAgICAgICAnZGVwdGgnOiAwLjcsXG5cdCAgICAgICAgJ3R5cGUnOiAnc2luZScsXG5cdCAgICAgICAgJ3NwcmVhZCc6IDE4MFxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBkZXB0aCBvZiB0aGUgZWZmZWN0LiBBIGRlcHRoIG9mIDEgbWFrZXMgdGhlIGRlbGF5VGltZVxuXHRcdCAqIG1vZHVsYXRlIGJldHdlZW4gMCBhbmQgMipkZWxheVRpbWUgKGNlbnRlcmVkIGFyb3VuZCB0aGUgZGVsYXlUaW1lKS5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5DaG9ydXMjXG5cdFx0ICogQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdCAqIEBuYW1lIGRlcHRoXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5DaG9ydXMucHJvdG90eXBlLCAnZGVwdGgnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZXB0aDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGRlcHRoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlcHRoID0gZGVwdGg7XG5cdCAgICAgICAgICAgIHZhciBkZXZpYXRpb24gPSB0aGlzLl9kZWxheVRpbWUgKiBkZXB0aDtcblx0ICAgICAgICAgICAgdGhpcy5fbGZvTC5taW4gPSBNYXRoLm1heCh0aGlzLl9kZWxheVRpbWUgLSBkZXZpYXRpb24sIDApO1xuXHQgICAgICAgICAgICB0aGlzLl9sZm9MLm1heCA9IHRoaXMuX2RlbGF5VGltZSArIGRldmlhdGlvbjtcblx0ICAgICAgICAgICAgdGhpcy5fbGZvUi5taW4gPSBNYXRoLm1heCh0aGlzLl9kZWxheVRpbWUgLSBkZXZpYXRpb24sIDApO1xuXHQgICAgICAgICAgICB0aGlzLl9sZm9SLm1heCA9IHRoaXMuX2RlbGF5VGltZSArIGRldmlhdGlvbjtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBkZWxheVRpbWUgaW4gbWlsbGlzZWNvbmRzIG9mIHRoZSBjaG9ydXMuIEEgbGFyZ2VyIGRlbGF5VGltZVxuXHRcdCAqIHdpbGwgZ2l2ZSBhIG1vcmUgcHJvbm91bmNlZCBlZmZlY3QuIE5vbWluYWwgcmFuZ2UgYSBkZWxheVRpbWVcblx0XHQgKiBpcyBiZXR3ZWVuIDIgYW5kIDIwbXMuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQ2hvcnVzI1xuXHRcdCAqIEB0eXBlIHtNaWxsaXNlY29uZHN9XG5cdFx0ICogQG5hbWUgZGVsYXlUaW1lXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5DaG9ydXMucHJvdG90eXBlLCAnZGVsYXlUaW1lJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVsYXlUaW1lICogMTAwMDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGRlbGF5VGltZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9kZWxheVRpbWUgPSBkZWxheVRpbWUgLyAxMDAwO1xuXHQgICAgICAgICAgICB0aGlzLmRlcHRoID0gdGhpcy5fZGVwdGg7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgb3NjaWxsYXRvciB0eXBlIG9mIHRoZSBMRk8uXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQ2hvcnVzI1xuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQG5hbWUgdHlwZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQ2hvcnVzLnByb3RvdHlwZSwgJ3R5cGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9sZm9MLnR5cGU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0eXBlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2xmb0wudHlwZSA9IHR5cGU7XG5cdCAgICAgICAgICAgIHRoaXMuX2xmb1IudHlwZSA9IHR5cGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBBbW91bnQgb2Ygc3RlcmVvIHNwcmVhZC4gV2hlbiBzZXQgdG8gMCwgYm90aCBMRk8ncyB3aWxsIGJlIHBhbm5lZCBjZW50cmFsbHkuXG5cdFx0ICogV2hlbiBzZXQgdG8gMTgwLCBMRk8ncyB3aWxsIGJlIHBhbm5lZCBoYXJkIGxlZnQgYW5kIHJpZ2h0IHJlc3BlY3RpdmVseS5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5DaG9ydXMjXG5cdFx0ICogQHR5cGUge0RlZ3JlZXN9XG5cdFx0ICogQG5hbWUgc3ByZWFkXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5DaG9ydXMucHJvdG90eXBlLCAnc3ByZWFkJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGZvUi5waGFzZSAtIHRoaXMuX2xmb0wucGhhc2U7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzcHJlYWQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbGZvTC5waGFzZSA9IDkwIC0gc3ByZWFkIC8gMjtcblx0ICAgICAgICAgICAgdGhpcy5fbGZvUi5waGFzZSA9IHNwcmVhZCAvIDIgKyA5MDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuQ2hvcnVzfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkNob3J1cy5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlN0ZXJlb0VmZmVjdC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX2xmb0wuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2xmb0wgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2xmb1IuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2xmb1IgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2RlbGF5Tm9kZUwuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2RlbGF5Tm9kZUwgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2RlbGF5Tm9kZVIuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2RlbGF5Tm9kZVIgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKCdmcmVxdWVuY3knKTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuQ2hvcnVzO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIFRvbmUuQ29udm9sdmVyIGlzIGEgd3JhcHBlciBhcm91bmQgdGhlIE5hdGl2ZSBXZWIgQXVkaW9cblx0XHQgKiAgICAgICAgICBbQ29udm9sdmVyTm9kZV0oaHR0cDovL3dlYmF1ZGlvLmdpdGh1Yi5pby93ZWItYXVkaW8tYXBpLyN0aGUtY29udm9sdmVybm9kZS1pbnRlcmZhY2UpLlxuXHRcdCAqICAgICAgICAgIENvbnZvbHV0aW9uIGlzIHVzZWZ1bCBmb3IgcmV2ZXJiIGFuZCBmaWx0ZXIgZW11bGF0aW9uLiBSZWFkIG1vcmUgYWJvdXQgY29udm9sdXRpb24gcmV2ZXJiIG9uXG5cdFx0ICogICAgICAgICAgW1dpa2lwZWRpYV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29udm9sdXRpb25fcmV2ZXJiKS5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuRWZmZWN0fVxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ3xUb25lLkJ1ZmZlcnxPYmplY3R9IFt1cmxdIFRoZSBVUkwgb2YgdGhlIGltcHVsc2UgcmVzcG9uc2Ugb3IgdGhlIFRvbmUuQnVmZmVyXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGlhbmluZyB0aGUgaW1wdWxzZSByZXNwb25zZS5cblx0XHQgKiAgQHBhcmFtIHtGdW5jdGlvbj19IG9ubG9hZCBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gdGhlIHVybCBpcyBsb2FkZWQuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9pbml0aWFsaXppbmcgdGhlIGNvbnZvbHZlciB3aXRoIGFuIGltcHVsc2UgcmVzcG9uc2Vcblx0XHQgKiB2YXIgY29udm9sdmVyID0gbmV3IFRvbmUuQ29udm9sdmVyKFwiLi9wYXRoL3RvL2lyLndhdlwiKS50b01hc3RlcigpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Db252b2x2ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAndXJsJyxcblx0ICAgICAgICAgICAgJ29ubG9hZCdcblx0ICAgICAgICBdLCBUb25lLkNvbnZvbHZlcik7XG5cdCAgICAgICAgVG9uZS5FZmZlY3QuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBjb252b2x2ZXIgbm9kZVxuXHRcdFx0ICogIEB0eXBlIHtDb252b2x2ZXJOb2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9jb252b2x2ZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlQ29udm9sdmVyKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGNvbnZvbHV0aW9uIGJ1ZmZlclxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkJ1ZmZlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYnVmZmVyID0gbmV3IFRvbmUuQnVmZmVyKG9wdGlvbnMudXJsLCBmdW5jdGlvbiAoYnVmZmVyKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NvbnZvbHZlci5idWZmZXIgPSBidWZmZXIuZ2V0KCk7XG5cdCAgICAgICAgICAgIG9wdGlvbnMub25sb2FkKCk7XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgICAgICB0aGlzLmNvbm5lY3RFZmZlY3QodGhpcy5fY29udm9sdmVyKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkNvbnZvbHZlciwgVG9uZS5FZmZlY3QpO1xuXHQgICAgLyoqXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Db252b2x2ZXIuZGVmYXVsdHMgPSB7ICdvbmxvYWQnOiBUb25lLm5vT3AgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgY29udm9sdmVyJ3MgYnVmZmVyXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkNvbnZvbHZlciNcblx0XHQgKiAgQHR5cGUge0F1ZGlvQnVmZmVyfVxuXHRcdCAqICBAbmFtZSBidWZmZXJcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkNvbnZvbHZlci5wcm90b3R5cGUsICdidWZmZXInLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIuZ2V0KCk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChidWZmZXIpIHtcblx0ICAgICAgICAgICAgdGhpcy5fYnVmZmVyLnNldChidWZmZXIpO1xuXHQgICAgICAgICAgICB0aGlzLl9jb252b2x2ZXIuYnVmZmVyID0gdGhpcy5fYnVmZmVyLmdldCgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIExvYWQgYW4gaW1wdWxzZSByZXNwb25zZSB1cmwgYXMgYW4gYXVkaW8gYnVmZmVyLlxuXHRcdCAqICBEZWNvZGVzIHRoZSBhdWRpbyBhc3luY2hyb25vdXNseSBhbmQgaW52b2tlc1xuXHRcdCAqICB0aGUgY2FsbGJhY2sgb25jZSB0aGUgYXVkaW8gYnVmZmVyIGxvYWRzLlxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgb2YgdGhlIGJ1ZmZlciB0byBsb2FkLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlIHN1cHBvcnQgZGVwZW5kcyBvbiB0aGVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICBicm93c2VyLlxuXHRcdCAqICBAcGFyYW0gIHtmdW5jdGlvbj19IGNhbGxiYWNrXG5cdFx0ICogIEByZXR1cm5zIHtQcm9taXNlfVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Db252b2x2ZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAodXJsLCBjYWxsYmFjaykge1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIubG9hZCh1cmwsIGZ1bmN0aW9uIChidWZmKSB7XG5cdCAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZjtcblx0ICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkNvbnZvbHZlcn0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Db252b2x2ZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5FZmZlY3QucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9jb252b2x2ZXIuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMuX2NvbnZvbHZlciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fYnVmZmVyLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9idWZmZXIgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkNvbnZvbHZlcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuRGlzdG9ydGlvbiBpcyBhIHNpbXBsZSBkaXN0b3J0aW9uIGVmZmVjdCB1c2luZyBUb25lLldhdmVTaGFwZXIuXG5cdFx0ICogICAgICAgICBBbGdvcml0aG0gZnJvbSBbYSBzdGFja292ZXJmbG93IGFuc3dlcl0oaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjIzMTM0MDgpLlxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkVmZmVjdH1cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gW2Rpc3RvcnRpb25dIFRoZSBhbW91bnQgb2YgZGlzdG9ydGlvbiAobm9taW5hbCByYW5nZSBvZiAwLTEpXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIGRpc3QgPSBuZXcgVG9uZS5EaXN0b3J0aW9uKDAuOCkudG9NYXN0ZXIoKTtcblx0XHQgKiB2YXIgZm0gPSBuZXcgVG9uZS5TaW1wbGVGTSgpLmNvbm5lY3QoZGlzdCk7XG5cdFx0ICogLy90aGlzIHNvdW5kcyBnb29kIG9uIGJhc3Mgbm90ZXNcblx0XHQgKiBmbS50cmlnZ2VyQXR0YWNrUmVsZWFzZShcIkExXCIsIFwiOG5cIik7XG5cdFx0ICovXG5cdCAgICBUb25lLkRpc3RvcnRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWydkaXN0b3J0aW9uJ10sIFRvbmUuRGlzdG9ydGlvbik7XG5cdCAgICAgICAgVG9uZS5FZmZlY3QuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5XYXZlU2hhcGVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zaGFwZXIgPSBuZXcgVG9uZS5XYXZlU2hhcGVyKDQwOTYpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogaG9sZHMgdGhlIGRpc3RvcnRpb24gYW1vdW50XG5cdFx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2Rpc3RvcnRpb24gPSBvcHRpb25zLmRpc3RvcnRpb247XG5cdCAgICAgICAgdGhpcy5jb25uZWN0RWZmZWN0KHRoaXMuX3NoYXBlcik7XG5cdCAgICAgICAgdGhpcy5kaXN0b3J0aW9uID0gb3B0aW9ucy5kaXN0b3J0aW9uO1xuXHQgICAgICAgIHRoaXMub3ZlcnNhbXBsZSA9IG9wdGlvbnMub3ZlcnNhbXBsZTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkRpc3RvcnRpb24sIFRvbmUuRWZmZWN0KTtcblx0ICAgIC8qKlxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5EaXN0b3J0aW9uLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdkaXN0b3J0aW9uJzogMC40LFxuXHQgICAgICAgICdvdmVyc2FtcGxlJzogJ25vbmUnXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGFtb3VudCBvZiBkaXN0b3J0aW9uLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkRpc3RvcnRpb24jXG5cdFx0ICogQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdCAqIEBuYW1lIGRpc3RvcnRpb25cblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkRpc3RvcnRpb24ucHJvdG90eXBlLCAnZGlzdG9ydGlvbicsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3RvcnRpb247XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZGlzdG9ydGlvbiA9IGFtb3VudDtcblx0ICAgICAgICAgICAgdmFyIGsgPSBhbW91bnQgKiAxMDA7XG5cdCAgICAgICAgICAgIHZhciBkZWcgPSBNYXRoLlBJIC8gMTgwO1xuXHQgICAgICAgICAgICB0aGlzLl9zaGFwZXIuc2V0TWFwKGZ1bmN0aW9uICh4KSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoeCkgPCAwLjAwMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vc2hvdWxkIG91dHB1dCAwIHdoZW4gaW5wdXQgaXMgMFxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDMgKyBrKSAqIHggKiAyMCAqIGRlZyAvIChNYXRoLlBJICsgayAqIE1hdGguYWJzKHgpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgb3ZlcnNhbXBsaW5nIG9mIHRoZSBlZmZlY3QuIENhbiBlaXRoZXIgYmUgXCJub25lXCIsIFwiMnhcIiBvciBcIjR4XCIuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuRGlzdG9ydGlvbiNcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBuYW1lIG92ZXJzYW1wbGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkRpc3RvcnRpb24ucHJvdG90eXBlLCAnb3ZlcnNhbXBsZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NoYXBlci5vdmVyc2FtcGxlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAob3ZlcnNhbXBsaW5nKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3NoYXBlci5vdmVyc2FtcGxlID0gb3ZlcnNhbXBsaW5nO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLiBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuRGlzdG9ydGlvbn0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5EaXN0b3J0aW9uLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fc2hhcGVyLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9zaGFwZXIgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkRpc3RvcnRpb247XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogXHRAY2xhc3MgIFRvbmUuRmVlZGJhY2tFZmZlY3QgcHJvdmlkZXMgYSBsb29wIGJldHdlZW4gYW4gXG5cdFx0ICogXHQgICAgICAgIGF1ZGlvIHNvdXJjZSBhbmQgaXRzIG93biBvdXRwdXQuIFRoaXMgaXMgYSBiYXNlLWNsYXNzXG5cdFx0ICogXHQgICAgICAgIGZvciBmZWVkYmFjayBlZmZlY3RzLiBcblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuRWZmZWN0fVxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlfE9iamVjdH0gW2ZlZWRiYWNrXSBUaGUgaW5pdGlhbCBmZWVkYmFjayB2YWx1ZS5cblx0XHQgKi9cblx0ICAgIFRvbmUuRmVlZGJhY2tFZmZlY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWydmZWVkYmFjayddLCBUb25lLkZlZWRiYWNrRWZmZWN0KTtcblx0ICAgICAgICBUb25lLkVmZmVjdC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBnYWluIHdoaWNoIGNvbnRyb2xzIHRoZSBmZWVkYmFja1xuXHRcdFx0ICogIEB0eXBlIHtUb25lLkdhaW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2ZlZWRiYWNrR2FpbiA9IG5ldyBUb25lLkdhaW4ob3B0aW9ucy5mZWVkYmFjaywgVG9uZS5UeXBlLk5vcm1hbFJhbmdlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW1vdW50IG9mIHNpZ25hbCB3aGljaCBpcyBmZWQgYmFjayBpbnRvIHRoZSBlZmZlY3QgaW5wdXQuIFxuXHRcdFx0ICogIEB0eXBlIHtOb3JtYWxSYW5nZX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZlZWRiYWNrID0gdGhpcy5fZmVlZGJhY2tHYWluLmdhaW47XG5cdCAgICAgICAgLy90aGUgZmVlZGJhY2sgbG9vcFxuXHQgICAgICAgIHRoaXMuZWZmZWN0UmV0dXJuLmNoYWluKHRoaXMuX2ZlZWRiYWNrR2FpbiwgdGhpcy5lZmZlY3RTZW5kKTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbJ2ZlZWRiYWNrJ10pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuRmVlZGJhY2tFZmZlY3QsIFRvbmUuRWZmZWN0KTtcblx0ICAgIC8qKlxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLkZlZWRiYWNrRWZmZWN0LmRlZmF1bHRzID0geyAnZmVlZGJhY2snOiAwLjEyNSB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLiBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuRmVlZGJhY2tFZmZlY3R9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRmVlZGJhY2tFZmZlY3QucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5FZmZlY3QucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbJ2ZlZWRiYWNrJ10pO1xuXHQgICAgICAgIHRoaXMuX2ZlZWRiYWNrR2Fpbi5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZmVlZGJhY2tHYWluID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmZlZWRiYWNrID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5GZWVkYmFja0VmZmVjdDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBUb25lLkZlZWRiYWNrRGVsYXkgaXMgYSBEZWxheU5vZGUgaW4gd2hpY2ggcGFydCBvZiBvdXRwdXRcblx0XHQgKiAgICAgICAgICBzaWduYWwgaXMgZmVkIGJhY2sgaW50byB0aGUgZGVsYXkuXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkZlZWRiYWNrRWZmZWN0fVxuXHRcdCAqICBAcGFyYW0ge1RpbWV8T2JqZWN0fSBbZGVsYXlUaW1lXSBUaGUgZGVsYXkgYXBwbGllZCB0byB0aGUgaW5jb21pbmcgc2lnbmFsLlxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlPX0gZmVlZGJhY2sgVGhlIGFtb3VudCBvZiB0aGUgZWZmZWN0ZWQgc2lnbmFsIHdoaWNoXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgZmVkIGJhY2sgdGhyb3VnaCB0aGUgZGVsYXkuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIGZlZWRiYWNrRGVsYXkgPSBuZXcgVG9uZS5GZWVkYmFja0RlbGF5KFwiOG5cIiwgMC41KS50b01hc3RlcigpO1xuXHRcdCAqIHZhciB0b20gPSBuZXcgVG9uZS5EcnVtU3ludGgoe1xuXHRcdCAqIFx0XCJvY3RhdmVzXCIgOiA0LFxuXHRcdCAqIFx0XCJwaXRjaERlY2F5XCIgOiAwLjFcblx0XHQgKiB9KS5jb25uZWN0KGZlZWRiYWNrRGVsYXkpO1xuXHRcdCAqIHRvbS50cmlnZ2VyQXR0YWNrUmVsZWFzZShcIkEyXCIsXCIzMm5cIik7XG5cdFx0ICovXG5cdCAgICBUb25lLkZlZWRiYWNrRGVsYXkgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnZGVsYXlUaW1lJyxcblx0ICAgICAgICAgICAgJ2ZlZWRiYWNrJ1xuXHQgICAgICAgIF0sIFRvbmUuRmVlZGJhY2tEZWxheSk7XG5cdCAgICAgICAgVG9uZS5GZWVkYmFja0VmZmVjdC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBkZWxheSBub2RlXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuRGVsYXl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2RlbGF5Tm9kZSA9IG5ldyBUb25lLkRlbGF5KG9wdGlvbnMuZGVsYXlUaW1lLCBvcHRpb25zLm1heERlbGF5KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZGVsYXlUaW1lIG9mIHRoZSBEZWxheU5vZGUuXG5cdFx0XHQgKiAgQHR5cGUge1RpbWV9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5kZWxheVRpbWUgPSB0aGlzLl9kZWxheU5vZGUuZGVsYXlUaW1lO1xuXHQgICAgICAgIC8vIGNvbm5lY3QgaXQgdXBcblx0ICAgICAgICB0aGlzLmNvbm5lY3RFZmZlY3QodGhpcy5fZGVsYXlOb2RlKTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbJ2RlbGF5VGltZSddKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkZlZWRiYWNrRGVsYXksIFRvbmUuRmVlZGJhY2tFZmZlY3QpO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBkZWZhdWx0IHZhbHVlcy5cblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuRmVlZGJhY2tEZWxheS5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnZGVsYXlUaW1lJzogMC4yNSxcblx0ICAgICAgICAnbWF4RGVsYXknOiAxXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIGNsZWFuIHVwXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkZlZWRiYWNrRGVsYXl9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRmVlZGJhY2tEZWxheS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkZlZWRiYWNrRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fZGVsYXlOb2RlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9kZWxheU5vZGUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFsnZGVsYXlUaW1lJ10pO1xuXHQgICAgICAgIHRoaXMuZGVsYXlUaW1lID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5GZWVkYmFja0RlbGF5O1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBhbiBhcnJheSBvZiBjb21iIGZpbHRlciBkZWxheSB2YWx1ZXMgZnJvbSBGcmVldmVyYiBpbXBsZW1lbnRhdGlvblxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICogIEB0eXBlIHtBcnJheX1cblx0XHQgKi9cblx0ICAgIHZhciBjb21iRmlsdGVyVHVuaW5ncyA9IFtcblx0ICAgICAgICAxNTU3IC8gNDQxMDAsXG5cdCAgICAgICAgMTYxNyAvIDQ0MTAwLFxuXHQgICAgICAgIDE0OTEgLyA0NDEwMCxcblx0ICAgICAgICAxNDIyIC8gNDQxMDAsXG5cdCAgICAgICAgMTI3NyAvIDQ0MTAwLFxuXHQgICAgICAgIDEzNTYgLyA0NDEwMCxcblx0ICAgICAgICAxMTg4IC8gNDQxMDAsXG5cdCAgICAgICAgMTExNiAvIDQ0MTAwXG5cdCAgICBdO1xuXHQgICAgLyoqXG5cdFx0ICogIGFuIGFycmF5IG9mIGFsbHBhc3MgZmlsdGVyIGZyZXF1ZW5jeSB2YWx1ZXMgZnJvbSBGcmVldmVyYiBpbXBsZW1lbnRhdGlvblxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtBcnJheX1cblx0XHQgKi9cblx0ICAgIHZhciBhbGxwYXNzRmlsdGVyRnJlcXVlbmNpZXMgPSBbXG5cdCAgICAgICAgMjI1LFxuXHQgICAgICAgIDU1Nixcblx0ICAgICAgICA0NDEsXG5cdCAgICAgICAgMzQxXG5cdCAgICBdO1xuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLkZyZWV2ZXJiIGlzIGEgcmV2ZXJiIGJhc2VkIG9uIFtGcmVldmVyYl0oaHR0cHM6Ly9jY3JtYS5zdGFuZm9yZC5lZHUvfmpvcy9wYXNwL0ZyZWV2ZXJiLmh0bWwpLlxuXHRcdCAqICAgICAgICAgUmVhZCBtb3JlIG9uIHJldmVyYiBvbiBbU291bmQgT24gU291bmRdKGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE2MDQwNDA4MzkwMi9odHRwOi8vd3d3LnNvdW5kb25zb3VuZC5jb206ODAvc29zL2ZlYjAxL2FydGljbGVzL3N5bnRoc2VjcmV0cy5hc3ApLlxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkVmZmVjdH1cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBwYXJhbSB7Tm9ybWFsUmFuZ2V8T2JqZWN0fSBbcm9vbVNpemVdIENvcnJlbGF0ZWQgdG8gdGhlIGRlY2F5IHRpbWUuXG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fSBbZGFtcGVuaW5nXSBUaGUgY3V0b2ZmIGZyZXF1ZW5jeSBvZiBhIGxvd3Bhc3MgZmlsdGVyIGFzIHBhcnRcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSByZXZlcmIuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIGZyZWV2ZXJiID0gbmV3IFRvbmUuRnJlZXZlcmIoKS50b01hc3RlcigpO1xuXHRcdCAqIGZyZWV2ZXJiLmRhbXBlbmluZy52YWx1ZSA9IDEwMDA7XG5cdFx0ICogLy9yb3V0aW5nIHN5bnRoIHRocm91Z2ggdGhlIHJldmVyYlxuXHRcdCAqIHZhciBzeW50aCA9IG5ldyBUb25lLkFNU3ludGgoKS5jb25uZWN0KGZyZWV2ZXJiKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuRnJlZXZlcmIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAncm9vbVNpemUnLFxuXHQgICAgICAgICAgICAnZGFtcGVuaW5nJ1xuXHQgICAgICAgIF0sIFRvbmUuRnJlZXZlcmIpO1xuXHQgICAgICAgIFRvbmUuU3RlcmVvRWZmZWN0LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHJvb21TaXplIHZhbHVlIGJldHdlZW4uIEEgbGFyZ2VyIHJvb21TaXplXG5cdFx0XHQgKiAgd2lsbCByZXN1bHQgaW4gYSBsb25nZXIgZGVjYXkuXG5cdFx0XHQgKiAgQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMucm9vbVNpemUgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5yb29tU2l6ZSwgVG9uZS5UeXBlLk5vcm1hbFJhbmdlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW1vdW50IG9mIGRhbXBlbmluZyBvZiB0aGUgcmV2ZXJiZXJhbnQgc2lnbmFsLlxuXHRcdFx0ICogIEB0eXBlIHtGcmVxdWVuY3l9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5kYW1wZW5pbmcgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5kYW1wZW5pbmcsIFRvbmUuVHlwZS5GcmVxdWVuY3kpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBjb21iIGZpbHRlcnNcblx0XHRcdCAqICBAdHlwZSB7QXJyYXl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2NvbWJGaWx0ZXJzID0gW107XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGFsbHBhc3MgZmlsdGVycyBvbiB0aGUgbGVmdFxuXHRcdFx0ICogIEB0eXBlIHtBcnJheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYWxscGFzc0ZpbHRlcnNMID0gW107XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGFsbHBhc3MgZmlsdGVycyBvbiB0aGUgcmlnaHRcblx0XHRcdCAqICBAdHlwZSB7QXJyYXl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2FsbHBhc3NGaWx0ZXJzUiA9IFtdO1xuXHQgICAgICAgIC8vbWFrZSB0aGUgYWxscGFzcyBmaWx0ZXJzIG9uIHRoZSByaWdodFxuXHQgICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgYWxscGFzc0ZpbHRlckZyZXF1ZW5jaWVzLmxlbmd0aDsgbCsrKSB7XG5cdCAgICAgICAgICAgIHZhciBhbGxwYXNzTCA9IHRoaXMuY29udGV4dC5jcmVhdGVCaXF1YWRGaWx0ZXIoKTtcblx0ICAgICAgICAgICAgYWxscGFzc0wudHlwZSA9ICdhbGxwYXNzJztcblx0ICAgICAgICAgICAgYWxscGFzc0wuZnJlcXVlbmN5LnZhbHVlID0gYWxscGFzc0ZpbHRlckZyZXF1ZW5jaWVzW2xdO1xuXHQgICAgICAgICAgICB0aGlzLl9hbGxwYXNzRmlsdGVyc0wucHVzaChhbGxwYXNzTCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vbWFrZSB0aGUgYWxscGFzcyBmaWx0ZXJzIG9uIHRoZSBsZWZ0XG5cdCAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCBhbGxwYXNzRmlsdGVyRnJlcXVlbmNpZXMubGVuZ3RoOyByKyspIHtcblx0ICAgICAgICAgICAgdmFyIGFsbHBhc3NSID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJpcXVhZEZpbHRlcigpO1xuXHQgICAgICAgICAgICBhbGxwYXNzUi50eXBlID0gJ2FsbHBhc3MnO1xuXHQgICAgICAgICAgICBhbGxwYXNzUi5mcmVxdWVuY3kudmFsdWUgPSBhbGxwYXNzRmlsdGVyRnJlcXVlbmNpZXNbcl07XG5cdCAgICAgICAgICAgIHRoaXMuX2FsbHBhc3NGaWx0ZXJzUi5wdXNoKGFsbHBhc3NSKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9tYWtlIHRoZSBjb21iIGZpbHRlcnNcblx0ICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGNvbWJGaWx0ZXJUdW5pbmdzLmxlbmd0aDsgYysrKSB7XG5cdCAgICAgICAgICAgIHZhciBsZnBmID0gbmV3IFRvbmUuTG93cGFzc0NvbWJGaWx0ZXIoY29tYkZpbHRlclR1bmluZ3NbY10pO1xuXHQgICAgICAgICAgICBpZiAoYyA8IGNvbWJGaWx0ZXJUdW5pbmdzLmxlbmd0aCAvIDIpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZWZmZWN0U2VuZEwuY2hhaW4obGZwZiwgdGhpcy5fYWxscGFzc0ZpbHRlcnNMWzBdKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZWZmZWN0U2VuZFIuY2hhaW4obGZwZiwgdGhpcy5fYWxscGFzc0ZpbHRlcnNSWzBdKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnJvb21TaXplLmNvbm5lY3QobGZwZi5yZXNvbmFuY2UpO1xuXHQgICAgICAgICAgICB0aGlzLmRhbXBlbmluZy5jb25uZWN0KGxmcGYuZGFtcGVuaW5nKTtcblx0ICAgICAgICAgICAgdGhpcy5fY29tYkZpbHRlcnMucHVzaChsZnBmKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9jaGFpbiB0aGUgYWxscGFzcyBmaWx0ZXJzIHRvZ2V0ZWhyXG5cdCAgICAgICAgVG9uZS5jb25uZWN0U2VyaWVzLmFwcGx5KFRvbmUsIHRoaXMuX2FsbHBhc3NGaWx0ZXJzTCk7XG5cdCAgICAgICAgVG9uZS5jb25uZWN0U2VyaWVzLmFwcGx5KFRvbmUsIHRoaXMuX2FsbHBhc3NGaWx0ZXJzUik7XG5cdCAgICAgICAgdGhpcy5fYWxscGFzc0ZpbHRlcnNMW3RoaXMuX2FsbHBhc3NGaWx0ZXJzTC5sZW5ndGggLSAxXS5jb25uZWN0KHRoaXMuZWZmZWN0UmV0dXJuTCk7XG5cdCAgICAgICAgdGhpcy5fYWxscGFzc0ZpbHRlcnNSW3RoaXMuX2FsbHBhc3NGaWx0ZXJzUi5sZW5ndGggLSAxXS5jb25uZWN0KHRoaXMuZWZmZWN0UmV0dXJuUik7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAncm9vbVNpemUnLFxuXHQgICAgICAgICAgICAnZGFtcGVuaW5nJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuRnJlZXZlcmIsIFRvbmUuU3RlcmVvRWZmZWN0KTtcblx0ICAgIC8qKlxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLkZyZWV2ZXJiLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdyb29tU2l6ZSc6IDAuNyxcblx0ICAgICAgICAnZGFtcGVuaW5nJzogMzAwMFxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuRnJlZXZlcmJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRnJlZXZlcmIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TdGVyZW9FZmZlY3QucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICBmb3IgKHZhciBhbCA9IDA7IGFsIDwgdGhpcy5fYWxscGFzc0ZpbHRlcnNMLmxlbmd0aDsgYWwrKykge1xuXHQgICAgICAgICAgICB0aGlzLl9hbGxwYXNzRmlsdGVyc0xbYWxdLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICAgICAgdGhpcy5fYWxscGFzc0ZpbHRlcnNMW2FsXSA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuX2FsbHBhc3NGaWx0ZXJzTCA9IG51bGw7XG5cdCAgICAgICAgZm9yICh2YXIgYXIgPSAwOyBhciA8IHRoaXMuX2FsbHBhc3NGaWx0ZXJzUi5sZW5ndGg7IGFyKyspIHtcblx0ICAgICAgICAgICAgdGhpcy5fYWxscGFzc0ZpbHRlcnNSW2FyXS5kaXNjb25uZWN0KCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2FsbHBhc3NGaWx0ZXJzUlthcl0gPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9hbGxwYXNzRmlsdGVyc1IgPSBudWxsO1xuXHQgICAgICAgIGZvciAodmFyIGNmID0gMDsgY2YgPCB0aGlzLl9jb21iRmlsdGVycy5sZW5ndGg7IGNmKyspIHtcblx0ICAgICAgICAgICAgdGhpcy5fY29tYkZpbHRlcnNbY2ZdLmRpc3Bvc2UoKTtcblx0ICAgICAgICAgICAgdGhpcy5fY29tYkZpbHRlcnNbY2ZdID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fY29tYkZpbHRlcnMgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFtcblx0ICAgICAgICAgICAgJ3Jvb21TaXplJyxcblx0ICAgICAgICAgICAgJ2RhbXBlbmluZydcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLnJvb21TaXplLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLnJvb21TaXplID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmRhbXBlbmluZy5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5kYW1wZW5pbmcgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkZyZWV2ZXJiO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBhbiBhcnJheSBvZiB0aGUgY29tYiBmaWx0ZXIgZGVsYXkgdGltZSB2YWx1ZXNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAdHlwZSB7QXJyYXl9XG5cdFx0ICovXG5cdCAgICB2YXIgY29tYkZpbHRlckRlbGF5VGltZXMgPSBbXG5cdCAgICAgICAgMTY4NyAvIDI1MDAwLFxuXHQgICAgICAgIDE2MDEgLyAyNTAwMCxcblx0ICAgICAgICAyMDUzIC8gMjUwMDAsXG5cdCAgICAgICAgMjI1MSAvIDI1MDAwXG5cdCAgICBdO1xuXHQgICAgLyoqXG5cdFx0ICogIHRoZSByZXNvbmFuY2VzIG9mIGVhY2ggb2YgdGhlIGNvbWIgZmlsdGVyc1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtBcnJheX1cblx0XHQgKi9cblx0ICAgIHZhciBjb21iRmlsdGVyUmVzb25hbmNlcyA9IFtcblx0ICAgICAgICAwLjc3Myxcblx0ICAgICAgICAwLjgwMixcblx0ICAgICAgICAwLjc1Myxcblx0ICAgICAgICAwLjczM1xuXHQgICAgXTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgYWxscGFzcyBmaWx0ZXIgZnJlcXVlbmNpZXNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAdHlwZSB7QXJyYXl9XG5cdFx0ICovXG5cdCAgICB2YXIgYWxscGFzc0ZpbHRlckZyZXFzID0gW1xuXHQgICAgICAgIDM0Nyxcblx0ICAgICAgICAxMTMsXG5cdCAgICAgICAgMzdcblx0ICAgIF07XG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuSkNSZXZlcmIgaXMgYSBzaW1wbGUgW1NjaHJvZWRlciBSZXZlcmJlcmF0b3JdKGh0dHBzOi8vY2NybWEuc3RhbmZvcmQuZWR1L35qb3MvcGFzcC9TY2hyb2VkZXJfUmV2ZXJiZXJhdG9ycy5odG1sKVxuXHRcdCAqICAgICAgICAgdHVuZWQgYnkgSm9obiBDaG93bmluZyBpbiAxOTcwLlxuXHRcdCAqICAgICAgICAgSXQgaXMgbWFkZSB1cCBvZiB0aHJlZSBhbGxwYXNzIGZpbHRlcnMgYW5kIGZvdXIgVG9uZS5GZWVkYmFja0NvbWJGaWx0ZXIuXG5cdFx0ICpcblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5FZmZlY3R9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlfE9iamVjdH0gW3Jvb21TaXplXSBDb29yZWxhdGVzIHRvIHRoZSBkZWNheSB0aW1lLlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciByZXZlcmIgPSBuZXcgVG9uZS5KQ1JldmVyYigwLjQpLmNvbm5lY3QoVG9uZS5NYXN0ZXIpO1xuXHRcdCAqIHZhciBkZWxheSA9IG5ldyBUb25lLkZlZWRiYWNrRGVsYXkoMC41KTtcblx0XHQgKiAvL2Nvbm5lY3RpbmcgdGhlIHN5bnRoIHRvIHJldmVyYiB0aHJvdWdoIGRlbGF5XG5cdFx0ICogdmFyIHN5bnRoID0gbmV3IFRvbmUuRHVvU3ludGgoKS5jaGFpbihkZWxheSwgcmV2ZXJiKTtcblx0XHQgKiBzeW50aC50cmlnZ2VyQXR0YWNrUmVsZWFzZShcIkE0XCIsXCI4blwiKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuSkNSZXZlcmIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWydyb29tU2l6ZSddLCBUb25lLkpDUmV2ZXJiKTtcblx0ICAgICAgICBUb25lLlN0ZXJlb0VmZmVjdC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHJvb20gc2l6ZSBjb250cm9sIHZhbHVlcyBiZXR3ZWVuIFswLDFdXG5cdFx0XHQgKiAgQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMucm9vbVNpemUgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5yb29tU2l6ZSwgVG9uZS5UeXBlLk5vcm1hbFJhbmdlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBzY2FsZSB0aGUgcm9vbSBzaXplXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuU2NhbGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3NjYWxlUm9vbVNpemUgPSBuZXcgVG9uZS5TY2FsZSgtMC43MzMsIDAuMTk3KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBhIHNlcmllcyBvZiBhbGxwYXNzIGZpbHRlcnNcblx0XHRcdCAqICBAdHlwZSB7QXJyYXl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2FsbHBhc3NGaWx0ZXJzID0gW107XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgcGFyYWxsZWwgZmVlZGJhY2sgY29tYiBmaWx0ZXJzXG5cdFx0XHQgKiAgQHR5cGUge0FycmF5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9mZWVkYmFja0NvbWJGaWx0ZXJzID0gW107XG5cdCAgICAgICAgLy9tYWtlIHRoZSBhbGxwYXNzIGZpbHRlcnNcblx0ICAgICAgICBmb3IgKHZhciBhZiA9IDA7IGFmIDwgYWxscGFzc0ZpbHRlckZyZXFzLmxlbmd0aDsgYWYrKykge1xuXHQgICAgICAgICAgICB2YXIgYWxscGFzcyA9IHRoaXMuY29udGV4dC5jcmVhdGVCaXF1YWRGaWx0ZXIoKTtcblx0ICAgICAgICAgICAgYWxscGFzcy50eXBlID0gJ2FsbHBhc3MnO1xuXHQgICAgICAgICAgICBhbGxwYXNzLmZyZXF1ZW5jeS52YWx1ZSA9IGFsbHBhc3NGaWx0ZXJGcmVxc1thZl07XG5cdCAgICAgICAgICAgIHRoaXMuX2FsbHBhc3NGaWx0ZXJzLnB1c2goYWxscGFzcyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vYW5kIHRoZSBjb21iIGZpbHRlcnNcblx0ICAgICAgICBmb3IgKHZhciBjZiA9IDA7IGNmIDwgY29tYkZpbHRlckRlbGF5VGltZXMubGVuZ3RoOyBjZisrKSB7XG5cdCAgICAgICAgICAgIHZhciBmYmNmID0gbmV3IFRvbmUuRmVlZGJhY2tDb21iRmlsdGVyKGNvbWJGaWx0ZXJEZWxheVRpbWVzW2NmXSwgMC4xKTtcblx0ICAgICAgICAgICAgdGhpcy5fc2NhbGVSb29tU2l6ZS5jb25uZWN0KGZiY2YucmVzb25hbmNlKTtcblx0ICAgICAgICAgICAgZmJjZi5yZXNvbmFuY2UudmFsdWUgPSBjb21iRmlsdGVyUmVzb25hbmNlc1tjZl07XG5cdCAgICAgICAgICAgIHRoaXMuX2FsbHBhc3NGaWx0ZXJzW3RoaXMuX2FsbHBhc3NGaWx0ZXJzLmxlbmd0aCAtIDFdLmNvbm5lY3QoZmJjZik7XG5cdCAgICAgICAgICAgIGlmIChjZiA8IGNvbWJGaWx0ZXJEZWxheVRpbWVzLmxlbmd0aCAvIDIpIHtcblx0ICAgICAgICAgICAgICAgIGZiY2YuY29ubmVjdCh0aGlzLmVmZmVjdFJldHVybkwpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgZmJjZi5jb25uZWN0KHRoaXMuZWZmZWN0UmV0dXJuUik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5fZmVlZGJhY2tDb21iRmlsdGVycy5wdXNoKGZiY2YpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvL2NoYWluIHRoZSBhbGxwYXNzIGZpbHRlcnMgdG9nZXRoZXJcblx0ICAgICAgICB0aGlzLnJvb21TaXplLmNvbm5lY3QodGhpcy5fc2NhbGVSb29tU2l6ZSk7XG5cdCAgICAgICAgVG9uZS5jb25uZWN0U2VyaWVzLmFwcGx5KFRvbmUsIHRoaXMuX2FsbHBhc3NGaWx0ZXJzKTtcblx0ICAgICAgICB0aGlzLmVmZmVjdFNlbmRMLmNvbm5lY3QodGhpcy5fYWxscGFzc0ZpbHRlcnNbMF0pO1xuXHQgICAgICAgIHRoaXMuZWZmZWN0U2VuZFIuY29ubmVjdCh0aGlzLl9hbGxwYXNzRmlsdGVyc1swXSk7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoWydyb29tU2l6ZSddKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkpDUmV2ZXJiLCBUb25lLlN0ZXJlb0VmZmVjdCk7XG5cdCAgICAvKipcblx0XHQgKiAgdGhlIGRlZmF1bHQgdmFsdWVzXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLkpDUmV2ZXJiLmRlZmF1bHRzID0geyAncm9vbVNpemUnOiAwLjUgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuSkNSZXZlcmJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuSkNSZXZlcmIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TdGVyZW9FZmZlY3QucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICBmb3IgKHZhciBhcGYgPSAwOyBhcGYgPCB0aGlzLl9hbGxwYXNzRmlsdGVycy5sZW5ndGg7IGFwZisrKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2FsbHBhc3NGaWx0ZXJzW2FwZl0uZGlzY29ubmVjdCgpO1xuXHQgICAgICAgICAgICB0aGlzLl9hbGxwYXNzRmlsdGVyc1thcGZdID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fYWxscGFzc0ZpbHRlcnMgPSBudWxsO1xuXHQgICAgICAgIGZvciAodmFyIGZiY2YgPSAwOyBmYmNmIDwgdGhpcy5fZmVlZGJhY2tDb21iRmlsdGVycy5sZW5ndGg7IGZiY2YrKykge1xuXHQgICAgICAgICAgICB0aGlzLl9mZWVkYmFja0NvbWJGaWx0ZXJzW2ZiY2ZdLmRpc3Bvc2UoKTtcblx0ICAgICAgICAgICAgdGhpcy5fZmVlZGJhY2tDb21iRmlsdGVyc1tmYmNmXSA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuX2ZlZWRiYWNrQ29tYkZpbHRlcnMgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFsncm9vbVNpemUnXSk7XG5cdCAgICAgICAgdGhpcy5yb29tU2l6ZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5yb29tU2l6ZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fc2NhbGVSb29tU2l6ZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fc2NhbGVSb29tU2l6ZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuSkNSZXZlcmI7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBNaWQvU2lkZSBwcm9jZXNzaW5nIHNlcGFyYXRlcyB0aGUgdGhlICdtaWQnIHNpZ25hbFxuXHRcdCAqICAgICAgICAgKHdoaWNoIGNvbWVzIG91dCBvZiBib3RoIHRoZSBsZWZ0IGFuZCB0aGUgcmlnaHQgY2hhbm5lbClcblx0XHQgKiAgICAgICAgIGFuZCB0aGUgJ3NpZGUnICh3aGljaCBvbmx5IGNvbWVzIG91dCBvZiB0aGUgdGhlIHNpZGUgY2hhbm5lbHMpXG5cdFx0ICogICAgICAgICBhbmQgZWZmZWN0cyB0aGVtIHNlcGFyYXRlbHkgYmVmb3JlIGJlaW5nIHJlY29tYmluZWQuXG5cdFx0ICogICAgICAgICBBcHBsaWVzIGEgTWlkL1NpZGUgc2VwZXJhdGlvbiBhbmQgcmVjb21iaW5hdGlvbi5cblx0XHQgKiAgICAgICAgIEFsZ29yaXRobSBmb3VuZCBpbiBba3ZyYXVkaW8gZm9ydW1zXShodHRwOi8vd3d3Lmt2cmF1ZGlvLmNvbS9mb3J1bS92aWV3dG9waWMucGhwP3Q9MjEyNTg3KS5cblx0XHQgKiAgICAgICAgIDxicj48YnI+XG5cdFx0ICogICAgICAgICBUaGlzIGlzIGEgYmFzZS1jbGFzcyBmb3IgTWlkL1NpZGUgRWZmZWN0cy5cblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5FZmZlY3R9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHQgICAgVG9uZS5NaWRTaWRlRWZmZWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuRWZmZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG1pZC9zaWRlIHNwbGl0XG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLk1pZFNpZGVTcGxpdH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbWlkU2lkZVNwbGl0ID0gbmV3IFRvbmUuTWlkU2lkZVNwbGl0KCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG1pZC9zaWRlIG1lcmdlXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLk1pZFNpZGVNZXJnZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbWlkU2lkZU1lcmdlID0gbmV3IFRvbmUuTWlkU2lkZU1lcmdlKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG1pZCBzZW5kLiBDb25uZWN0IHRvIG1pZCBwcm9jZXNzaW5nXG5cdFx0XHQgKiAgQHR5cGUge1RvbmV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMubWlkU2VuZCA9IHRoaXMuX21pZFNpZGVTcGxpdC5taWQ7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHNpZGUgc2VuZC4gQ29ubmVjdCB0byBzaWRlIHByb2Nlc3Npbmdcblx0XHRcdCAqICBAdHlwZSB7VG9uZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5zaWRlU2VuZCA9IHRoaXMuX21pZFNpZGVTcGxpdC5zaWRlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBtaWQgcmV0dXJuIGNvbm5lY3Rpb25cblx0XHRcdCAqICBAdHlwZSB7R2Fpbk5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMubWlkUmV0dXJuID0gdGhpcy5fbWlkU2lkZU1lcmdlLm1pZDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgc2lkZSByZXR1cm4gY29ubmVjdGlvblxuXHRcdFx0ICogIEB0eXBlIHtHYWluTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5zaWRlUmV0dXJuID0gdGhpcy5fbWlkU2lkZU1lcmdlLnNpZGU7XG5cdCAgICAgICAgLy90aGUgY29ubmVjdGlvbnNcblx0ICAgICAgICB0aGlzLmVmZmVjdFNlbmQuY29ubmVjdCh0aGlzLl9taWRTaWRlU3BsaXQpO1xuXHQgICAgICAgIHRoaXMuX21pZFNpZGVNZXJnZS5jb25uZWN0KHRoaXMuZWZmZWN0UmV0dXJuKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLk1pZFNpZGVFZmZlY3QsIFRvbmUuRWZmZWN0KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuTWlkU2lkZUVmZmVjdH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NaWRTaWRlRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fbWlkU2lkZVNwbGl0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9taWRTaWRlU3BsaXQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX21pZFNpZGVNZXJnZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbWlkU2lkZU1lcmdlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLm1pZFNlbmQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuc2lkZVNlbmQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMubWlkUmV0dXJuID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnNpZGVSZXR1cm4gPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLk1pZFNpZGVFZmZlY3Q7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLlBoYXNlciBpcyBhIHBoYXNlciBlZmZlY3QuIFBoYXNlcnMgd29yayBieSBjaGFuZ2luZyB0aGUgcGhhc2Vcblx0XHQgKiAgICAgICAgIG9mIGRpZmZlcmVudCBmcmVxdWVuY3kgY29tcG9uZW50cyBvZiBhbiBpbmNvbWluZyBzaWduYWwuIFJlYWQgbW9yZSBvblxuXHRcdCAqICAgICAgICAgW1dpa2lwZWRpYV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGhhc2VyXyhlZmZlY3QpKS5cblx0XHQgKiAgICAgICAgIEluc3BpcmF0aW9uIGZvciB0aGlzIHBoYXNlciBjb21lcyBmcm9tIFtUdW5hLmpzXShodHRwczovL2dpdGh1Yi5jb20vRGluYWhtb2UvdHVuYS8pLlxuXHRcdCAqXG5cdFx0ICpcdEBleHRlbmRzIHtUb25lLlN0ZXJlb0VmZmVjdH1cblx0XHQgKlx0QGNvbnN0cnVjdG9yXG5cdFx0ICpcdEBwYXJhbSB7RnJlcXVlbmN5fE9iamVjdH0gW2ZyZXF1ZW5jeV0gVGhlIHNwZWVkIG9mIHRoZSBwaGFzaW5nLlxuXHRcdCAqXHRAcGFyYW0ge251bWJlcn0gW29jdGF2ZXNdIFRoZSBvY3RhdmVzIG9mIHRoZSBlZmZlY3QuXG5cdFx0ICpcdEBwYXJhbSB7RnJlcXVlbmN5fSBbYmFzZUZyZXF1ZW5jeV0gVGhlIGJhc2UgZnJlcXVlbmN5IG9mIHRoZSBmaWx0ZXJzLlxuXHRcdCAqXHRAZXhhbXBsZVxuXHRcdCAqIHZhciBwaGFzZXIgPSBuZXcgVG9uZS5QaGFzZXIoe1xuXHRcdCAqIFx0XCJmcmVxdWVuY3lcIiA6IDE1LFxuXHRcdCAqIFx0XCJvY3RhdmVzXCIgOiA1LFxuXHRcdCAqIFx0XCJiYXNlRnJlcXVlbmN5XCIgOiAxMDAwXG5cdFx0ICogfSkudG9NYXN0ZXIoKTtcblx0XHQgKiB2YXIgc3ludGggPSBuZXcgVG9uZS5GTVN5bnRoKCkuY29ubmVjdChwaGFzZXIpO1xuXHRcdCAqIHN5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKFwiRTNcIiwgXCIyblwiKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuUGhhc2VyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8vc2V0IHRoZSBkZWZhdWx0c1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdvY3RhdmVzJyxcblx0ICAgICAgICAgICAgJ2Jhc2VGcmVxdWVuY3knXG5cdCAgICAgICAgXSwgVG9uZS5QaGFzZXIpO1xuXHQgICAgICAgIFRvbmUuU3RlcmVvRWZmZWN0LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGxmbyB3aGljaCBjb250cm9scyB0aGUgZnJlcXVlbmN5IG9uIHRoZSBsZWZ0IHNpZGVcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5MRk99XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2xmb0wgPSBuZXcgVG9uZS5MRk8ob3B0aW9ucy5mcmVxdWVuY3ksIDAsIDEpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBsZm8gd2hpY2ggY29udHJvbHMgdGhlIGZyZXF1ZW5jeSBvbiB0aGUgcmlnaHQgc2lkZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkxGT31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbGZvUiA9IG5ldyBUb25lLkxGTyhvcHRpb25zLmZyZXF1ZW5jeSwgMCwgMSk7XG5cdCAgICAgICAgdGhpcy5fbGZvUi5waGFzZSA9IDE4MDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgYmFzZSBtb2R1bGF0aW9uIGZyZXF1ZW5jeVxuXHRcdFx0ICogIEB0eXBlIHtudW1iZXJ9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2Jhc2VGcmVxdWVuY3kgPSBvcHRpb25zLmJhc2VGcmVxdWVuY3k7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIG9jdGF2ZXMgb2YgdGhlIHBoYXNpbmdcblx0XHRcdCAqICBAdHlwZSB7bnVtYmVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9vY3RhdmVzID0gb3B0aW9ucy5vY3RhdmVzO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBxdWFsaXR5IGZhY3RvciBvZiB0aGUgZmlsdGVyc1xuXHRcdFx0ICogIEB0eXBlIHtQb3NpdGl2ZX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLlEgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5RLCBUb25lLlR5cGUuUG9zaXRpdmUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBhcnJheSBvZiBmaWx0ZXJzIGZvciB0aGUgbGVmdCBzaWRlXG5cdFx0XHQgKiAgQHR5cGUge0FycmF5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9maWx0ZXJzTCA9IHRoaXMuX21ha2VGaWx0ZXJzKG9wdGlvbnMuc3RhZ2VzLCB0aGlzLl9sZm9MLCB0aGlzLlEpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBhcnJheSBvZiBmaWx0ZXJzIGZvciB0aGUgbGVmdCBzaWRlXG5cdFx0XHQgKiAgQHR5cGUge0FycmF5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9maWx0ZXJzUiA9IHRoaXMuX21ha2VGaWx0ZXJzKG9wdGlvbnMuc3RhZ2VzLCB0aGlzLl9sZm9SLCB0aGlzLlEpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogdGhlIGZyZXF1ZW5jeSBvZiB0aGUgZWZmZWN0XG5cdFx0XHQgKiBAdHlwZSB7VG9uZS5TaWduYWx9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IHRoaXMuX2xmb0wuZnJlcXVlbmN5O1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LnZhbHVlID0gb3B0aW9ucy5mcmVxdWVuY3k7XG5cdCAgICAgICAgLy9jb25uZWN0IHRoZW0gdXBcblx0ICAgICAgICB0aGlzLmVmZmVjdFNlbmRMLmNvbm5lY3QodGhpcy5fZmlsdGVyc0xbMF0pO1xuXHQgICAgICAgIHRoaXMuZWZmZWN0U2VuZFIuY29ubmVjdCh0aGlzLl9maWx0ZXJzUlswXSk7XG5cdCAgICAgICAgdGhpcy5fZmlsdGVyc0xbb3B0aW9ucy5zdGFnZXMgLSAxXS5jb25uZWN0KHRoaXMuZWZmZWN0UmV0dXJuTCk7XG5cdCAgICAgICAgdGhpcy5fZmlsdGVyc1Jbb3B0aW9ucy5zdGFnZXMgLSAxXS5jb25uZWN0KHRoaXMuZWZmZWN0UmV0dXJuUik7XG5cdCAgICAgICAgLy9jb250cm9sIHRoZSBmcmVxdWVuY3kgd2l0aCBvbmUgTEZPXG5cdCAgICAgICAgdGhpcy5fbGZvTC5mcmVxdWVuY3kuY29ubmVjdCh0aGlzLl9sZm9SLmZyZXF1ZW5jeSk7XG5cdCAgICAgICAgLy9zZXQgdGhlIG9wdGlvbnNcblx0ICAgICAgICB0aGlzLmJhc2VGcmVxdWVuY3kgPSBvcHRpb25zLmJhc2VGcmVxdWVuY3k7XG5cdCAgICAgICAgdGhpcy5vY3RhdmVzID0gb3B0aW9ucy5vY3RhdmVzO1xuXHQgICAgICAgIC8vc3RhcnQgdGhlIGxmb1xuXHQgICAgICAgIHRoaXMuX2xmb0wuc3RhcnQoKTtcblx0ICAgICAgICB0aGlzLl9sZm9SLnN0YXJ0KCk7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ1EnXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5QaGFzZXIsIFRvbmUuU3RlcmVvRWZmZWN0KTtcblx0ICAgIC8qKlxuXHRcdCAqICBkZWZhdWx0c1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtvYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLlBoYXNlci5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnZnJlcXVlbmN5JzogMC41LFxuXHQgICAgICAgICdvY3RhdmVzJzogMyxcblx0ICAgICAgICAnc3RhZ2VzJzogMTAsXG5cdCAgICAgICAgJ1EnOiAxMCxcblx0ICAgICAgICAnYmFzZUZyZXF1ZW5jeSc6IDM1MFxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gc3RhZ2VzXG5cdFx0ICogIEByZXR1cm5zIHtBcnJheX0gdGhlIG51bWJlciBvZiBmaWx0ZXJzIGFsbCBjb25uZWN0ZWQgdG9nZXRoZXJcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuUGhhc2VyLnByb3RvdHlwZS5fbWFrZUZpbHRlcnMgPSBmdW5jdGlvbiAoc3RhZ2VzLCBjb25uZWN0VG9GcmVxLCBRKSB7XG5cdCAgICAgICAgdmFyIGZpbHRlcnMgPSBuZXcgQXJyYXkoc3RhZ2VzKTtcblx0ICAgICAgICAvL21ha2UgYWxsIHRoZSBmaWx0ZXJzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFnZXM7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgZmlsdGVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJpcXVhZEZpbHRlcigpO1xuXHQgICAgICAgICAgICBmaWx0ZXIudHlwZSA9ICdhbGxwYXNzJztcblx0ICAgICAgICAgICAgUS5jb25uZWN0KGZpbHRlci5RKTtcblx0ICAgICAgICAgICAgY29ubmVjdFRvRnJlcS5jb25uZWN0KGZpbHRlci5mcmVxdWVuY3kpO1xuXHQgICAgICAgICAgICBmaWx0ZXJzW2ldID0gZmlsdGVyO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBUb25lLmNvbm5lY3RTZXJpZXMuYXBwbHkoVG9uZSwgZmlsdGVycyk7XG5cdCAgICAgICAgcmV0dXJuIGZpbHRlcnM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIG51bWJlciBvZiBvY3RhdmVzIHRoZSBwaGFzZSBnb2VzIGFib3ZlXG5cdFx0ICogdGhlIGJhc2VGcmVxdWVuY3lcblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5QaGFzZXIjXG5cdFx0ICogQHR5cGUge1Bvc2l0aXZlfVxuXHRcdCAqIEBuYW1lIG9jdGF2ZXNcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBoYXNlci5wcm90b3R5cGUsICdvY3RhdmVzJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fb2N0YXZlcztcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG9jdGF2ZXMpIHtcblx0ICAgICAgICAgICAgdGhpcy5fb2N0YXZlcyA9IG9jdGF2ZXM7XG5cdCAgICAgICAgICAgIHZhciBtYXggPSB0aGlzLl9iYXNlRnJlcXVlbmN5ICogTWF0aC5wb3coMiwgb2N0YXZlcyk7XG5cdCAgICAgICAgICAgIHRoaXMuX2xmb0wubWF4ID0gbWF4O1xuXHQgICAgICAgICAgICB0aGlzLl9sZm9SLm1heCA9IG1heDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSB0aGUgYmFzZSBmcmVxdWVuY3kgb2YgdGhlIGZpbHRlcnMuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuUGhhc2VyI1xuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQG5hbWUgYmFzZUZyZXF1ZW5jeVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGhhc2VyLnByb3RvdHlwZSwgJ2Jhc2VGcmVxdWVuY3knLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYXNlRnJlcXVlbmN5O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoZnJlcSkge1xuXHQgICAgICAgICAgICB0aGlzLl9iYXNlRnJlcXVlbmN5ID0gZnJlcTtcblx0ICAgICAgICAgICAgdGhpcy5fbGZvTC5taW4gPSBmcmVxO1xuXHQgICAgICAgICAgICB0aGlzLl9sZm9SLm1pbiA9IGZyZXE7XG5cdCAgICAgICAgICAgIHRoaXMub2N0YXZlcyA9IHRoaXMuX29jdGF2ZXM7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgY2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuUGhhc2VyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBoYXNlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlN0ZXJlb0VmZmVjdC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdRJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIHRoaXMuUS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5RID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9sZm9MLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9sZm9MID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9sZm9SLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9sZm9SID0gbnVsbDtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2ZpbHRlcnNMLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2ZpbHRlcnNMW2ldLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICAgICAgdGhpcy5fZmlsdGVyc0xbaV0gPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9maWx0ZXJzTCA9IG51bGw7XG5cdCAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLl9maWx0ZXJzUi5sZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICB0aGlzLl9maWx0ZXJzUltqXS5kaXNjb25uZWN0KCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2ZpbHRlcnNSW2pdID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fZmlsdGVyc1IgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5QaGFzZXI7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBKdXN0IGxpa2UgYSBzdGVyZW8gZmVlZGJhY2sgZWZmZWN0LCBidXQgdGhlIGZlZWRiYWNrIGlzIHJvdXRlZCBmcm9tIGxlZnQgdG8gcmlnaHRcblx0XHQgKiAgICAgICAgIGFuZCByaWdodCB0byBsZWZ0IGluc3RlYWQgb2Ygb24gdGhlIHNhbWUgY2hhbm5lbC5cblx0XHQgKlxuXHRcdCAqXHRAY29uc3RydWN0b3Jcblx0XHQgKlx0QGV4dGVuZHMge1RvbmUuU3RlcmVvRWZmZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5TdGVyZW9YRmVlZGJhY2tFZmZlY3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWydmZWVkYmFjayddLCBUb25lLkZlZWRiYWNrRWZmZWN0KTtcblx0ICAgICAgICBUb25lLlN0ZXJlb0VmZmVjdC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBhbW91bnQgb2YgZmVlZGJhY2sgZnJvbSB0aGUgb3V0cHV0XG5cdFx0XHQgKiAgYmFjayBpbnRvIHRoZSBpbnB1dCBvZiB0aGUgZWZmZWN0IChyb3V0ZWRcblx0XHRcdCAqICBhY3Jvc3MgbGVmdCBhbmQgcmlnaHQgY2hhbm5lbHMpLlxuXHRcdFx0ICogIEB0eXBlIHtOb3JtYWxSYW5nZX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZlZWRiYWNrID0gbmV3IFRvbmUuU2lnbmFsKG9wdGlvbnMuZmVlZGJhY2ssIFRvbmUuVHlwZS5Ob3JtYWxSYW5nZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGxlZnQgc2lkZSBmZWViYWNrXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZmVlZGJhY2tMUiA9IG5ldyBUb25lLkdhaW4oKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgcmlnaHQgc2lkZSBmZWViYWNrXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZmVlZGJhY2tSTCA9IG5ldyBUb25lLkdhaW4oKTtcblx0ICAgICAgICAvL2Nvbm5lY3QgaXQgdXBcblx0ICAgICAgICB0aGlzLmVmZmVjdFJldHVybkwuY2hhaW4odGhpcy5fZmVlZGJhY2tMUiwgdGhpcy5lZmZlY3RTZW5kUik7XG5cdCAgICAgICAgdGhpcy5lZmZlY3RSZXR1cm5SLmNoYWluKHRoaXMuX2ZlZWRiYWNrUkwsIHRoaXMuZWZmZWN0U2VuZEwpO1xuXHQgICAgICAgIHRoaXMuZmVlZGJhY2suZmFuKHRoaXMuX2ZlZWRiYWNrTFIuZ2FpbiwgdGhpcy5fZmVlZGJhY2tSTC5nYWluKTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbJ2ZlZWRiYWNrJ10pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuU3RlcmVvWEZlZWRiYWNrRWZmZWN0LCBUb25lLlN0ZXJlb0VmZmVjdCk7XG5cdCAgICAvKipcblx0XHQgKiAgY2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuU3RlcmVvWEZlZWRiYWNrRWZmZWN0fSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlN0ZXJlb1hGZWVkYmFja0VmZmVjdC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlN0ZXJlb0VmZmVjdC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFsnZmVlZGJhY2snXSk7XG5cdCAgICAgICAgdGhpcy5mZWVkYmFjay5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5mZWVkYmFjayA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fZmVlZGJhY2tMUi5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZmVlZGJhY2tMUiA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fZmVlZGJhY2tSTC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZmVlZGJhY2tSTCA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuU3RlcmVvWEZlZWRiYWNrRWZmZWN0O1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIFRvbmUuUGluZ1BvbmdEZWxheSBpcyBhIGZlZWRiYWNrIGRlbGF5IGVmZmVjdCB3aGVyZSB0aGUgZWNobyBpcyBoZWFyZFxuXHRcdCAqICAgICAgICAgIGZpcnN0IGluIG9uZSBjaGFubmVsIGFuZCBuZXh0IGluIHRoZSBvcHBvc2l0ZSBjaGFubmVsLiBJbiBhIHN0ZXJlb1xuXHRcdCAqICAgICAgICAgIHN5c3RlbSB0aGVzZSBhcmUgdGhlIHJpZ2h0IGFuZCBsZWZ0IGNoYW5uZWxzLlxuXHRcdCAqICAgICAgICAgIFBpbmdQb25nRGVsYXkgaW4gbW9yZSBzaW1wbGlmaWVkIHRlcm1zIGlzIHR3byBUb25lLkZlZWRiYWNrRGVsYXlzXG5cdFx0ICogICAgICAgICAgd2l0aCBpbmRlcGVuZGVudCBkZWxheSB2YWx1ZXMuIEVhY2ggZGVsYXkgaXMgcm91dGVkIHRvIG9uZSBjaGFubmVsXG5cdFx0ICogICAgICAgICAgKGxlZnQgb3IgcmlnaHQpLCBhbmQgdGhlIGNoYW5uZWwgdHJpZ2dlcmVkIHNlY29uZCB3aWxsIGFsd2F5c1xuXHRcdCAqICAgICAgICAgIHRyaWdnZXIgYXQgdGhlIHNhbWUgaW50ZXJ2YWwgYWZ0ZXIgdGhlIGZpcnN0LlxuXHRcdCAqXG5cdFx0ICogXHRAY29uc3RydWN0b3Jcblx0XHQgKiBcdEBleHRlbmRzIHtUb25lLlN0ZXJlb1hGZWVkYmFja0VmZmVjdH1cblx0XHQgKiAgQHBhcmFtIHtUaW1lfE9iamVjdH0gW2RlbGF5VGltZV0gVGhlIGRlbGF5VGltZSBiZXR3ZWVuIGNvbnNlY3V0aXZlIGVjaG9zLlxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlPX0gZmVlZGJhY2sgVGhlIGFtb3VudCBvZiB0aGUgZWZmZWN0ZWQgc2lnbmFsIHdoaWNoXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBmZWQgYmFjayB0aHJvdWdoIHRoZSBkZWxheS5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgcGluZ1BvbmcgPSBuZXcgVG9uZS5QaW5nUG9uZ0RlbGF5KFwiNG5cIiwgMC4yKS50b01hc3RlcigpO1xuXHRcdCAqIHZhciBkcnVtID0gbmV3IFRvbmUuRHJ1bVN5bnRoKCkuY29ubmVjdChwaW5nUG9uZyk7XG5cdFx0ICogZHJ1bS50cmlnZ2VyQXR0YWNrUmVsZWFzZShcIkM0XCIsIFwiMzJuXCIpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QaW5nUG9uZ0RlbGF5ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2RlbGF5VGltZScsXG5cdCAgICAgICAgICAgICdmZWVkYmFjaydcblx0ICAgICAgICBdLCBUb25lLlBpbmdQb25nRGVsYXkpO1xuXHQgICAgICAgIFRvbmUuU3RlcmVvWEZlZWRiYWNrRWZmZWN0LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGRlbGF5IG5vZGUgb24gdGhlIGxlZnQgc2lkZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkRlbGF5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sZWZ0RGVsYXkgPSBuZXcgVG9uZS5EZWxheSgwLCBvcHRpb25zLm1heERlbGF5VGltZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGRlbGF5IG5vZGUgb24gdGhlIHJpZ2h0IHNpZGVcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5EZWxheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcmlnaHREZWxheSA9IG5ldyBUb25lLkRlbGF5KDAsIG9wdGlvbnMubWF4RGVsYXlUaW1lKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgcHJlZGVsYXkgb24gdGhlIHJpZ2h0IHNpZGVcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5EZWxheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcmlnaHRQcmVEZWxheSA9IG5ldyBUb25lLkRlbGF5KDAsIG9wdGlvbnMubWF4RGVsYXlUaW1lKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgZGVsYXkgdGltZSBzaWduYWxcblx0XHRcdCAqICBAdHlwZSB7VGltZX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmRlbGF5VGltZSA9IG5ldyBUb25lLlNpZ25hbChvcHRpb25zLmRlbGF5VGltZSwgVG9uZS5UeXBlLlRpbWUpO1xuXHQgICAgICAgIC8vY29ubmVjdCBpdCB1cFxuXHQgICAgICAgIHRoaXMuZWZmZWN0U2VuZEwuY2hhaW4odGhpcy5fbGVmdERlbGF5LCB0aGlzLmVmZmVjdFJldHVybkwpO1xuXHQgICAgICAgIHRoaXMuZWZmZWN0U2VuZFIuY2hhaW4odGhpcy5fcmlnaHRQcmVEZWxheSwgdGhpcy5fcmlnaHREZWxheSwgdGhpcy5lZmZlY3RSZXR1cm5SKTtcblx0ICAgICAgICB0aGlzLmRlbGF5VGltZS5mYW4odGhpcy5fbGVmdERlbGF5LmRlbGF5VGltZSwgdGhpcy5fcmlnaHREZWxheS5kZWxheVRpbWUsIHRoaXMuX3JpZ2h0UHJlRGVsYXkuZGVsYXlUaW1lKTtcblx0ICAgICAgICAvL3JlYXJyYW5nZWQgdGhlIGZlZWRiYWNrIHRvIGJlIGFmdGVyIHRoZSByaWdodFByZURlbGF5XG5cdCAgICAgICAgdGhpcy5fZmVlZGJhY2tMUi5kaXNjb25uZWN0KCk7XG5cdCAgICAgICAgdGhpcy5fZmVlZGJhY2tMUi5jb25uZWN0KHRoaXMuX3JpZ2h0RGVsYXkpO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KFsnZGVsYXlUaW1lJ10pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuUGluZ1BvbmdEZWxheSwgVG9uZS5TdGVyZW9YRmVlZGJhY2tFZmZlY3QpO1xuXHQgICAgLyoqXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuUGluZ1BvbmdEZWxheS5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnZGVsYXlUaW1lJzogMC4yNSxcblx0ICAgICAgICAnbWF4RGVsYXlUaW1lJzogMVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuUGluZ1BvbmdEZWxheX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QaW5nUG9uZ0RlbGF5LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU3RlcmVvWEZlZWRiYWNrRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fbGVmdERlbGF5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9sZWZ0RGVsYXkgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3JpZ2h0RGVsYXkuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3JpZ2h0RGVsYXkgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3JpZ2h0UHJlRGVsYXkuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3JpZ2h0UHJlRGVsYXkgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFsnZGVsYXlUaW1lJ10pO1xuXHQgICAgICAgIHRoaXMuZGVsYXlUaW1lLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmRlbGF5VGltZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuUGluZ1BvbmdEZWxheTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuUGl0Y2hTaGlmdCBkb2VzIG5lYXItcmVhbHRpbWUgcGl0Y2ggc2hpZnRpbmcgdG8gdGhlIGluY29taW5nIHNpZ25hbC5cblx0XHQgKiAgICAgICAgIFRoZSBlZmZlY3QgaXMgYWNoaWV2ZWQgYnkgc3BlZWRpbmcgdXAgb3Igc2xvd2luZyBkb3duIHRoZSBkZWxheVRpbWVcblx0XHQgKiAgICAgICAgIG9mIGEgRGVsYXlOb2RlIHVzaW5nIGEgc2F3dG9vdGggd2F2ZS5cblx0XHQgKiAgICAgICAgIEFsZ29yaXRobSBmb3VuZCBpbiBbdGhpcyBwZGZdKGh0dHA6Ly9kc3AtYm9vay5uYXJvZC5ydS9zb3VuZHByb2MucGRmKS5cblx0XHQgKiAgICAgICAgIEFkZGl0aW9uYWwgcmVmZXJlbmNlIGJ5IFtNaWxsZXIgUHVja2V0XShodHRwOi8vbXNwLnVjc2QuZWR1L3RlY2huaXF1ZXMvdjAuMTEvYm9vay1odG1sL25vZGUxMTUuaHRtbCkuXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuRmVlZGJhY2tFZmZlY3R9XG5cdFx0ICogIEBwYXJhbSB7SW50ZXJ2YWw9fSBwaXRjaCBUaGUgaW50ZXJ2YWwgdG8gdHJhbnNwb3NlIHRoZSBpbmNvbWluZyBzaWduYWwgYnkuXG5cdFx0ICovXG5cdCAgICBUb25lLlBpdGNoU2hpZnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWydwaXRjaCddLCBUb25lLlBpdGNoU2hpZnQpO1xuXHQgICAgICAgIFRvbmUuRmVlZGJhY2tFZmZlY3QuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgcGl0Y2ggc2lnbmFsXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLlNpZ25hbH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZnJlcXVlbmN5ID0gbmV3IFRvbmUuU2lnbmFsKDApO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFVzZXMgdHdvIERlbGF5Tm9kZXMgdG8gY292ZXIgdXAgdGhlIGp1bXAgaW5cblx0XHRcdCAqICB0aGUgc2F3dG9vdGggd2F2ZS5cblx0XHRcdCAqICBAdHlwZSAge0RlbGF5Tm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZGVsYXlBID0gbmV3IFRvbmUuRGVsYXkoMCwgMSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGZpcnN0IExGTy5cblx0XHRcdCAqICBAdHlwZSAge1RvbmUuTEZPfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sZm9BID0gbmV3IFRvbmUuTEZPKHtcblx0ICAgICAgICAgICAgJ21pbic6IDAsXG5cdCAgICAgICAgICAgICdtYXgnOiAwLjEsXG5cdCAgICAgICAgICAgICd0eXBlJzogJ3Nhd3Rvb3RoJ1xuXHQgICAgICAgIH0pLmNvbm5lY3QodGhpcy5fZGVsYXlBLmRlbGF5VGltZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHNlY29uZCBEZWxheU5vZGVcblx0XHRcdCAqICBAdHlwZSAge0RlbGF5Tm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZGVsYXlCID0gbmV3IFRvbmUuRGVsYXkoMCwgMSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGZpcnN0IExGTy5cblx0XHRcdCAqICBAdHlwZSAge1RvbmUuTEZPfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sZm9CID0gbmV3IFRvbmUuTEZPKHtcblx0ICAgICAgICAgICAgJ21pbic6IDAsXG5cdCAgICAgICAgICAgICdtYXgnOiAwLjEsXG5cdCAgICAgICAgICAgICd0eXBlJzogJ3Nhd3Rvb3RoJyxcblx0ICAgICAgICAgICAgJ3BoYXNlJzogMTgwXG5cdCAgICAgICAgfSkuY29ubmVjdCh0aGlzLl9kZWxheUIuZGVsYXlUaW1lKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBDcm9zc2ZhZGUgcXVpY2tseSBiZXR3ZWVuIHRoZSB0d28gZGVsYXkgbGluZXNcblx0XHRcdCAqICB0byBjb3ZlciB1cCB0aGUganVtcCBpbiB0aGUgc2F3dG9vdGggd2F2ZVxuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5Dcm9zc0ZhZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2Nyb3NzRmFkZSA9IG5ldyBUb25lLkNyb3NzRmFkZSgpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIExGTyB3aGljaCBhbHRlcm5hdGVzIGJldHdlZW4gdGhlIHR3b1xuXHRcdFx0ICogIGRlbGF5IGxpbmVzIHRvIGNvdmVyIHVwIHRoZSBkaXNwYXJpdHkgaW4gdGhlXG5cdFx0XHQgKiAgc2F3dG9vdGggd2F2ZS5cblx0XHRcdCAqICBAdHlwZSAge1RvbmUuTEZPfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9jcm9zc0ZhZGVMRk8gPSBuZXcgVG9uZS5MRk8oe1xuXHQgICAgICAgICAgICAnbWluJzogMCxcblx0ICAgICAgICAgICAgJ21heCc6IDEsXG5cdCAgICAgICAgICAgICd0eXBlJzogJ3RyaWFuZ2xlJyxcblx0ICAgICAgICAgICAgJ3BoYXNlJzogOTBcblx0ICAgICAgICB9KS5jb25uZWN0KHRoaXMuX2Nyb3NzRmFkZS5mYWRlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZGVsYXkgbm9kZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkRlbGF5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9mZWVkYmFja0RlbGF5ID0gbmV3IFRvbmUuRGVsYXkob3B0aW9ucy5kZWxheVRpbWUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBhbW91bnQgb2YgZGVsYXkgb24gdGhlIGlucHV0IHNpZ25hbFxuXHRcdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGVsYXlUaW1lID0gdGhpcy5fZmVlZGJhY2tEZWxheS5kZWxheVRpbWU7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoJ2RlbGF5VGltZScpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEhvbGQgdGhlIGN1cnJlbnQgcGl0Y2hcblx0XHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9waXRjaCA9IG9wdGlvbnMucGl0Y2g7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgSG9sZCB0aGUgY3VycmVudCB3aW5kb3dTaXplXG5cdFx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fd2luZG93U2l6ZSA9IG9wdGlvbnMud2luZG93U2l6ZTtcblx0ICAgICAgICAvL2Nvbm5lY3QgdGhlIHR3byBkZWxheSBsaW5lcyB1cFxuXHQgICAgICAgIHRoaXMuX2RlbGF5QS5jb25uZWN0KHRoaXMuX2Nyb3NzRmFkZS5hKTtcblx0ICAgICAgICB0aGlzLl9kZWxheUIuY29ubmVjdCh0aGlzLl9jcm9zc0ZhZGUuYik7XG5cdCAgICAgICAgLy9jb25uZWN0IHRoZSBmcmVxdWVuY3lcblx0ICAgICAgICB0aGlzLl9mcmVxdWVuY3kuZmFuKHRoaXMuX2xmb0EuZnJlcXVlbmN5LCB0aGlzLl9sZm9CLmZyZXF1ZW5jeSwgdGhpcy5fY3Jvc3NGYWRlTEZPLmZyZXF1ZW5jeSk7XG5cdCAgICAgICAgLy9yb3V0ZSB0aGUgaW5wdXRcblx0ICAgICAgICB0aGlzLmVmZmVjdFNlbmQuZmFuKHRoaXMuX2RlbGF5QSwgdGhpcy5fZGVsYXlCKTtcblx0ICAgICAgICB0aGlzLl9jcm9zc0ZhZGUuY2hhaW4odGhpcy5fZmVlZGJhY2tEZWxheSwgdGhpcy5lZmZlY3RSZXR1cm4pO1xuXHQgICAgICAgIC8vc3RhcnQgdGhlIExGT3MgYXQgdGhlIHNhbWUgdGltZVxuXHQgICAgICAgIHZhciBub3cgPSB0aGlzLm5vdygpO1xuXHQgICAgICAgIHRoaXMuX2xmb0Euc3RhcnQobm93KTtcblx0ICAgICAgICB0aGlzLl9sZm9CLnN0YXJ0KG5vdyk7XG5cdCAgICAgICAgdGhpcy5fY3Jvc3NGYWRlTEZPLnN0YXJ0KG5vdyk7XG5cdCAgICAgICAgLy9zZXQgdGhlIGluaXRpYWwgdmFsdWVcblx0ICAgICAgICB0aGlzLndpbmRvd1NpemUgPSB0aGlzLl93aW5kb3dTaXplO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuUGl0Y2hTaGlmdCwgVG9uZS5GZWVkYmFja0VmZmVjdCk7XG5cdCAgICAvKipcblx0XHQgKiAgZGVmYXVsdCB2YWx1ZXNcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqICBAY29uc3Rcblx0XHQgKi9cblx0ICAgIFRvbmUuUGl0Y2hTaGlmdC5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAncGl0Y2gnOiAwLFxuXHQgICAgICAgICd3aW5kb3dTaXplJzogMC4xLFxuXHQgICAgICAgICdkZWxheVRpbWUnOiAwLFxuXHQgICAgICAgICdmZWVkYmFjayc6IDBcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBSZXBpdGNoIHRoZSBpbmNvbWluZyBzaWduYWwgYnkgc29tZSBpbnRlcnZhbCAobWVhc3VyZWRcblx0XHQgKiBpbiBzZW1pLXRvbmVzKS5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5QaXRjaFNoaWZ0I1xuXHRcdCAqIEB0eXBlIHtJbnRlcnZhbH1cblx0XHQgKiBAbmFtZSBwaXRjaFxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogcGl0Y2hTaGlmdC5waXRjaCA9IC0xMjsgLy9kb3duIG9uZSBvY3RhdmVcblx0XHQgKiBwaXRjaFNoaWZ0LnBpdGNoID0gNzsgLy91cCBhIGZpZnRoXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QaXRjaFNoaWZ0LnByb3RvdHlwZSwgJ3BpdGNoJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGl0Y2g7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpbnRlcnZhbCkge1xuXHQgICAgICAgICAgICB0aGlzLl9waXRjaCA9IGludGVydmFsO1xuXHQgICAgICAgICAgICB2YXIgZmFjdG9yID0gMDtcblx0ICAgICAgICAgICAgaWYgKGludGVydmFsIDwgMCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fbGZvQS5taW4gPSAwO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fbGZvQS5tYXggPSB0aGlzLl93aW5kb3dTaXplO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fbGZvQi5taW4gPSAwO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fbGZvQi5tYXggPSB0aGlzLl93aW5kb3dTaXplO1xuXHQgICAgICAgICAgICAgICAgZmFjdG9yID0gVG9uZS5pbnRlcnZhbFRvRnJlcXVlbmN5UmF0aW8oaW50ZXJ2YWwgLSAxKSArIDE7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9sZm9BLm1pbiA9IHRoaXMuX3dpbmRvd1NpemU7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9sZm9BLm1heCA9IDA7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9sZm9CLm1pbiA9IHRoaXMuX3dpbmRvd1NpemU7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9sZm9CLm1heCA9IDA7XG5cdCAgICAgICAgICAgICAgICBmYWN0b3IgPSBUb25lLmludGVydmFsVG9GcmVxdWVuY3lSYXRpbyhpbnRlcnZhbCkgLSAxO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuX2ZyZXF1ZW5jeS52YWx1ZSA9IGZhY3RvciAqICgxLjIgLyB0aGlzLl93aW5kb3dTaXplKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSB3aW5kb3cgc2l6ZSBjb3JyZXNwb25kcyByb3VnaGx5IHRvIHRoZSBzYW1wbGUgbGVuZ3RoIGluIGEgbG9vcGluZyBzYW1wbGVyLlxuXHRcdCAqIFNtYWxsZXIgdmFsdWVzIGFyZSBkZXNpcmFibGUgZm9yIGEgbGVzcyBub3RpY2VhYmxlIGRlbGF5IHRpbWUgb2YgdGhlIHBpdGNoIHNoaWZ0ZWRcblx0XHQgKiBzaWduYWwsIGJ1dCBsYXJnZXIgdmFsdWVzIHdpbGwgcmVzdWx0IGluIHNtb290aGVyIHBpdGNoIHNoaWZ0aW5nIGZvciBsYXJnZXIgaW50ZXJ2YWxzLlxuXHRcdCAqIEEgbm9taW5hbCByYW5nZSBvZiAwLjAzIHRvIDAuMSBpcyByZWNvbW1lbmRlZC5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5QaXRjaFNoaWZ0I1xuXHRcdCAqIEB0eXBlIHtUaW1lfVxuXHRcdCAqIEBuYW1lIHdpbmRvd1NpemVcblx0XHQgKiBAZXhhbXBsZVxuXHRcdCAqIHBpdGNoU2hpZnQud2luZG93U2l6ZSA9IDAuMTtcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBpdGNoU2hpZnQucHJvdG90eXBlLCAnd2luZG93U2l6ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dpbmRvd1NpemU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzaXplKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3dpbmRvd1NpemUgPSB0aGlzLnRvU2Vjb25kcyhzaXplKTtcblx0ICAgICAgICAgICAgdGhpcy5waXRjaCA9IHRoaXMuX3BpdGNoO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5QaXRjaFNoaWZ0fSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QaXRjaFNoaWZ0LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuRmVlZGJhY2tFZmZlY3QucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9mcmVxdWVuY3kuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2ZyZXF1ZW5jeSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fZGVsYXlBLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICB0aGlzLl9kZWxheUEgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2RlbGF5Qi5kaXNjb25uZWN0KCk7XG5cdCAgICAgICAgdGhpcy5fZGVsYXlCID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9sZm9BLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9sZm9BID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9sZm9CLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9sZm9CID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9jcm9zc0ZhZGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2Nyb3NzRmFkZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fY3Jvc3NGYWRlTEZPLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9jcm9zc0ZhZGVMRk8gPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKCdkZWxheVRpbWUnKTtcblx0ICAgICAgICB0aGlzLl9mZWVkYmFja0RlbGF5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9mZWVkYmFja0RlbGF5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmRlbGF5VGltZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuUGl0Y2hTaGlmdDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBXcmFwcGVyIGFyb3VuZCB0aGUgbmF0aXZlIEJ1ZmZlclNvdXJjZU5vZGUuXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkF1ZGlvTm9kZX1cblx0XHQgKiAgQHBhcmFtICB7QXVkaW9CdWZmZXJ8VG9uZS5CdWZmZXJ9ICBidWZmZXIgICBUaGUgYnVmZmVyIHRvIHBsYXlcblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb259ICBvbmxvYWQgIFRoZSBjYWxsYmFjayB0byBpbnZva2Ugd2hlbiB0aGVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgaXMgZG9uZSBwbGF5aW5nLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXJTb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnYnVmZmVyJyxcblx0ICAgICAgICAgICAgJ29ubG9hZCdcblx0ICAgICAgICBdLCBUb25lLkJ1ZmZlclNvdXJjZSk7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGFmdGVyIHRoZVxuXHRcdFx0ICogIGJ1ZmZlciBzb3VyY2UgaXMgZG9uZSBwbGF5aW5nLlxuXHRcdFx0ICogIEB0eXBlICB7RnVuY3Rpb259XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm9uZW5kZWQgPSBvcHRpb25zLm9uZW5kZWQ7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHRpbWUgdGhhdCB0aGUgYnVmZmVyIHdhcyBzdGFydGVkLlxuXHRcdFx0ICogIEB0eXBlICB7TnVtYmVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSAtMTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBBbiBhZGRpdGlvbmFsIGZsYWcgaWYgdGhlIGFjdHVhbCBCdWZmZXJTb3VyY2VOb2RlXG5cdFx0XHQgKiAgaGFzIGJlZW4gc3RhcnRlZC4gYi9jIHN0b3BwaW5nIGFuIHVuc3RhcnRlZCBidWZmZXJcblx0XHRcdCAqICB3aWxsIHRocm93IGl0IGludG8gYW4gaW52YWxpZCBzdGF0ZVxuXHRcdFx0ICogIEB0eXBlICB7Qm9vbGVhbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc291cmNlU3RhcnRlZCA9IGZhbHNlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEZsYWcgaWYgdGhlIHNvdXJjZSBoYXMgYWxyZWFkeSBiZWVuIHN0b3BwZWRcblx0XHRcdCAqICBAdHlwZSAge0Jvb2xlYW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3NvdXJjZVN0b3BwZWQgPSBmYWxzZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgdGltZSB0aGF0IHRoZSBidWZmZXIgaXMgc2NoZWR1bGVkIHRvIHN0b3AuXG5cdFx0XHQgKiAgQHR5cGUgIHtOdW1iZXJ9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N0b3BUaW1lID0gLTE7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGdhaW4gbm9kZSB3aGljaCBlbnZlbG9wZXMgdGhlIEJ1ZmZlclNvdXJjZVxuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5HYWlufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9nYWluTm9kZSA9IHRoaXMub3V0cHV0ID0gbmV3IFRvbmUuR2FpbigpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBidWZmZXIgc291cmNlXG5cdFx0XHQgKiAgQHR5cGUgIHtBdWRpb0J1ZmZlclNvdXJjZU5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3NvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcblx0ICAgICAgICB0aGlzLl9zb3VyY2UuY29ubmVjdCh0aGlzLl9nYWluTm9kZSk7XG5cdCAgICAgICAgdGhpcy5fc291cmNlLm9uZW5kZWQgPSB0aGlzLl9vbmVuZGVkLmJpbmQodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgcHJpdmF0ZSBidWZmZXIgaW5zdGFuY2Vcblx0XHRcdCAqIEB0eXBlIHtUb25lLkJ1ZmZlcn1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9idWZmZXIgPSBuZXcgVG9uZS5CdWZmZXIob3B0aW9ucy5idWZmZXIsIG9wdGlvbnMub25sb2FkKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgcGxheWJhY2tSYXRlIG9mIHRoZSBidWZmZXJcblx0XHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5wbGF5YmFja1JhdGUgPSBuZXcgVG9uZS5QYXJhbSh0aGlzLl9zb3VyY2UucGxheWJhY2tSYXRlLCBUb25lLlR5cGUuUG9zaXRpdmUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBmYWRlSW4gdGltZSBvZiB0aGUgYW1wbGl0dWRlIGVudmVsb3BlLlxuXHRcdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5mYWRlSW4gPSBvcHRpb25zLmZhZGVJbjtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZmFkZU91dCB0aW1lIG9mIHRoZSBhbXBsaXR1ZGUgZW52ZWxvcGUuXG5cdFx0XHQgKiAgQHR5cGUge1RpbWV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZhZGVPdXQgPSBvcHRpb25zLmZhZGVPdXQ7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgY3VydmUgYXBwbGllZCB0byB0aGUgZmFkZXMsIGVpdGhlciBcImxpbmVhclwiIG9yIFwiZXhwb25lbnRpYWxcIlxuXHRcdFx0ICogQHR5cGUge1N0cmluZ31cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuY3VydmUgPSBvcHRpb25zLmN1cnZlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSB2YWx1ZSB0aGF0IHRoZSBidWZmZXIgcmFtcHMgdG9cblx0XHRcdCAqICBAdHlwZSB7R2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZ2FpbiA9IDE7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgb25lbmRlZCB0aW1lb3V0XG5cdFx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX29uZW5kZWRUaW1lb3V0ID0gLTE7XG5cdCAgICAgICAgLy9zZXQgc29tZSB2YWx1ZXMgaW5pdGlhbGx5XG5cdCAgICAgICAgdGhpcy5sb29wID0gb3B0aW9ucy5sb29wO1xuXHQgICAgICAgIHRoaXMubG9vcFN0YXJ0ID0gb3B0aW9ucy5sb29wU3RhcnQ7XG5cdCAgICAgICAgdGhpcy5sb29wRW5kID0gb3B0aW9ucy5sb29wRW5kO1xuXHQgICAgICAgIHRoaXMucGxheWJhY2tSYXRlLnZhbHVlID0gb3B0aW9ucy5wbGF5YmFja1JhdGU7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5CdWZmZXJTb3VyY2UsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdHNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXJTb3VyY2UuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ29uZW5kZWQnOiBUb25lLm5vT3AsXG5cdCAgICAgICAgJ29ubG9hZCc6IFRvbmUubm9PcCxcblx0ICAgICAgICAnbG9vcCc6IGZhbHNlLFxuXHQgICAgICAgICdsb29wU3RhcnQnOiAwLFxuXHQgICAgICAgICdsb29wRW5kJzogMCxcblx0ICAgICAgICAnZmFkZUluJzogMCxcblx0ICAgICAgICAnZmFkZU91dCc6IDAsXG5cdCAgICAgICAgJ2N1cnZlJzogJ2xpbmVhcicsXG5cdCAgICAgICAgJ3BsYXliYWNrUmF0ZSc6IDFcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmV0dXJucyB0aGUgcGxheWJhY2sgc3RhdGUgb2YgdGhlIHNvdXJjZSwgZWl0aGVyIFwic3RhcnRlZFwiIG9yIFwic3RvcHBlZFwiLlxuXHRcdCAqICBAdHlwZSB7VG9uZS5TdGF0ZX1cblx0XHQgKiAgQHJlYWRPbmx5XG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkJ1ZmZlclNvdXJjZSNcblx0XHQgKiAgQG5hbWUgc3RhdGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkJ1ZmZlclNvdXJjZS5wcm90b3R5cGUsICdzdGF0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGVBdFRpbWUodGhpcy5ub3coKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgR2V0IHRoZSBwbGF5YmFjayBzdGF0ZSBhdCB0aGUgZ2l2ZW4gdGltZVxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSAgdGltZSAgVGhlIHRpbWUgdG8gdGVzdCB0aGUgc3RhdGUgYXRcblx0XHQgKiAgQHJldHVybiAge1RvbmUuU3RhdGV9ICBUaGUgcGxheWJhY2sgc3RhdGUuIFxuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXJTb3VyY2UucHJvdG90eXBlLmdldFN0YXRlQXRUaW1lID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgaWYgKHRoaXMuX3N0YXJ0VGltZSAhPT0gLTEgJiYgdGltZSA+PSB0aGlzLl9zdGFydFRpbWUgJiYgIXRoaXMuX3NvdXJjZVN0b3BwZWQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuU3RhdGUuU3RhcnRlZDtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gVG9uZS5TdGF0ZS5TdG9wcGVkO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU3RhcnQgdGhlIGJ1ZmZlclxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbc3RhcnRUaW1lPW5vd10gV2hlbiB0aGUgcGxheWVyIHNob3VsZCBzdGFydC5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW29mZnNldD0wXSBUaGUgb2Zmc2V0IGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc2FtcGxlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBzdGFydCBhdC5cblx0XHQgKiAgQHBhcmFtICB7VGltZT19IGR1cmF0aW9uIEhvdyBsb25nIHRoZSBzYW1wbGUgc2hvdWxkIHBsYXkuIElmIG5vIGR1cmF0aW9uXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIGdpdmVuLCBpdCB3aWxsIGRlZmF1bHQgdG8gdGhlIGZ1bGwgbGVuZ3RoXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzYW1wbGUgKG1pbnVzIGFueSBvZmZzZXQpXG5cdFx0ICogIEBwYXJhbSAge0dhaW59ICBbZ2Fpbj0xXSAgVGhlIGdhaW4gdG8gcGxheSB0aGUgYnVmZmVyIGJhY2sgYXQuXG5cdFx0ICogIEBwYXJhbSAge1RpbWU9fSAgZmFkZUluVGltZSAgVGhlIG9wdGlvbmFsIGZhZGVJbiByYW1wIHRpbWUuXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkJ1ZmZlclNvdXJjZX0gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQnVmZmVyU291cmNlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICh0aW1lLCBvZmZzZXQsIGR1cmF0aW9uLCBnYWluLCBmYWRlSW5UaW1lKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuX3N0YXJ0VGltZSAhPT0gLTEpIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb25lLkJ1ZmZlclNvdXJjZSBjYW4gb25seSBiZSBzdGFydGVkIG9uY2UuJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghdGhpcy5idWZmZXIubG9hZGVkKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVG9uZS5CdWZmZXJTb3VyY2U6IGJ1ZmZlciBpcyBlaXRoZXIgbm90IHNldCBvciBub3QgbG9hZGVkLicpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgLy9pZiBpdCdzIGEgbG9vcCB0aGUgZGVmYXVsdCBvZmZzZXQgaXMgdGhlIGxvb3BzdGFydCBwb2ludFxuXHQgICAgICAgIGlmICh0aGlzLmxvb3ApIHtcblx0ICAgICAgICAgICAgb2Zmc2V0ID0gVG9uZS5kZWZhdWx0QXJnKG9mZnNldCwgdGhpcy5sb29wU3RhcnQpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIC8vb3RoZXJ3aXNlIHRoZSBkZWZhdWx0IG9mZnNldCBpcyAwXG5cdCAgICAgICAgICAgIG9mZnNldCA9IFRvbmUuZGVmYXVsdEFyZyhvZmZzZXQsIDApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBvZmZzZXQgPSB0aGlzLnRvU2Vjb25kcyhvZmZzZXQpO1xuXHQgICAgICAgIGdhaW4gPSBUb25lLmRlZmF1bHRBcmcoZ2FpbiwgMSk7XG5cdCAgICAgICAgdGhpcy5fZ2FpbiA9IGdhaW47XG5cdCAgICAgICAgZmFkZUluVGltZSA9IHRoaXMudG9TZWNvbmRzKFRvbmUuZGVmYXVsdEFyZyhmYWRlSW5UaW1lLCB0aGlzLmZhZGVJbikpO1xuXHQgICAgICAgIHRoaXMuZmFkZUluID0gZmFkZUluVGltZTtcblx0ICAgICAgICBpZiAoZmFkZUluVGltZSA+IDApIHtcblx0ICAgICAgICAgICAgdGhpcy5fZ2Fpbk5vZGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSgwLCB0aW1lKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuY3VydmUgPT09ICdsaW5lYXInKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9nYWluTm9kZS5nYWluLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKHRoaXMuX2dhaW4sIHRpbWUgKyBmYWRlSW5UaW1lKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2dhaW5Ob2RlLmdhaW4uZXhwb25lbnRpYWxBcHByb2FjaFZhbHVlQXRUaW1lKHRoaXMuX2dhaW4sIHRpbWUsIGZhZGVJblRpbWUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5fZ2Fpbk5vZGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZShnYWluLCB0aW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fc3RhcnRUaW1lID0gdGltZTtcblx0ICAgICAgICB2YXIgY29tcHV0ZWREdXIgPSB0aGlzLnRvU2Vjb25kcyhUb25lLmRlZmF1bHRBcmcoZHVyYXRpb24sIHRoaXMuYnVmZmVyLmR1cmF0aW9uIC0gb2Zmc2V0ICUgdGhpcy5idWZmZXIuZHVyYXRpb24pKTtcblx0ICAgICAgICBjb21wdXRlZER1ciA9IE1hdGgubWF4KGNvbXB1dGVkRHVyLCAwKTtcblx0ICAgICAgICBpZiAoVG9uZS5pc0RlZmluZWQoZHVyYXRpb24pKSB7XG5cdCAgICAgICAgICAgIC8vY2xpcCB0aGUgZHVyYXRpb24gd2hlbiBub3QgbG9vcGluZ1xuXHQgICAgICAgICAgICBpZiAoIXRoaXMubG9vcCkge1xuXHQgICAgICAgICAgICAgICAgY29tcHV0ZWREdXIgPSBNYXRoLm1pbihjb21wdXRlZER1ciwgdGhpcy5idWZmZXIuZHVyYXRpb24gLSBvZmZzZXQgJSB0aGlzLmJ1ZmZlci5kdXJhdGlvbik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5zdG9wKHRpbWUgKyBjb21wdXRlZER1ciwgdGhpcy5mYWRlT3V0KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9zdGFydCB0aGUgYnVmZmVyIHNvdXJjZVxuXHQgICAgICAgIGlmICh0aGlzLmxvb3ApIHtcblx0ICAgICAgICAgICAgLy9tb2RpZnkgdGhlIG9mZnNldCBpZiBpdCdzIGdyZWF0ZXIgdGhhbiB0aGUgbG9vcCB0aW1lXG5cdCAgICAgICAgICAgIHZhciBsb29wRW5kID0gdGhpcy5sb29wRW5kIHx8IHRoaXMuYnVmZmVyLmR1cmF0aW9uO1xuXHQgICAgICAgICAgICB2YXIgbG9vcFN0YXJ0ID0gdGhpcy5sb29wU3RhcnQ7XG5cdCAgICAgICAgICAgIHZhciBsb29wRHVyYXRpb24gPSBsb29wRW5kIC0gbG9vcFN0YXJ0O1xuXHQgICAgICAgICAgICAvL21vdmUgdGhlIG9mZnNldCBiYWNrXG5cdCAgICAgICAgICAgIGlmIChvZmZzZXQgPj0gbG9vcEVuZCkge1xuXHQgICAgICAgICAgICAgICAgb2Zmc2V0ID0gKG9mZnNldCAtIGxvb3BTdGFydCkgJSBsb29wRHVyYXRpb24gKyBsb29wU3RhcnQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fc291cmNlLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLmdldCgpO1xuXHQgICAgICAgIHRoaXMuX3NvdXJjZS5sb29wRW5kID0gdGhpcy5sb29wRW5kIHx8IHRoaXMuYnVmZmVyLmR1cmF0aW9uO1xuXHQgICAgICAgIGlmIChvZmZzZXQgPCB0aGlzLmJ1ZmZlci5kdXJhdGlvbikge1xuXHQgICAgICAgICAgICB0aGlzLl9zb3VyY2VTdGFydGVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgdGhpcy5fc291cmNlLnN0YXJ0KHRpbWUsIG9mZnNldCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdG9wIHRoZSBidWZmZXIuIE9wdGlvbmFsbHkgYWRkIGEgcmFtcCB0aW1lIHRvIGZhZGUgdGhlXG5cdFx0ICogIGJ1ZmZlciBvdXQuXG5cdFx0ICogIEBwYXJhbSAge1RpbWU9fSAgdGltZSAgICAgICAgIFRoZSB0aW1lIHRoZSBidWZmZXIgc2hvdWxkIHN0b3AuXG5cdFx0ICogIEBwYXJhbSAge1RpbWU9fSAgZmFkZU91dFRpbWUgIEhvdyBsb25nIHRoZSBnYWluIHNob3VsZCBmYWRlIG91dCBmb3Jcblx0XHQgKiAgQHJldHVybiAge1RvbmUuQnVmZmVyU291cmNlfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXJTb3VyY2UucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAodGltZSwgZmFkZU91dFRpbWUpIHtcblx0ICAgICAgICBpZiAoIXRoaXMuYnVmZmVyLmxvYWRlZCkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbmUuQnVmZmVyU291cmNlOiBidWZmZXIgaXMgZWl0aGVyIG5vdCBzZXQgb3Igbm90IGxvYWRlZC4nKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMuX3NvdXJjZVN0b3BwZWQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgLy9pZiB0aGUgZXZlbnQgaGFzIGFscmVhZHkgYmVlbiBzY2hlZHVsZWQsIGNsZWFyIGl0XG5cdCAgICAgICAgaWYgKHRoaXMuX3N0b3BUaW1lICE9PSAtMSkge1xuXHQgICAgICAgICAgICB0aGlzLmNhbmNlbFN0b3AoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9zdG9wIGlmIGl0J3Mgc2NoZWR1bGUgYmVmb3JlIHRoZSBzdGFydCB0aW1lXG5cdCAgICAgICAgaWYgKHRpbWUgPD0gdGhpcy5fc3RhcnRUaW1lKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2dhaW5Ob2RlLmdhaW4uY2FuY2VsU2NoZWR1bGVkVmFsdWVzKHRpbWUpO1xuXHQgICAgICAgICAgICB0aGlzLl9nYWluTm9kZS5nYWluLnZhbHVlID0gMDtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRpbWUgPSBNYXRoLm1heCh0aGlzLl9zdGFydFRpbWUgKyB0aGlzLmZhZGVJbiArIHRoaXMuc2FtcGxlVGltZSwgdGltZSk7XG5cdCAgICAgICAgLy9jYW5jZWwgdGhlIHByZXZpb3VzIGN1cnZlXG5cdCAgICAgICAgdGhpcy5fZ2Fpbk5vZGUuZ2Fpbi5jYW5jZWxTY2hlZHVsZWRWYWx1ZXModGltZSk7XG5cdCAgICAgICAgdGhpcy5fc3RvcFRpbWUgPSB0aW1lO1xuXHQgICAgICAgIC8vdGhlIGZhZGVPdXQgdGltZVxuXHQgICAgICAgIGZhZGVPdXRUaW1lID0gdGhpcy50b1NlY29uZHMoVG9uZS5kZWZhdWx0QXJnKGZhZGVPdXRUaW1lLCB0aGlzLmZhZGVPdXQpKTtcblx0ICAgICAgICB2YXIgaGVsZER1cmF0aW9uID0gdGltZSAtIHRoaXMuX3N0YXJ0VGltZSAtIHRoaXMuZmFkZUluIC0gdGhpcy5zYW1wbGVUaW1lO1xuXHQgICAgICAgIGlmICghdGhpcy5sb29wKSB7XG5cdCAgICAgICAgICAgIC8vbWFrZSBzdXJlIHRoZSBmYWRlIGRvZXMgbm90IGdvIGJleW9uZCB0aGUgbGVuZ3RoIG9mIHRoZSBidWZmZXJcblx0ICAgICAgICAgICAgaGVsZER1cmF0aW9uID0gTWF0aC5taW4oaGVsZER1cmF0aW9uLCB0aGlzLmJ1ZmZlci5kdXJhdGlvbik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZhZGVPdXRUaW1lID0gTWF0aC5taW4oaGVsZER1cmF0aW9uLCBmYWRlT3V0VGltZSk7XG5cdCAgICAgICAgdmFyIHN0YXJ0RmFkZSA9IHRpbWUgLSBmYWRlT3V0VGltZTtcblx0ICAgICAgICBpZiAoZmFkZU91dFRpbWUgPiB0aGlzLnNhbXBsZVRpbWUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZ2Fpbk5vZGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSh0aGlzLl9nYWluLCBzdGFydEZhZGUpO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5jdXJ2ZSA9PT0gJ2xpbmVhcicpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2dhaW5Ob2RlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMCwgdGltZSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9nYWluTm9kZS5nYWluLmV4cG9uZW50aWFsQXBwcm9hY2hWYWx1ZUF0VGltZSgwLCBzdGFydEZhZGUsIGZhZGVPdXRUaW1lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2dhaW5Ob2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUoMCwgdGltZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIFRvbmUuY29udGV4dC5jbGVhclRpbWVvdXQodGhpcy5fb25lbmRlZFRpbWVvdXQpO1xuXHQgICAgICAgIHRoaXMuX29uZW5kZWRUaW1lb3V0ID0gVG9uZS5jb250ZXh0LnNldFRpbWVvdXQodGhpcy5fb25lbmRlZC5iaW5kKHRoaXMpLCB0aGlzLl9zdG9wVGltZSAtIHRoaXMubm93KCkpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDYW5jZWwgYSBzY2hlZHVsZWQgc3RvcCBldmVudFxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5CdWZmZXJTb3VyY2V9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkJ1ZmZlclNvdXJjZS5wcm90b3R5cGUuY2FuY2VsU3RvcCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5fc3RhcnRUaW1lICE9PSAtMSAmJiAhdGhpcy5fc291cmNlU3RvcHBlZCkge1xuXHQgICAgICAgICAgICAvL2NhbmNlbCB0aGUgc3RvcCBlbnZlbG9wZVxuXHQgICAgICAgICAgICB2YXIgZmFkZUluVGltZSA9IHRoaXMudG9TZWNvbmRzKHRoaXMuZmFkZUluKTtcblx0ICAgICAgICAgICAgdGhpcy5fZ2Fpbk5vZGUuZ2Fpbi5jYW5jZWxTY2hlZHVsZWRWYWx1ZXModGhpcy5fc3RhcnRUaW1lICsgZmFkZUluVGltZSArIHRoaXMuc2FtcGxlVGltZSk7XG5cdCAgICAgICAgICAgIHRoaXMuX2dhaW5Ob2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUoMSwgTWF0aC5tYXgodGhpcy5ub3coKSwgdGhpcy5fc3RhcnRUaW1lICsgZmFkZUluVGltZSArIHRoaXMuc2FtcGxlVGltZSkpO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJUaW1lb3V0KHRoaXMuX29uZW5kZWRUaW1lb3V0KTtcblx0ICAgICAgICAgICAgdGhpcy5fc3RvcFRpbWUgPSAtMTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEludGVybmFsIGNhbGxiYWNrIHdoZW4gdGhlIGJ1ZmZlciBpcyBlbmRlZC5cblx0XHQgKiAgSW52b2tlcyBgb25lbmRlZGAgYW5kIGRpc3Bvc2VzIHRoZSBub2RlLlxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXJTb3VyY2UucHJvdG90eXBlLl9vbmVuZGVkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICghdGhpcy5fc291cmNlU3RvcHBlZCkge1xuXHQgICAgICAgICAgICB0aGlzLl9zb3VyY2VTdG9wcGVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgLy9hbGxvdyBhZGRpdGlvbmFsIHRpbWUgZm9yIHRoZSBleHBvbmVudGlhbCBjdXJ2ZSB0byBmdWxseSBkZWNheVxuXHQgICAgICAgICAgICB2YXIgYWRkaXRpb25hbFRhaWwgPSB0aGlzLmN1cnZlID09PSAnZXhwb25lbnRpYWwnID8gdGhpcy5mYWRlT3V0ICogMiA6IDA7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9zb3VyY2VTdGFydGVkICYmIHRoaXMuX3N0b3BUaW1lICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fc291cmNlLnN0b3AodGhpcy5fc3RvcFRpbWUgKyBhZGRpdGlvbmFsVGFpbCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5vbmVuZGVkKHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBJZiBsb29wIGlzIHRydWUsIHRoZSBsb29wIHdpbGwgc3RhcnQgYXQgdGhpcyBwb3NpdGlvbi5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5CdWZmZXJTb3VyY2UjXG5cdFx0ICogQHR5cGUge1RpbWV9XG5cdFx0ICogQG5hbWUgbG9vcFN0YXJ0XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5CdWZmZXJTb3VyY2UucHJvdG90eXBlLCAnbG9vcFN0YXJ0Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fc291cmNlLmxvb3BTdGFydDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGxvb3BTdGFydCkge1xuXHQgICAgICAgICAgICB0aGlzLl9zb3VyY2UubG9vcFN0YXJ0ID0gdGhpcy50b1NlY29uZHMobG9vcFN0YXJ0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIElmIGxvb3AgaXMgdHJ1ZSwgdGhlIGxvb3Agd2lsbCBlbmQgYXQgdGhpcyBwb3NpdGlvbi5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5CdWZmZXJTb3VyY2UjXG5cdFx0ICogQHR5cGUge1RpbWV9XG5cdFx0ICogQG5hbWUgbG9vcEVuZFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQnVmZmVyU291cmNlLnByb3RvdHlwZSwgJ2xvb3BFbmQnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9zb3VyY2UubG9vcEVuZDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGxvb3BFbmQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fc291cmNlLmxvb3BFbmQgPSB0aGlzLnRvU2Vjb25kcyhsb29wRW5kKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBhdWRpbyBidWZmZXIgYmVsb25naW5nIHRvIHRoZSBwbGF5ZXIuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQnVmZmVyU291cmNlI1xuXHRcdCAqIEB0eXBlIHtUb25lLkJ1ZmZlcn1cblx0XHQgKiBAbmFtZSBidWZmZXJcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkJ1ZmZlclNvdXJjZS5wcm90b3R5cGUsICdidWZmZXInLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXI7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChidWZmZXIpIHtcblx0ICAgICAgICAgICAgdGhpcy5fYnVmZmVyLnNldChidWZmZXIpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogSWYgdGhlIGJ1ZmZlciBzaG91bGQgbG9vcCBvbmNlIGl0J3Mgb3Zlci5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5CdWZmZXJTb3VyY2UjXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XG5cdFx0ICogQG5hbWUgbG9vcFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuQnVmZmVyU291cmNlLnByb3RvdHlwZSwgJ2xvb3AnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9zb3VyY2UubG9vcDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGxvb3ApIHtcblx0ICAgICAgICAgICAgdGhpcy5fc291cmNlLmxvb3AgPSBsb29wO1xuXHQgICAgICAgICAgICB0aGlzLmNhbmNlbFN0b3AoKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuQnVmZmVyU291cmNlfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5CdWZmZXJTb3VyY2UucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLm9uZW5kZWQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3NvdXJjZS5vbmVuZGVkID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9zb3VyY2UuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMuX3NvdXJjZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fZ2Fpbk5vZGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2dhaW5Ob2RlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9idWZmZXIuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2J1ZmZlciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fc3RhcnRUaW1lID0gLTE7XG5cdCAgICAgICAgdGhpcy5wbGF5YmFja1JhdGUgPSBudWxsO1xuXHQgICAgICAgIFRvbmUuY29udGV4dC5jbGVhclRpbWVvdXQodGhpcy5fb25lbmRlZFRpbWVvdXQpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkJ1ZmZlclNvdXJjZTtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBUb25lLk5vaXNlIGlzIGEgbm9pc2UgZ2VuZXJhdG9yLiBJdCB1c2VzIGxvb3BlZCBub2lzZSBidWZmZXJzIHRvIHNhdmUgb24gcGVyZm9ybWFuY2UuXG5cdFx0ICogICAgICAgICAgVG9uZS5Ob2lzZSBzdXBwb3J0cyB0aGUgbm9pc2UgdHlwZXM6IFwicGlua1wiLCBcIndoaXRlXCIsIGFuZCBcImJyb3duXCIuIFJlYWQgbW9yZSBhYm91dFxuXHRcdCAqICAgICAgICAgIGNvbG9ycyBvZiBub2lzZSBvbiBbV2lraXBlZGlhXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db2xvcnNfb2Zfbm9pc2UpLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5Tb3VyY2V9XG5cdFx0ICogIEBwYXJhbSB7c3RyaW5nfSB0eXBlIHRoZSBub2lzZSB0eXBlICh3aGl0ZXxwaW5rfGJyb3duKVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vaW5pdGlhbGl6ZSB0aGUgbm9pc2UgYW5kIHN0YXJ0XG5cdFx0ICogdmFyIG5vaXNlID0gbmV3IFRvbmUuTm9pc2UoXCJwaW5rXCIpLnN0YXJ0KCk7XG5cdFx0ICpcblx0XHQgKiAvL21ha2UgYW4gYXV0b2ZpbHRlciB0byBzaGFwZSB0aGUgbm9pc2Vcblx0XHQgKiB2YXIgYXV0b0ZpbHRlciA9IG5ldyBUb25lLkF1dG9GaWx0ZXIoe1xuXHRcdCAqIFx0XCJmcmVxdWVuY3lcIiA6IFwiOG1cIixcblx0XHQgKiBcdFwibWluXCIgOiA4MDAsXG5cdFx0ICogXHRcIm1heFwiIDogMTUwMDBcblx0XHQgKiB9KS5jb25uZWN0KFRvbmUuTWFzdGVyKTtcblx0XHQgKlxuXHRcdCAqIC8vY29ubmVjdCB0aGUgbm9pc2Vcblx0XHQgKiBub2lzZS5jb25uZWN0KGF1dG9GaWx0ZXIpO1xuXHRcdCAqIC8vc3RhcnQgdGhlIGF1dG9maWx0ZXIgTEZPXG5cdFx0ICogYXV0b0ZpbHRlci5zdGFydCgpXG5cdFx0ICovXG5cdCAgICBUb25lLk5vaXNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFsndHlwZSddLCBUb25lLk5vaXNlKTtcblx0ICAgICAgICBUb25lLlNvdXJjZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKiAgQHR5cGUge0F1ZGlvQnVmZmVyU291cmNlTm9kZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3NvdXJjZSA9IG51bGw7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGJ1ZmZlclxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKiAgQHR5cGUge0F1ZGlvQnVmZmVyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fdHlwZSA9IG9wdGlvbnMudHlwZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgcGxheWJhY2sgcmF0ZSBvZiB0aGUgbm9pc2UuIEFmZmVjdHNcblx0XHRcdCAqICB0aGUgXCJmcmVxdWVuY3lcIiBvZiB0aGUgbm9pc2UuXG5cdFx0XHQgKiAgQHR5cGUge1Bvc2l0aXZlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3BsYXliYWNrUmF0ZSA9IG9wdGlvbnMucGxheWJhY2tSYXRlO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuTm9pc2UsIFRvbmUuU291cmNlKTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgZGVmYXVsdCBwYXJhbWV0ZXJzXG5cdFx0ICpcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAY29uc3Rcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuTm9pc2UuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ3R5cGUnOiAnd2hpdGUnLFxuXHQgICAgICAgICdwbGF5YmFja1JhdGUnOiAxXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHR5cGUgb2YgdGhlIG5vaXNlLiBDYW4gYmUgXCJ3aGl0ZVwiLCBcImJyb3duXCIsIG9yIFwicGlua1wiLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLk5vaXNlI1xuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQG5hbWUgdHlwZVxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogbm9pc2UudHlwZSA9IFwid2hpdGVcIjtcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLk5vaXNlLnByb3RvdHlwZSwgJ3R5cGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZSkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fdHlwZSAhPT0gdHlwZSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGUgaW4gX25vaXNlQnVmZmVycykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuXHQgICAgICAgICAgICAgICAgICAgIC8vaWYgaXQncyBwbGF5aW5nLCBzdG9wIGFuZCByZXN0YXJ0IGl0XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IFRvbmUuU3RhdGUuU3RhcnRlZCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm93ID0gdGhpcy5ub3coKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RvcChub3cpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGFydChub3cpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVG9uZS5Ob2lzZTogaW52YWxpZCB0eXBlOiAnICsgdHlwZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgcGxheWJhY2sgcmF0ZSBvZiB0aGUgbm9pc2UuIEFmZmVjdHNcblx0XHQgKiAgdGhlIFwiZnJlcXVlbmN5XCIgb2YgdGhlIG5vaXNlLlxuXHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0ICogIEBzaWduYWxcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLk5vaXNlLnByb3RvdHlwZSwgJ3BsYXliYWNrUmF0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BsYXliYWNrUmF0ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHJhdGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcGxheWJhY2tSYXRlID0gcmF0ZTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3NvdXJjZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fc291cmNlLnBsYXliYWNrUmF0ZS52YWx1ZSA9IHJhdGU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBpbnRlcm5hbCBzdGFydCBtZXRob2Rcblx0XHQgKlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IHRpbWVcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuTm9pc2UucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdmFyIGJ1ZmZlciA9IF9ub2lzZUJ1ZmZlcnNbdGhpcy5fdHlwZV07XG5cdCAgICAgICAgdGhpcy5fc291cmNlID0gbmV3IFRvbmUuQnVmZmVyU291cmNlKGJ1ZmZlcikuY29ubmVjdCh0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgdGhpcy5fc291cmNlLmxvb3AgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuX3NvdXJjZS5wbGF5YmFja1JhdGUudmFsdWUgPSB0aGlzLl9wbGF5YmFja1JhdGU7XG5cdCAgICAgICAgdGhpcy5fc291cmNlLnN0YXJ0KHRoaXMudG9TZWNvbmRzKHRpbWUpLCBNYXRoLnJhbmRvbSgpICogKGJ1ZmZlci5kdXJhdGlvbiAtIDAuMDAxKSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIGludGVybmFsIHN0b3AgbWV0aG9kXG5cdFx0ICpcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSB0aW1lXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLk5vaXNlLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuX3NvdXJjZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9zb3VyY2Uuc3RvcCh0aGlzLnRvU2Vjb25kcyh0aW1lKSk7XG5cdCAgICAgICAgICAgIHRoaXMuX3NvdXJjZSA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFJlc3RhcnRzIHRoZSBub2lzZS5cblx0XHQgKiBAcGFyYW0gIHtbdHlwZV19IHRpbWUgW2Rlc2NyaXB0aW9uXVxuXHRcdCAqIEByZXR1cm4ge1t0eXBlXX0gICAgICBbZGVzY3JpcHRpb25dXG5cdFx0ICovXG5cdCAgICBUb25lLk5vaXNlLnByb3RvdHlwZS5yZXN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICAvL1RPRE8gY291bGQgYmUgb3B0aW1pemVkIGJ5IGNhbmNlbGxpbmcgdGhlIGJ1ZmZlciBzb3VyY2UgJ3N0b3AnXG5cdCAgICAgICAgLy9zdG9wIGFuZCByZXN0YXJ0XG5cdCAgICAgICAgdGhpcy5fc3RvcCh0aW1lKTtcblx0ICAgICAgICB0aGlzLl9zdGFydCh0aW1lKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLk5vaXNlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk5vaXNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU291cmNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgaWYgKHRoaXMuX3NvdXJjZSAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICB0aGlzLl9zb3VyY2UuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgICAgICB0aGlzLl9zb3VyY2UgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9idWZmZXIgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy8gVEhFIEJVRkZFUlNcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgICAgLy9Ob2lzZSBidWZmZXIgc3RhdHNcblx0ICAgIHZhciBidWZmZXJMZW5ndGggPSA0NDEwMCAqIDU7XG5cdCAgICB2YXIgY2hhbm5lbHMgPSAyO1xuXHQgICAgLyoqXG5cdFx0ICpcdFRoZSBub2lzZSBhcnJheXMuIEdlbmVyYXRlZCBvbiBpbml0aWFsaXphdGlvbi5cblx0XHQgKiAgYm9ycm93ZWQgaGVhdmlseSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS96YWNoYXJ5ZGVudG9uL25vaXNlLmpzXG5cdFx0ICogIChjKSAyMDEzIFphY2ggRGVudG9uIChNSVQpXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKiAgQHR5cGUge0FycmF5fVxuXHRcdCAqL1xuXHQgICAgdmFyIF9ub2lzZUFycmF5cyA9IHtcblx0ICAgICAgICAncGluayc6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBjaGFubmVsTnVtID0gMDsgY2hhbm5lbE51bSA8IGNoYW5uZWxzOyBjaGFubmVsTnVtKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjaGFubmVsID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXJMZW5ndGgpO1xuXHQgICAgICAgICAgICAgICAgYnVmZmVyW2NoYW5uZWxOdW1dID0gY2hhbm5lbDtcblx0ICAgICAgICAgICAgICAgIHZhciBiMCwgYjEsIGIyLCBiMywgYjQsIGI1LCBiNjtcblx0ICAgICAgICAgICAgICAgIGIwID0gYjEgPSBiMiA9IGIzID0gYjQgPSBiNSA9IGI2ID0gMDtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgd2hpdGUgPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XG5cdCAgICAgICAgICAgICAgICAgICAgYjAgPSAwLjk5ODg2ICogYjAgKyB3aGl0ZSAqIDAuMDU1NTE3OTtcblx0ICAgICAgICAgICAgICAgICAgICBiMSA9IDAuOTkzMzIgKiBiMSArIHdoaXRlICogMC4wNzUwNzU5O1xuXHQgICAgICAgICAgICAgICAgICAgIGIyID0gMC45NjkgKiBiMiArIHdoaXRlICogMC4xNTM4NTI7XG5cdCAgICAgICAgICAgICAgICAgICAgYjMgPSAwLjg2NjUgKiBiMyArIHdoaXRlICogMC4zMTA0ODU2O1xuXHQgICAgICAgICAgICAgICAgICAgIGI0ID0gMC41NSAqIGI0ICsgd2hpdGUgKiAwLjUzMjk1MjI7XG5cdCAgICAgICAgICAgICAgICAgICAgYjUgPSAtMC43NjE2ICogYjUgLSB3aGl0ZSAqIDAuMDE2ODk4O1xuXHQgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxbaV0gPSBiMCArIGIxICsgYjIgKyBiMyArIGI0ICsgYjUgKyBiNiArIHdoaXRlICogMC41MzYyO1xuXHQgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxbaV0gKj0gMC4xMTtcblx0ICAgICAgICAgICAgICAgICAgICAvLyAocm91Z2hseSkgY29tcGVuc2F0ZSBmb3IgZ2FpblxuXHQgICAgICAgICAgICAgICAgICAgIGI2ID0gd2hpdGUgKiAwLjExNTkyNjtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuXHQgICAgICAgIH0oKSxcblx0ICAgICAgICAnYnJvd24nOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBidWZmZXIgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgY2hhbm5lbE51bSA9IDA7IGNoYW5uZWxOdW0gPCBjaGFubmVsczsgY2hhbm5lbE51bSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyTGVuZ3RoKTtcblx0ICAgICAgICAgICAgICAgIGJ1ZmZlcltjaGFubmVsTnVtXSA9IGNoYW5uZWw7XG5cdCAgICAgICAgICAgICAgICB2YXIgbGFzdE91dCA9IDA7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlckxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHdoaXRlID0gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xuXHQgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxbaV0gPSAobGFzdE91dCArIDAuMDIgKiB3aGl0ZSkgLyAxLjAyO1xuXHQgICAgICAgICAgICAgICAgICAgIGxhc3RPdXQgPSBjaGFubmVsW2ldO1xuXHQgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxbaV0gKj0gMy41OyAgICAvLyAocm91Z2hseSkgY29tcGVuc2F0ZSBmb3IgZ2FpblxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG5cdCAgICAgICAgfSgpLFxuXHQgICAgICAgICd3aGl0ZSc6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBjaGFubmVsTnVtID0gMDsgY2hhbm5lbE51bSA8IGNoYW5uZWxzOyBjaGFubmVsTnVtKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjaGFubmVsID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXJMZW5ndGgpO1xuXHQgICAgICAgICAgICAgICAgYnVmZmVyW2NoYW5uZWxOdW1dID0gY2hhbm5lbDtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBjaGFubmVsW2ldID0gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG5cdCAgICAgICAgfSgpXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICpcdHN0YXRpYyBub2lzZSBidWZmZXJzXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKiAgQHR5cGUge1RvbmUuQnVmZmVyfVxuXHRcdCAqL1xuXHQgICAgdmFyIF9ub2lzZUJ1ZmZlcnMgPSB7fTtcblx0ICAgIC8vY3JlYXRlIHRoZSBUb25lLkJ1ZmZlcnNcblx0ICAgIGZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlcnMoKSB7XG5cdCAgICAgICAgZm9yICh2YXIgdHlwZSBpbiBfbm9pc2VBcnJheXMpIHtcblx0ICAgICAgICAgICAgX25vaXNlQnVmZmVyc1t0eXBlXSA9IG5ldyBUb25lLkJ1ZmZlcigpLmZyb21BcnJheShfbm9pc2VBcnJheXNbdHlwZV0pO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIC8vY3JlYXRlIHRoZSBub2lzZSBidWZmZXJzXG5cdCAgICBUb25lLmdldENvbnRleHQoY3JlYXRlQnVmZmVycyk7XG5cdCAgICBUb25lLkNvbnRleHQub24oJ2luaXQnLCBjcmVhdGVCdWZmZXJzKTtcblx0ICAgIHJldHVybiBUb25lLk5vaXNlO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgU2ltcGxlIGNvbnZvbHV0aW9uIGNyZWF0ZWQgd2l0aCBkZWNheWluZyBub2lzZS5cblx0XHQgKiAgXHRcdEdlbmVyYXRlcyBhbiBJbXB1bHNlIFJlc3BvbnNlIEJ1ZmZlclxuXHRcdCAqIFx0XHRcdHdpdGggVG9uZS5PZmZsaW5lIHRoZW4gZmVlZHMgdGhlIElSIGludG8gQ29udm9sdmVyTm9kZS5cblx0XHQgKiBcdFx0XHROb3RlOiB0aGUgUmV2ZXJiIHdpbGwgbm90IG1ha2UgYW55IHNvdW5kIHVudGlsIFtnZW5lcmF0ZV0oI2dlbmVyYXRlKVxuXHRcdCAqIFx0XHRcdGhhcyBiZWVuIGludm9rZWQgYW5kIHJlc29sdmVkLlxuXHRcdCAqXG5cdFx0ICogXHRcdFx0SW5zcGlyYXRpb24gZnJvbSBbUmV2ZXJiR2VuXShodHRwczovL2dpdGh1Yi5jb20vYWRlbGVzcGluYXNzZS9yZXZlcmJHZW4pLlxuXHRcdCAqIFx0XHRcdENvcHlyaWdodCAoYykgMjAxNCBBbGFuIGRlTGVzcGluYXNzZSBBcGFjaGUgMi4wIExpY2Vuc2UuXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuQ29udm9sdmVyfVxuXHRcdCAqICBAcGFyYW0ge1RpbWU9fSBkZWNheSBUaGUgYW1vdW50IG9mIHRpbWUgaXQgd2lsbCByZXZlcmJlcmF0ZSBmb3IuXG5cdFx0ICovXG5cdCAgICBUb25lLlJldmVyYiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbJ2RlY2F5J10sIFRvbmUuUmV2ZXJiKTtcblx0ICAgICAgICBUb25lLkVmZmVjdC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIENvbnZvbHZlciBub2RlXG5cdFx0XHQgKiAgQHR5cGUge0NvbnZvbHZlck5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2NvbnZvbHZlciA9IHRoaXMuY29udGV4dC5jcmVhdGVDb252b2x2ZXIoKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgcmV2ZXJiXG5cdFx0XHQgKiBAdHlwZSB7VGltZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGVjYXkgPSBvcHRpb25zLmRlY2F5O1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIGFtb3VudCBvZiB0aW1lIGJlZm9yZSB0aGUgcmV2ZXJiIGlzIGZ1bGx5XG5cdFx0XHQgKiByYW1wZWQgaW4uXG5cdFx0XHQgKiBAdHlwZSB7VGltZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMucHJlRGVsYXkgPSBvcHRpb25zLnByZURlbGF5O1xuXHQgICAgICAgIHRoaXMuY29ubmVjdEVmZmVjdCh0aGlzLl9jb252b2x2ZXIpO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuUmV2ZXJiLCBUb25lLkVmZmVjdCk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgZGVmYXVsdHNcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqIEBzdGF0aWNcblx0XHQgKi9cblx0ICAgIFRvbmUuUmV2ZXJiLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdkZWNheSc6IDEuNSxcblx0ICAgICAgICAncHJlRGVsYXknOiAwLjAxXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogR2VuZXJhdGUgdGhlIEltcHVsc2UgUmVzcG9uc2UuIFJldHVybnMgYSBwcm9taXNlIHdoaWxlIHRoZSBJUiBpcyBiZWluZ1xuXHRcdCAqIGdlbmVyYXRlZC5cblx0XHQgKiBAcmV0dXJuIHtQcm9taXNlPFRvbmUuUmV2ZXJiPn0gUHJvbWlzZSB3aGljaCByZXR1cm5zIHRoaXMgb2JqZWN0LlxuXHRcdCAqL1xuXHQgICAgVG9uZS5SZXZlcmIucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiBUb25lLk9mZmxpbmUoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvL2NyZWF0ZSBhIG5vaXNlIGJ1cnN0IHdoaWNoIGRlY2F5cyBvdmVyIHRoZSBkdXJhdGlvblxuXHQgICAgICAgICAgICB2YXIgbm9pc2VMID0gbmV3IFRvbmUuTm9pc2UoKTtcblx0ICAgICAgICAgICAgdmFyIG5vaXNlUiA9IG5ldyBUb25lLk5vaXNlKCk7XG5cdCAgICAgICAgICAgIHZhciBtZXJnZSA9IG5ldyBUb25lLk1lcmdlKCk7XG5cdCAgICAgICAgICAgIG5vaXNlTC5jb25uZWN0KG1lcmdlLmxlZnQpO1xuXHQgICAgICAgICAgICBub2lzZVIuY29ubmVjdChtZXJnZS5yaWdodCk7XG5cdCAgICAgICAgICAgIHZhciBnYWluTm9kZSA9IG5ldyBUb25lLkdhaW4oKS50b01hc3RlcigpO1xuXHQgICAgICAgICAgICBtZXJnZS5jb25uZWN0KGdhaW5Ob2RlKTtcblx0ICAgICAgICAgICAgbm9pc2VMLnN0YXJ0KDApO1xuXHQgICAgICAgICAgICBub2lzZVIuc3RhcnQoMCk7XG5cdCAgICAgICAgICAgIC8vc2hvcnQgZmFkZSBpblxuXHQgICAgICAgICAgICBnYWluTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKDAsIDApO1xuXHQgICAgICAgICAgICBnYWluTm9kZS5nYWluLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKDEsIHRoaXMucHJlRGVsYXkpO1xuXHQgICAgICAgICAgICAvL2RlY2F5XG5cdCAgICAgICAgICAgIGdhaW5Ob2RlLmdhaW4uZXhwb25lbnRpYWxBcHByb2FjaFZhbHVlQXRUaW1lKDAsIHRoaXMucHJlRGVsYXksIHRoaXMuZGVjYXkgLSB0aGlzLnByZURlbGF5KTtcblx0ICAgICAgICB9LmJpbmQodGhpcyksIHRoaXMuZGVjYXkpLnRoZW4oZnVuY3Rpb24gKGJ1ZmZlcikge1xuXHQgICAgICAgICAgICB0aGlzLl9jb252b2x2ZXIuYnVmZmVyID0gYnVmZmVyLmdldCgpO1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LmJpbmQodGhpcykpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cC5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuUmV2ZXJifSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5SZXZlcmIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5FZmZlY3QucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9jb252b2x2ZXIuZGlzY29ubmVjdCgpO1xuXHQgICAgICAgIHRoaXMuX2NvbnZvbHZlciA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuUmV2ZXJiO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgQmFzZSBjbGFzcyBmb3Igc3RlcmVvIGZlZWRiYWNrIGVmZmVjdHMgd2hlcmUgdGhlIGVmZmVjdFJldHVyblxuXHRcdCAqICAgICAgICAgaXMgZmVkIGJhY2sgaW50byB0aGUgc2FtZSBjaGFubmVsLlxuXHRcdCAqXG5cdFx0ICpcdEBjb25zdHJ1Y3RvclxuXHRcdCAqXHRAZXh0ZW5kcyB7VG9uZS5TdGVyZW9FZmZlY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLlN0ZXJlb0ZlZWRiYWNrRWZmZWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFsnZmVlZGJhY2snXSwgVG9uZS5GZWVkYmFja0VmZmVjdCk7XG5cdCAgICAgICAgVG9uZS5TdGVyZW9FZmZlY3QuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBjb250cm9scyB0aGUgYW1vdW50IG9mIGZlZWRiYWNrXG5cdFx0XHQgKiAgQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZmVlZGJhY2sgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5mZWVkYmFjaywgVG9uZS5UeXBlLk5vcm1hbFJhbmdlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgbGVmdCBzaWRlIGZlZWJhY2tcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5HYWlufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9mZWVkYmFja0wgPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIHJpZ2h0IHNpZGUgZmVlYmFja1xuXHRcdFx0ICogIEB0eXBlIHtUb25lLkdhaW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2ZlZWRiYWNrUiA9IG5ldyBUb25lLkdhaW4oKTtcblx0ICAgICAgICAvL2Nvbm5lY3QgaXQgdXBcblx0ICAgICAgICB0aGlzLmVmZmVjdFJldHVybkwuY2hhaW4odGhpcy5fZmVlZGJhY2tMLCB0aGlzLmVmZmVjdFNlbmRMKTtcblx0ICAgICAgICB0aGlzLmVmZmVjdFJldHVyblIuY2hhaW4odGhpcy5fZmVlZGJhY2tSLCB0aGlzLmVmZmVjdFNlbmRSKTtcblx0ICAgICAgICB0aGlzLmZlZWRiYWNrLmZhbih0aGlzLl9mZWVkYmFja0wuZ2FpbiwgdGhpcy5fZmVlZGJhY2tSLmdhaW4pO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KFsnZmVlZGJhY2snXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5TdGVyZW9GZWVkYmFja0VmZmVjdCwgVG9uZS5TdGVyZW9FZmZlY3QpO1xuXHQgICAgLyoqXG5cdFx0ICogIGNsZWFuIHVwXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlN0ZXJlb0ZlZWRiYWNrRWZmZWN0fSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlN0ZXJlb0ZlZWRiYWNrRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU3RlcmVvRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoWydmZWVkYmFjayddKTtcblx0ICAgICAgICB0aGlzLmZlZWRiYWNrLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmZlZWRiYWNrID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9mZWVkYmFja0wuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2ZlZWRiYWNrTCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fZmVlZGJhY2tSLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9mZWVkYmFja1IgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlN0ZXJlb0ZlZWRiYWNrRWZmZWN0O1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgQXBwbGllcyBhIHdpZHRoIGZhY3RvciB0byB0aGUgbWlkL3NpZGUgc2VwZXJhdGlvbi5cblx0XHQgKiAgICAgICAgIDAgaXMgYWxsIG1pZCBhbmQgMSBpcyBhbGwgc2lkZS5cblx0XHQgKiAgICAgICAgIEFsZ29yaXRobSBmb3VuZCBpbiBba3ZyYXVkaW8gZm9ydW1zXShodHRwOi8vd3d3Lmt2cmF1ZGlvLmNvbS9mb3J1bS92aWV3dG9waWMucGhwP3Q9MjEyNTg3KS5cblx0XHQgKiAgICAgICAgIDxicj48YnI+XG5cdFx0ICogICAgICAgICA8Y29kZT5cblx0XHQgKiAgICAgICAgIE1pZCAqPSAyKigxLXdpZHRoKTxicj5cblx0XHQgKiAgICAgICAgIFNpZGUgKj0gMip3aWR0aFxuXHRcdCAqICAgICAgICAgPC9jb2RlPlxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLk1pZFNpZGVFZmZlY3R9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlfE9iamVjdH0gW3dpZHRoXSBUaGUgc3RlcmVvIHdpZHRoLiBBIHdpZHRoIG9mIDAgaXMgbW9ubyBhbmQgMSBpcyBzdGVyZW8uIDAuNSBpcyBubyBjaGFuZ2UuXG5cdFx0ICovXG5cdCAgICBUb25lLlN0ZXJlb1dpZGVuZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWyd3aWR0aCddLCBUb25lLlN0ZXJlb1dpZGVuZXIpO1xuXHQgICAgICAgIFRvbmUuTWlkU2lkZUVmZmVjdC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSB3aWR0aCBjb250cm9sLiAwID0gMTAwJSBtaWQuIDEgPSAxMDAlIHNpZGUuIDAuNSA9IG5vIGNoYW5nZS5cblx0XHRcdCAqICBAdHlwZSB7Tm9ybWFsUmFuZ2V9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy53aWR0aCA9IG5ldyBUb25lLlNpZ25hbChvcHRpb25zLndpZHRoLCBUb25lLlR5cGUuTm9ybWFsUmFuZ2UpO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KFsnd2lkdGgnXSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUd28gdGltZXMgdGhlICgxLXdpZHRoKSBmb3IgdGhlIG1pZCBjaGFubmVsXG5cdFx0XHQgKiBAdHlwZSB7VG9uZS5NdWx0aXBseX1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl90d29UaW1lc1dpZHRoTWlkID0gbmV3IFRvbmUuTXVsdGlwbHkoMik7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUd28gdGltZXMgdGhlIHdpZHRoIGZvciB0aGUgc2lkZSBjaGFubmVsXG5cdFx0XHQgKiBAdHlwZSB7VG9uZS5NdWx0aXBseX1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl90d29UaW1lc1dpZHRoU2lkZSA9IG5ldyBUb25lLk11bHRpcGx5KDIpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIE1pZCBtdWx0aXBsaWVyXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuTXVsdGlwbHl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX21pZE11bHQgPSBuZXcgVG9uZS5NdWx0aXBseSgpO1xuXHQgICAgICAgIHRoaXMuX3R3b1RpbWVzV2lkdGhNaWQuY29ubmVjdCh0aGlzLl9taWRNdWx0LCAwLCAxKTtcblx0ICAgICAgICB0aGlzLm1pZFNlbmQuY2hhaW4odGhpcy5fbWlkTXVsdCwgdGhpcy5taWRSZXR1cm4pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogMSAtIHdpZHRoXG5cdFx0XHQgKiBAdHlwZSB7VG9uZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX29uZU1pbnVzV2lkdGggPSBuZXcgVG9uZS5TdWJ0cmFjdCgpO1xuXHQgICAgICAgIHRoaXMuX29uZU1pbnVzV2lkdGguY29ubmVjdCh0aGlzLl90d29UaW1lc1dpZHRoTWlkKTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuZ2V0Q29uc3RhbnQoMSkuY29ubmVjdCh0aGlzLl9vbmVNaW51c1dpZHRoLCAwLCAwKTtcblx0ICAgICAgICB0aGlzLndpZHRoLmNvbm5lY3QodGhpcy5fb25lTWludXNXaWR0aCwgMCwgMSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgU2lkZSBtdWx0aXBsaWVyXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuTXVsdGlwbHl9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3NpZGVNdWx0ID0gbmV3IFRvbmUuTXVsdGlwbHkoKTtcblx0ICAgICAgICB0aGlzLndpZHRoLmNvbm5lY3QodGhpcy5fdHdvVGltZXNXaWR0aFNpZGUpO1xuXHQgICAgICAgIHRoaXMuX3R3b1RpbWVzV2lkdGhTaWRlLmNvbm5lY3QodGhpcy5fc2lkZU11bHQsIDAsIDEpO1xuXHQgICAgICAgIHRoaXMuc2lkZVNlbmQuY2hhaW4odGhpcy5fc2lkZU11bHQsIHRoaXMuc2lkZVJldHVybik7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5TdGVyZW9XaWRlbmVyLCBUb25lLk1pZFNpZGVFZmZlY3QpO1xuXHQgICAgLyoqXG5cdFx0ICogIHRoZSBkZWZhdWx0IHZhbHVlc1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLlN0ZXJlb1dpZGVuZXIuZGVmYXVsdHMgPSB7ICd3aWR0aCc6IDAuNSB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5TdGVyZW9XaWRlbmVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlN0ZXJlb1dpZGVuZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5NaWRTaWRlRWZmZWN0LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoWyd3aWR0aCddKTtcblx0ICAgICAgICB0aGlzLndpZHRoLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLndpZHRoID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9taWRNdWx0LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9taWRNdWx0ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9zaWRlTXVsdC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fc2lkZU11bHQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3R3b1RpbWVzV2lkdGhNaWQuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3R3b1RpbWVzV2lkdGhNaWQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3R3b1RpbWVzV2lkdGhTaWRlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl90d29UaW1lc1dpZHRoU2lkZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fb25lTWludXNXaWR0aC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fb25lTWludXNXaWR0aCA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuU3RlcmVvV2lkZW5lcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuVHJlbW9sbyBtb2R1bGF0ZXMgdGhlIGFtcGxpdHVkZSBvZiBhbiBpbmNvbWluZyBzaWduYWwgdXNpbmcgYSBUb25lLkxGTy5cblx0XHQgKiAgICAgICAgIFRoZSB0eXBlLCBmcmVxdWVuY3ksIGFuZCBkZXB0aCBvZiB0aGUgTEZPIGlzIGNvbnRyb2xsYWJsZS5cblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5TdGVyZW9FZmZlY3R9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAcGFyYW0ge0ZyZXF1ZW5jeX0gW2ZyZXF1ZW5jeV0gVGhlIHJhdGUgb2YgdGhlIGVmZmVjdC5cblx0XHQgKiAgQHBhcmFtIHtOb3JtYWxSYW5nZX0gW2RlcHRoXSBUaGUgZGVwdGggb2YgdGhlIGVmZmVjdC5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2NyZWF0ZSBhIHRyZW1vbG8gYW5kIHN0YXJ0IGl0J3MgTEZPXG5cdFx0ICogdmFyIHRyZW1vbG8gPSBuZXcgVG9uZS5UcmVtb2xvKDksIDAuNzUpLnRvTWFzdGVyKCkuc3RhcnQoKTtcblx0XHQgKiAvL3JvdXRlIGFuIG9zY2lsbGF0b3IgdGhyb3VnaCB0aGUgdHJlbW9sbyBhbmQgc3RhcnQgaXRcblx0XHQgKiB2YXIgb3NjaWxsYXRvciA9IG5ldyBUb25lLk9zY2lsbGF0b3IoKS5jb25uZWN0KHRyZW1vbG8pLnN0YXJ0KCk7XG5cdFx0ICovXG5cdCAgICBUb25lLlRyZW1vbG8gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2RlcHRoJ1xuXHQgICAgICAgIF0sIFRvbmUuVHJlbW9sbyk7XG5cdCAgICAgICAgVG9uZS5TdGVyZW9FZmZlY3QuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgdHJlbWVsbyBMRk8gaW4gdGhlIGxlZnQgY2hhbm5lbFxuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5MRk99XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2xmb0wgPSBuZXcgVG9uZS5MRk8oe1xuXHQgICAgICAgICAgICAncGhhc2UnOiBvcHRpb25zLnNwcmVhZCxcblx0ICAgICAgICAgICAgJ21pbic6IDEsXG5cdCAgICAgICAgICAgICdtYXgnOiAwXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHRyZW1lbG8gTEZPIGluIHRoZSBsZWZ0IGNoYW5uZWxcblx0XHRcdCAqICBAdHlwZSAge1RvbmUuTEZPfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sZm9SID0gbmV3IFRvbmUuTEZPKHtcblx0ICAgICAgICAgICAgJ3BoYXNlJzogb3B0aW9ucy5zcHJlYWQsXG5cdCAgICAgICAgICAgICdtaW4nOiAxLFxuXHQgICAgICAgICAgICAnbWF4JzogMFxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFdoZXJlIHRoZSBnYWluIGlzIG11bHRpcGxpZWRcblx0XHRcdCAqICBAdHlwZSAge1RvbmUuR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYW1wbGl0dWRlTCA9IG5ldyBUb25lLkdhaW4oKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBXaGVyZSB0aGUgZ2FpbiBpcyBtdWx0aXBsaWVkXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLkdhaW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2FtcGxpdHVkZVIgPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGZyZXF1ZW5jeSBvZiB0aGUgdHJlbW9sby5cblx0XHRcdCAqICBAdHlwZSAge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG5ldyBUb25lLlNpZ25hbChvcHRpb25zLmZyZXF1ZW5jeSwgVG9uZS5UeXBlLkZyZXF1ZW5jeSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGRlcHRoIG9mIHRoZSBlZmZlY3QuIEEgZGVwdGggb2YgMCwgaGFzIG5vIGVmZmVjdFxuXHRcdFx0ICogIG9uIHRoZSBhbXBsaXR1ZGUsIGFuZCBhIGRlcHRoIG9mIDEgbWFrZXMgdGhlIGFtcGxpdHVkZVxuXHRcdFx0ICogIG1vZHVsYXRlIGZ1bGx5IGJldHdlZW4gMCBhbmQgMS5cblx0XHRcdCAqICBAdHlwZSAge05vcm1hbFJhbmdlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGVwdGggPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5kZXB0aCwgVG9uZS5UeXBlLk5vcm1hbFJhbmdlKTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZGVwdGgnXG5cdCAgICAgICAgXSk7XG5cdCAgICAgICAgdGhpcy5lZmZlY3RTZW5kTC5jaGFpbih0aGlzLl9hbXBsaXR1ZGVMLCB0aGlzLmVmZmVjdFJldHVybkwpO1xuXHQgICAgICAgIHRoaXMuZWZmZWN0U2VuZFIuY2hhaW4odGhpcy5fYW1wbGl0dWRlUiwgdGhpcy5lZmZlY3RSZXR1cm5SKTtcblx0ICAgICAgICB0aGlzLl9sZm9MLmNvbm5lY3QodGhpcy5fYW1wbGl0dWRlTC5nYWluKTtcblx0ICAgICAgICB0aGlzLl9sZm9SLmNvbm5lY3QodGhpcy5fYW1wbGl0dWRlUi5nYWluKTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeS5mYW4odGhpcy5fbGZvTC5mcmVxdWVuY3ksIHRoaXMuX2xmb1IuZnJlcXVlbmN5KTtcblx0ICAgICAgICB0aGlzLmRlcHRoLmZhbih0aGlzLl9sZm9SLmFtcGxpdHVkZSwgdGhpcy5fbGZvTC5hbXBsaXR1ZGUpO1xuXHQgICAgICAgIHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZTtcblx0ICAgICAgICB0aGlzLnNwcmVhZCA9IG9wdGlvbnMuc3ByZWFkO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuVHJlbW9sbywgVG9uZS5TdGVyZW9FZmZlY3QpO1xuXHQgICAgLyoqXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLlRyZW1vbG8uZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2ZyZXF1ZW5jeSc6IDEwLFxuXHQgICAgICAgICd0eXBlJzogJ3NpbmUnLFxuXHQgICAgICAgICdkZXB0aCc6IDAuNSxcblx0ICAgICAgICAnc3ByZWFkJzogMTgwXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogU3RhcnQgdGhlIHRyZW1vbG8uXG5cdFx0ICogQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIFdoZW4gdGhlIHRyZW1vbG8gYmVnaW5zLlxuXHRcdCAqIEByZXR1cm5zIHtUb25lLlRyZW1vbG99IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJlbW9sby5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRoaXMuX2xmb0wuc3RhcnQodGltZSk7XG5cdCAgICAgICAgdGhpcy5fbGZvUi5zdGFydCh0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBTdG9wIHRoZSB0cmVtb2xvLlxuXHRcdCAqIEBwYXJhbSB7VGltZX0gW3RpbWU9bm93XSBXaGVuIHRoZSB0cmVtb2xvIHN0b3BzLlxuXHRcdCAqIEByZXR1cm5zIHtUb25lLlRyZW1vbG99IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJlbW9sby5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fbGZvTC5zdG9wKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX2xmb1Iuc3RvcCh0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBTeW5jIHRoZSBlZmZlY3QgdG8gdGhlIHRyYW5zcG9ydC5cblx0XHQgKiBAcGFyYW0ge1RpbWV9IFtkZWxheT0wXSBEZWxheSB0aW1lIGJlZm9yZSBzdGFydGluZyB0aGUgZWZmZWN0IGFmdGVyIHRoZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVHJhbnNwb3J0IGhhcyBzdGFydGVkLlxuXHRcdCAqIEByZXR1cm5zIHtUb25lLkF1dG9GaWx0ZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJlbW9sby5wcm90b3R5cGUuc3luYyA9IGZ1bmN0aW9uIChkZWxheSkge1xuXHQgICAgICAgIHRoaXMuX2xmb0wuc3luYyhkZWxheSk7XG5cdCAgICAgICAgdGhpcy5fbGZvUi5zeW5jKGRlbGF5KTtcblx0ICAgICAgICBUb25lLlRyYW5zcG9ydC5zeW5jU2lnbmFsKHRoaXMuZnJlcXVlbmN5KTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBVbnN5bmMgdGhlIGZpbHRlciBmcm9tIHRoZSB0cmFuc3BvcnRcblx0XHQgKiBAcmV0dXJucyB7VG9uZS5UcmVtb2xvfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRyZW1vbG8ucHJvdG90eXBlLnVuc3luYyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLl9sZm9MLnVuc3luYygpO1xuXHQgICAgICAgIHRoaXMuX2xmb1IudW5zeW5jKCk7XG5cdCAgICAgICAgVG9uZS5UcmFuc3BvcnQudW5zeW5jU2lnbmFsKHRoaXMuZnJlcXVlbmN5KTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBUaGUgVHJlbW9sbydzIG9zY2lsbGF0b3IgdHlwZS5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5UcmVtb2xvI1xuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQG5hbWUgdHlwZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuVHJlbW9sby5wcm90b3R5cGUsICd0eXBlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGZvTC50eXBlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9sZm9MLnR5cGUgPSB0eXBlO1xuXHQgICAgICAgICAgICB0aGlzLl9sZm9SLnR5cGUgPSB0eXBlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogQW1vdW50IG9mIHN0ZXJlbyBzcHJlYWQuIFdoZW4gc2V0IHRvIDAsIGJvdGggTEZPJ3Mgd2lsbCBiZSBwYW5uZWQgY2VudHJhbGx5LlxuXHRcdCAqIFdoZW4gc2V0IHRvIDE4MCwgTEZPJ3Mgd2lsbCBiZSBwYW5uZWQgaGFyZCBsZWZ0IGFuZCByaWdodCByZXNwZWN0aXZlbHkuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuVHJlbW9sbyNcblx0XHQgKiBAdHlwZSB7RGVncmVlc31cblx0XHQgKiBAbmFtZSBzcHJlYWRcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlRyZW1vbG8ucHJvdG90eXBlLCAnc3ByZWFkJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGZvUi5waGFzZSAtIHRoaXMuX2xmb0wucGhhc2U7ICAgIC8vMTgwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzcHJlYWQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbGZvTC5waGFzZSA9IDkwIC0gc3ByZWFkIC8gMjtcblx0ICAgICAgICAgICAgdGhpcy5fbGZvUi5waGFzZSA9IHNwcmVhZCAvIDIgKyA5MDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UcmVtb2xvfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRyZW1vbG8ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TdGVyZW9FZmZlY3QucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZGVwdGgnXG5cdCAgICAgICAgXSk7XG5cdCAgICAgICAgdGhpcy5fbGZvTC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbGZvTCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbGZvUi5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbGZvUiA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fYW1wbGl0dWRlTC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fYW1wbGl0dWRlTCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fYW1wbGl0dWRlUi5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fYW1wbGl0dWRlUiA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZGVwdGggPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlRyZW1vbG87XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBBIFZpYnJhdG8gZWZmZWN0IGNvbXBvc2VkIG9mIGEgVG9uZS5EZWxheSBhbmQgYSBUb25lLkxGTy4gVGhlIExGT1xuXHRcdCAqICAgICAgICAgbW9kdWxhdGVzIHRoZSBkZWxheVRpbWUgb2YgdGhlIGRlbGF5LCBjYXVzaW5nIHRoZSBwaXRjaCB0byByaXNlXG5cdFx0ICogICAgICAgICBhbmQgZmFsbC4gXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkVmZmVjdH1cblx0XHQgKiAgQHBhcmFtIHtGcmVxdWVuY3l9IGZyZXF1ZW5jeSBUaGUgZnJlcXVlbmN5IG9mIHRoZSB2aWJyYXRvLlxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlfSBkZXB0aCBUaGUgYW1vdW50IHRoZSBwaXRjaCBpcyBtb2R1bGF0ZWQuXG5cdFx0ICovXG5cdCAgICBUb25lLlZpYnJhdG8gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2RlcHRoJ1xuXHQgICAgICAgIF0sIFRvbmUuVmlicmF0byk7XG5cdCAgICAgICAgVG9uZS5FZmZlY3QuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZGVsYXkgbm9kZSB1c2VkIGZvciB0aGUgdmlicmF0byBlZmZlY3Rcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5EZWxheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZGVsYXlOb2RlID0gbmV3IFRvbmUuRGVsYXkoMCwgb3B0aW9ucy5tYXhEZWxheSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIExGTyB1c2VkIHRvIGNvbnRyb2wgdGhlIHZpYnJhdG9cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5MRk99XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2xmbyA9IG5ldyBUb25lLkxGTyh7XG5cdCAgICAgICAgICAgICd0eXBlJzogb3B0aW9ucy50eXBlLFxuXHQgICAgICAgICAgICAnbWluJzogMCxcblx0ICAgICAgICAgICAgJ21heCc6IG9wdGlvbnMubWF4RGVsYXksXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knOiBvcHRpb25zLmZyZXF1ZW5jeSxcblx0ICAgICAgICAgICAgJ3BoYXNlJzogLTkwICAgIC8vb2Zmc2UgdGhlIHBoYXNlIHNvIHRoZSByZXN0aW5nIHBvc2l0aW9uIGlzIGluIHRoZSBjZW50ZXJcblx0ICAgICAgICB9KS5zdGFydCgpLmNvbm5lY3QodGhpcy5fZGVsYXlOb2RlLmRlbGF5VGltZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGZyZXF1ZW5jeSBvZiB0aGUgdmlicmF0b1xuXHRcdFx0ICogIEB0eXBlIHtGcmVxdWVuY3l9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSB0aGlzLl9sZm8uZnJlcXVlbmN5O1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBkZXB0aCBvZiB0aGUgdmlicmF0by4gXG5cdFx0XHQgKiAgQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGVwdGggPSB0aGlzLl9sZm8uYW1wbGl0dWRlO1xuXHQgICAgICAgIHRoaXMuZGVwdGgudmFsdWUgPSBvcHRpb25zLmRlcHRoO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KFtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdkZXB0aCdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLmVmZmVjdFNlbmQuY2hhaW4odGhpcy5fZGVsYXlOb2RlLCB0aGlzLmVmZmVjdFJldHVybik7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5WaWJyYXRvLCBUb25lLkVmZmVjdCk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGRlZmF1bHRzXG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqICBAY29uc3Rcblx0XHQgKi9cblx0ICAgIFRvbmUuVmlicmF0by5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnbWF4RGVsYXknOiAwLjAwNSxcblx0ICAgICAgICAnZnJlcXVlbmN5JzogNSxcblx0ICAgICAgICAnZGVwdGgnOiAwLjEsXG5cdCAgICAgICAgJ3R5cGUnOiAnc2luZSdcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBUeXBlIG9mIG9zY2lsbGF0b3IgYXR0YWNoZWQgdG8gdGhlIFZpYnJhdG8uXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuVmlicmF0byNcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBuYW1lIHR5cGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlZpYnJhdG8ucHJvdG90eXBlLCAndHlwZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xmby50eXBlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9sZm8udHlwZSA9IHR5cGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlZpYnJhdG99IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVmlicmF0by5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkVmZmVjdC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX2RlbGF5Tm9kZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZGVsYXlOb2RlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9sZm8uZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2xmbyA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2RlcHRoJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmRlcHRoID0gbnVsbDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5WaWJyYXRvO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIFRvbmUuRXZlbnQgYWJzdHJhY3RzIGF3YXkgVG9uZS5UcmFuc3BvcnQuc2NoZWR1bGUgYW5kIHByb3ZpZGVzIGEgc2NoZWR1bGFibGVcblx0XHQgKiAgICAgICAgICBjYWxsYmFjayBmb3IgYSBzaW5nbGUgb3IgcmVwZWF0YWJsZSBldmVudHMgYWxvbmcgdGhlIHRpbWVsaW5lLlxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lfVxuXHRcdCAqICBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGF0IHRoZSB0aW1lLlxuXHRcdCAqICBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSBvciB2YWx1ZXMgd2hpY2ggc2hvdWxkIGJlIHBhc3NlZCB0b1xuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBvbiBpbnZvY2F0aW9uLlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBjaG9yZCA9IG5ldyBUb25lLkV2ZW50KGZ1bmN0aW9uKHRpbWUsIGNob3JkKXtcblx0XHQgKiBcdC8vdGhlIGNob3JkIGFzIHdlbGwgYXMgdGhlIGV4YWN0IHRpbWUgb2YgdGhlIGV2ZW50XG5cdFx0ICogXHQvL2FyZSBwYXNzZWQgaW4gYXMgYXJndW1lbnRzIHRvIHRoZSBjYWxsYmFjayBmdW5jdGlvblxuXHRcdCAqIH0sIFtcIkQ0XCIsIFwiRTRcIiwgXCJGNFwiXSk7XG5cdFx0ICogLy9zdGFydCB0aGUgY2hvcmQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHJhbnNwb3J0IHRpbWVsaW5lXG5cdFx0ICogY2hvcmQuc3RhcnQoKTtcblx0XHQgKiAvL2xvb3AgaXQgZXZlcnkgbWVhc3VyZSBmb3IgOCBtZWFzdXJlc1xuXHRcdCAqIGNob3JkLmxvb3AgPSA4O1xuXHRcdCAqIGNob3JkLmxvb3BFbmQgPSBcIjFtXCI7XG5cdFx0ICovXG5cdCAgICBUb25lLkV2ZW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2NhbGxiYWNrJyxcblx0ICAgICAgICAgICAgJ3ZhbHVlJ1xuXHQgICAgICAgIF0sIFRvbmUuRXZlbnQpO1xuXHQgICAgICAgIFRvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBMb29wIHZhbHVlXG5cdFx0XHQgKiAgQHR5cGUgIHtCb29sZWFufFBvc2l0aXZlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sb29wID0gb3B0aW9ucy5sb29wO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBjYWxsYmFjayB0byBpbnZva2UuXG5cdFx0XHQgKiAgQHR5cGUgIHtGdW5jdGlvbn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuY2FsbGJhY2sgPSBvcHRpb25zLmNhbGxiYWNrO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSB2YWx1ZSB3aGljaCBpcyBwYXNzZWQgdG8gdGhlXG5cdFx0XHQgKiAgY2FsbGJhY2sgZnVuY3Rpb24uXG5cdFx0XHQgKiAgQHR5cGUgIHsqfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLnZhbHVlID0gb3B0aW9ucy52YWx1ZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBXaGVuIHRoZSBub3RlIGlzIHNjaGVkdWxlZCB0byBzdGFydC5cblx0XHRcdCAqICBAdHlwZSAge051bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbG9vcFN0YXJ0ID0gdGhpcy50b1RpY2tzKG9wdGlvbnMubG9vcFN0YXJ0KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBXaGVuIHRoZSBub3RlIGlzIHNjaGVkdWxlZCB0byBzdGFydC5cblx0XHRcdCAqICBAdHlwZSAge051bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbG9vcEVuZCA9IHRoaXMudG9UaWNrcyhvcHRpb25zLmxvb3BFbmQpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRyYWNrcyB0aGUgc2NoZWR1bGVkIGV2ZW50c1xuXHRcdFx0ICogIEB0eXBlIHtUb25lLlRpbWVsaW5lU3RhdGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N0YXRlID0gbmV3IFRvbmUuVGltZWxpbmVTdGF0ZShUb25lLlN0YXRlLlN0b3BwZWQpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBwbGF5YmFjayBzcGVlZCBvZiB0aGUgbm90ZS4gQSBzcGVlZCBvZiAxXG5cdFx0XHQgKiAgaXMgbm8gY2hhbmdlLlxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKiAgQHR5cGUge1Bvc2l0aXZlfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcGxheWJhY2tSYXRlID0gMTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBBIGRlbGF5IHRpbWUgZnJvbSB3aGVuIHRoZSBldmVudCBpcyBzY2hlZHVsZWQgdG8gc3RhcnRcblx0XHRcdCAqICBAdHlwZSB7VGlja3N9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N0YXJ0T2Zmc2V0ID0gMDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBwcml2YXRlIGhvbGRlciBvZiBwcm9iYWJpbGl0eSB2YWx1ZVxuXHRcdFx0ICogIEB0eXBlIHtOb3JtYWxSYW5nZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcHJvYmFiaWxpdHkgPSBvcHRpb25zLnByb2JhYmlsaXR5O1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBhbW91bnQgb2YgdmFyaWF0aW9uIGZyb20gdGhlXG5cdFx0XHQgKiAgZ2l2ZW4gdGltZS5cblx0XHRcdCAqICBAdHlwZSB7Qm9vbGVhbnxUaW1lfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9odW1hbml6ZSA9IG9wdGlvbnMuaHVtYW5pemU7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgSWYgbXV0ZSBpcyB0cnVlLCB0aGUgY2FsbGJhY2sgd29uJ3QgYmVcblx0XHRcdCAqICBpbnZva2VkLlxuXHRcdFx0ICogIEB0eXBlIHtCb29sZWFufVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5tdXRlID0gb3B0aW9ucy5tdXRlO1xuXHQgICAgICAgIC8vc2V0IHRoZSBpbml0aWFsIHZhbHVlc1xuXHQgICAgICAgIHRoaXMucGxheWJhY2tSYXRlID0gb3B0aW9ucy5wbGF5YmFja1JhdGU7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5FdmVudCk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGRlZmF1bHQgdmFsdWVzXG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqICBAY29uc3Rcblx0XHQgKi9cblx0ICAgIFRvbmUuRXZlbnQuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2NhbGxiYWNrJzogVG9uZS5ub09wLFxuXHQgICAgICAgICdsb29wJzogZmFsc2UsXG5cdCAgICAgICAgJ2xvb3BFbmQnOiAnMW0nLFxuXHQgICAgICAgICdsb29wU3RhcnQnOiAwLFxuXHQgICAgICAgICdwbGF5YmFja1JhdGUnOiAxLFxuXHQgICAgICAgICd2YWx1ZSc6IG51bGwsXG5cdCAgICAgICAgJ3Byb2JhYmlsaXR5JzogMSxcblx0ICAgICAgICAnbXV0ZSc6IGZhbHNlLFxuXHQgICAgICAgICdodW1hbml6ZSc6IGZhbHNlXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJlc2NoZWR1bGUgYWxsIG9mIHRoZSBldmVudHMgYWxvbmcgdGhlIHRpbWVsaW5lXG5cdFx0ICogIHdpdGggdGhlIHVwZGF0ZWQgdmFsdWVzLlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IGFmdGVyIE9ubHkgcmVzY2hlZHVsZXMgZXZlbnRzIGFmdGVyIHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5FdmVudH0gIHRoaXNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuRXZlbnQucHJvdG90eXBlLl9yZXNjaGVkdWxlRXZlbnRzID0gZnVuY3Rpb24gKGFmdGVyKSB7XG5cdCAgICAgICAgLy9pZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgc2NoZWR1bGVzIGFsbCBvZiB0aGUgZXZlbnRzXG5cdCAgICAgICAgYWZ0ZXIgPSBUb25lLmRlZmF1bHRBcmcoYWZ0ZXIsIC0xKTtcblx0ICAgICAgICB0aGlzLl9zdGF0ZS5mb3JFYWNoRnJvbShhZnRlciwgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIHZhciBkdXJhdGlvbjtcblx0ICAgICAgICAgICAgaWYgKGV2ZW50LnN0YXRlID09PSBUb25lLlN0YXRlLlN0YXJ0ZWQpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChUb25lLmlzRGVmaW5lZChldmVudC5pZCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBUb25lLlRyYW5zcG9ydC5jbGVhcihldmVudC5pZCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB2YXIgc3RhcnRUaWNrID0gZXZlbnQudGltZSArIE1hdGgucm91bmQodGhpcy5zdGFydE9mZnNldCAvIHRoaXMuX3BsYXliYWNrUmF0ZSk7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5fbG9vcCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gSW5maW5pdHk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKFRvbmUuaXNOdW1iZXIodGhpcy5fbG9vcCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSB0aGlzLl9sb29wICogdGhpcy5fZ2V0TG9vcER1cmF0aW9uKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0RXZlbnQgPSB0aGlzLl9zdGF0ZS5nZXRBZnRlcihzdGFydFRpY2spO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0RXZlbnQgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBNYXRoLm1pbihkdXJhdGlvbiwgbmV4dEV2ZW50LnRpbWUgLSBzdGFydFRpY2spO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZHVyYXRpb24gIT09IEluZmluaXR5KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vc2NoZWR1bGUgYSBzdG9wIHNpbmNlIGl0J3MgZmluaXRlIGR1cmF0aW9uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlLnNldFN0YXRlQXRUaW1lKFRvbmUuU3RhdGUuU3RvcHBlZCwgc3RhcnRUaWNrICsgZHVyYXRpb24gKyAxKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBUb25lLlRpY2tzKGR1cmF0aW9uKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGludGVydmFsID0gVG9uZS5UaWNrcyh0aGlzLl9nZXRMb29wRHVyYXRpb24oKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgZXZlbnQuaWQgPSBUb25lLlRyYW5zcG9ydC5zY2hlZHVsZVJlcGVhdCh0aGlzLl90aWNrLmJpbmQodGhpcyksIGludGVydmFsLCBUb25lLlRpY2tzKHN0YXJ0VGljayksIGR1cmF0aW9uKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZXZlbnQuaWQgPSBUb25lLlRyYW5zcG9ydC5zY2hlZHVsZSh0aGlzLl90aWNrLmJpbmQodGhpcyksIFRvbmUuVGlja3Moc3RhcnRUaWNrKSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LmJpbmQodGhpcykpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm5zIHRoZSBwbGF5YmFjayBzdGF0ZSBvZiB0aGUgbm90ZSwgZWl0aGVyIFwic3RhcnRlZFwiIG9yIFwic3RvcHBlZFwiLlxuXHRcdCAqICBAdHlwZSB7U3RyaW5nfVxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuRXZlbnQjXG5cdFx0ICogIEBuYW1lIHN0YXRlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5FdmVudC5wcm90b3R5cGUsICdzdGF0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldFZhbHVlQXRUaW1lKFRvbmUuVHJhbnNwb3J0LnRpY2tzKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgc3RhcnQgZnJvbSB0aGUgc2NoZWR1bGVkIHN0YXJ0IHRpbWVcblx0XHQgKiAgQHR5cGUge1RpY2tzfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5FdmVudCNcblx0XHQgKiAgQG5hbWUgc3RhcnRPZmZzZXRcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkV2ZW50LnByb3RvdHlwZSwgJ3N0YXJ0T2Zmc2V0Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnRPZmZzZXQ7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fc3RhcnRPZmZzZXQgPSBvZmZzZXQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHByb2JhYmlsaXR5IG9mIHRoZSBub3RlcyBiZWluZyB0cmlnZ2VyZWQuXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkV2ZW50I1xuXHRcdCAqICBAdHlwZSB7Tm9ybWFsUmFuZ2V9XG5cdFx0ICogIEBuYW1lIHByb2JhYmlsaXR5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5FdmVudC5wcm90b3R5cGUsICdwcm9iYWJpbGl0eScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2JhYmlsaXR5O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocHJvYikge1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9iYWJpbGl0eSA9IHByb2I7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgSWYgc2V0IHRvIHRydWUsIHdpbGwgYXBwbHkgc21hbGwgcmFuZG9tIHZhcmlhdGlvblxuXHRcdCAqICB0byB0aGUgY2FsbGJhY2sgdGltZS4gSWYgdGhlIHZhbHVlIGlzIGdpdmVuIGFzIGEgdGltZSwgaXQgd2lsbCByYW5kb21pemVcblx0XHQgKiAgYnkgdGhhdCBhbW91bnQuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogZXZlbnQuaHVtYW5pemUgPSB0cnVlO1xuXHRcdCAqICBAdHlwZSB7Qm9vbGVhbnxUaW1lfVxuXHRcdCAqICBAbmFtZSBodW1hbml6ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuRXZlbnQucHJvdG90eXBlLCAnaHVtYW5pemUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9odW1hbml6ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHZhcmlhdGlvbikge1xuXHQgICAgICAgICAgICB0aGlzLl9odW1hbml6ZSA9IHZhcmlhdGlvbjtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdGFydCB0aGUgbm90ZSBhdCB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgQHBhcmFtICB7VGltZWxpbmVQb3NpdGlvbn0gIHRpbWUgIFdoZW4gdGhlIG5vdGUgc2hvdWxkIHN0YXJ0LlxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5FdmVudH0gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRXZlbnQucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1RpY2tzKHRpbWUpO1xuXHQgICAgICAgIGlmICh0aGlzLl9zdGF0ZS5nZXRWYWx1ZUF0VGltZSh0aW1lKSA9PT0gVG9uZS5TdGF0ZS5TdG9wcGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3N0YXRlLmFkZCh7XG5cdCAgICAgICAgICAgICAgICAnc3RhdGUnOiBUb25lLlN0YXRlLlN0YXJ0ZWQsXG5cdCAgICAgICAgICAgICAgICAndGltZSc6IHRpbWUsXG5cdCAgICAgICAgICAgICAgICAnaWQnOiB1bmRlZmluZWRcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHRoaXMuX3Jlc2NoZWR1bGVFdmVudHModGltZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdG9wIHRoZSBFdmVudCBhdCB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgQHBhcmFtICB7VGltZWxpbmVQb3NpdGlvbn0gIHRpbWUgIFdoZW4gdGhlIG5vdGUgc2hvdWxkIHN0b3AuXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkV2ZW50fSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5FdmVudC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5jYW5jZWwodGltZSk7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9UaWNrcyh0aW1lKTtcblx0ICAgICAgICBpZiAodGhpcy5fc3RhdGUuZ2V0VmFsdWVBdFRpbWUodGltZSkgPT09IFRvbmUuU3RhdGUuU3RhcnRlZCkge1xuXHQgICAgICAgICAgICB0aGlzLl9zdGF0ZS5zZXRTdGF0ZUF0VGltZShUb25lLlN0YXRlLlN0b3BwZWQsIHRpbWUpO1xuXHQgICAgICAgICAgICB2YXIgcHJldmlvdXNFdmVudCA9IHRoaXMuX3N0YXRlLmdldEJlZm9yZSh0aW1lKTtcblx0ICAgICAgICAgICAgdmFyIHJlc2NoZWR1bFRpbWUgPSB0aW1lO1xuXHQgICAgICAgICAgICBpZiAocHJldmlvdXNFdmVudCAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgcmVzY2hlZHVsVGltZSA9IHByZXZpb3VzRXZlbnQudGltZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLl9yZXNjaGVkdWxlRXZlbnRzKHJlc2NoZWR1bFRpbWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2FuY2VsIGFsbCBzY2hlZHVsZWQgZXZlbnRzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gdGltZVxuXHRcdCAqICBAcGFyYW0gIHtUaW1lbGluZVBvc2l0aW9ufSAgW3RpbWU9MF0gIFRoZSB0aW1lIGFmdGVyIHdoaWNoIGV2ZW50cyB3aWxsIGJlIGNhbmNlbC5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuRXZlbnR9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkV2ZW50LnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSBUb25lLmRlZmF1bHRBcmcodGltZSwgLUluZmluaXR5KTtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1RpY2tzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX3N0YXRlLmZvckVhY2hGcm9tKHRpbWUsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICBUb25lLlRyYW5zcG9ydC5jbGVhcihldmVudC5pZCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5fc3RhdGUuY2FuY2VsKHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gaW52b2tlci4gQWxzb1xuXHRcdCAqICBjaGVja3MgaWYgdGhlIEV2ZW50IGlzIGRvbmUgcGxheWluZ1xuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lICBUaGUgdGltZSBvZiB0aGUgZXZlbnQgaW4gc2Vjb25kc1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5FdmVudC5wcm90b3R5cGUuX3RpY2sgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHZhciB0aWNrcyA9IFRvbmUuVHJhbnNwb3J0LmdldFRpY2tzQXRUaW1lKHRpbWUpO1xuXHQgICAgICAgIGlmICghdGhpcy5tdXRlICYmIHRoaXMuX3N0YXRlLmdldFZhbHVlQXRUaW1lKHRpY2tzKSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnByb2JhYmlsaXR5IDwgMSAmJiBNYXRoLnJhbmRvbSgpID4gdGhpcy5wcm9iYWJpbGl0eSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmh1bWFuaXplKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgdmFyaWF0aW9uID0gMC4wMjtcblx0ICAgICAgICAgICAgICAgIGlmICghVG9uZS5pc0Jvb2xlYW4odGhpcy5odW1hbml6ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXJpYXRpb24gPSB0aGlzLnRvU2Vjb25kcyh0aGlzLmh1bWFuaXplKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHRpbWUgKz0gKE1hdGgucmFuZG9tKCkgKiAyIC0gMSkgKiB2YXJpYXRpb247XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh0aW1lLCB0aGlzLnZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEdldCB0aGUgZHVyYXRpb24gb2YgdGhlIGxvb3AuXG5cdFx0ICogIEByZXR1cm4gIHtUaWNrc31cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuRXZlbnQucHJvdG90eXBlLl9nZXRMb29wRHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKHRoaXMuX2xvb3BFbmQgLSB0aGlzLl9sb29wU3RhcnQpIC8gdGhpcy5fcGxheWJhY2tSYXRlKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgSWYgdGhlIG5vdGUgc2hvdWxkIGxvb3Agb3Igbm90XG5cdFx0ICogIGJldHdlZW4gVG9uZS5FdmVudC5sb29wU3RhcnQgYW5kXG5cdFx0ICogIFRvbmUuRXZlbnQubG9vcEVuZC4gQW4gaW50ZWdlclxuXHRcdCAqICB2YWx1ZSBjb3JyZXNwb25kcyB0byB0aGUgbnVtYmVyIG9mXG5cdFx0ICogIGxvb3BzIHRoZSBFdmVudCBkb2VzIGFmdGVyIGl0IHN0YXJ0cy5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuRXZlbnQjXG5cdFx0ICogIEB0eXBlIHtCb29sZWFufFBvc2l0aXZlfVxuXHRcdCAqICBAbmFtZSBsb29wXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5FdmVudC5wcm90b3R5cGUsICdsb29wJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9vcDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGxvb3ApIHtcblx0ICAgICAgICAgICAgdGhpcy5fbG9vcCA9IGxvb3A7XG5cdCAgICAgICAgICAgIHRoaXMuX3Jlc2NoZWR1bGVFdmVudHMoKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFx0VGhlIHBsYXliYWNrIHJhdGUgb2YgdGhlIG5vdGUuIERlZmF1bHRzIHRvIDEuXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkV2ZW50I1xuXHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0ICogIEBuYW1lIHBsYXliYWNrUmF0ZVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIG5vdGUubG9vcCA9IHRydWU7XG5cdFx0ICogLy9yZXBlYXQgdGhlIG5vdGUgdHdpY2UgYXMgZmFzdFxuXHRcdCAqIG5vdGUucGxheWJhY2tSYXRlID0gMjtcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkV2ZW50LnByb3RvdHlwZSwgJ3BsYXliYWNrUmF0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BsYXliYWNrUmF0ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHJhdGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcGxheWJhY2tSYXRlID0gcmF0ZTtcblx0ICAgICAgICAgICAgdGhpcy5fcmVzY2hlZHVsZUV2ZW50cygpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBsb29wRW5kIHBvaW50IGlzIHRoZSB0aW1lIHRoZSBldmVudCB3aWxsIGxvb3Bcblx0XHQgKiAgaWYgVG9uZS5FdmVudC5sb29wIGlzIHRydWUuXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkV2ZW50I1xuXHRcdCAqICBAdHlwZSB7VGltZX1cblx0XHQgKiAgQG5hbWUgbG9vcEVuZFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuRXZlbnQucHJvdG90eXBlLCAnbG9vcEVuZCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuVGlja3ModGhpcy5fbG9vcEVuZCkudG9TZWNvbmRzKCk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChsb29wRW5kKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2xvb3BFbmQgPSB0aGlzLnRvVGlja3MobG9vcEVuZCk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9sb29wKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9yZXNjaGVkdWxlRXZlbnRzKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgdGltZSB3aGVuIHRoZSBsb29wIHNob3VsZCBzdGFydC5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuRXZlbnQjXG5cdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdCAqICBAbmFtZSBsb29wU3RhcnRcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkV2ZW50LnByb3RvdHlwZSwgJ2xvb3BTdGFydCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuVGlja3ModGhpcy5fbG9vcFN0YXJ0KS50b1NlY29uZHMoKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGxvb3BTdGFydCkge1xuXHQgICAgICAgICAgICB0aGlzLl9sb29wU3RhcnQgPSB0aGlzLnRvVGlja3MobG9vcFN0YXJ0KTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX2xvb3ApIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2NoZWR1bGVFdmVudHMoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBjdXJyZW50IHByb2dyZXNzIG9mIHRoZSBsb29wIGludGVydmFsLlxuXHRcdCAqICBSZXR1cm5zIDAgaWYgdGhlIGV2ZW50IGlzIG5vdCBzdGFydGVkIHlldCBvclxuXHRcdCAqICBpdCBpcyBub3Qgc2V0IHRvIGxvb3AuXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkV2ZW50I1xuXHRcdCAqICBAdHlwZSB7Tm9ybWFsUmFuZ2V9XG5cdFx0ICogIEBuYW1lIHByb2dyZXNzXG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuRXZlbnQucHJvdG90eXBlLCAncHJvZ3Jlc3MnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9sb29wKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgdGlja3MgPSBUb25lLlRyYW5zcG9ydC50aWNrcztcblx0ICAgICAgICAgICAgICAgIHZhciBsYXN0RXZlbnQgPSB0aGlzLl9zdGF0ZS5nZXQodGlja3MpO1xuXHQgICAgICAgICAgICAgICAgaWYgKGxhc3RFdmVudCAhPT0gbnVsbCAmJiBsYXN0RXZlbnQuc3RhdGUgPT09IFRvbmUuU3RhdGUuU3RhcnRlZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsb29wRHVyYXRpb24gPSB0aGlzLl9nZXRMb29wRHVyYXRpb24oKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSAodGlja3MgLSBsYXN0RXZlbnQudGltZSkgJSBsb29wRHVyYXRpb247XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2dyZXNzIC8gbG9vcER1cmF0aW9uO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAwO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXBcblx0XHQgKiAgQHJldHVybiAge1RvbmUuRXZlbnR9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkV2ZW50LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuY2FuY2VsKCk7XG5cdCAgICAgICAgdGhpcy5fc3RhdGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3N0YXRlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmNhbGxiYWNrID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5FdmVudDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLkxvb3AgY3JlYXRlcyBhIGxvb3BlZCBjYWxsYmFjayBhdCB0aGUgXG5cdFx0ICogICAgICAgICBzcGVjaWZpZWQgaW50ZXJ2YWwuIFRoZSBjYWxsYmFjayBjYW4gYmUgXG5cdFx0ICogICAgICAgICBzdGFydGVkLCBzdG9wcGVkIGFuZCBzY2hlZHVsZWQgYWxvbmdcblx0XHQgKiAgICAgICAgIHRoZSBUcmFuc3BvcnQncyB0aW1lbGluZS4gXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIGxvb3AgPSBuZXcgVG9uZS5Mb29wKGZ1bmN0aW9uKHRpbWUpe1xuXHRcdCAqIFx0Ly90cmlnZ2VyZWQgZXZlcnkgZWlnaHRoIG5vdGUuIFxuXHRcdCAqIFx0Y29uc29sZS5sb2codGltZSk7XG5cdFx0ICogfSwgXCI4blwiKS5zdGFydCgwKTtcblx0XHQgKiBUb25lLlRyYW5zcG9ydC5zdGFydCgpO1xuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0XHQgKiAgQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGludm9rZSB3aXRoIHRoZSBldmVudC5cblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBpbnRlcnZhbCBUaGUgdGltZSBiZXR3ZWVuIHN1Y2Nlc3NpdmUgY2FsbGJhY2sgY2FsbHMuIFxuXHRcdCAqL1xuXHQgICAgVG9uZS5Mb29wID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2NhbGxiYWNrJyxcblx0ICAgICAgICAgICAgJ2ludGVydmFsJ1xuXHQgICAgICAgIF0sIFRvbmUuTG9vcCk7XG5cdCAgICAgICAgVG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBldmVudCB3aGljaCBwcm9kdWNlcyB0aGUgY2FsbGJhY2tzXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9ldmVudCA9IG5ldyBUb25lLkV2ZW50KHtcblx0ICAgICAgICAgICAgJ2NhbGxiYWNrJzogdGhpcy5fdGljay5iaW5kKHRoaXMpLFxuXHQgICAgICAgICAgICAnbG9vcCc6IHRydWUsXG5cdCAgICAgICAgICAgICdsb29wRW5kJzogb3B0aW9ucy5pbnRlcnZhbCxcblx0ICAgICAgICAgICAgJ3BsYXliYWNrUmF0ZSc6IG9wdGlvbnMucGxheWJhY2tSYXRlLFxuXHQgICAgICAgICAgICAncHJvYmFiaWxpdHknOiBvcHRpb25zLnByb2JhYmlsaXR5XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGNhbGxiYWNrIHRvIGludm9rZSB3aXRoIHRoZSBuZXh0IGV2ZW50IGluIHRoZSBwYXR0ZXJuXG5cdFx0XHQgKiAgQHR5cGUge0Z1bmN0aW9ufVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5jYWxsYmFjayA9IG9wdGlvbnMuY2FsbGJhY2s7XG5cdCAgICAgICAgLy9zZXQgdGhlIGl0ZXJhdGlvbnNcblx0ICAgICAgICB0aGlzLml0ZXJhdGlvbnMgPSBvcHRpb25zLml0ZXJhdGlvbnM7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5Mb29wKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdHNcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Mb29wLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdpbnRlcnZhbCc6ICc0bicsXG5cdCAgICAgICAgJ2NhbGxiYWNrJzogVG9uZS5ub09wLFxuXHQgICAgICAgICdwbGF5YmFja1JhdGUnOiAxLFxuXHQgICAgICAgICdpdGVyYXRpb25zJzogSW5maW5pdHksXG5cdCAgICAgICAgJ3Byb2JhYmlsaXR5JzogdHJ1ZSxcblx0ICAgICAgICAnbXV0ZSc6IGZhbHNlXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFN0YXJ0IHRoZSBsb29wIGF0IHRoZSBzcGVjaWZpZWQgdGltZSBhbG9uZyB0aGUgVHJhbnNwb3J0J3Ncblx0XHQgKiAgdGltZWxpbmUuXG5cdFx0ICogIEBwYXJhbSAge1RpbWVsaW5lUG9zaXRpb249fSAgdGltZSAgV2hlbiB0byBzdGFydCB0aGUgTG9vcC5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuTG9vcH0gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTG9vcC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRoaXMuX2V2ZW50LnN0YXJ0KHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdG9wIHRoZSBsb29wIGF0IHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lbGluZVBvc2l0aW9uPX0gIHRpbWUgIFdoZW4gdG8gc3RvcCB0aGUgQXJwZWdnaW9cblx0XHQgKiAgQHJldHVybiAge1RvbmUuTG9vcH0gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTG9vcC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fZXZlbnQuc3RvcCh0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2FuY2VsIGFsbCBzY2hlZHVsZWQgZXZlbnRzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gdGltZVxuXHRcdCAqICBAcGFyYW0gIHtUaW1lbGluZVBvc2l0aW9ufSAgW3RpbWU9MF0gIFRoZSB0aW1lIGFmdGVyIHdoaWNoIGV2ZW50cyB3aWxsIGJlIGNhbmNlbC5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuTG9vcH0gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTG9vcC5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aGlzLl9ldmVudC5jYW5jZWwodGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEludGVybmFsIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBub3RlcyBzaG91bGQgYmUgY2FsbGVkXG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIHRpbWUgIFRoZSB0aW1lIHRoZSBldmVudCBvY2N1cnNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuTG9vcC5wcm90b3R5cGUuX3RpY2sgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRoaXMuY2FsbGJhY2sodGltZSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBzdGF0ZSBvZiB0aGUgTG9vcCwgZWl0aGVyIHN0YXJ0ZWQgb3Igc3RvcHBlZC5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuTG9vcCNcblx0XHQgKiAgQHR5cGUge1N0cmluZ31cblx0XHQgKiAgQG5hbWUgc3RhdGVcblx0XHQgKiAgQHJlYWRPbmx5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Mb29wLnByb3RvdHlwZSwgJ3N0YXRlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnQuc3RhdGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHByb2dyZXNzIG9mIHRoZSBsb29wIGFzIGEgdmFsdWUgYmV0d2VlbiAwLTEuIDAsIHdoZW5cblx0XHQgKiAgdGhlIGxvb3AgaXMgc3RvcHBlZCBvciBkb25lIGl0ZXJhdGluZy4gXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkxvb3AjXG5cdFx0ICogIEB0eXBlIHtOb3JtYWxSYW5nZX1cblx0XHQgKiAgQG5hbWUgcHJvZ3Jlc3Ncblx0XHQgKiAgQHJlYWRPbmx5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Mb29wLnByb3RvdHlwZSwgJ3Byb2dyZXNzJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnQucHJvZ3Jlc3M7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHRpbWUgYmV0d2VlbiBzdWNjZXNzaXZlIGNhbGxiYWNrcy4gXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogbG9vcC5pbnRlcnZhbCA9IFwiOG5cIjsgLy9sb29wIGV2ZXJ5IDhuXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkxvb3AjXG5cdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdCAqICBAbmFtZSBpbnRlcnZhbFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTG9vcC5wcm90b3R5cGUsICdpbnRlcnZhbCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50Lmxvb3BFbmQ7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpbnRlcnZhbCkge1xuXHQgICAgICAgICAgICB0aGlzLl9ldmVudC5sb29wRW5kID0gaW50ZXJ2YWw7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHBsYXliYWNrIHJhdGUgb2YgdGhlIGxvb3AuIFRoZSBub3JtYWwgcGxheWJhY2sgcmF0ZSBpcyAxIChubyBjaGFuZ2UpLiBcblx0XHQgKiAgQSBgcGxheWJhY2tSYXRlYCBvZiAyIHdvdWxkIGJlIHR3aWNlIGFzIGZhc3QuIFxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5Mb29wI1xuXHRcdCAqICBAdHlwZSB7VGltZX1cblx0XHQgKiAgQG5hbWUgcGxheWJhY2tSYXRlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Mb29wLnByb3RvdHlwZSwgJ3BsYXliYWNrUmF0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50LnBsYXliYWNrUmF0ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHJhdGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZXZlbnQucGxheWJhY2tSYXRlID0gcmF0ZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBSYW5kb20gdmFyaWF0aW9uICsvLTAuMDFzIHRvIHRoZSBzY2hlZHVsZWQgdGltZS4gXG5cdFx0ICogIE9yIGdpdmUgaXQgYSB0aW1lIHZhbHVlIHdoaWNoIGl0IHdpbGwgcmFuZG9taXplIGJ5LlxuXHRcdCAqICBAdHlwZSB7Qm9vbGVhbnxUaW1lfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5Mb29wI1xuXHRcdCAqICBAbmFtZSBodW1hbml6ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTG9vcC5wcm90b3R5cGUsICdodW1hbml6ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50Lmh1bWFuaXplO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFyaWF0aW9uKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2V2ZW50Lmh1bWFuaXplID0gdmFyaWF0aW9uO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBwcm9iYWJseSBvZiB0aGUgY2FsbGJhY2sgYmVpbmcgaW52b2tlZC5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuTG9vcCNcblx0XHQgKiAgQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdCAqICBAbmFtZSBwcm9iYWJpbGl0eVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTG9vcC5wcm90b3R5cGUsICdwcm9iYWJpbGl0eScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50LnByb2JhYmlsaXR5O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocHJvYikge1xuXHQgICAgICAgICAgICB0aGlzLl9ldmVudC5wcm9iYWJpbGl0eSA9IHByb2I7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgTXV0aW5nIHRoZSBMb29wIG1lYW5zIHRoYXQgbm8gY2FsbGJhY2tzIGFyZSBpbnZva2VkLlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5Mb29wI1xuXHRcdCAqICBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiAgQG5hbWUgbXV0ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTG9vcC5wcm90b3R5cGUsICdtdXRlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnQubXV0ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG11dGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZXZlbnQubXV0ZSA9IG11dGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIG51bWJlciBvZiBpdGVyYXRpb25zIG9mIHRoZSBsb29wLiBUaGUgZGVmYXVsdFxuXHRcdCAqICB2YWx1ZSBpcyBJbmZpbml0eSAobG9vcCBmb3JldmVyKS5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuTG9vcCNcblx0XHQgKiAgQHR5cGUge1Bvc2l0aXZlfVxuXHRcdCAqICBAbmFtZSBpdGVyYXRpb25zXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Mb29wLnByb3RvdHlwZSwgJ2l0ZXJhdGlvbnMnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9ldmVudC5sb29wID09PSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gSW5maW5pdHk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnQubG9vcDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoaXRlcnMpIHtcblx0ICAgICAgICAgICAgaWYgKGl0ZXJzID09PSBJbmZpbml0eSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnQubG9vcCA9IHRydWU7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9ldmVudC5sb29wID0gaXRlcnM7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5Mb29wfSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Mb29wLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX2V2ZW50LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9ldmVudCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5jYWxsYmFjayA9IG51bGw7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuTG9vcDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuUGFydCBpcyBhIGNvbGxlY3Rpb24gVG9uZS5FdmVudHMgd2hpY2ggY2FuIGJlXG5cdFx0ICogICAgICAgICBzdGFydGVkL3N0b3BwZWQgYW5kIGxvb3BlZCBhcyBhIHNpbmdsZSB1bml0LlxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkV2ZW50fVxuXHRcdCAqICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIG9uIGVhY2ggZXZlbnRcblx0XHQgKiAgQHBhcmFtIHtBcnJheX0gZXZlbnRzIHRoZSBhcnJheSBvZiBldmVudHNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgcGFydCA9IG5ldyBUb25lLlBhcnQoZnVuY3Rpb24odGltZSwgbm90ZSl7XG5cdFx0ICogXHQvL3RoZSBub3RlcyBnaXZlbiBhcyB0aGUgc2Vjb25kIGVsZW1lbnQgaW4gdGhlIGFycmF5XG5cdFx0ICogXHQvL3dpbGwgYmUgcGFzc2VkIGluIGFzIHRoZSBzZWNvbmQgYXJndW1lbnRcblx0XHQgKiBcdHN5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKG5vdGUsIFwiOG5cIiwgdGltZSk7XG5cdFx0ICogfSwgW1swLCBcIkMyXCJdLCBbXCIwOjJcIiwgXCJDM1wiXSwgW1wiMDozOjJcIiwgXCJHMlwiXV0pO1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vdXNlIGFuIGFycmF5IG9mIG9iamVjdHMgYXMgbG9uZyBhcyB0aGUgb2JqZWN0IGhhcyBhIFwidGltZVwiIGF0dHJpYnV0ZVxuXHRcdCAqIHZhciBwYXJ0ID0gbmV3IFRvbmUuUGFydChmdW5jdGlvbih0aW1lLCB2YWx1ZSl7XG5cdFx0ICogXHQvL3RoZSB2YWx1ZSBpcyBhbiBvYmplY3Qgd2hpY2ggY29udGFpbnMgYm90aCB0aGUgbm90ZSBhbmQgdGhlIHZlbG9jaXR5XG5cdFx0ICogXHRzeW50aC50cmlnZ2VyQXR0YWNrUmVsZWFzZSh2YWx1ZS5ub3RlLCBcIjhuXCIsIHRpbWUsIHZhbHVlLnZlbG9jaXR5KTtcblx0XHQgKiB9LCBbe1widGltZVwiIDogMCwgXCJub3RlXCIgOiBcIkMzXCIsIFwidmVsb2NpdHlcIjogMC45fSxcblx0XHQgKiBcdCAgIHtcInRpbWVcIiA6IFwiMDoyXCIsIFwibm90ZVwiIDogXCJDNFwiLCBcInZlbG9jaXR5XCI6IDAuNX1cblx0XHQgKiBdKS5zdGFydCgwKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFydCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdjYWxsYmFjaycsXG5cdCAgICAgICAgICAgICdldmVudHMnXG5cdCAgICAgICAgXSwgVG9uZS5QYXJ0KTtcblx0ICAgICAgICBUb25lLkV2ZW50LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQW4gYXJyYXkgb2YgT2JqZWN0cy5cblx0XHRcdCAqICBAdHlwZSAge0FycmF5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9ldmVudHMgPSBbXTtcblx0ICAgICAgICAvL2FkZCB0aGUgZXZlbnRzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmV2ZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLmV2ZW50c1tpXSkpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuYWRkKG9wdGlvbnMuZXZlbnRzW2ldWzBdLCBvcHRpb25zLmV2ZW50c1tpXVsxXSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmFkZChvcHRpb25zLmV2ZW50c1tpXSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5QYXJ0LCBUb25lLkV2ZW50KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdCB2YWx1ZXNcblx0XHQgKiAgQHR5cGUgIHtPYmplY3R9XG5cdFx0ICogIEBjb25zdFxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJ0LmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdjYWxsYmFjayc6IFRvbmUubm9PcCxcblx0ICAgICAgICAnbG9vcCc6IGZhbHNlLFxuXHQgICAgICAgICdsb29wRW5kJzogJzFtJyxcblx0ICAgICAgICAnbG9vcFN0YXJ0JzogMCxcblx0ICAgICAgICAncGxheWJhY2tSYXRlJzogMSxcblx0ICAgICAgICAncHJvYmFiaWxpdHknOiAxLFxuXHQgICAgICAgICdodW1hbml6ZSc6IGZhbHNlLFxuXHQgICAgICAgICdtdXRlJzogZmFsc2UsXG5cdCAgICAgICAgJ2V2ZW50cyc6IFtdXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFN0YXJ0IHRoZSBwYXJ0IGF0IHRoZSBnaXZlbiB0aW1lLlxuXHRcdCAqICBAcGFyYW0gIHtUcmFuc3BvcnRUaW1lfSAgdGltZSAgICBXaGVuIHRvIHN0YXJ0IHRoZSBwYXJ0LlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lPX0gIG9mZnNldCAgVGhlIG9mZnNldCBmcm9tIHRoZSBzdGFydCBvZiB0aGUgcGFydFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmVnaW4gcGxheWluZyBhdC5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuUGFydH0gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFydC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAodGltZSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgdmFyIHRpY2tzID0gdGhpcy50b1RpY2tzKHRpbWUpO1xuXHQgICAgICAgIGlmICh0aGlzLl9zdGF0ZS5nZXRWYWx1ZUF0VGltZSh0aWNrcykgIT09IFRvbmUuU3RhdGUuU3RhcnRlZCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fbG9vcCkge1xuXHQgICAgICAgICAgICAgICAgb2Zmc2V0ID0gVG9uZS5kZWZhdWx0QXJnKG9mZnNldCwgdGhpcy5fbG9vcFN0YXJ0KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIG9mZnNldCA9IFRvbmUuZGVmYXVsdEFyZyhvZmZzZXQsIDApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIG9mZnNldCA9IHRoaXMudG9UaWNrcyhvZmZzZXQpO1xuXHQgICAgICAgICAgICB0aGlzLl9zdGF0ZS5hZGQoe1xuXHQgICAgICAgICAgICAgICAgJ3N0YXRlJzogVG9uZS5TdGF0ZS5TdGFydGVkLFxuXHQgICAgICAgICAgICAgICAgJ3RpbWUnOiB0aWNrcyxcblx0ICAgICAgICAgICAgICAgICdvZmZzZXQnOiBvZmZzZXRcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHRoaXMuX2ZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9zdGFydE5vdGUoZXZlbnQsIHRpY2tzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFN0YXJ0IHRoZSBldmVudCBpbiB0aGUgZ2l2ZW4gZXZlbnQgYXQgdGhlIGNvcnJlY3QgdGltZSBnaXZlblxuXHRcdCAqICB0aGUgdGlja3MgYW5kIG9mZnNldCBhbmQgbG9vcGluZy5cblx0XHQgKiAgQHBhcmFtICB7VG9uZS5FdmVudH0gIGV2ZW50XG5cdFx0ICogIEBwYXJhbSAge1RpY2tzfSAgdGlja3Ncblx0XHQgKiAgQHBhcmFtICB7VGlja3N9ICBvZmZzZXRcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFydC5wcm90b3R5cGUuX3N0YXJ0Tm90ZSA9IGZ1bmN0aW9uIChldmVudCwgdGlja3MsIG9mZnNldCkge1xuXHQgICAgICAgIHRpY2tzIC09IG9mZnNldDtcblx0ICAgICAgICBpZiAodGhpcy5fbG9vcCkge1xuXHQgICAgICAgICAgICBpZiAoZXZlbnQuc3RhcnRPZmZzZXQgPj0gdGhpcy5fbG9vcFN0YXJ0ICYmIGV2ZW50LnN0YXJ0T2Zmc2V0IDwgdGhpcy5fbG9vcEVuZCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnN0YXJ0T2Zmc2V0IDwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy9zdGFydCBpdCBvbiB0aGUgbmV4dCBsb29wXG5cdCAgICAgICAgICAgICAgICAgICAgdGlja3MgKz0gdGhpcy5fZ2V0TG9vcER1cmF0aW9uKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBldmVudC5zdGFydChUb25lLlRpY2tzKHRpY2tzKSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuc3RhcnRPZmZzZXQgPCB0aGlzLl9sb29wU3RhcnQgJiYgZXZlbnQuc3RhcnRPZmZzZXQgPj0gb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgICAgICBldmVudC5sb29wID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICBldmVudC5zdGFydChUb25lLlRpY2tzKHRpY2tzKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnN0YXJ0T2Zmc2V0ID49IG9mZnNldCkge1xuXHQgICAgICAgICAgICBldmVudC5zdGFydChUb25lLlRpY2tzKHRpY2tzKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgc3RhcnQgZnJvbSB0aGUgc2NoZWR1bGVkIHN0YXJ0IHRpbWVcblx0XHQgKiAgQHR5cGUge1RpY2tzfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5QYXJ0I1xuXHRcdCAqICBAbmFtZSBzdGFydE9mZnNldFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGFydC5wcm90b3R5cGUsICdzdGFydE9mZnNldCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0T2Zmc2V0O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAob2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3N0YXJ0T2Zmc2V0ID0gb2Zmc2V0O1xuXHQgICAgICAgICAgICB0aGlzLl9mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICAgICAgZXZlbnQuc3RhcnRPZmZzZXQgKz0gdGhpcy5fc3RhcnRPZmZzZXQ7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFN0b3AgdGhlIHBhcnQgYXQgdGhlIGdpdmVuIHRpbWUuXG5cdFx0ICogIEBwYXJhbSAge1RpbWVsaW5lUG9zaXRpb259ICB0aW1lICBXaGVuIHRvIHN0b3AgdGhlIHBhcnQuXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLlBhcnR9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcnQucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHZhciB0aWNrcyA9IHRoaXMudG9UaWNrcyh0aW1lKTtcblx0ICAgICAgICB0aGlzLl9zdGF0ZS5jYW5jZWwodGlja3MpO1xuXHQgICAgICAgIHRoaXMuX3N0YXRlLnNldFN0YXRlQXRUaW1lKFRvbmUuU3RhdGUuU3RvcHBlZCwgdGlja3MpO1xuXHQgICAgICAgIHRoaXMuX2ZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIGV2ZW50LnN0b3AodGltZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEdldC9TZXQgYW4gRXZlbnQncyB2YWx1ZSBhdCB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKiAgSWYgYSB2YWx1ZSBpcyBwYXNzZWQgaW4gYW5kIG5vIGV2ZW50IGV4aXN0cyBhdFxuXHRcdCAqICB0aGUgZ2l2ZW4gdGltZSwgb25lIHdpbGwgYmUgY3JlYXRlZCB3aXRoIHRoYXQgdmFsdWUuXG5cdFx0ICogIElmIHR3byBldmVudHMgYXJlIGF0IHRoZSBzYW1lIHRpbWUsIHRoZSBmaXJzdCBvbmUgd2lsbFxuXHRcdCAqICBiZSByZXR1cm5lZC5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiBwYXJ0LmF0KFwiMW1cIik7IC8vcmV0dXJucyB0aGUgcGFydCBhdCB0aGUgZmlyc3QgbWVhc3VyZVxuXHRcdCAqXG5cdFx0ICogcGFydC5hdChcIjJtXCIsIFwiQzJcIik7IC8vc2V0IHRoZSB2YWx1ZSBhdCBcIjJtXCIgdG8gQzIuXG5cdFx0ICogLy9pZiBhbiBldmVudCBkaWRuJ3QgZXhpc3QgYXQgdGhhdCB0aW1lLCBpdCB3aWxsIGJlIGNyZWF0ZWQuXG5cdFx0ICogIEBwYXJhbSB7VHJhbnNwb3J0VGltZX0gdGltZSBUaGUgdGltZSBvZiB0aGUgZXZlbnQgdG8gZ2V0IG9yIHNldC5cblx0XHQgKiAgQHBhcmFtIHsqPX0gdmFsdWUgSWYgYSB2YWx1ZSBpcyBwYXNzZWQgaW4sIHRoZSB2YWx1ZSBvZiB0aGVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgZXZlbnQgYXQgdGhlIGdpdmVuIHRpbWUgd2lsbCBiZSBzZXQgdG8gaXQuXG5cdFx0ICogIEByZXR1cm4ge1RvbmUuRXZlbnR9IHRoZSBldmVudCBhdCB0aGUgdGltZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJ0LnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uICh0aW1lLCB2YWx1ZSkge1xuXHQgICAgICAgIHRpbWUgPSBUb25lLlRyYW5zcG9ydFRpbWUodGltZSk7XG5cdCAgICAgICAgdmFyIHRpY2tUaW1lID0gVG9uZS5UaWNrcygxKS50b1NlY29uZHMoKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2V2ZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLl9ldmVudHNbaV07XG5cdCAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aW1lLnRvVGlja3MoKSAtIGV2ZW50LnN0YXJ0T2Zmc2V0KSA8IHRpY2tUaW1lKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoVG9uZS5pc0RlZmluZWQodmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZXZlbnQudmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHJldHVybiBldmVudDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICAvL2lmIHRoZXJlIHdhcyBubyBldmVudCBhdCB0aGF0IHRpbWUsIGNyZWF0ZSBvbmVcblx0ICAgICAgICBpZiAoVG9uZS5pc0RlZmluZWQodmFsdWUpKSB7XG5cdCAgICAgICAgICAgIHRoaXMuYWRkKHRpbWUsIHZhbHVlKTtcblx0ICAgICAgICAgICAgLy9yZXR1cm4gdGhlIG5ldyBldmVudFxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRzW3RoaXMuX2V2ZW50cy5sZW5ndGggLSAxXTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEFkZCBhIGFuIGV2ZW50IHRvIHRoZSBwYXJ0LlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IHRpbWUgVGhlIHRpbWUgdGhlIG5vdGUgc2hvdWxkIHN0YXJ0LlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIGFuIG9iamVjdCBpcyBwYXNzZWQgaW4sIGl0IHNob3VsZFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgYSAndGltZScgYXR0cmlidXRlIGFuZCB0aGUgcmVzdFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBvYmplY3Qgd2lsbCBiZSB1c2VkIGFzIHRoZSAndmFsdWUnLlxuXHRcdCAqICBAcGFyYW0gIHtUb25lLkV2ZW50fCp9ICB2YWx1ZVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5QYXJ0fSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogcGFydC5hZGQoXCIxbVwiLCBcIkMjKzExXCIpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJ0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGltZSwgdmFsdWUpIHtcblx0ICAgICAgICAvL2V4dHJhY3QgdGhlIHBhcmFtZXRlcnNcblx0ICAgICAgICBpZiAodGltZS5oYXNPd25Qcm9wZXJ0eSgndGltZScpKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gdGltZTtcblx0ICAgICAgICAgICAgdGltZSA9IHZhbHVlLnRpbWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvVGlja3ModGltZSk7XG5cdCAgICAgICAgdmFyIGV2ZW50O1xuXHQgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRvbmUuRXZlbnQpIHtcblx0ICAgICAgICAgICAgZXZlbnQgPSB2YWx1ZTtcblx0ICAgICAgICAgICAgZXZlbnQuY2FsbGJhY2sgPSB0aGlzLl90aWNrLmJpbmQodGhpcyk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgZXZlbnQgPSBuZXcgVG9uZS5FdmVudCh7XG5cdCAgICAgICAgICAgICAgICAnY2FsbGJhY2snOiB0aGlzLl90aWNrLmJpbmQodGhpcyksXG5cdCAgICAgICAgICAgICAgICAndmFsdWUnOiB2YWx1ZVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy90aGUgc3RhcnQgb2Zmc2V0XG5cdCAgICAgICAgZXZlbnQuc3RhcnRPZmZzZXQgPSB0aW1lO1xuXHQgICAgICAgIC8vaW5pdGlhbGl6ZSB0aGUgdmFsdWVzXG5cdCAgICAgICAgZXZlbnQuc2V0KHtcblx0ICAgICAgICAgICAgJ2xvb3BFbmQnOiB0aGlzLmxvb3BFbmQsXG5cdCAgICAgICAgICAgICdsb29wU3RhcnQnOiB0aGlzLmxvb3BTdGFydCxcblx0ICAgICAgICAgICAgJ2xvb3AnOiB0aGlzLmxvb3AsXG5cdCAgICAgICAgICAgICdodW1hbml6ZSc6IHRoaXMuaHVtYW5pemUsXG5cdCAgICAgICAgICAgICdwbGF5YmFja1JhdGUnOiB0aGlzLnBsYXliYWNrUmF0ZSxcblx0ICAgICAgICAgICAgJ3Byb2JhYmlsaXR5JzogdGhpcy5wcm9iYWJpbGl0eVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHRoaXMuX2V2ZW50cy5wdXNoKGV2ZW50KTtcblx0ICAgICAgICAvL3N0YXJ0IHRoZSBub3RlIGlmIGl0IHNob3VsZCBiZSBwbGF5ZWQgcmlnaHQgbm93XG5cdCAgICAgICAgdGhpcy5fcmVzdGFydEV2ZW50KGV2ZW50KTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmVzdGFydCB0aGUgZ2l2ZW4gZXZlbnRcblx0XHQgKiAgQHBhcmFtICB7VG9uZS5FdmVudH0gIGV2ZW50XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcnQucHJvdG90eXBlLl9yZXN0YXJ0RXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICB0aGlzLl9zdGF0ZS5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZUV2ZW50KSB7XG5cdCAgICAgICAgICAgIGlmIChzdGF0ZUV2ZW50LnN0YXRlID09PSBUb25lLlN0YXRlLlN0YXJ0ZWQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0Tm90ZShldmVudCwgc3RhdGVFdmVudC50aW1lLCBzdGF0ZUV2ZW50Lm9mZnNldCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvL3N0b3AgdGhlIG5vdGVcblx0ICAgICAgICAgICAgICAgIGV2ZW50LnN0b3AoVG9uZS5UaWNrcyhzdGF0ZUV2ZW50LnRpbWUpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJlbW92ZSBhbiBldmVudCBmcm9tIHRoZSBwYXJ0LiBXaWxsIHJlY3Vyc2l2ZWx5IGl0ZXJhdGVcblx0XHQgKiAgaW50byBuZXN0ZWQgcGFydHMgdG8gZmluZCB0aGUgZXZlbnQuXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gdGltZSBUaGUgdGltZSBvZiB0aGUgZXZlbnRcblx0XHQgKiAgQHBhcmFtIHsqfSB2YWx1ZSBPcHRpb25hbGx5IHNlbGVjdCBvbmx5IGEgc3BlY2lmaWMgZXZlbnQgdmFsdWVcblx0XHQgKiAgQHJldHVybiAge1RvbmUuUGFydH0gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFydC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRpbWUsIHZhbHVlKSB7XG5cdCAgICAgICAgLy9leHRyYWN0IHRoZSBwYXJhbWV0ZXJzXG5cdCAgICAgICAgaWYgKHRpbWUuaGFzT3duUHJvcGVydHkoJ3RpbWUnKSkge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHRpbWU7XG5cdCAgICAgICAgICAgIHRpbWUgPSB2YWx1ZS50aW1lO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aW1lID0gdGhpcy50b1RpY2tzKHRpbWUpO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9ldmVudHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5fZXZlbnRzW2ldO1xuXHQgICAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBUb25lLlBhcnQpIHtcblx0ICAgICAgICAgICAgICAgIGV2ZW50LnJlbW92ZSh0aW1lLCB2YWx1ZSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuc3RhcnRPZmZzZXQgPT09IHRpbWUpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChUb25lLmlzVW5kZWYodmFsdWUpIHx8IFRvbmUuaXNEZWZpbmVkKHZhbHVlKSAmJiBldmVudC52YWx1ZSA9PT0gdmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMuc3BsaWNlKGksIDEpO1xuXHQgICAgICAgICAgICAgICAgICAgIGV2ZW50LmRpc3Bvc2UoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgUmVtb3ZlIGFsbCBvZiB0aGUgbm90ZXMgZnJvbSB0aGUgZ3JvdXAuXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLlBhcnR9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcnQucHJvdG90eXBlLnJlbW92ZUFsbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLl9mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICBldmVudC5kaXNwb3NlKCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5fZXZlbnRzID0gW107XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENhbmNlbCBzY2hlZHVsZWQgc3RhdGUgY2hhbmdlIGV2ZW50czogaS5lLiBcInN0YXJ0XCIgYW5kIFwic3RvcFwiLlxuXHRcdCAqICBAcGFyYW0ge1RpbWVsaW5lUG9zaXRpb259IGFmdGVyIFRoZSB0aW1lIGFmdGVyIHdoaWNoIHRvIGNhbmNlbCB0aGUgc2NoZWR1bGVkIGV2ZW50cy5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuUGFydH0gIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUGFydC5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKGFmdGVyKSB7XG5cdCAgICAgICAgdGhpcy5fZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgZXZlbnQuY2FuY2VsKGFmdGVyKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLl9zdGF0ZS5jYW5jZWwodGhpcy50b1RpY2tzKGFmdGVyKSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEl0ZXJhdGUgb3ZlciBhbGwgb2YgdGhlIGV2ZW50c1xuXHRcdCAqICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuXHRcdCAqICBAcGFyYW0ge09iamVjdH0gY3R4IFRoZSBjb250ZXh0XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcnQucHJvdG90eXBlLl9mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjdHgpIHtcblx0ICAgICAgICBpZiAodGhpcy5fZXZlbnRzKSB7XG5cdCAgICAgICAgICAgIGN0eCA9IFRvbmUuZGVmYXVsdEFyZyhjdHgsIHRoaXMpO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5fZXZlbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX2V2ZW50c1tpXTtcblx0ICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVG9uZS5QYXJ0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZS5fZm9yRWFjaChjYWxsYmFjaywgY3R4KTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChjdHgsIGUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTZXQgdGhlIGF0dHJpYnV0ZSBvZiBhbGwgb2YgdGhlIGV2ZW50c1xuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmd9ICBhdHRyICB0aGUgYXR0cmlidXRlIHRvIHNldFxuXHRcdCAqICBAcGFyYW0gIHsqfSAgdmFsdWUgICAgICBUaGUgdmFsdWUgdG8gc2V0IGl0IHRvXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcnQucHJvdG90eXBlLl9zZXRBbGwgPSBmdW5jdGlvbiAoYXR0ciwgdmFsdWUpIHtcblx0ICAgICAgICB0aGlzLl9mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICBldmVudFthdHRyXSA9IHZhbHVlO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBJbnRlcm5hbCB0aWNrIG1ldGhvZFxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lICBUaGUgdGltZSBvZiB0aGUgZXZlbnQgaW4gc2Vjb25kc1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJ0LnByb3RvdHlwZS5fdGljayA9IGZ1bmN0aW9uICh0aW1lLCB2YWx1ZSkge1xuXHQgICAgICAgIGlmICghdGhpcy5tdXRlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sodGltZSwgdmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgRGV0ZXJtaW5lIGlmIHRoZSBldmVudCBzaG91bGQgYmUgY3VycmVudGx5IGxvb3Bpbmdcblx0XHQgKiAgZ2l2ZW4gdGhlIGxvb3AgYm91bmRyaWVzIG9mIHRoaXMgUGFydC5cblx0XHQgKiAgQHBhcmFtICB7VG9uZS5FdmVudH0gIGV2ZW50ICBUaGUgZXZlbnQgdG8gdGVzdFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXJ0LnByb3RvdHlwZS5fdGVzdExvb3BCb3VuZHJpZXMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICBpZiAoZXZlbnQuc3RhcnRPZmZzZXQgPCB0aGlzLl9sb29wU3RhcnQgfHwgZXZlbnQuc3RhcnRPZmZzZXQgPj0gdGhpcy5fbG9vcEVuZCkge1xuXHQgICAgICAgICAgICBldmVudC5jYW5jZWwoMCk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChldmVudC5zdGF0ZSA9PT0gVG9uZS5TdGF0ZS5TdG9wcGVkKSB7XG5cdCAgICAgICAgICAgIC8vcmVzY2hlZHVsZSBpdCBpZiBpdCdzIHN0b3BwZWRcblx0ICAgICAgICAgICAgdGhpcy5fcmVzdGFydEV2ZW50KGV2ZW50KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBwcm9iYWJpbGl0eSBvZiB0aGUgbm90ZXMgYmVpbmcgdHJpZ2dlcmVkLlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5QYXJ0I1xuXHRcdCAqICBAdHlwZSB7Tm9ybWFsUmFuZ2V9XG5cdFx0ICogIEBuYW1lIHByb2JhYmlsaXR5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QYXJ0LnByb3RvdHlwZSwgJ3Byb2JhYmlsaXR5Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvYmFiaWxpdHk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwcm9iKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2JhYmlsaXR5ID0gcHJvYjtcblx0ICAgICAgICAgICAgdGhpcy5fc2V0QWxsKCdwcm9iYWJpbGl0eScsIHByb2IpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIElmIHNldCB0byB0cnVlLCB3aWxsIGFwcGx5IHNtYWxsIHJhbmRvbSB2YXJpYXRpb25cblx0XHQgKiAgdG8gdGhlIGNhbGxiYWNrIHRpbWUuIElmIHRoZSB2YWx1ZSBpcyBnaXZlbiBhcyBhIHRpbWUsIGl0IHdpbGwgcmFuZG9taXplXG5cdFx0ICogIGJ5IHRoYXQgYW1vdW50LlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIGV2ZW50Lmh1bWFuaXplID0gdHJ1ZTtcblx0XHQgKiAgQHR5cGUge0Jvb2xlYW58VGltZX1cblx0XHQgKiAgQG5hbWUgaHVtYW5pemVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBhcnQucHJvdG90eXBlLCAnaHVtYW5pemUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9odW1hbml6ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHZhcmlhdGlvbikge1xuXHQgICAgICAgICAgICB0aGlzLl9odW1hbml6ZSA9IHZhcmlhdGlvbjtcblx0ICAgICAgICAgICAgdGhpcy5fc2V0QWxsKCdodW1hbml6ZScsIHZhcmlhdGlvbik7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgSWYgdGhlIHBhcnQgc2hvdWxkIGxvb3Agb3Igbm90XG5cdFx0ICogIGJldHdlZW4gVG9uZS5QYXJ0Lmxvb3BTdGFydCBhbmRcblx0XHQgKiAgVG9uZS5QYXJ0Lmxvb3BFbmQuIEFuIGludGVnZXJcblx0XHQgKiAgdmFsdWUgY29ycmVzcG9uZHMgdG8gdGhlIG51bWJlciBvZlxuXHRcdCAqICBsb29wcyB0aGUgUGFydCBkb2VzIGFmdGVyIGl0IHN0YXJ0cy5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuUGFydCNcblx0XHQgKiAgQHR5cGUge0Jvb2xlYW58UG9zaXRpdmV9XG5cdFx0ICogIEBuYW1lIGxvb3Bcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2xvb3AgdGhlIHBhcnQgOCB0aW1lc1xuXHRcdCAqIHBhcnQubG9vcCA9IDg7XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QYXJ0LnByb3RvdHlwZSwgJ2xvb3AnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb29wO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAobG9vcCkge1xuXHQgICAgICAgICAgICB0aGlzLl9sb29wID0gbG9vcDtcblx0ICAgICAgICAgICAgdGhpcy5fZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgICAgIGV2ZW50Ll9sb29wU3RhcnQgPSB0aGlzLl9sb29wU3RhcnQ7XG5cdCAgICAgICAgICAgICAgICBldmVudC5fbG9vcEVuZCA9IHRoaXMuX2xvb3BFbmQ7XG5cdCAgICAgICAgICAgICAgICBldmVudC5sb29wID0gbG9vcDtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3Rlc3RMb29wQm91bmRyaWVzKGV2ZW50KTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGxvb3BFbmQgcG9pbnQgZGV0ZXJtaW5lcyB3aGVuIGl0IHdpbGxcblx0XHQgKiAgbG9vcCBpZiBUb25lLlBhcnQubG9vcCBpcyB0cnVlLlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5QYXJ0I1xuXHRcdCAqICBAdHlwZSB7VGltZX1cblx0XHQgKiAgQG5hbWUgbG9vcEVuZFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGFydC5wcm90b3R5cGUsICdsb29wRW5kJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gVG9uZS5UaWNrcyh0aGlzLl9sb29wRW5kKS50b1NlY29uZHMoKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGxvb3BFbmQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbG9vcEVuZCA9IHRoaXMudG9UaWNrcyhsb29wRW5kKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX2xvb3ApIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2ZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZXZlbnQubG9vcEVuZCA9IGxvb3BFbmQ7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVzdExvb3BCb3VuZHJpZXMoZXZlbnQpO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgbG9vcFN0YXJ0IHBvaW50IGRldGVybWluZXMgd2hlbiBpdCB3aWxsXG5cdFx0ICogIGxvb3AgaWYgVG9uZS5QYXJ0Lmxvb3AgaXMgdHJ1ZS5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuUGFydCNcblx0XHQgKiAgQHR5cGUge1RpbWV9XG5cdFx0ICogIEBuYW1lIGxvb3BTdGFydFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGFydC5wcm90b3R5cGUsICdsb29wU3RhcnQnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBUb25lLlRpY2tzKHRoaXMuX2xvb3BTdGFydCkudG9TZWNvbmRzKCk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChsb29wU3RhcnQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbG9vcFN0YXJ0ID0gdGhpcy50b1RpY2tzKGxvb3BTdGFydCk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9sb29wKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGV2ZW50Lmxvb3BTdGFydCA9IHRoaXMubG9vcFN0YXJ0O1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlc3RMb29wQm91bmRyaWVzKGV2ZW50KTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBcdFRoZSBwbGF5YmFjayByYXRlIG9mIHRoZSBwYXJ0XG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLlBhcnQjXG5cdFx0ICogIEB0eXBlIHtQb3NpdGl2ZX1cblx0XHQgKiAgQG5hbWUgcGxheWJhY2tSYXRlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QYXJ0LnByb3RvdHlwZSwgJ3BsYXliYWNrUmF0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BsYXliYWNrUmF0ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHJhdGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcGxheWJhY2tSYXRlID0gcmF0ZTtcblx0ICAgICAgICAgICAgdGhpcy5fc2V0QWxsKCdwbGF5YmFja1JhdGUnLCByYXRlKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFx0VGhlIG51bWJlciBvZiBzY2hlZHVsZWQgbm90ZXMgaW4gdGhlIHBhcnQuXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLlBhcnQjXG5cdFx0ICogIEB0eXBlIHtQb3NpdGl2ZX1cblx0XHQgKiAgQG5hbWUgbGVuZ3RoXG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGFydC5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9ldmVudHMubGVuZ3RoO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLlBhcnR9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBhcnQucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5yZW1vdmVBbGwoKTtcblx0ICAgICAgICB0aGlzLl9zdGF0ZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fc3RhdGUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuY2FsbGJhY2sgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2V2ZW50cyA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuUGFydDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLlBhdHRlcm4gYXJwZWdnaWF0ZXMgYmV0d2VlbiB0aGUgZ2l2ZW4gbm90ZXNcblx0XHQgKiAgICAgICAgIGluIGEgbnVtYmVyIG9mIHBhdHRlcm5zLiBTZWUgVG9uZS5DdHJsUGF0dGVybiBmb3Jcblx0XHQgKiAgICAgICAgIGEgZnVsbCBsaXN0IG9mIHBhdHRlcm5zLlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBwYXR0ZXJuID0gbmV3IFRvbmUuUGF0dGVybihmdW5jdGlvbih0aW1lLCBub3RlKXtcblx0XHQgKiAgIC8vdGhlIG9yZGVyIG9mIHRoZSBub3RlcyBwYXNzZWQgaW4gZGVwZW5kcyBvbiB0aGUgcGF0dGVyblxuXHRcdCAqIH0sIFtcIkMyXCIsIFwiRDRcIiwgXCJFNVwiLCBcIkE2XCJdLCBcInVwRG93blwiKTtcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuTG9vcH1cblx0XHQgKiAgQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGludm9rZSB3aXRoIHRoZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5cblx0XHQgKiAgQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXJwZWdnaWF0ZSBvdmVyLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXR0ZXJuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2NhbGxiYWNrJyxcblx0ICAgICAgICAgICAgJ3ZhbHVlcycsXG5cdCAgICAgICAgICAgICdwYXR0ZXJuJ1xuXHQgICAgICAgIF0sIFRvbmUuUGF0dGVybik7XG5cdCAgICAgICAgVG9uZS5Mb29wLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHBhdHRlcm4gbWFuYWdlclxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkN0cmxQYXR0ZXJufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9wYXR0ZXJuID0gbmV3IFRvbmUuQ3RybFBhdHRlcm4oe1xuXHQgICAgICAgICAgICAndmFsdWVzJzogb3B0aW9ucy52YWx1ZXMsXG5cdCAgICAgICAgICAgICd0eXBlJzogb3B0aW9ucy5wYXR0ZXJuLFxuXHQgICAgICAgICAgICAnaW5kZXgnOiBvcHRpb25zLmluZGV4XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5QYXR0ZXJuLCBUb25lLkxvb3ApO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBkZWZhdWx0c1xuXHRcdCAqICBAY29uc3Rcblx0XHQgKiAgQHR5cGUgIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLlBhdHRlcm4uZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ3BhdHRlcm4nOiBUb25lLkN0cmxQYXR0ZXJuLlR5cGUuVXAsXG5cdCAgICAgICAgJ2NhbGxiYWNrJzogVG9uZS5ub09wLFxuXHQgICAgICAgICd2YWx1ZXMnOiBbXVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBJbnRlcm5hbCBmdW5jdGlvbiBjYWxsZWQgd2hlbiB0aGUgbm90ZXMgc2hvdWxkIGJlIGNhbGxlZFxuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICB0aW1lICBUaGUgdGltZSB0aGUgZXZlbnQgb2NjdXJzXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlBhdHRlcm4ucHJvdG90eXBlLl90aWNrID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aGlzLmNhbGxiYWNrKHRpbWUsIHRoaXMuX3BhdHRlcm4udmFsdWUpO1xuXHQgICAgICAgIHRoaXMuX3BhdHRlcm4ubmV4dCgpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgY3VycmVudCBpbmRleCBpbiB0aGUgdmFsdWVzIGFycmF5LlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5QYXR0ZXJuI1xuXHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0ICogIEBuYW1lIGluZGV4XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QYXR0ZXJuLnByb3RvdHlwZSwgJ2luZGV4Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGF0dGVybi5pbmRleDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGkpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcGF0dGVybi5pbmRleCA9IGk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIGFycmF5IG9mIGV2ZW50cy5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuUGF0dGVybiNcblx0XHQgKiAgQHR5cGUge0FycmF5fVxuXHRcdCAqICBAbmFtZSB2YWx1ZXNcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBhdHRlcm4ucHJvdG90eXBlLCAndmFsdWVzJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGF0dGVybi52YWx1ZXM7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWxzKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3BhdHRlcm4udmFsdWVzID0gdmFscztcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgcGF0dGVybi5cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuUGF0dGVybiNcblx0XHQgKiAgQHR5cGUgeyp9XG5cdFx0ICogIEBuYW1lIHZhbHVlXG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGF0dGVybi5wcm90b3R5cGUsICd2YWx1ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhdHRlcm4udmFsdWU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIHBhdHRlcm4gdHlwZS4gU2VlIFRvbmUuQ3RybFBhdHRlcm4gZm9yIHRoZSBmdWxsIGxpc3Qgb2YgcGF0dGVybnMuXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLlBhdHRlcm4jXG5cdFx0ICogIEB0eXBlIHtTdHJpbmd9XG5cdFx0ICogIEBuYW1lIHBhdHRlcm5cblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBhdHRlcm4ucHJvdG90eXBlLCAncGF0dGVybicsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhdHRlcm4udHlwZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHBhdHRlcm4pIHtcblx0ICAgICAgICAgICAgdGhpcy5fcGF0dGVybi50eXBlID0gcGF0dGVybjtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5QYXR0ZXJufSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QYXR0ZXJuLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuTG9vcC5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3BhdHRlcm4uZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3BhdHRlcm4gPSBudWxsO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlBhdHRlcm47XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBBIHNlcXVlbmNlIGlzIGFuIGFsdGVybmF0ZSBub3RhdGlvbiBvZiBhIHBhcnQuIEluc3RlYWRcblx0XHQgKiAgICAgICAgIG9mIHBhc3NpbmcgaW4gYW4gYXJyYXkgb2YgW3RpbWUsIGV2ZW50XSBwYWlycywgcGFzc1xuXHRcdCAqICAgICAgICAgaW4gYW4gYXJyYXkgb2YgZXZlbnRzIHdoaWNoIHdpbGwgYmUgc3BhY2VkIGF0IHRoZVxuXHRcdCAqICAgICAgICAgZ2l2ZW4gc3ViZGl2aXNpb24uIFN1Yi1hcnJheXMgd2lsbCBzdWJkaXZpZGUgdGhhdCBiZWF0XG5cdFx0ICogICAgICAgICBieSB0aGUgbnVtYmVyIG9mIGl0ZW1zIGFyZSBpbiB0aGUgYXJyYXkuXG5cdFx0ICogICAgICAgICBTZXF1ZW5jZSBub3RhdGlvbiBpbnNwaXJhdGlvbiBmcm9tIFtUaWRhbF0oaHR0cDovL3lheHUub3JnL3RpZGFsLylcblx0XHQgKiAgQHBhcmFtICB7RnVuY3Rpb259ICBjYWxsYmFjayAgVGhlIGNhbGxiYWNrIHRvIGludm9rZSB3aXRoIGV2ZXJ5IG5vdGVcblx0XHQgKiAgQHBhcmFtICB7QXJyYXl9ICAgIGV2ZW50cyAgVGhlIHNlcXVlbmNlXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IHN1YmRpdmlzaW9uICBUaGUgc3ViZGl2aXNpb24gYmV0d2VlbiB3aGljaCBldmVudHMgYXJlIHBsYWNlZC5cblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuUGFydH1cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgc2VxID0gbmV3IFRvbmUuU2VxdWVuY2UoZnVuY3Rpb24odGltZSwgbm90ZSl7XG5cdFx0ICogXHRjb25zb2xlLmxvZyhub3RlKTtcblx0XHQgKiAvL3N0cmFpZ2h0IHF1YXRlciBub3Rlc1xuXHRcdCAqIH0sIFtcIkM0XCIsIFwiRTRcIiwgXCJHNFwiLCBcIkE0XCJdLCBcIjRuXCIpO1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBzZXEgPSBuZXcgVG9uZS5TZXF1ZW5jZShmdW5jdGlvbih0aW1lLCBub3RlKXtcblx0XHQgKiBcdGNvbnNvbGUubG9nKG5vdGUpO1xuXHRcdCAqIC8vc3ViZGl2aXNpb25zIGFyZSBnaXZlbiBhcyBzdWJhcnJheXNcblx0XHQgKiB9LCBbXCJDNFwiLCBbXCJFNFwiLCBcIkQ0XCIsIFwiRTRcIl0sIFwiRzRcIiwgW1wiQTRcIiwgXCJHNFwiXV0pO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5TZXF1ZW5jZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdjYWxsYmFjaycsXG5cdCAgICAgICAgICAgICdldmVudHMnLFxuXHQgICAgICAgICAgICAnc3ViZGl2aXNpb24nXG5cdCAgICAgICAgXSwgVG9uZS5TZXF1ZW5jZSk7XG5cdCAgICAgICAgLy9yZW1vdmUgdGhlIGV2ZW50c1xuXHQgICAgICAgIHZhciBldmVudHMgPSBvcHRpb25zLmV2ZW50cztcblx0ICAgICAgICBkZWxldGUgb3B0aW9ucy5ldmVudHM7XG5cdCAgICAgICAgVG9uZS5QYXJ0LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHN1YmRpdmlzb24gb2YgZWFjaCBub3RlXG5cdFx0XHQgKiAgQHR5cGUgIHtUaWNrc31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc3ViZGl2aXNpb24gPSB0aGlzLnRvVGlja3Mob3B0aW9ucy5zdWJkaXZpc2lvbik7XG5cdCAgICAgICAgLy9pZiBubyB0aW1lIHdhcyBwYXNzZWQgaW4sIHRoZSBsb29wIGVuZCBpcyB0aGUgZW5kIG9mIHRoZSBjeWNsZVxuXHQgICAgICAgIGlmIChUb25lLmlzVW5kZWYob3B0aW9ucy5sb29wRW5kKSAmJiBUb25lLmlzRGVmaW5lZChldmVudHMpKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2xvb3BFbmQgPSBldmVudHMubGVuZ3RoICogdGhpcy5fc3ViZGl2aXNpb247XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vZGVmYXVsdHMgdG8gbG9vcGluZ1xuXHQgICAgICAgIHRoaXMuX2xvb3AgPSB0cnVlO1xuXHQgICAgICAgIC8vYWRkIGFsbCBvZiB0aGUgZXZlbnRzXG5cdCAgICAgICAgaWYgKFRvbmUuaXNEZWZpbmVkKGV2ZW50cykpIHtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuYWRkKGksIGV2ZW50c1tpXSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5TZXF1ZW5jZSwgVG9uZS5QYXJ0KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdCB2YWx1ZXMuXG5cdFx0ICogIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5TZXF1ZW5jZS5kZWZhdWx0cyA9IHsgJ3N1YmRpdmlzaW9uJzogJzRuJyB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBzdWJkaXZpc2lvbiBvZiB0aGUgc2VxdWVuY2UuIFRoaXMgY2FuIG9ubHkgYmVcblx0XHQgKiAgc2V0IGluIHRoZSBjb25zdHJ1Y3Rvci4gVGhlIHN1YmRpdmlzaW9uIGlzIHRoZVxuXHRcdCAqICBpbnRlcnZhbCBiZXR3ZWVuIHN1Y2Nlc3NpdmUgc3RlcHMuXG5cdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5TZXF1ZW5jZSNcblx0XHQgKiAgQG5hbWUgc3ViZGl2aXNpb25cblx0XHQgKiAgQHJlYWRPbmx5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5TZXF1ZW5jZS5wcm90b3R5cGUsICdzdWJkaXZpc2lvbicsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuVGlja3ModGhpcy5fc3ViZGl2aXNpb24pLnRvU2Vjb25kcygpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIEdldC9TZXQgYW4gaW5kZXggb2YgdGhlIHNlcXVlbmNlLiBJZiB0aGUgaW5kZXggY29udGFpbnMgYSBzdWJhcnJheSxcblx0XHQgKiAgYSBUb25lLlNlcXVlbmNlIHJlcHJlc2VudGluZyB0aGF0IHN1Yi1hcnJheSB3aWxsIGJlIHJldHVybmVkLlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBzZXF1ZW5jZSA9IG5ldyBUb25lLlNlcXVlbmNlKHBsYXlOb3RlLCBbXCJFNFwiLCBcIkM0XCIsIFwiRiM0XCIsIFtcIkE0XCIsIFwiQmIzXCJdXSlcblx0XHQgKiBzZXF1ZW5jZS5hdCgwKS8vID0+IHJldHVybnMgXCJFNFwiXG5cdFx0ICogLy9zZXQgYSB2YWx1ZVxuXHRcdCAqIHNlcXVlbmNlLmF0KDAsIFwiRzNcIik7XG5cdFx0ICogLy9nZXQgYSBuZXN0ZWQgc2VxdWVuY2Vcblx0XHQgKiBzZXF1ZW5jZS5hdCgzKS5hdCgxKS8vID0+IHJldHVybnMgXCJCYjNcIlxuXHRcdCAqIEBwYXJhbSB7UG9zaXRpdmV9IGluZGV4IFRoZSBpbmRleCB0byBnZXQgb3Igc2V0XG5cdFx0ICogQHBhcmFtIHsqfSB2YWx1ZSBPcHRpb25hbGx5IHBhc3MgaW4gdGhlIHZhbHVlIHRvIHNldCBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdFx0ICovXG5cdCAgICBUb25lLlNlcXVlbmNlLnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcblx0ICAgICAgICAvL2lmIHRoZSB2YWx1ZSBpcyBhbiBhcnJheSxcblx0ICAgICAgICBpZiAoVG9uZS5pc0FycmF5KHZhbHVlKSkge1xuXHQgICAgICAgICAgICAvL3JlbW92ZSB0aGUgY3VycmVudCBldmVudCBhdCB0aGF0IGluZGV4XG5cdCAgICAgICAgICAgIHRoaXMucmVtb3ZlKGluZGV4KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9jYWxsIHRoZSBwYXJlbnQncyBtZXRob2Rcblx0ICAgICAgICByZXR1cm4gVG9uZS5QYXJ0LnByb3RvdHlwZS5hdC5jYWxsKHRoaXMsIHRoaXMuX2luZGV4VGltZShpbmRleCksIHZhbHVlKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQWRkIGFuIGV2ZW50IGF0IGFuIGluZGV4LCBpZiB0aGVyZSdzIGFscmVhZHkgc29tZXRoaW5nXG5cdFx0ICogIGF0IHRoYXQgaW5kZXgsIG92ZXJ3cml0ZSBpdC4gSWYgYHZhbHVlYCBpcyBhbiBhcnJheSxcblx0XHQgKiAgaXQgd2lsbCBiZSBwYXJzZWQgYXMgYSBzdWJzZXF1ZW5jZS5cblx0XHQgKiAgQHBhcmFtIHtOdW1iZXJ9IGluZGV4IFRoZSBpbmRleCB0byBhZGQgdGhlIGV2ZW50IHRvXG5cdFx0ICogIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFkZCBhdCB0aGF0IGluZGV4XG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlNlcXVlbmNlfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlNlcXVlbmNlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG5cdCAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoVG9uZS5pc0FycmF5KHZhbHVlKSkge1xuXHQgICAgICAgICAgICAvL21ha2UgYSBzdWJzZXF1ZW5jZSBhbmQgYWRkIHRoYXQgdG8gdGhlIHNlcXVlbmNlXG5cdCAgICAgICAgICAgIHZhciBzdWJTdWJkaXZpc2lvbiA9IE1hdGgucm91bmQodGhpcy5fc3ViZGl2aXNpb24gLyB2YWx1ZS5sZW5ndGgpO1xuXHQgICAgICAgICAgICB2YWx1ZSA9IG5ldyBUb25lLlNlcXVlbmNlKHRoaXMuX3RpY2suYmluZCh0aGlzKSwgdmFsdWUsIFRvbmUuVGlja3Moc3ViU3ViZGl2aXNpb24pKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgVG9uZS5QYXJ0LnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCB0aGlzLl9pbmRleFRpbWUoaW5kZXgpLCB2YWx1ZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJlbW92ZSBhIHZhbHVlIGZyb20gdGhlIHNlcXVlbmNlIGJ5IGluZGV4XG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIGV2ZW50IHRvIHJlbW92ZVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5TZXF1ZW5jZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5TZXF1ZW5jZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuXHQgICAgICAgIFRvbmUuUGFydC5wcm90b3R5cGUucmVtb3ZlLmNhbGwodGhpcywgdGhpcy5faW5kZXhUaW1lKGluZGV4KSwgdmFsdWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBHZXQgdGhlIHRpbWUgb2YgdGhlIGluZGV4IGdpdmVuIHRoZSBTZXF1ZW5jZSdzIHN1YmRpdmlzaW9uXG5cdFx0ICogIEBwYXJhbSAge051bWJlcn0gIGluZGV4XG5cdFx0ICogIEByZXR1cm4gIHtUaW1lfSAgVGhlIHRpbWUgb2YgdGhhdCBpbmRleFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5TZXF1ZW5jZS5wcm90b3R5cGUuX2luZGV4VGltZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuXHQgICAgICAgIGlmIChpbmRleCBpbnN0YW5jZW9mIFRvbmUuVHJhbnNwb3J0VGltZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuVGlja3MoaW5kZXggKiB0aGlzLl9zdWJkaXZpc2lvbiArIHRoaXMuc3RhcnRPZmZzZXQpLnRvU2Vjb25kcygpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm4ge1RvbmUuU2VxdWVuY2V9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuU2VxdWVuY2UucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5QYXJ0LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuU2VxdWVuY2U7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLlB1bHNlT3NjaWxsYXRvciBpcyBhIHB1bHNlIG9zY2lsbGF0b3Igd2l0aCBjb250cm9sIG92ZXIgcHVsc2Ugd2lkdGgsXG5cdFx0ICogICAgICAgICBhbHNvIGtub3duIGFzIHRoZSBkdXR5IGN5Y2xlLiBBdCA1MCUgZHV0eSBjeWNsZSAod2lkdGggPSAwLjUpIHRoZSB3YXZlIGlzXG5cdFx0ICogICAgICAgICBhIHNxdWFyZSBhbmQgb25seSBvZGQtbnVtYmVyZWQgaGFybW9uaWNzIGFyZSBwcmVzZW50LiBBdCBhbGwgb3RoZXIgd2lkdGhzXG5cdFx0ICogICAgICAgICBldmVuLW51bWJlcmVkIGhhcm1vbmljcyBhcmUgcHJlc2VudC4gUmVhZCBtb3JlXG5cdFx0ICogICAgICAgICBbaGVyZV0oaHR0cHM6Ly93aWdnbGV3YXZlLndvcmRwcmVzcy5jb20vMjAxNC8wOC8xNi9wdWxzZS13YXZlZm9ybXMtYW5kLWhhcm1vbmljcy8pLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5Tb3VyY2V9XG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fSBbZnJlcXVlbmN5XSBUaGUgZnJlcXVlbmN5IG9mIHRoZSBvc2NpbGxhdG9yXG5cdFx0ICogIEBwYXJhbSB7Tm9ybWFsUmFuZ2V9IFt3aWR0aF0gVGhlIHdpZHRoIG9mIHRoZSBwdWxzZVxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBwdWxzZSA9IG5ldyBUb25lLlB1bHNlT3NjaWxsYXRvcihcIkU1XCIsIDAuNCkudG9NYXN0ZXIoKS5zdGFydCgpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QdWxzZU9zY2lsbGF0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ3dpZHRoJ1xuXHQgICAgICAgIF0sIFRvbmUuT3NjaWxsYXRvcik7XG5cdCAgICAgICAgVG9uZS5Tb3VyY2UuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgd2lkdGggb2YgdGhlIHB1bHNlLlxuXHRcdFx0ICogIEB0eXBlIHtOb3JtYWxSYW5nZX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLndpZHRoID0gbmV3IFRvbmUuU2lnbmFsKG9wdGlvbnMud2lkdGgsIFRvbmUuVHlwZS5Ob3JtYWxSYW5nZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgZ2F0ZSB0aGUgd2lkdGggYW1vdW50XG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fd2lkdGhHYXRlID0gbmV3IFRvbmUuR2FpbigpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBzYXd0b290aCBvc2NpbGxhdG9yXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuT3NjaWxsYXRvcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc2F3dG9vdGggPSBuZXcgVG9uZS5Pc2NpbGxhdG9yKHtcblx0ICAgICAgICAgICAgZnJlcXVlbmN5OiBvcHRpb25zLmZyZXF1ZW5jeSxcblx0ICAgICAgICAgICAgZGV0dW5lOiBvcHRpb25zLmRldHVuZSxcblx0ICAgICAgICAgICAgdHlwZTogJ3Nhd3Rvb3RoJyxcblx0ICAgICAgICAgICAgcGhhc2U6IG9wdGlvbnMucGhhc2Vcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZnJlcXVlbmN5IGNvbnRyb2wuXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IHRoaXMuX3Nhd3Rvb3RoLmZyZXF1ZW5jeTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZGV0dW5lIGluIGNlbnRzLlxuXHRcdFx0ICogIEB0eXBlIHtDZW50c31cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmRldHVuZSA9IHRoaXMuX3Nhd3Rvb3RoLmRldHVuZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaHJlc2hvbGQgdGhlIHNpZ25hbCB0byB0dXJuIGl0IGludG8gYSBzcXVhcmVcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5XYXZlU2hhcGVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl90aHJlc2ggPSBuZXcgVG9uZS5XYXZlU2hhcGVyKGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgICAgICAgaWYgKHZhbCA8IDApIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAtMTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAxO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgLy9jb25uZWN0aW9uc1xuXHQgICAgICAgIHRoaXMuX3Nhd3Rvb3RoLmNoYWluKHRoaXMuX3RocmVzaCwgdGhpcy5vdXRwdXQpO1xuXHQgICAgICAgIHRoaXMud2lkdGguY2hhaW4odGhpcy5fd2lkdGhHYXRlLCB0aGlzLl90aHJlc2gpO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KFtcblx0ICAgICAgICAgICAgJ3dpZHRoJyxcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdkZXR1bmUnXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5QdWxzZU9zY2lsbGF0b3IsIFRvbmUuU291cmNlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgZGVmYXVsdCBwYXJhbWV0ZXJzLlxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QdWxzZU9zY2lsbGF0b3IuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2ZyZXF1ZW5jeSc6IDQ0MCxcblx0ICAgICAgICAnZGV0dW5lJzogMCxcblx0ICAgICAgICAncGhhc2UnOiAwLFxuXHQgICAgICAgICd3aWR0aCc6IDAuMlxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBzdGFydCB0aGUgb3NjaWxsYXRvclxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSB0aW1lXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlB1bHNlT3NjaWxsYXRvci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy5fc2F3dG9vdGguc3RhcnQodGltZSk7XG5cdCAgICAgICAgdGhpcy5fd2lkdGhHYXRlLmdhaW4uc2V0VmFsdWVBdFRpbWUoMSwgdGltZSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIHN0b3AgdGhlIG9zY2lsbGF0b3Jcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gdGltZVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QdWxzZU9zY2lsbGF0b3IucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy5fc2F3dG9vdGguc3RvcCh0aW1lKTtcblx0ICAgICAgICAvL3RoZSB3aWR0aCBpcyBzdGlsbCBjb25uZWN0ZWQgdG8gdGhlIG91dHB1dC5cblx0ICAgICAgICAvL3RoYXQgbmVlZHMgdG8gYmUgc3RvcHBlZCBhbHNvXG5cdCAgICAgICAgdGhpcy5fd2lkdGhHYXRlLmdhaW4uc2V0VmFsdWVBdFRpbWUoMCwgdGltZSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIHJlc3RhcnQgdGhlIG9zY2lsbGF0b3Jcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gdGltZSAob3B0aW9uYWwpIHRpbWluZyBwYXJhbWV0ZXJcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuUHVsc2VPc2NpbGxhdG9yLnByb3RvdHlwZS5yZXN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aGlzLl9zYXd0b290aC5yZXN0YXJ0KHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBwaGFzZSBvZiB0aGUgb3NjaWxsYXRvciBpbiBkZWdyZWVzLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlB1bHNlT3NjaWxsYXRvciNcblx0XHQgKiBAdHlwZSB7RGVncmVlc31cblx0XHQgKiBAbmFtZSBwaGFzZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUHVsc2VPc2NpbGxhdG9yLnByb3RvdHlwZSwgJ3BoYXNlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2F3dG9vdGgucGhhc2U7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwaGFzZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9zYXd0b290aC5waGFzZSA9IHBoYXNlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHR5cGUgb2YgdGhlIG9zY2lsbGF0b3IuIEFsd2F5cyByZXR1cm5zIFwicHVsc2VcIi5cblx0XHQgKiBAcmVhZE9ubHlcblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5QdWxzZU9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAbmFtZSB0eXBlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QdWxzZU9zY2lsbGF0b3IucHJvdG90eXBlLCAndHlwZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuICdwdWxzZSc7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgcGFydGlhbHMgb2YgdGhlIHdhdmVmb3JtLiBDYW5ub3Qgc2V0IHBhcnRpYWxzIGZvciB0aGlzIHdhdmVmb3JtIHR5cGVcblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5QdWxzZU9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge0FycmF5fVxuXHRcdCAqIEBuYW1lIHBhcnRpYWxzXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlB1bHNlT3NjaWxsYXRvci5wcm90b3R5cGUsICdwYXJ0aWFscycsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFtdO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwIG1ldGhvZC5cblx0XHQgKiAgQHJldHVybiB7VG9uZS5QdWxzZU9zY2lsbGF0b3J9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUHVsc2VPc2NpbGxhdG9yLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU291cmNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fc2F3dG9vdGguZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3Nhd3Rvb3RoID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICd3aWR0aCcsXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZGV0dW5lJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIHRoaXMud2lkdGguZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMud2lkdGggPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3dpZHRoR2F0ZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fd2lkdGhHYXRlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl90aHJlc2guZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3RocmVzaCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5QdWxzZU9zY2lsbGF0b3I7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBUb25lLlBXTU9zY2lsbGF0b3IgbW9kdWxhdGVzIHRoZSB3aWR0aCBvZiBhIFRvbmUuUHVsc2VPc2NpbGxhdG9yXG5cdFx0ICogICAgICAgICBhdCB0aGUgbW9kdWxhdGlvbkZyZXF1ZW5jeS4gVGhpcyBoYXMgdGhlIGVmZmVjdCBvZiBjb250aW51b3VzbHlcblx0XHQgKiAgICAgICAgIGNoYW5naW5nIHRoZSB0aW1icmUgb2YgdGhlIG9zY2lsbGF0b3IgYnkgYWx0ZXJpbmcgdGhlIGhhcm1vbmljc1xuXHRcdCAqICAgICAgICAgZ2VuZXJhdGVkLlxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLlNvdXJjZX1cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fSBmcmVxdWVuY3kgVGhlIHN0YXJ0aW5nIGZyZXF1ZW5jeSBvZiB0aGUgb3NjaWxsYXRvci5cblx0XHQgKiAgQHBhcmFtIHtGcmVxdWVuY3l9IG1vZHVsYXRpb25GcmVxdWVuY3kgVGhlIG1vZHVsYXRpb24gZnJlcXVlbmN5IG9mIHRoZSB3aWR0aCBvZiB0aGUgcHVsc2UuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogIHZhciBwd20gPSBuZXcgVG9uZS5QV01Pc2NpbGxhdG9yKFwiQWIzXCIsIDAuMykudG9NYXN0ZXIoKS5zdGFydCgpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QV01Pc2NpbGxhdG9yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdtb2R1bGF0aW9uRnJlcXVlbmN5J1xuXHQgICAgICAgIF0sIFRvbmUuUFdNT3NjaWxsYXRvcik7XG5cdCAgICAgICAgVG9uZS5Tb3VyY2UuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgcHVsc2Ugb3NjaWxsYXRvclxuXHRcdFx0ICogIEB0eXBlIHtUb25lLlB1bHNlT3NjaWxsYXRvcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcHVsc2UgPSBuZXcgVG9uZS5QdWxzZU9zY2lsbGF0b3Iob3B0aW9ucy5tb2R1bGF0aW9uRnJlcXVlbmN5KTtcblx0ICAgICAgICAvL2NoYW5nZSB0aGUgcHVsc2Ugb3NjaWxsYXRvciB0eXBlXG5cdCAgICAgICAgdGhpcy5fcHVsc2UuX3Nhd3Rvb3RoLnR5cGUgPSAnc2luZSc7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIG1vZHVsYXRvclxuXHRcdFx0ICogIEB0eXBlIHtUb25lLk9zY2lsbGF0b3J9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRvciA9IG5ldyBUb25lLk9zY2lsbGF0b3Ioe1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jzogb3B0aW9ucy5mcmVxdWVuY3ksXG5cdCAgICAgICAgICAgICdkZXR1bmUnOiBvcHRpb25zLmRldHVuZSxcblx0ICAgICAgICAgICAgJ3BoYXNlJzogb3B0aW9ucy5waGFzZVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFNjYWxlIHRoZSBvc2NpbGxhdG9yIHNvIGl0IGRvZXNuJ3QgZ28gc2lsZW50XG5cdFx0XHQgKiAgYXQgdGhlIGV4dHJlbWUgdmFsdWVzLlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLk11bHRpcGx5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zY2FsZSA9IG5ldyBUb25lLk11bHRpcGx5KDIpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBmcmVxdWVuY3kgY29udHJvbC5cblx0XHRcdCAqICBAdHlwZSB7RnJlcXVlbmN5fVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gdGhpcy5fbW9kdWxhdG9yLmZyZXF1ZW5jeTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZGV0dW5lIG9mIHRoZSBvc2NpbGxhdG9yLlxuXHRcdFx0ICogIEB0eXBlIHtDZW50c31cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmRldHVuZSA9IHRoaXMuX21vZHVsYXRvci5kZXR1bmU7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG1vZHVsYXRpb24gcmF0ZSBvZiB0aGUgb3NjaWxsYXRvci5cblx0XHRcdCAqICBAdHlwZSB7RnJlcXVlbmN5fVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMubW9kdWxhdGlvbkZyZXF1ZW5jeSA9IHRoaXMuX3B1bHNlLmZyZXF1ZW5jeTtcblx0ICAgICAgICAvL2Nvbm5lY3Rpb25zXG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLmNoYWluKHRoaXMuX3NjYWxlLCB0aGlzLl9wdWxzZS53aWR0aCk7XG5cdCAgICAgICAgdGhpcy5fcHVsc2UuY29ubmVjdCh0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAnbW9kdWxhdGlvbkZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZGV0dW5lJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuUFdNT3NjaWxsYXRvciwgVG9uZS5Tb3VyY2UpO1xuXHQgICAgLyoqXG5cdFx0ICogIGRlZmF1bHQgdmFsdWVzXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKiAgQGNvbnN0XG5cdFx0ICovXG5cdCAgICBUb25lLlBXTU9zY2lsbGF0b3IuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2ZyZXF1ZW5jeSc6IDQ0MCxcblx0ICAgICAgICAnZGV0dW5lJzogMCxcblx0ICAgICAgICAncGhhc2UnOiAwLFxuXHQgICAgICAgICdtb2R1bGF0aW9uRnJlcXVlbmN5JzogMC40XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIHN0YXJ0IHRoZSBvc2NpbGxhdG9yXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IFt0aW1lPW5vd11cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuUFdNT3NjaWxsYXRvci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLnN0YXJ0KHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX3B1bHNlLnN0YXJ0KHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBzdG9wIHRoZSBvc2NpbGxhdG9yXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IHRpbWUgKG9wdGlvbmFsKSB0aW1pbmcgcGFyYW1ldGVyXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlBXTU9zY2lsbGF0b3IucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLnN0b3AodGltZSk7XG5cdCAgICAgICAgdGhpcy5fcHVsc2Uuc3RvcCh0aW1lKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgcmVzdGFydCB0aGUgb3NjaWxsYXRvclxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSB0aW1lIChvcHRpb25hbCkgdGltaW5nIHBhcmFtZXRlclxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QV01Pc2NpbGxhdG9yLnByb3RvdHlwZS5yZXN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IucmVzdGFydCh0aW1lKTtcblx0ICAgICAgICB0aGlzLl9wdWxzZS5yZXN0YXJ0KHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSB0eXBlIG9mIHRoZSBvc2NpbGxhdG9yLiBBbHdheXMgcmV0dXJucyBcInB3bVwiLlxuXHRcdCAqIEByZWFkT25seVxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlBXTU9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAbmFtZSB0eXBlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QV01Pc2NpbGxhdG9yLnByb3RvdHlwZSwgJ3R5cGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAncHdtJztcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBwYXJ0aWFscyBvZiB0aGUgd2F2ZWZvcm0uIENhbm5vdCBzZXQgcGFydGlhbHMgZm9yIHRoaXMgd2F2ZWZvcm0gdHlwZVxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlBXTU9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge0FycmF5fVxuXHRcdCAqIEBuYW1lIHBhcnRpYWxzXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBXTU9zY2lsbGF0b3IucHJvdG90eXBlLCAncGFydGlhbHMnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBbXTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBwaGFzZSBvZiB0aGUgb3NjaWxsYXRvciBpbiBkZWdyZWVzLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlBXTU9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAbmFtZSBwaGFzZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUFdNT3NjaWxsYXRvci5wcm90b3R5cGUsICdwaGFzZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vZHVsYXRvci5waGFzZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHBoYXNlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX21vZHVsYXRvci5waGFzZSA9IHBoYXNlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJuIHtUb25lLlBXTU9zY2lsbGF0b3J9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUFdNT3NjaWxsYXRvci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3B1bHNlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9wdWxzZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fc2NhbGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3NjYWxlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRvciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoW1xuXHQgICAgICAgICAgICAnbW9kdWxhdGlvbkZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZGV0dW5lJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmRldHVuZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5tb2R1bGF0aW9uRnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5QV01Pc2NpbGxhdG9yO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgVG9uZS5GTU9zY2lsbGF0b3Jcblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5Tb3VyY2V9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAcGFyYW0ge0ZyZXF1ZW5jeX0gZnJlcXVlbmN5IFRoZSBzdGFydGluZyBmcmVxdWVuY3kgb2YgdGhlIG9zY2lsbGF0b3IuXG5cdFx0ICogIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBjYXJyaWVyIG9zY2lsbGF0b3IuXG5cdFx0ICogIEBwYXJhbSB7U3RyaW5nfSBtb2R1bGF0aW9uVHlwZSBUaGUgdHlwZSBvZiB0aGUgbW9kdWxhdG9yIG9zY2lsbGF0b3IuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogLy9hIHNpbmUgb3NjaWxsYXRvciBmcmVxdWVuY3ktbW9kdWxhdGVkIGJ5IGEgc3F1YXJlIHdhdmVcblx0XHQgKiB2YXIgZm1Pc2MgPSBuZXcgVG9uZS5GTU9zY2lsbGF0b3IoXCJBYjNcIiwgXCJzaW5lXCIsIFwic3F1YXJlXCIpLnRvTWFzdGVyKCkuc3RhcnQoKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuRk1Pc2NpbGxhdG9yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmd1bWVudHMsIFtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICd0eXBlJyxcblx0ICAgICAgICAgICAgJ21vZHVsYXRpb25UeXBlJ1xuXHQgICAgICAgIF0sIFRvbmUuRk1Pc2NpbGxhdG9yKTtcblx0ICAgICAgICBUb25lLlNvdXJjZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBjYXJyaWVyIG9zY2lsbGF0b3Jcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5Pc2NpbGxhdG9yfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9jYXJyaWVyID0gbmV3IFRvbmUuT3NjaWxsYXRvcihvcHRpb25zLmZyZXF1ZW5jeSwgb3B0aW9ucy50eXBlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgb3NjaWxsYXRvcidzIGZyZXF1ZW5jeVxuXHRcdFx0ICogIEB0eXBlIHtGcmVxdWVuY3l9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5mcmVxdWVuY3ksIFRvbmUuVHlwZS5GcmVxdWVuY3kpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBkZXR1bmUgY29udHJvbCBzaWduYWwuXG5cdFx0XHQgKiAgQHR5cGUge0NlbnRzfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gdGhpcy5fY2Fycmllci5kZXR1bmU7XG5cdCAgICAgICAgdGhpcy5kZXR1bmUudmFsdWUgPSBvcHRpb25zLmRldHVuZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbW9kdWxhdGlvbiBpbmRleCB3aGljaCBpcyBpbiBlc3NlbmNlIHRoZSBkZXB0aCBvciBhbW91bnQgb2YgdGhlIG1vZHVsYXRpb24uIEluIG90aGVyIHRlcm1zIGl0IGlzIHRoZVxuXHRcdFx0ICogIHJhdGlvIG9mIHRoZSBmcmVxdWVuY3kgb2YgdGhlIG1vZHVsYXRpbmcgc2lnbmFsIChtZikgdG8gdGhlIGFtcGxpdHVkZSBvZiB0aGVcblx0XHRcdCAqICBtb2R1bGF0aW5nIHNpZ25hbCAobWEpIC0tIGFzIGluIG1hL21mLlxuXHRcdFx0ICpcdEB0eXBlIHtQb3NpdGl2ZX1cblx0XHRcdCAqXHRAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm1vZHVsYXRpb25JbmRleCA9IG5ldyBUb25lLk11bHRpcGx5KG9wdGlvbnMubW9kdWxhdGlvbkluZGV4KTtcblx0ICAgICAgICB0aGlzLm1vZHVsYXRpb25JbmRleC51bml0cyA9IFRvbmUuVHlwZS5Qb3NpdGl2ZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbW9kdWxhdGluZyBvc2NpbGxhdG9yXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLk9zY2lsbGF0b3J9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRvciA9IG5ldyBUb25lLk9zY2lsbGF0b3Iob3B0aW9ucy5mcmVxdWVuY3ksIG9wdGlvbnMubW9kdWxhdGlvblR5cGUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEhhcm1vbmljaXR5IGlzIHRoZSBmcmVxdWVuY3kgcmF0aW8gYmV0d2VlbiB0aGUgY2FycmllciBhbmQgdGhlIG1vZHVsYXRvciBvc2NpbGxhdG9ycy5cblx0XHRcdCAqICBBIGhhcm1vbmljaXR5IG9mIDEgZ2l2ZXMgYm90aCBvc2NpbGxhdG9ycyB0aGUgc2FtZSBmcmVxdWVuY3kuXG5cdFx0XHQgKiAgSGFybW9uaWNpdHkgPSAyIG1lYW5zIGEgY2hhbmdlIG9mIGFuIG9jdGF2ZS5cblx0XHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHQgKiAvL3BpdGNoIHRoZSBtb2R1bGF0b3IgYW4gb2N0YXZlIGJlbG93IGNhcnJpZXJcblx0XHRcdCAqIHN5bnRoLmhhcm1vbmljaXR5LnZhbHVlID0gMC41O1xuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5oYXJtb25pY2l0eSA9IG5ldyBUb25lLk11bHRpcGx5KG9wdGlvbnMuaGFybW9uaWNpdHkpO1xuXHQgICAgICAgIHRoaXMuaGFybW9uaWNpdHkudW5pdHMgPSBUb25lLlR5cGUuUG9zaXRpdmU7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIG5vZGUgd2hlcmUgdGhlIG1vZHVsYXRpb24gaGFwcGVuc1xuXHRcdFx0ICogIEB0eXBlIHtUb25lLkdhaW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRpb25Ob2RlID0gbmV3IFRvbmUuR2FpbigwKTtcblx0ICAgICAgICAvL2Nvbm5lY3Rpb25zXG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kuY29ubmVjdCh0aGlzLl9jYXJyaWVyLmZyZXF1ZW5jeSk7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kuY2hhaW4odGhpcy5oYXJtb25pY2l0eSwgdGhpcy5fbW9kdWxhdG9yLmZyZXF1ZW5jeSk7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kuY2hhaW4odGhpcy5tb2R1bGF0aW9uSW5kZXgsIHRoaXMuX21vZHVsYXRpb25Ob2RlKTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IuY29ubmVjdCh0aGlzLl9tb2R1bGF0aW9uTm9kZS5nYWluKTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0aW9uTm9kZS5jb25uZWN0KHRoaXMuX2NhcnJpZXIuZnJlcXVlbmN5KTtcblx0ICAgICAgICB0aGlzLl9jYXJyaWVyLmNvbm5lY3QodGhpcy5vdXRwdXQpO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lLmNvbm5lY3QodGhpcy5fbW9kdWxhdG9yLmRldHVuZSk7XG5cdCAgICAgICAgdGhpcy5waGFzZSA9IG9wdGlvbnMucGhhc2U7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAnbW9kdWxhdGlvbkluZGV4Jyxcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdkZXR1bmUnLFxuXHQgICAgICAgICAgICAnaGFybW9uaWNpdHknXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5GTU9zY2lsbGF0b3IsIFRvbmUuU291cmNlKTtcblx0ICAgIC8qKlxuXHRcdCAqICBkZWZhdWx0IHZhbHVlc1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICogIEBjb25zdFxuXHRcdCAqL1xuXHQgICAgVG9uZS5GTU9zY2lsbGF0b3IuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2ZyZXF1ZW5jeSc6IDQ0MCxcblx0ICAgICAgICAnZGV0dW5lJzogMCxcblx0ICAgICAgICAncGhhc2UnOiAwLFxuXHQgICAgICAgICdtb2R1bGF0aW9uSW5kZXgnOiAyLFxuXHQgICAgICAgICdtb2R1bGF0aW9uVHlwZSc6ICdzcXVhcmUnLFxuXHQgICAgICAgICdoYXJtb25pY2l0eSc6IDFcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgc3RhcnQgdGhlIG9zY2lsbGF0b3Jcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5GTU9zY2lsbGF0b3IucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLnN0YXJ0KHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX2NhcnJpZXIuc3RhcnQodGltZSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIHN0b3AgdGhlIG9zY2lsbGF0b3Jcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gdGltZSAob3B0aW9uYWwpIHRpbWluZyBwYXJhbWV0ZXJcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuRk1Pc2NpbGxhdG9yLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLnN0b3AodGltZSk7XG5cdCAgICAgICAgdGhpcy5fY2Fycmllci5zdG9wKHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBzdG9wIHRoZSBvc2NpbGxhdG9yXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IHRpbWUgKG9wdGlvbmFsKSB0aW1pbmcgcGFyYW1ldGVyXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkZNT3NjaWxsYXRvci5wcm90b3R5cGUucmVzdGFydCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLnJlc3RhcnQodGltZSk7XG5cdCAgICAgICAgdGhpcy5fY2Fycmllci5yZXN0YXJ0KHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSB0eXBlIG9mIHRoZSBjYXJyaWVyIG9zY2lsbGF0b3Jcblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5GTU9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAbmFtZSB0eXBlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5GTU9zY2lsbGF0b3IucHJvdG90eXBlLCAndHlwZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhcnJpZXIudHlwZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHR5cGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY2Fycmllci50eXBlID0gdHlwZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSB0eXBlIG9mIHRoZSBtb2R1bGF0b3Igb3NjaWxsYXRvclxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkZNT3NjaWxsYXRvciNcblx0XHQgKiBAdHlwZSB7U3RyaW5nfVxuXHRcdCAqIEBuYW1lIG1vZHVsYXRpb25UeXBlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5GTU9zY2lsbGF0b3IucHJvdG90eXBlLCAnbW9kdWxhdGlvblR5cGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2R1bGF0b3IudHlwZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHR5cGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbW9kdWxhdG9yLnR5cGUgPSB0eXBlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHBoYXNlIG9mIHRoZSBvc2NpbGxhdG9yIGluIGRlZ3JlZXMuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuRk1Pc2NpbGxhdG9yI1xuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQG5hbWUgcGhhc2Vcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkZNT3NjaWxsYXRvci5wcm90b3R5cGUsICdwaGFzZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhcnJpZXIucGhhc2U7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwaGFzZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9jYXJyaWVyLnBoYXNlID0gcGhhc2U7XG5cdCAgICAgICAgICAgIHRoaXMuX21vZHVsYXRvci5waGFzZSA9IHBoYXNlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHBhcnRpYWxzIG9mIHRoZSBjYXJyaWVyIHdhdmVmb3JtLiBBIHBhcnRpYWwgcmVwcmVzZW50c1xuXHRcdCAqIHRoZSBhbXBsaXR1ZGUgYXQgYSBoYXJtb25pYy4gVGhlIGZpcnN0IGhhcm1vbmljIGlzIHRoZVxuXHRcdCAqIGZ1bmRhbWVudGFsIGZyZXF1ZW5jeSwgdGhlIHNlY29uZCBpcyB0aGUgb2N0YXZlIGFuZCBzbyBvblxuXHRcdCAqIGZvbGxvd2luZyB0aGUgaGFybW9uaWMgc2VyaWVzLlxuXHRcdCAqIFNldHRpbmcgdGhpcyB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgc2V0IHRoZSB0eXBlIHRvIFwiY3VzdG9tXCIuXG5cdFx0ICogVGhlIHZhbHVlIGlzIGFuIGVtcHR5IGFycmF5IHdoZW4gdGhlIHR5cGUgaXMgbm90IFwiY3VzdG9tXCIuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuRk1Pc2NpbGxhdG9yI1xuXHRcdCAqIEB0eXBlIHtBcnJheX1cblx0XHQgKiBAbmFtZSBwYXJ0aWFsc1xuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogb3NjLnBhcnRpYWxzID0gWzEsIDAuMiwgMC4wMV07XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5GTU9zY2lsbGF0b3IucHJvdG90eXBlLCAncGFydGlhbHMnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYXJyaWVyLnBhcnRpYWxzO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocGFydGlhbHMpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY2Fycmllci5wYXJ0aWFscyA9IHBhcnRpYWxzO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJuIHtUb25lLkZNT3NjaWxsYXRvcn0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5GTU9zY2lsbGF0b3IucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5Tb3VyY2UucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdtb2R1bGF0aW9uSW5kZXgnLFxuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2RldHVuZScsXG5cdCAgICAgICAgICAgICdoYXJtb25pY2l0eSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmhhcm1vbmljaXR5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmhhcm1vbmljaXR5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9jYXJyaWVyLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9jYXJyaWVyID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRvciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdGlvbk5vZGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRpb25Ob2RlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLm1vZHVsYXRpb25JbmRleC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5tb2R1bGF0aW9uSW5kZXggPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkZNT3NjaWxsYXRvcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuQU1Pc2NpbGxhdG9yXG5cdFx0ICpcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuT3NjaWxsYXRvcn1cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fSBmcmVxdWVuY3kgVGhlIHN0YXJ0aW5nIGZyZXF1ZW5jeSBvZiB0aGUgb3NjaWxsYXRvci5cblx0XHQgKiAgQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgdGhlIGNhcnJpZXIgb3NjaWxsYXRvci5cblx0XHQgKiAgQHBhcmFtIHtTdHJpbmd9IG1vZHVsYXRpb25UeXBlIFRoZSB0eXBlIG9mIHRoZSBtb2R1bGF0b3Igb3NjaWxsYXRvci5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2Egc2luZSBvc2NpbGxhdG9yIGZyZXF1ZW5jeS1tb2R1bGF0ZWQgYnkgYSBzcXVhcmUgd2F2ZVxuXHRcdCAqIHZhciBmbU9zYyA9IG5ldyBUb25lLkFNT3NjaWxsYXRvcihcIkFiM1wiLCBcInNpbmVcIiwgXCJzcXVhcmVcIikudG9NYXN0ZXIoKS5zdGFydCgpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5BTU9zY2lsbGF0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ3R5cGUnLFxuXHQgICAgICAgICAgICAnbW9kdWxhdGlvblR5cGUnXG5cdCAgICAgICAgXSwgVG9uZS5BTU9zY2lsbGF0b3IpO1xuXHQgICAgICAgIFRvbmUuU291cmNlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGNhcnJpZXIgb3NjaWxsYXRvclxuXHRcdFx0ICogIEB0eXBlIHtUb25lLk9zY2lsbGF0b3J9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2NhcnJpZXIgPSBuZXcgVG9uZS5Pc2NpbGxhdG9yKG9wdGlvbnMuZnJlcXVlbmN5LCBvcHRpb25zLnR5cGUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBvc2NpbGxhdG9yJ3MgZnJlcXVlbmN5XG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IHRoaXMuX2NhcnJpZXIuZnJlcXVlbmN5O1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBkZXR1bmUgY29udHJvbCBzaWduYWwuXG5cdFx0XHQgKiAgQHR5cGUge0NlbnRzfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gdGhpcy5fY2Fycmllci5kZXR1bmU7XG5cdCAgICAgICAgdGhpcy5kZXR1bmUudmFsdWUgPSBvcHRpb25zLmRldHVuZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbW9kdWxhdGluZyBvc2NpbGxhdG9yXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLk9zY2lsbGF0b3J9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRvciA9IG5ldyBUb25lLk9zY2lsbGF0b3Iob3B0aW9ucy5mcmVxdWVuY3ksIG9wdGlvbnMubW9kdWxhdGlvblR5cGUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIGNvbnZlcnQgdGhlIC0xLDEgb3V0cHV0IHRvIDAsMVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkF1ZGlvVG9HYWlufVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9tb2R1bGF0aW9uU2NhbGUgPSBuZXcgVG9uZS5BdWRpb1RvR2FpbigpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEhhcm1vbmljaXR5IGlzIHRoZSBmcmVxdWVuY3kgcmF0aW8gYmV0d2VlbiB0aGUgY2FycmllciBhbmQgdGhlIG1vZHVsYXRvciBvc2NpbGxhdG9ycy5cblx0XHRcdCAqICBBIGhhcm1vbmljaXR5IG9mIDEgZ2l2ZXMgYm90aCBvc2NpbGxhdG9ycyB0aGUgc2FtZSBmcmVxdWVuY3kuXG5cdFx0XHQgKiAgSGFybW9uaWNpdHkgPSAyIG1lYW5zIGEgY2hhbmdlIG9mIGFuIG9jdGF2ZS5cblx0XHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHQgKiAvL3BpdGNoIHRoZSBtb2R1bGF0b3IgYW4gb2N0YXZlIGJlbG93IGNhcnJpZXJcblx0XHRcdCAqIHN5bnRoLmhhcm1vbmljaXR5LnZhbHVlID0gMC41O1xuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5oYXJtb25pY2l0eSA9IG5ldyBUb25lLk11bHRpcGx5KG9wdGlvbnMuaGFybW9uaWNpdHkpO1xuXHQgICAgICAgIHRoaXMuaGFybW9uaWNpdHkudW5pdHMgPSBUb25lLlR5cGUuUG9zaXRpdmU7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIG5vZGUgd2hlcmUgdGhlIG1vZHVsYXRpb24gaGFwcGVuc1xuXHRcdFx0ICogIEB0eXBlIHtUb25lLkdhaW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRpb25Ob2RlID0gbmV3IFRvbmUuR2FpbigwKTtcblx0ICAgICAgICAvL2Nvbm5lY3Rpb25zXG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kuY2hhaW4odGhpcy5oYXJtb25pY2l0eSwgdGhpcy5fbW9kdWxhdG9yLmZyZXF1ZW5jeSk7XG5cdCAgICAgICAgdGhpcy5kZXR1bmUuY29ubmVjdCh0aGlzLl9tb2R1bGF0b3IuZGV0dW5lKTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IuY2hhaW4odGhpcy5fbW9kdWxhdGlvblNjYWxlLCB0aGlzLl9tb2R1bGF0aW9uTm9kZS5nYWluKTtcblx0ICAgICAgICB0aGlzLl9jYXJyaWVyLmNoYWluKHRoaXMuX21vZHVsYXRpb25Ob2RlLCB0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgdGhpcy5waGFzZSA9IG9wdGlvbnMucGhhc2U7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2RldHVuZScsXG5cdCAgICAgICAgICAgICdoYXJtb25pY2l0eSdcblx0ICAgICAgICBdKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkFNT3NjaWxsYXRvciwgVG9uZS5Pc2NpbGxhdG9yKTtcblx0ICAgIC8qKlxuXHRcdCAqICBkZWZhdWx0IHZhbHVlc1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICogIEBjb25zdFxuXHRcdCAqL1xuXHQgICAgVG9uZS5BTU9zY2lsbGF0b3IuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2ZyZXF1ZW5jeSc6IDQ0MCxcblx0ICAgICAgICAnZGV0dW5lJzogMCxcblx0ICAgICAgICAncGhhc2UnOiAwLFxuXHQgICAgICAgICdtb2R1bGF0aW9uVHlwZSc6ICdzcXVhcmUnLFxuXHQgICAgICAgICdoYXJtb25pY2l0eSc6IDFcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgc3RhcnQgdGhlIG9zY2lsbGF0b3Jcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5BTU9zY2lsbGF0b3IucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLnN0YXJ0KHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX2NhcnJpZXIuc3RhcnQodGltZSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIHN0b3AgdGhlIG9zY2lsbGF0b3Jcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gdGltZSAob3B0aW9uYWwpIHRpbWluZyBwYXJhbWV0ZXJcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuQU1Pc2NpbGxhdG9yLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLnN0b3AodGltZSk7XG5cdCAgICAgICAgdGhpcy5fY2Fycmllci5zdG9wKHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICByZXN0YXJ0IHRoZSBvc2NpbGxhdG9yXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IHRpbWUgKG9wdGlvbmFsKSB0aW1pbmcgcGFyYW1ldGVyXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkFNT3NjaWxsYXRvci5wcm90b3R5cGUucmVzdGFydCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLnJlc3RhcnQodGltZSk7XG5cdCAgICAgICAgdGhpcy5fY2Fycmllci5yZXN0YXJ0KHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSB0eXBlIG9mIHRoZSBjYXJyaWVyIG9zY2lsbGF0b3Jcblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5BTU9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAbmFtZSB0eXBlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5BTU9zY2lsbGF0b3IucHJvdG90eXBlLCAndHlwZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhcnJpZXIudHlwZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHR5cGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY2Fycmllci50eXBlID0gdHlwZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSB0eXBlIG9mIHRoZSBtb2R1bGF0b3Igb3NjaWxsYXRvclxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkFNT3NjaWxsYXRvciNcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBuYW1lIG1vZHVsYXRpb25UeXBlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5BTU9zY2lsbGF0b3IucHJvdG90eXBlLCAnbW9kdWxhdGlvblR5cGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2R1bGF0b3IudHlwZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHR5cGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbW9kdWxhdG9yLnR5cGUgPSB0eXBlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHBoYXNlIG9mIHRoZSBvc2NpbGxhdG9yIGluIGRlZ3JlZXMuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQU1Pc2NpbGxhdG9yI1xuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQG5hbWUgcGhhc2Vcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkFNT3NjaWxsYXRvci5wcm90b3R5cGUsICdwaGFzZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhcnJpZXIucGhhc2U7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwaGFzZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9jYXJyaWVyLnBoYXNlID0gcGhhc2U7XG5cdCAgICAgICAgICAgIHRoaXMuX21vZHVsYXRvci5waGFzZSA9IHBoYXNlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHBhcnRpYWxzIG9mIHRoZSBjYXJyaWVyIHdhdmVmb3JtLiBBIHBhcnRpYWwgcmVwcmVzZW50c1xuXHRcdCAqIHRoZSBhbXBsaXR1ZGUgYXQgYSBoYXJtb25pYy4gVGhlIGZpcnN0IGhhcm1vbmljIGlzIHRoZVxuXHRcdCAqIGZ1bmRhbWVudGFsIGZyZXF1ZW5jeSwgdGhlIHNlY29uZCBpcyB0aGUgb2N0YXZlIGFuZCBzbyBvblxuXHRcdCAqIGZvbGxvd2luZyB0aGUgaGFybW9uaWMgc2VyaWVzLlxuXHRcdCAqIFNldHRpbmcgdGhpcyB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgc2V0IHRoZSB0eXBlIHRvIFwiY3VzdG9tXCIuXG5cdFx0ICogVGhlIHZhbHVlIGlzIGFuIGVtcHR5IGFycmF5IHdoZW4gdGhlIHR5cGUgaXMgbm90IFwiY3VzdG9tXCIuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuQU1Pc2NpbGxhdG9yI1xuXHRcdCAqIEB0eXBlIHtBcnJheX1cblx0XHQgKiBAbmFtZSBwYXJ0aWFsc1xuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogb3NjLnBhcnRpYWxzID0gWzEsIDAuMiwgMC4wMV07XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5BTU9zY2lsbGF0b3IucHJvdG90eXBlLCAncGFydGlhbHMnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYXJyaWVyLnBhcnRpYWxzO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocGFydGlhbHMpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY2Fycmllci5wYXJ0aWFscyA9IHBhcnRpYWxzO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJuIHtUb25lLkFNT3NjaWxsYXRvcn0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5BTU9zY2lsbGF0b3IucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5Tb3VyY2UucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZGV0dW5lJyxcblx0ICAgICAgICAgICAgJ2hhcm1vbmljaXR5J1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmRldHVuZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5oYXJtb25pY2l0eS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5oYXJtb25pY2l0eSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fY2Fycmllci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fY2FycmllciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRpb25Ob2RlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0aW9uTm9kZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdGlvblNjYWxlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0aW9uU2NhbGUgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkFNT3NjaWxsYXRvcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIFRvbmUuRmF0T3NjaWxsYXRvclxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLlNvdXJjZX1cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fSBmcmVxdWVuY3kgVGhlIHN0YXJ0aW5nIGZyZXF1ZW5jeSBvZiB0aGUgb3NjaWxsYXRvci5cblx0XHQgKiAgQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgdGhlIGNhcnJpZXIgb3NjaWxsYXRvci5cblx0XHQgKiAgQHBhcmFtIHtTdHJpbmd9IG1vZHVsYXRpb25UeXBlIFRoZSB0eXBlIG9mIHRoZSBtb2R1bGF0b3Igb3NjaWxsYXRvci5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2Egc2luZSBvc2NpbGxhdG9yIGZyZXF1ZW5jeS1tb2R1bGF0ZWQgYnkgYSBzcXVhcmUgd2F2ZVxuXHRcdCAqIHZhciBmbU9zYyA9IG5ldyBUb25lLkZhdE9zY2lsbGF0b3IoXCJBYjNcIiwgXCJzaW5lXCIsIFwic3F1YXJlXCIpLnRvTWFzdGVyKCkuc3RhcnQoKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuRmF0T3NjaWxsYXRvciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAndHlwZScsXG5cdCAgICAgICAgICAgICdzcHJlYWQnXG5cdCAgICAgICAgXSwgVG9uZS5GYXRPc2NpbGxhdG9yKTtcblx0ICAgICAgICBUb25lLlNvdXJjZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBvc2NpbGxhdG9yJ3MgZnJlcXVlbmN5XG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG5ldyBUb25lLlNpZ25hbChvcHRpb25zLmZyZXF1ZW5jeSwgVG9uZS5UeXBlLkZyZXF1ZW5jeSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGRldHVuZSBjb250cm9sIHNpZ25hbC5cblx0XHRcdCAqICBAdHlwZSB7Q2VudHN9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5kZXR1bmUgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5kZXR1bmUsIFRvbmUuVHlwZS5DZW50cyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGFycmF5IG9mIG9zY2lsbGF0b3JzXG5cdFx0XHQgKiAgQHR5cGUge0FycmF5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9ycyA9IFtdO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSB0b3RhbCBzcHJlYWQgb2YgdGhlIG9zY2lsbGF0b3JzXG5cdFx0XHQgKiAgQHR5cGUgIHtDZW50c31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fc3ByZWFkID0gb3B0aW9ucy5zcHJlYWQ7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIHR5cGUgb2YgdGhlIG9zY2lsbGF0b3Jcblx0XHRcdCAqICBAdHlwZSB7U3RyaW5nfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl90eXBlID0gb3B0aW9ucy50eXBlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBwaGFzZSBvZiB0aGUgb3NjaWxsYXRvcnNcblx0XHRcdCAqICBAdHlwZSB7RGVncmVlc31cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcGhhc2UgPSBvcHRpb25zLnBoYXNlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBwYXJ0aWFscyBhcnJheVxuXHRcdFx0ICogIEB0eXBlIHtBcnJheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcGFydGlhbHMgPSBUb25lLmRlZmF1bHRBcmcob3B0aW9ucy5wYXJ0aWFscywgW10pO1xuXHQgICAgICAgIC8vc2V0IHRoZSBjb3VudCBpbml0aWFsbHlcblx0ICAgICAgICB0aGlzLmNvdW50ID0gb3B0aW9ucy5jb3VudDtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZGV0dW5lJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuRmF0T3NjaWxsYXRvciwgVG9uZS5Tb3VyY2UpO1xuXHQgICAgLyoqXG5cdFx0ICogIGRlZmF1bHQgdmFsdWVzXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKiAgQGNvbnN0XG5cdFx0ICovXG5cdCAgICBUb25lLkZhdE9zY2lsbGF0b3IuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ2ZyZXF1ZW5jeSc6IDQ0MCxcblx0ICAgICAgICAnZGV0dW5lJzogMCxcblx0ICAgICAgICAncGhhc2UnOiAwLFxuXHQgICAgICAgICdzcHJlYWQnOiAyMCxcblx0ICAgICAgICAnY291bnQnOiAzLFxuXHQgICAgICAgICd0eXBlJzogJ3Nhd3Rvb3RoJ1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBzdGFydCB0aGUgb3NjaWxsYXRvclxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbdGltZT1ub3ddXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkZhdE9zY2lsbGF0b3IucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX2ZvckVhY2goZnVuY3Rpb24gKG9zYykge1xuXHQgICAgICAgICAgICBvc2Muc3RhcnQodGltZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIHN0b3AgdGhlIG9zY2lsbGF0b3Jcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5GYXRPc2NpbGxhdG9yLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX2ZvckVhY2goZnVuY3Rpb24gKG9zYykge1xuXHQgICAgICAgICAgICBvc2Muc3RvcCh0aW1lKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgcmVzdGFydCB0aGUgb3NjaWxsYXRvclxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSB0aW1lIChvcHRpb25hbCkgdGltaW5nIHBhcmFtZXRlclxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5GYXRPc2NpbGxhdG9yLnByb3RvdHlwZS5yZXN0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy5fZm9yRWFjaChmdW5jdGlvbiAob3NjKSB7XG5cdCAgICAgICAgICAgIG9zYy5yZXN0YXJ0KHRpbWUpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBJdGVyYXRlIG92ZXIgYWxsIG9mIHRoZSBvc2NpbGxhdG9yc1xuXHRcdCAqICBAcGFyYW0gIHtGdW5jdGlvbn0gIGl0ZXJhdG9yICBUaGUgaXRlcmF0b3IgZnVuY3Rpb25cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuRmF0T3NjaWxsYXRvci5wcm90b3R5cGUuX2ZvckVhY2ggPSBmdW5jdGlvbiAoaXRlcmF0b3IpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX29zY2lsbGF0b3JzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwodGhpcywgdGhpcy5fb3NjaWxsYXRvcnNbaV0sIGkpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBUaGUgdHlwZSBvZiB0aGUgY2FycmllciBvc2NpbGxhdG9yXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuRmF0T3NjaWxsYXRvciNcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBuYW1lIHR5cGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkZhdE9zY2lsbGF0b3IucHJvdG90eXBlLCAndHlwZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0eXBlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuXHQgICAgICAgICAgICB0aGlzLl9mb3JFYWNoKGZ1bmN0aW9uIChvc2MpIHtcblx0ICAgICAgICAgICAgICAgIG9zYy50eXBlID0gdHlwZTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgZGV0dW5lIHNwcmVhZCBiZXR3ZWVuIHRoZSBvc2NpbGxhdG9ycy4gSWYgXCJjb3VudFwiIGlzXG5cdFx0ICogc2V0IHRvIDMgb3NjaWxsYXRvcnMgYW5kIHRoZSBcInNwcmVhZFwiIGlzIHNldCB0byA0MCxcblx0XHQgKiB0aGUgdGhyZWUgb3NjaWxsYXRvcnMgd291bGQgYmUgZGV0dW5lZCBsaWtlIHRoaXM6IFstMjAsIDAsIDIwXVxuXHRcdCAqIGZvciBhIHRvdGFsIGRldHVuZSBzcHJlYWQgb2YgNDAgY2VudHMuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuRmF0T3NjaWxsYXRvciNcblx0XHQgKiBAdHlwZSB7Q2VudHN9XG5cdFx0ICogQG5hbWUgc3ByZWFkXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5GYXRPc2NpbGxhdG9yLnByb3RvdHlwZSwgJ3NwcmVhZCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NwcmVhZDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHNwcmVhZCkge1xuXHQgICAgICAgICAgICB0aGlzLl9zcHJlYWQgPSBzcHJlYWQ7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9vc2NpbGxhdG9ycy5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSAtc3ByZWFkIC8gMjtcblx0ICAgICAgICAgICAgICAgIHZhciBzdGVwID0gc3ByZWFkIC8gKHRoaXMuX29zY2lsbGF0b3JzLmxlbmd0aCAtIDEpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fZm9yRWFjaChmdW5jdGlvbiAob3NjLCBpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgb3NjLmRldHVuZS52YWx1ZSA9IHN0YXJ0ICsgc3RlcCAqIGk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIG51bWJlciBvZiBkZXR1bmVkIG9zY2lsbGF0b3JzXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuRmF0T3NjaWxsYXRvciNcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBuYW1lIGNvdW50XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5GYXRPc2NpbGxhdG9yLnByb3RvdHlwZSwgJ2NvdW50Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3NjaWxsYXRvcnMubGVuZ3RoO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoY291bnQpIHtcblx0ICAgICAgICAgICAgY291bnQgPSBNYXRoLm1heChjb3VudCwgMSk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9vc2NpbGxhdG9ycy5sZW5ndGggIT09IGNvdW50KSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgcGFydGlhbHMgPSB0aGlzLnBhcnRpYWxzO1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cdCAgICAgICAgICAgICAgICAvL2Rpc3Bvc2UgdGhlIHByZXZpb3VzIG9zY2lsbGF0b3JzXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9mb3JFYWNoKGZ1bmN0aW9uIChvc2MpIHtcblx0ICAgICAgICAgICAgICAgICAgICBvc2MuZGlzcG9zZSgpO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9vc2NpbGxhdG9ycyA9IFtdO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG9zYyA9IG5ldyBUb25lLk9zY2lsbGF0b3IoKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50eXBlID09PSBUb25lLk9zY2lsbGF0b3IuVHlwZS5DdXN0b20pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb3NjLnBhcnRpYWxzID0gdGhpcy5fcGFydGlhbHM7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb3NjLnR5cGUgPSB0aGlzLl90eXBlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBvc2MucGhhc2UgPSB0aGlzLl9waGFzZTtcblx0ICAgICAgICAgICAgICAgICAgICBvc2Mudm9sdW1lLnZhbHVlID0gLTYgLSBjb3VudCAqIDEuMTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmZyZXF1ZW5jeS5jb25uZWN0KG9zYy5mcmVxdWVuY3kpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZGV0dW5lLmNvbm5lY3Qob3NjLmRldHVuZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgb3NjLmNvbm5lY3QodGhpcy5vdXRwdXQpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX29zY2lsbGF0b3JzW2ldID0gb3NjO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgLy9zZXQgdGhlIHNwcmVhZFxuXHQgICAgICAgICAgICAgICAgdGhpcy5zcHJlYWQgPSB0aGlzLl9zcHJlYWQ7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9yRWFjaChmdW5jdGlvbiAob3NjKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9zYy5zdGFydCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgcGhhc2Ugb2YgdGhlIG9zY2lsbGF0b3IgaW4gZGVncmVlcy5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5GYXRPc2NpbGxhdG9yI1xuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogQG5hbWUgcGhhc2Vcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkZhdE9zY2lsbGF0b3IucHJvdG90eXBlLCAncGhhc2UnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9waGFzZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHBoYXNlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3BoYXNlID0gcGhhc2U7XG5cdCAgICAgICAgICAgIHRoaXMuX2ZvckVhY2goZnVuY3Rpb24gKG9zYykge1xuXHQgICAgICAgICAgICAgICAgb3NjLnBoYXNlID0gcGhhc2U7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHBhcnRpYWxzIG9mIHRoZSBjYXJyaWVyIHdhdmVmb3JtLiBBIHBhcnRpYWwgcmVwcmVzZW50c1xuXHRcdCAqIHRoZSBhbXBsaXR1ZGUgYXQgYSBoYXJtb25pYy4gVGhlIGZpcnN0IGhhcm1vbmljIGlzIHRoZVxuXHRcdCAqIGZ1bmRhbWVudGFsIGZyZXF1ZW5jeSwgdGhlIHNlY29uZCBpcyB0aGUgb2N0YXZlIGFuZCBzbyBvblxuXHRcdCAqIGZvbGxvd2luZyB0aGUgaGFybW9uaWMgc2VyaWVzLlxuXHRcdCAqIFNldHRpbmcgdGhpcyB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgc2V0IHRoZSB0eXBlIHRvIFwiY3VzdG9tXCIuXG5cdFx0ICogVGhlIHZhbHVlIGlzIGFuIGVtcHR5IGFycmF5IHdoZW4gdGhlIHR5cGUgaXMgbm90IFwiY3VzdG9tXCIuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuRmF0T3NjaWxsYXRvciNcblx0XHQgKiBAdHlwZSB7QXJyYXl9XG5cdFx0ICogQG5hbWUgcGFydGlhbHNcblx0XHQgKiBAZXhhbXBsZVxuXHRcdCAqIG9zYy5wYXJ0aWFscyA9IFsxLCAwLjIsIDAuMDFdO1xuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuRmF0T3NjaWxsYXRvci5wcm90b3R5cGUsICdwYXJ0aWFscycsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRpYWxzO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocGFydGlhbHMpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcGFydGlhbHMgPSBwYXJ0aWFscztcblx0ICAgICAgICAgICAgdGhpcy5fdHlwZSA9IFRvbmUuT3NjaWxsYXRvci5UeXBlLkN1c3RvbTtcblx0ICAgICAgICAgICAgdGhpcy5fZm9yRWFjaChmdW5jdGlvbiAob3NjKSB7XG5cdCAgICAgICAgICAgICAgICBvc2MucGFydGlhbHMgPSBwYXJ0aWFscztcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm4ge1RvbmUuRmF0T3NjaWxsYXRvcn0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5GYXRPc2NpbGxhdG9yLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU291cmNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2RldHVuZSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmRldHVuZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fZm9yRWFjaChmdW5jdGlvbiAob3NjKSB7XG5cdCAgICAgICAgICAgIG9zYy5kaXNwb3NlKCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5fb3NjaWxsYXRvcnMgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3BhcnRpYWxzID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5GYXRPc2NpbGxhdG9yO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgVG9uZS5PbW5pT3NjaWxsYXRvciBhZ2dyZWdhdGVzIFRvbmUuT3NjaWxsYXRvciwgVG9uZS5QdWxzZU9zY2lsbGF0b3IsXG5cdFx0ICogICAgICAgICBUb25lLlBXTU9zY2lsbGF0b3IsIFRvbmUuRk1Pc2NpbGxhdG9yLCBUb25lLkFNT3NjaWxsYXRvciwgYW5kIFRvbmUuRmF0T3NjaWxsYXRvclxuXHRcdCAqICAgICAgICAgaW50byBvbmUgY2xhc3MuIFRoZSBvc2NpbGxhdG9yIGNsYXNzIGNhbiBiZSBjaGFuZ2VkIGJ5IHNldHRpbmcgdGhlIGB0eXBlYC5cblx0XHQgKiAgICAgICAgIGBvbW5pT3NjLnR5cGUgPSBcInB3bVwiYCB3aWxsIHNldCBpdCB0byB0aGUgVG9uZS5QV01Pc2NpbGxhdG9yLiBQcmVmaXhpbmdcblx0XHQgKiAgICAgICAgIGFueSBvZiB0aGUgYmFzaWMgdHlwZXMgKFwic2luZVwiLCBcInNxdWFyZTRcIiwgZXRjLikgd2l0aCBcImZtXCIsIFwiYW1cIiwgb3IgXCJmYXRcIlxuXHRcdCAqICAgICAgICAgd2lsbCB1c2UgdGhlIEZNT3NjaWxsYXRvciwgQU1Pc2NpbGxhdG9yIG9yIEZhdE9zY2lsbGF0b3IgcmVzcGVjdGl2ZWx5LlxuXHRcdCAqICAgICAgICAgRm9yIGV4YW1wbGU6IGBvbW5pT3NjLnR5cGUgPSBcImZhdHNhd3Rvb3RoXCJgIHdpbGwgY3JlYXRlIHNldCB0aGUgb3NjaWxsYXRvclxuXHRcdCAqICAgICAgICAgdG8gYSBGYXRPc2NpbGxhdG9yIG9mIHR5cGUgXCJzYXd0b290aFwiLlxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLlNvdXJjZX1cblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fSBmcmVxdWVuY3kgVGhlIGluaXRpYWwgZnJlcXVlbmN5IG9mIHRoZSBvc2NpbGxhdG9yLlxuXHRcdCAqICBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiB0aGUgb3NjaWxsYXRvci5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAgdmFyIG9tbmlPc2MgPSBuZXcgVG9uZS5PbW5pT3NjaWxsYXRvcihcIkMjNFwiLCBcInB3bVwiKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuT21uaU9zY2lsbGF0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ3R5cGUnXG5cdCAgICAgICAgXSwgVG9uZS5PbW5pT3NjaWxsYXRvcik7XG5cdCAgICAgICAgVG9uZS5Tb3VyY2UuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZnJlcXVlbmN5IGNvbnRyb2wuXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG5ldyBUb25lLlNpZ25hbChvcHRpb25zLmZyZXF1ZW5jeSwgVG9uZS5UeXBlLkZyZXF1ZW5jeSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGRldHVuZSBjb250cm9sXG5cdFx0XHQgKiAgQHR5cGUge0NlbnRzfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gbmV3IFRvbmUuU2lnbmFsKG9wdGlvbnMuZGV0dW5lLCBUb25lLlR5cGUuQ2VudHMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSB0eXBlIG9mIHRoZSBvc2NpbGxhdG9yIHNvdXJjZVxuXHRcdFx0ICogIEB0eXBlIHtTdHJpbmd9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3NvdXJjZVR5cGUgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIG9zY2lsbGF0b3Jcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5Pc2NpbGxhdG9yfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yID0gbnVsbDtcblx0ICAgICAgICAvL3NldCB0aGUgb3NjaWxsYXRvclxuXHQgICAgICAgIHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZGV0dW5lJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIC8vc2V0IHRoZSBvcHRpb25zXG5cdCAgICAgICAgdGhpcy5zZXQob3B0aW9ucyk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5PbW5pT3NjaWxsYXRvciwgVG9uZS5Tb3VyY2UpO1xuXHQgICAgLyoqXG5cdFx0ICogIGRlZmF1bHQgdmFsdWVzXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKiAgQGNvbnN0XG5cdFx0ICovXG5cdCAgICBUb25lLk9tbmlPc2NpbGxhdG9yLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdmcmVxdWVuY3knOiA0NDAsXG5cdCAgICAgICAgJ2RldHVuZSc6IDAsXG5cdCAgICAgICAgJ3R5cGUnOiAnc2luZScsXG5cdCAgICAgICAgJ3BoYXNlJzogMFxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBAZW51bSB7U3RyaW5nfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgdmFyIE9tbmlPc2NUeXBlID0ge1xuXHQgICAgICAgIFB1bHNlOiAnUHVsc2VPc2NpbGxhdG9yJyxcblx0ICAgICAgICBQV006ICdQV01Pc2NpbGxhdG9yJyxcblx0ICAgICAgICBPc2M6ICdPc2NpbGxhdG9yJyxcblx0ICAgICAgICBGTTogJ0ZNT3NjaWxsYXRvcicsXG5cdCAgICAgICAgQU06ICdBTU9zY2lsbGF0b3InLFxuXHQgICAgICAgIEZhdDogJ0ZhdE9zY2lsbGF0b3InXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIHN0YXJ0IHRoZSBvc2NpbGxhdG9yXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gW3RpbWU9bm93XSB0aGUgdGltZSB0byBzdGFydCB0aGUgb3NjaWxsYXRvclxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5PbW5pT3NjaWxsYXRvci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLnN0YXJ0KHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBzdGFydCB0aGUgb3NjaWxsYXRvclxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFt0aW1lPW5vd10gdGhlIHRpbWUgdG8gc3RhcnQgdGhlIG9zY2lsbGF0b3Jcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuT21uaU9zY2lsbGF0b3IucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLnN0b3AodGltZSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5PbW5pT3NjaWxsYXRvci5wcm90b3R5cGUucmVzdGFydCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5yZXN0YXJ0KHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSB0eXBlIG9mIHRoZSBvc2NpbGxhdG9yLiBDYW4gYmUgYW55IG9mIHRoZSBiYXNpYyB0eXBlczogc2luZSwgc3F1YXJlLCB0cmlhbmdsZSwgc2F3dG9vdGguIE9yXG5cdFx0ICogcHJlZml4IHRoZSBiYXNpYyB0eXBlcyB3aXRoIFwiZm1cIiwgXCJhbVwiLCBvciBcImZhdFwiIHRvIHVzZSB0aGUgRk1Pc2NpbGxhdG9yLCBBTU9zY2lsbGF0b3Igb3IgRmF0T3NjaWxsYXRvclxuXHRcdCAqIHR5cGVzLiBUaGUgb3NjaWxsYXRvciBjb3VsZCBhbHNvIGJlIHNldCB0byBcInB3bVwiIG9yIFwicHVsc2VcIi4gQWxsIG9mIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZVxuXHRcdCAqIG9zY2lsbGF0b3IncyBjbGFzcyBhcmUgYWNjZXNzaWJsZSB3aGVuIHRoZSBvc2NpbGxhdG9yIGlzIHNldCB0byB0aGF0IHR5cGUsIGJ1dCB0aHJvd3MgYW4gZXJyb3Jcblx0XHQgKiB3aGVuIGl0J3Mgbm90LlxuXHRcdCAqXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuT21uaU9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge1N0cmluZ31cblx0XHQgKiBAbmFtZSB0eXBlXG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiBvbW5pT3NjLnR5cGUgPSBcInB3bVwiO1xuXHRcdCAqIC8vbW9kdWxhdGlvbkZyZXF1ZW5jeSBpcyBwYXJhbWV0ZXIgd2hpY2ggaXMgYXZhaWxhYmxlXG5cdFx0ICogLy9vbmx5IHdoZW4gdGhlIHR5cGUgaXMgXCJwd21cIi5cblx0XHQgKiBvbW5pT3NjLm1vZHVsYXRpb25GcmVxdWVuY3kudmFsdWUgPSAwLjU7XG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiAvL2FuIHNxdWFyZSB3YXZlIGZyZXF1ZW5jeSBtb2R1bGF0ZWQgYnkgYSBzYXd0b290aFxuXHRcdCAqIG9tbmlPc2MudHlwZSA9IFwiZm1zcXVhcmVcIjtcblx0XHQgKiBvbW5pT3NjLm1vZHVsYXRpb25UeXBlID0gXCJzYXd0b290aFwiO1xuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuT21uaU9zY2lsbGF0b3IucHJvdG90eXBlLCAndHlwZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIHByZWZpeCA9ICcnO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fc291cmNlVHlwZSA9PT0gT21uaU9zY1R5cGUuRk0pIHtcblx0ICAgICAgICAgICAgICAgIHByZWZpeCA9ICdmbSc7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc291cmNlVHlwZSA9PT0gT21uaU9zY1R5cGUuQU0pIHtcblx0ICAgICAgICAgICAgICAgIHByZWZpeCA9ICdhbSc7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc291cmNlVHlwZSA9PT0gT21uaU9zY1R5cGUuRmF0KSB7XG5cdCAgICAgICAgICAgICAgICBwcmVmaXggPSAnZmF0Jztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgdGhpcy5fb3NjaWxsYXRvci50eXBlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZSkge1xuXHQgICAgICAgICAgICBpZiAodHlwZS5zdWJzdHIoMCwgMikgPT09ICdmbScpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZU5ld09zY2lsbGF0b3IoT21uaU9zY1R5cGUuRk0pO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci50eXBlID0gdHlwZS5zdWJzdHIoMik7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZS5zdWJzdHIoMCwgMikgPT09ICdhbScpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZU5ld09zY2lsbGF0b3IoT21uaU9zY1R5cGUuQU0pO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci50eXBlID0gdHlwZS5zdWJzdHIoMik7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZS5zdWJzdHIoMCwgMykgPT09ICdmYXQnKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVOZXdPc2NpbGxhdG9yKE9tbmlPc2NUeXBlLkZhdCk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLnR5cGUgPSB0eXBlLnN1YnN0cigzKTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncHdtJykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlTmV3T3NjaWxsYXRvcihPbW5pT3NjVHlwZS5QV00pO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdwdWxzZScpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZU5ld09zY2lsbGF0b3IoT21uaU9zY1R5cGUuUHVsc2UpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlTmV3T3NjaWxsYXRvcihPbW5pT3NjVHlwZS5Pc2MpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci50eXBlID0gdHlwZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHBhcnRpYWxzIG9mIHRoZSB3YXZlZm9ybS4gQSBwYXJ0aWFsIHJlcHJlc2VudHNcblx0XHQgKiB0aGUgYW1wbGl0dWRlIGF0IGEgaGFybW9uaWMuIFRoZSBmaXJzdCBoYXJtb25pYyBpcyB0aGVcblx0XHQgKiBmdW5kYW1lbnRhbCBmcmVxdWVuY3ksIHRoZSBzZWNvbmQgaXMgdGhlIG9jdGF2ZSBhbmQgc28gb25cblx0XHQgKiBmb2xsb3dpbmcgdGhlIGhhcm1vbmljIHNlcmllcy5cblx0XHQgKiBTZXR0aW5nIHRoaXMgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IHNldCB0aGUgdHlwZSB0byBcImN1c3RvbVwiLlxuXHRcdCAqIFRoZSB2YWx1ZSBpcyBhbiBlbXB0eSBhcnJheSB3aGVuIHRoZSB0eXBlIGlzIG5vdCBcImN1c3RvbVwiLlxuXHRcdCAqIFRoaXMgaXMgbm90IGF2YWlsYWJsZSBvbiBcInB3bVwiIGFuZCBcInB1bHNlXCIgb3NjaWxsYXRvciB0eXBlcy5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5PbW5pT3NjaWxsYXRvciNcblx0XHQgKiBAdHlwZSB7QXJyYXl9XG5cdFx0ICogQG5hbWUgcGFydGlhbHNcblx0XHQgKiBAZXhhbXBsZVxuXHRcdCAqIG9zYy5wYXJ0aWFscyA9IFsxLCAwLjIsIDAuMDFdO1xuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuT21uaU9zY2lsbGF0b3IucHJvdG90eXBlLCAncGFydGlhbHMnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9vc2NpbGxhdG9yLnBhcnRpYWxzO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAocGFydGlhbHMpIHtcblx0ICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5wYXJ0aWFscyA9IHBhcnRpYWxzO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFNldCBhIG1lbWJlci9hdHRyaWJ1dGUgb2YgdGhlIG9zY2lsbGF0b3IuXG5cdFx0ICogIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gcGFyYW1zXG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyPX0gdmFsdWVcblx0XHQgKiAgQHBhcmFtIHtUaW1lPX0gcmFtcFRpbWVcblx0XHQgKiAgQHJldHVybnMge1RvbmUuT21uaU9zY2lsbGF0b3J9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuT21uaU9zY2lsbGF0b3IucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChwYXJhbXMsIHZhbHVlKSB7XG5cdCAgICAgICAgLy9tYWtlIHN1cmUgdGhlIHR5cGUgaXMgc2V0IGZpcnN0XG5cdCAgICAgICAgaWYgKHBhcmFtcyA9PT0gJ3R5cGUnKSB7XG5cdCAgICAgICAgICAgIHRoaXMudHlwZSA9IHZhbHVlO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoVG9uZS5pc09iamVjdChwYXJhbXMpICYmIHBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XG5cdCAgICAgICAgICAgIHRoaXMudHlwZSA9IHBhcmFtcy50eXBlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvL3RoZW4gc2V0IHRoZSByZXN0XG5cdCAgICAgICAgVG9uZS5wcm90b3R5cGUuc2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIGNvbm5lY3QgdGhlIG9zY2lsbGF0b3IgdG8gdGhlIGZyZXF1ZW5jeSBhbmQgZGV0dW5lIHNpZ25hbHNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuT21uaU9zY2lsbGF0b3IucHJvdG90eXBlLl9jcmVhdGVOZXdPc2NpbGxhdG9yID0gZnVuY3Rpb24gKG9zY1R5cGUpIHtcblx0ICAgICAgICBpZiAob3NjVHlwZSAhPT0gdGhpcy5fc291cmNlVHlwZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9zb3VyY2VUeXBlID0gb3NjVHlwZTtcblx0ICAgICAgICAgICAgdmFyIE9zY2lsbGF0b3JDb25zdHJ1Y3RvciA9IFRvbmVbb3NjVHlwZV07XG5cdCAgICAgICAgICAgIC8vc2hvcnQgZGVsYXkgdG8gYXZvaWQgY2xpY2tzIG9uIHRoZSBjaGFuZ2Vcblx0ICAgICAgICAgICAgdmFyIG5vdyA9IHRoaXMubm93KCk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9vc2NpbGxhdG9yICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgb2xkT3NjID0gdGhpcy5fb3NjaWxsYXRvcjtcblx0ICAgICAgICAgICAgICAgIG9sZE9zYy5zdG9wKG5vdyk7XG5cdCAgICAgICAgICAgICAgICAvL2Rpc3Bvc2UgdGhlIG9sZCBvbmVcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBvbGRPc2MuZGlzcG9zZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIG9sZE9zYyA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICB9LCB0aGlzLmJsb2NrVGltZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvciA9IG5ldyBPc2NpbGxhdG9yQ29uc3RydWN0b3IoKTtcblx0ICAgICAgICAgICAgdGhpcy5mcmVxdWVuY3kuY29ubmVjdCh0aGlzLl9vc2NpbGxhdG9yLmZyZXF1ZW5jeSk7XG5cdCAgICAgICAgICAgIHRoaXMuZGV0dW5lLmNvbm5lY3QodGhpcy5fb3NjaWxsYXRvci5kZXR1bmUpO1xuXHQgICAgICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLmNvbm5lY3QodGhpcy5vdXRwdXQpO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9vc2NpbGxhdG9yLnN0YXJ0KG5vdyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHBoYXNlIG9mIHRoZSBvc2NpbGxhdG9yIGluIGRlZ3JlZXMuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuT21uaU9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge0RlZ3JlZXN9XG5cdFx0ICogQG5hbWUgcGhhc2Vcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLk9tbmlPc2NpbGxhdG9yLnByb3RvdHlwZSwgJ3BoYXNlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3NjaWxsYXRvci5waGFzZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHBoYXNlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX29zY2lsbGF0b3IucGhhc2UgPSBwaGFzZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSB3aWR0aCBvZiB0aGUgb3NjaWxsYXRvciAob25seSBpZiB0aGUgb3NjaWxsYXRvciBpcyBzZXQgdG8gXCJwdWxzZVwiKVxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLk9tbmlPc2NpbGxhdG9yI1xuXHRcdCAqIEB0eXBlIHtOb3JtYWxSYW5nZX1cblx0XHQgKiBAc2lnbmFsXG5cdFx0ICogQG5hbWUgd2lkdGhcblx0XHQgKiBAZXhhbXBsZVxuXHRcdCAqIHZhciBvbW5pT3NjID0gbmV3IFRvbmUuT21uaU9zY2lsbGF0b3IoNDQwLCBcInB1bHNlXCIpO1xuXHRcdCAqIC8vY2FuIGFjY2VzcyB0aGUgd2lkdGggYXR0cmlidXRlIG9ubHkgaWYgdHlwZSA9PT0gXCJwdWxzZVwiXG5cdFx0ICogb21uaU9zYy53aWR0aC52YWx1ZSA9IDAuMjtcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLk9tbmlPc2NpbGxhdG9yLnByb3RvdHlwZSwgJ3dpZHRoJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fc291cmNlVHlwZSA9PT0gT21uaU9zY1R5cGUuUHVsc2UpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vc2NpbGxhdG9yLndpZHRoO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgbnVtYmVyIG9mIGRldHVuZWQgb3NjaWxsYXRvcnNcblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5PbW5pT3NjaWxsYXRvciNcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBuYW1lIGNvdW50XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5PbW5pT3NjaWxsYXRvci5wcm90b3R5cGUsICdjb3VudCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3NvdXJjZVR5cGUgPT09IE9tbmlPc2NUeXBlLkZhdCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29zY2lsbGF0b3IuY291bnQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGNvdW50KSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9zb3VyY2VUeXBlID09PSBPbW5pT3NjVHlwZS5GYXQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX29zY2lsbGF0b3IuY291bnQgPSBjb3VudDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGRldHVuZSBzcHJlYWQgYmV0d2VlbiB0aGUgb3NjaWxsYXRvcnMuIElmIFwiY291bnRcIiBpc1xuXHRcdCAqIHNldCB0byAzIG9zY2lsbGF0b3JzIGFuZCB0aGUgXCJzcHJlYWRcIiBpcyBzZXQgdG8gNDAsXG5cdFx0ICogdGhlIHRocmVlIG9zY2lsbGF0b3JzIHdvdWxkIGJlIGRldHVuZWQgbGlrZSB0aGlzOiBbLTIwLCAwLCAyMF1cblx0XHQgKiBmb3IgYSB0b3RhbCBkZXR1bmUgc3ByZWFkIG9mIDQwIGNlbnRzLiBTZWUgVG9uZS5GYXRPc2NpbGxhdG9yXG5cdFx0ICogZm9yIG1vcmUgaW5mby5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5PbW5pT3NjaWxsYXRvciNcblx0XHQgKiBAdHlwZSB7Q2VudHN9XG5cdFx0ICogQG5hbWUgc3ByZWFkXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5PbW5pT3NjaWxsYXRvci5wcm90b3R5cGUsICdzcHJlYWQnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9zb3VyY2VUeXBlID09PSBPbW5pT3NjVHlwZS5GYXQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vc2NpbGxhdG9yLnNwcmVhZDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoc3ByZWFkKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9zb3VyY2VUeXBlID09PSBPbW5pT3NjVHlwZS5GYXQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX29zY2lsbGF0b3Iuc3ByZWFkID0gc3ByZWFkO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgdHlwZSBvZiB0aGUgbW9kdWxhdG9yIG9zY2lsbGF0b3IuIE9ubHkgaWYgdGhlIG9zY2lsbGF0b3Jcblx0XHQgKiBpcyBzZXQgdG8gXCJhbVwiIG9yIFwiZm1cIiB0eXBlcy4gc2VlLiBUb25lLkFNT3NjaWxsYXRvciBvciBUb25lLkZNT3NjaWxsYXRvclxuXHRcdCAqIGZvciBtb3JlIGluZm8uXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuT21uaU9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge1N0cmluZ31cblx0XHQgKiBAbmFtZSBtb2R1bGF0aW9uVHlwZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuT21uaU9zY2lsbGF0b3IucHJvdG90eXBlLCAnbW9kdWxhdGlvblR5cGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9zb3VyY2VUeXBlID09PSBPbW5pT3NjVHlwZS5GTSB8fCB0aGlzLl9zb3VyY2VUeXBlID09PSBPbW5pT3NjVHlwZS5BTSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29zY2lsbGF0b3IubW9kdWxhdGlvblR5cGU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG1UeXBlKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9zb3VyY2VUeXBlID09PSBPbW5pT3NjVHlwZS5GTSB8fCB0aGlzLl9zb3VyY2VUeXBlID09PSBPbW5pT3NjVHlwZS5BTSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5tb2R1bGF0aW9uVHlwZSA9IG1UeXBlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgbW9kdWxhdGlvbiBpbmRleCB3aGljaCBpcyBpbiBlc3NlbmNlIHRoZSBkZXB0aCBvciBhbW91bnQgb2YgdGhlIG1vZHVsYXRpb24uIEluIG90aGVyIHRlcm1zIGl0IGlzIHRoZVxuXHRcdCAqIHJhdGlvIG9mIHRoZSBmcmVxdWVuY3kgb2YgdGhlIG1vZHVsYXRpbmcgc2lnbmFsIChtZikgdG8gdGhlIGFtcGxpdHVkZSBvZiB0aGVcblx0XHQgKiBtb2R1bGF0aW5nIHNpZ25hbCAobWEpIC0tIGFzIGluIG1hL21mLlxuXHRcdCAqIFNlZSBUb25lLkZNT3NjaWxsYXRvciBmb3IgbW9yZSBpbmZvLlxuXHRcdCAqIEB0eXBlIHtQb3NpdGl2ZX1cblx0XHQgKiBAc2lnbmFsXG5cdFx0ICogQG5hbWUgbW9kdWxhdGlvbkluZGV4XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5PbW5pT3NjaWxsYXRvci5wcm90b3R5cGUsICdtb2R1bGF0aW9uSW5kZXgnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9zb3VyY2VUeXBlID09PSBPbW5pT3NjVHlwZS5GTSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29zY2lsbGF0b3IubW9kdWxhdGlvbkluZGV4O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgSGFybW9uaWNpdHkgaXMgdGhlIGZyZXF1ZW5jeSByYXRpbyBiZXR3ZWVuIHRoZSBjYXJyaWVyIGFuZCB0aGUgbW9kdWxhdG9yIG9zY2lsbGF0b3JzLlxuXHRcdCAqICBBIGhhcm1vbmljaXR5IG9mIDEgZ2l2ZXMgYm90aCBvc2NpbGxhdG9ycyB0aGUgc2FtZSBmcmVxdWVuY3kuXG5cdFx0ICogIEhhcm1vbmljaXR5ID0gMiBtZWFucyBhIGNoYW5nZSBvZiBhbiBvY3RhdmUuIFNlZSBUb25lLkFNT3NjaWxsYXRvciBvciBUb25lLkZNT3NjaWxsYXRvclxuXHRcdCAqICBmb3IgbW9yZSBpbmZvLlxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5PbW5pT3NjaWxsYXRvciNcblx0XHQgKiAgQHNpZ25hbFxuXHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0ICogIEBuYW1lIGhhcm1vbmljaXR5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5PbW5pT3NjaWxsYXRvci5wcm90b3R5cGUsICdoYXJtb25pY2l0eScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3NvdXJjZVR5cGUgPT09IE9tbmlPc2NUeXBlLkZNIHx8IHRoaXMuX3NvdXJjZVR5cGUgPT09IE9tbmlPc2NUeXBlLkFNKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3NjaWxsYXRvci5oYXJtb25pY2l0eTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIG1vZHVsYXRpb25GcmVxdWVuY3kgU2lnbmFsIG9mIHRoZSBvc2NpbGxhdG9yXG5cdFx0ICogKG9ubHkgaWYgdGhlIG9zY2lsbGF0b3IgdHlwZSBpcyBzZXQgdG8gcHdtKS4gU2VlXG5cdFx0ICogVG9uZS5QV01Pc2NpbGxhdG9yIGZvciBtb3JlIGluZm8uXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuT21uaU9zY2lsbGF0b3IjXG5cdFx0ICogQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHQgKiBAc2lnbmFsXG5cdFx0ICogQG5hbWUgbW9kdWxhdGlvbkZyZXF1ZW5jeVxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogdmFyIG9tbmlPc2MgPSBuZXcgVG9uZS5PbW5pT3NjaWxsYXRvcig0NDAsIFwicHdtXCIpO1xuXHRcdCAqIC8vY2FuIGFjY2VzcyB0aGUgbW9kdWxhdGlvbkZyZXF1ZW5jeSBhdHRyaWJ1dGUgb25seSBpZiB0eXBlID09PSBcInB3bVwiXG5cdFx0ICogb21uaU9zYy5tb2R1bGF0aW9uRnJlcXVlbmN5LnZhbHVlID0gMC4yO1xuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuT21uaU9zY2lsbGF0b3IucHJvdG90eXBlLCAnbW9kdWxhdGlvbkZyZXF1ZW5jeScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3NvdXJjZVR5cGUgPT09IE9tbmlPc2NUeXBlLlBXTSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29zY2lsbGF0b3IubW9kdWxhdGlvbkZyZXF1ZW5jeTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJuIHtUb25lLk9tbmlPc2NpbGxhdG9yfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk9tbmlPc2NpbGxhdG9yLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU291cmNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2RldHVuZSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLmRldHVuZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5kZXR1bmUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fb3NjaWxsYXRvci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fb3NjaWxsYXRvciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fc291cmNlVHlwZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuT21uaU9zY2lsbGF0b3I7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgQmFzZS1jbGFzcyBmb3IgYWxsIGluc3RydW1lbnRzXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkF1ZGlvTm9kZX1cblx0XHQgKi9cblx0ICAgIFRvbmUuSW5zdHJ1bWVudCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdCAgICAgICAgLy9nZXQgdGhlIGRlZmF1bHRzXG5cdCAgICAgICAgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdEFyZyhvcHRpb25zLCBUb25lLkluc3RydW1lbnQuZGVmYXVsdHMpO1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG91dHB1dCBhbmQgdm9sdW1lIHRyaW1pbmcgbm9kZVxuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5Wb2x1bWV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3ZvbHVtZSA9IHRoaXMub3V0cHV0ID0gbmV3IFRvbmUuVm9sdW1lKG9wdGlvbnMudm9sdW1lKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSB2b2x1bWUgb2YgdGhlIG91dHB1dCBpbiBkZWNpYmVscy5cblx0XHRcdCAqIEB0eXBlIHtEZWNpYmVsc31cblx0XHRcdCAqIEBzaWduYWxcblx0XHRcdCAqIEBleGFtcGxlXG5cdFx0XHQgKiBzb3VyY2Uudm9sdW1lLnZhbHVlID0gLTY7XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLnZvbHVtZSA9IHRoaXMuX3ZvbHVtZS52b2x1bWU7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoJ3ZvbHVtZScpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogS2VlcCB0cmFjayBvZiBhbGwgZXZlbnRzIHNjaGVkdWxlZCB0byB0aGUgdHJhbnNwb3J0XG5cdFx0XHQgKiB3aGVuIHRoZSBpbnN0cnVtZW50IGlzICdzeW5jZWQnXG5cdFx0XHQgKiBAdHlwZSB7QXJyYXk8TnVtYmVyPn1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9zY2hlZHVsZWRFdmVudHMgPSBbXTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkluc3RydW1lbnQsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqICB0aGUgZGVmYXVsdCBhdHRyaWJ1dGVzXG5cdFx0ICogIEB0eXBlIHtvYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLkluc3RydW1lbnQuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgLyoqIHRoZSB2b2x1bWUgb2YgdGhlIG91dHB1dCBpbiBkZWNpYmVscyAqL1xuXHQgICAgICAgICd2b2x1bWUnOiAwXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEBhYnN0cmFjdFxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IG5vdGUgdGhlIG5vdGUgdG8gdHJpZ2dlclxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFt0aW1lPW5vd10gdGhlIHRpbWUgdG8gdHJpZ2dlciB0aGUgbnRvZVxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gW3ZlbG9jaXR5PTFdIHRoZSB2ZWxvY2l0eSB0byB0cmlnZ2VyIHRoZSBub3RlXG5cdFx0ICovXG5cdCAgICBUb25lLkluc3RydW1lbnQucHJvdG90eXBlLnRyaWdnZXJBdHRhY2sgPSBUb25lLm5vT3A7XG5cdCAgICAvKipcblx0XHQgKiAgQGFic3RyYWN0XG5cdFx0ICogIEBwYXJhbSB7VGltZX0gW3RpbWU9bm93XSB3aGVuIHRvIHRyaWdnZXIgdGhlIHJlbGVhc2Vcblx0XHQgKi9cblx0ICAgIFRvbmUuSW5zdHJ1bWVudC5wcm90b3R5cGUudHJpZ2dlclJlbGVhc2UgPSBUb25lLm5vT3A7XG5cdCAgICAvKipcblx0XHQgKiBTeW5jIHRoZSBpbnN0cnVtZW50IHRvIHRoZSBUcmFuc3BvcnQuIEFsbCBzdWJzZXF1ZW50IGNhbGxzIG9mXG5cdFx0ICogW3RyaWdnZXJBdHRhY2tdKCN0cmlnZ2VyYXR0YWNrKSBhbmQgW3RyaWdnZXJSZWxlYXNlXSgjdHJpZ2dlcnJlbGVhc2UpXG5cdFx0ICogd2lsbCBiZSBzY2hlZHVsZWQgYWxvbmcgdGhlIHRyYW5zcG9ydC5cblx0XHQgKiBAZXhhbXBsZVxuXHRcdCAqIGluc3RydW1lbnQuc3luYygpXG5cdFx0ICogLy9zY2hlZHVsZSAzIG5vdGVzIHdoZW4gdGhlIHRyYW5zcG9ydCBmaXJzdCBzdGFydHNcblx0XHQgKiBpbnN0cnVtZW50LnRyaWdnZXJBdHRhY2tSZWxlYXNlKCdDNCcsICc4bicsIDApXG5cdFx0ICogaW5zdHJ1bWVudC50cmlnZ2VyQXR0YWNrUmVsZWFzZSgnRTQnLCAnOG4nLCAnOG4nKVxuXHRcdCAqIGluc3RydW1lbnQudHJpZ2dlckF0dGFja1JlbGVhc2UoJ0c0JywgJzhuJywgJzRuJylcblx0XHQgKiAvL3N0YXJ0IHRoZSB0cmFuc3BvcnQgdG8gaGVhciB0aGUgbm90ZXNcblx0XHQgKiBUcmFuc3BvcnQuc3RhcnQoKVxuXHRcdCAqIEByZXR1cm5zIHtUb25lLkluc3RydW1lbnR9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuSW5zdHJ1bWVudC5wcm90b3R5cGUuc3luYyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLl9zeW5jTWV0aG9kKCd0cmlnZ2VyQXR0YWNrJywgMSk7XG5cdCAgICAgICAgdGhpcy5fc3luY01ldGhvZCgndHJpZ2dlclJlbGVhc2UnLCAwKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBXcmFwIHRoZSBnaXZlbiBtZXRob2Qgc28gdGhhdCBpdCBjYW4gYmUgc3luY2hyb25pemVkXG5cdFx0ICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBXaGljaCBtZXRob2QgdG8gd3JhcCBhbmQgc3luY1xuXHRcdCAqIEBwYXJhbSAge051bWJlcn0gdGltZVBvc2l0aW9uIFdoYXQgcG9zaXRpb24gdGhlIHRpbWUgYXJndW1lbnQgYXBwZWFycyBpblxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkluc3RydW1lbnQucHJvdG90eXBlLl9zeW5jTWV0aG9kID0gZnVuY3Rpb24gKG1ldGhvZCwgdGltZVBvc2l0aW9uKSB7XG5cdCAgICAgICAgdmFyIG9yaWdpbmFsTWV0aG9kID0gdGhpc1snX29yaWdpbmFsXycgKyBtZXRob2RdID0gdGhpc1ttZXRob2RdO1xuXHQgICAgICAgIHRoaXNbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICB2YXIgdGltZSA9IGFyZ3NbdGltZVBvc2l0aW9uXTtcblx0ICAgICAgICAgICAgdmFyIGlkID0gVG9uZS5UcmFuc3BvcnQuc2NoZWR1bGUoZnVuY3Rpb24gKHQpIHtcblx0ICAgICAgICAgICAgICAgIGFyZ3NbdGltZVBvc2l0aW9uXSA9IHQ7XG5cdCAgICAgICAgICAgICAgICBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcblx0ICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCB0aW1lKTtcblx0ICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVkRXZlbnRzLnB1c2goaWQpO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBVbnN5bmMgdGhlIGluc3RydW1lbnQgZnJvbSB0aGUgVHJhbnNwb3J0XG5cdFx0ICogQHJldHVybnMge1RvbmUuSW5zdHJ1bWVudH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5JbnN0cnVtZW50LnByb3RvdHlwZS51bnN5bmMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5fc2NoZWR1bGVkRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG5cdCAgICAgICAgICAgIFRvbmUuVHJhbnNwb3J0LmNsZWFyKGlkKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLl9zY2hlZHVsZWRFdmVudHMgPSBbXTtcblx0ICAgICAgICBpZiAodGhpcy5fb3JpZ2luYWxfdHJpZ2dlckF0dGFjaykge1xuXHQgICAgICAgICAgICB0aGlzLnRyaWdnZXJBdHRhY2sgPSB0aGlzLl9vcmlnaW5hbF90cmlnZ2VyQXR0YWNrO1xuXHQgICAgICAgICAgICB0aGlzLnRyaWdnZXJSZWxlYXNlID0gdGhpcy5fb3JpZ2luYWxfdHJpZ2dlclJlbGVhc2U7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUcmlnZ2VyIHRoZSBhdHRhY2sgYW5kIHRoZW4gdGhlIHJlbGVhc2UgYWZ0ZXIgdGhlIGR1cmF0aW9uLlxuXHRcdCAqICBAcGFyYW0gIHtGcmVxdWVuY3l9IG5vdGUgICAgIFRoZSBub3RlIHRvIHRyaWdnZXIuXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IGR1cmF0aW9uIEhvdyBsb25nIHRoZSBub3RlIHNob3VsZCBiZSBoZWxkIGZvciBiZWZvcmVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcmluZyB0aGUgcmVsZWFzZS4gVGhpcyB2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFt0aW1lPW5vd10gIFdoZW4gdGhlIG5vdGUgc2hvdWxkIGJlIHRyaWdnZXJlZC5cblx0XHQgKiAgQHBhcmFtICB7Tm9ybWFsUmFuZ2V9IFt2ZWxvY2l0eT0xXSBUaGUgdmVsb2NpdHkgdGhlIG5vdGUgc2hvdWxkIGJlIHRyaWdnZXJlZCBhdC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuSW5zdHJ1bWVudH0gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vdHJpZ2dlciBcIkM0XCIgZm9yIHRoZSBkdXJhdGlvbiBvZiBhbiA4dGggbm90ZVxuXHRcdCAqIHN5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKFwiQzRcIiwgXCI4blwiKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuSW5zdHJ1bWVudC5wcm90b3R5cGUudHJpZ2dlckF0dGFja1JlbGVhc2UgPSBmdW5jdGlvbiAobm90ZSwgZHVyYXRpb24sIHRpbWUsIHZlbG9jaXR5KSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIGR1cmF0aW9uID0gdGhpcy50b1NlY29uZHMoZHVyYXRpb24pO1xuXHQgICAgICAgIHRoaXMudHJpZ2dlckF0dGFjayhub3RlLCB0aW1lLCB2ZWxvY2l0eSk7XG5cdCAgICAgICAgdGhpcy50cmlnZ2VyUmVsZWFzZSh0aW1lICsgZHVyYXRpb24pO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5JbnN0cnVtZW50fSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkluc3RydW1lbnQucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl92b2x1bWUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3ZvbHVtZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoWyd2b2x1bWUnXSk7XG5cdCAgICAgICAgdGhpcy52b2x1bWUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMudW5zeW5jKCk7XG5cdCAgICAgICAgdGhpcy5fc2NoZWR1bGVkRXZlbnRzID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5JbnN0cnVtZW50O1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIFRoaXMgaXMgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3Igb3RoZXIgbW9ub3Bob25pYyBpbnN0cnVtZW50cyB0byBcblx0XHQgKiAgICAgICAgICBleHRlbmQuIElNUE9SVEFOVDogSXQgZG9lcyBub3QgbWFrZSBhbnkgc291bmQgb24gaXRzIG93biBhbmRcblx0XHQgKiAgICAgICAgICBzaG91bGRuJ3QgYmUgZGlyZWN0bHkgaW5zdGFudGlhdGVkLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAYWJzdHJhY3Rcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuSW5zdHJ1bWVudH1cblx0XHQgKi9cblx0ICAgIFRvbmUuTW9ub3Bob25pYyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdCAgICAgICAgLy9nZXQgdGhlIGRlZmF1bHRzXG5cdCAgICAgICAgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdEFyZyhvcHRpb25zLCBUb25lLk1vbm9waG9uaWMuZGVmYXVsdHMpO1xuXHQgICAgICAgIFRvbmUuSW5zdHJ1bWVudC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBnbGlkZSB0aW1lIGJldHdlZW4gbm90ZXMuIFxuXHRcdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5wb3J0YW1lbnRvID0gb3B0aW9ucy5wb3J0YW1lbnRvO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuTW9ub3Bob25pYywgVG9uZS5JbnN0cnVtZW50KTtcblx0ICAgIC8qKlxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Nb25vcGhvbmljLmRlZmF1bHRzID0geyAncG9ydGFtZW50byc6IDAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUcmlnZ2VyIHRoZSBhdHRhY2sgb2YgdGhlIG5vdGUgb3B0aW9uYWxseSB3aXRoIGEgZ2l2ZW4gdmVsb2NpdHkuIFxuXHRcdCAqICBcblx0XHQgKiAgXG5cdFx0ICogIEBwYXJhbSAge0ZyZXF1ZW5jeX0gbm90ZSAgICAgVGhlIG5vdGUgdG8gdHJpZ2dlci5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XSAgICAgV2hlbiB0aGUgbm90ZSBzaG91bGQgc3RhcnQuXG5cdFx0ICogIEBwYXJhbSAge251bWJlcn0gW3ZlbG9jaXR5PTFdIHZlbG9jaXR5IFRoZSB2ZWxvY2l0eSBzY2FsZXIgXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGVybWluZXMgaG93IFwibG91ZFwiIHRoZSBub3RlIFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIHRyaWdnZXJlZC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuTW9ub3Bob25pY30gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHN5bnRoLnRyaWdnZXJBdHRhY2soXCJDNFwiKTtcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL3RyaWdnZXIgdGhlIG5vdGUgYSBoYWxmIHNlY29uZCBmcm9tIG5vdyBhdCBoYWxmIHZlbG9jaXR5XG5cdFx0ICogc3ludGgudHJpZ2dlckF0dGFjayhcIkM0XCIsIFwiKzAuNVwiLCAwLjUpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Nb25vcGhvbmljLnByb3RvdHlwZS50cmlnZ2VyQXR0YWNrID0gZnVuY3Rpb24gKG5vdGUsIHRpbWUsIHZlbG9jaXR5KSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX3RyaWdnZXJFbnZlbG9wZUF0dGFjayh0aW1lLCB2ZWxvY2l0eSk7XG5cdCAgICAgICAgdGhpcy5zZXROb3RlKG5vdGUsIHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUcmlnZ2VyIHRoZSByZWxlYXNlIHBvcnRpb24gb2YgdGhlIGVudmVsb3BlXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IFt0aW1lPW5vd10gSWYgbm8gdGltZSBpcyBnaXZlbiwgdGhlIHJlbGVhc2UgaGFwcGVucyBpbW1lZGlhdGx5XG5cdFx0ICogIEByZXR1cm5zIHtUb25lLk1vbm9waG9uaWN9IHRoaXNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiBzeW50aC50cmlnZ2VyUmVsZWFzZSgpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Nb25vcGhvbmljLnByb3RvdHlwZS50cmlnZ2VyUmVsZWFzZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX3RyaWdnZXJFbnZlbG9wZVJlbGVhc2UodGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHdpdGggdGhlIGFjdHVhbCBtZXRob2Rcblx0XHQgKiAgQGFic3RyYWN0XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLk1vbm9waG9uaWMucHJvdG90eXBlLl90cmlnZ2VyRW52ZWxvcGVBdHRhY2sgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHdpdGggdGhlIGFjdHVhbCBtZXRob2Rcblx0XHQgKiAgQGFic3RyYWN0XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLk1vbm9waG9uaWMucHJvdG90eXBlLl90cmlnZ2VyRW52ZWxvcGVSZWxlYXNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBHZXQgdGhlIGxldmVsIG9mIHRoZSBvdXRwdXQgYXQgdGhlIGdpdmVuIHRpbWUuIE1lYXN1cmVzXG5cdFx0ICogIHRoZSBlbnZlbG9wZShzKSB2YWx1ZSBhdCB0aGUgdGltZS4gXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gdGltZSBUaGUgdGltZSB0byBxdWVyeSB0aGUgZW52ZWxvcGUgdmFsdWVcblx0XHQgKiAgQHJldHVybiB7Tm9ybWFsUmFuZ2V9IFRoZSBvdXRwdXQgbGV2ZWwgYmV0d2VlbiAwLTFcblx0XHQgKi9cblx0ICAgIFRvbmUuTW9ub3Bob25pYy5wcm90b3R5cGUuZ2V0TGV2ZWxBdFRpbWUgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5lbnZlbG9wZS5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU2V0IHRoZSBub3RlIGF0IHRoZSBnaXZlbiB0aW1lLiBJZiBubyB0aW1lIGlzIGdpdmVuLCB0aGUgbm90ZVxuXHRcdCAqICB3aWxsIHNldCBpbW1lZGlhdGVseS4gXG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fSBub3RlIFRoZSBub3RlIHRvIGNoYW5nZSB0by5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XSBUaGUgdGltZSB3aGVuIHRoZSBub3RlIHNob3VsZCBiZSBzZXQuIFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Nb25vcGhvbmljfSB0aGlzXG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiAvL2NoYW5nZSB0byBGIzYgaW4gb25lIHF1YXJ0ZXIgbm90ZSBmcm9tIG5vdy5cblx0XHQgKiBzeW50aC5zZXROb3RlKFwiRiM2XCIsIFwiKzRuXCIpO1xuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogLy9jaGFuZ2UgdG8gQmI0IHJpZ2h0IG5vd1xuXHRcdCAqIHN5bnRoLnNldE5vdGUoXCJCYjRcIik7XG5cdFx0ICovXG5cdCAgICBUb25lLk1vbm9waG9uaWMucHJvdG90eXBlLnNldE5vdGUgPSBmdW5jdGlvbiAobm90ZSwgdGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICBpZiAodGhpcy5wb3J0YW1lbnRvID4gMCAmJiB0aGlzLmdldExldmVsQXRUaW1lKHRpbWUpID4gMC4wNSkge1xuXHQgICAgICAgICAgICB2YXIgcG9ydFRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aGlzLnBvcnRhbWVudG8pO1xuXHQgICAgICAgICAgICB0aGlzLmZyZXF1ZW5jeS5leHBvbmVudGlhbFJhbXBUbyhub3RlLCBwb3J0VGltZSwgdGltZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5mcmVxdWVuY3kuc2V0VmFsdWVBdFRpbWUobm90ZSwgdGltZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLk1vbm9waG9uaWM7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgVG9uZS5TeW50aCBpcyBjb21wb3NlZCBzaW1wbHkgb2YgYSBUb25lLk9tbmlPc2NpbGxhdG9yXG5cdFx0ICogICAgICAgICAgcm91dGVkIHRocm91Z2ggYSBUb25lLkFtcGxpdHVkZUVudmVsb3BlLlxuXHRcdCAqICAgICAgICAgIDxpbWcgc3JjPVwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZHJhd2luZ3MvZC8xLTFfMFlXMloxSjJFUEkzNlA4Zk5DTWNaRzdOMXcxR1psdVBzNG9nNGV2by9wdWI/dz0xMTYzJmg9MjMxXCI+XG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLk1vbm9waG9uaWN9XG5cdFx0ICogIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgYXZhaWxhYmxlIGZvciB0aGUgc3ludGhcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VlIGRlZmF1bHRzIGJlbG93XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIHN5bnRoID0gbmV3IFRvbmUuU3ludGgoKS50b01hc3RlcigpO1xuXHRcdCAqIHN5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKFwiQzRcIiwgXCI4blwiKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuU3ludGggPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHQgICAgICAgIC8vZ2V0IHRoZSBkZWZhdWx0c1xuXHQgICAgICAgIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRBcmcob3B0aW9ucywgVG9uZS5TeW50aC5kZWZhdWx0cyk7XG5cdCAgICAgICAgVG9uZS5Nb25vcGhvbmljLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG9zY2lsbGF0b3IuXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuT21uaU9zY2lsbGF0b3J9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm9zY2lsbGF0b3IgPSBuZXcgVG9uZS5PbW5pT3NjaWxsYXRvcihvcHRpb25zLm9zY2lsbGF0b3IpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBmcmVxdWVuY3kgY29udHJvbC5cblx0XHRcdCAqICBAdHlwZSB7RnJlcXVlbmN5fVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gdGhpcy5vc2NpbGxhdG9yLmZyZXF1ZW5jeTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZGV0dW5lIGNvbnRyb2wuXG5cdFx0XHQgKiAgQHR5cGUge0NlbnRzfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gdGhpcy5vc2NpbGxhdG9yLmRldHVuZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW1wbGl0dWRlIGVudmVsb3BlLlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkFtcGxpdHVkZUVudmVsb3BlfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5lbnZlbG9wZSA9IG5ldyBUb25lLkFtcGxpdHVkZUVudmVsb3BlKG9wdGlvbnMuZW52ZWxvcGUpO1xuXHQgICAgICAgIC8vY29ubmVjdCB0aGUgb3NjaWxsYXRvcnMgdG8gdGhlIG91dHB1dFxuXHQgICAgICAgIHRoaXMub3NjaWxsYXRvci5jaGFpbih0aGlzLmVudmVsb3BlLCB0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAnb3NjaWxsYXRvcicsXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnZGV0dW5lJyxcblx0ICAgICAgICAgICAgJ2VudmVsb3BlJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuU3ludGgsIFRvbmUuTW9ub3Bob25pYyk7XG5cdCAgICAvKipcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuU3ludGguZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ29zY2lsbGF0b3InOiB7ICd0eXBlJzogJ3RyaWFuZ2xlJyB9LFxuXHQgICAgICAgICdlbnZlbG9wZSc6IHtcblx0ICAgICAgICAgICAgJ2F0dGFjayc6IDAuMDA1LFxuXHQgICAgICAgICAgICAnZGVjYXknOiAwLjEsXG5cdCAgICAgICAgICAgICdzdXN0YWluJzogMC4zLFxuXHQgICAgICAgICAgICAncmVsZWFzZSc6IDFcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIHN0YXJ0IHRoZSBhdHRhY2sgcG9ydGlvbiBvZiB0aGUgZW52ZWxvcGVcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIHRoZSB0aW1lIHRoZSBhdHRhY2sgc2hvdWxkIHN0YXJ0XG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyfSBbdmVsb2NpdHk9MV0gdGhlIHZlbG9jaXR5IG9mIHRoZSBub3RlICgwLTEpXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlN5bnRofSB0aGlzXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlN5bnRoLnByb3RvdHlwZS5fdHJpZ2dlckVudmVsb3BlQXR0YWNrID0gZnVuY3Rpb24gKHRpbWUsIHZlbG9jaXR5KSB7XG5cdCAgICAgICAgLy90aGUgZW52ZWxvcGVzXG5cdCAgICAgICAgdGhpcy5lbnZlbG9wZS50cmlnZ2VyQXR0YWNrKHRpbWUsIHZlbG9jaXR5KTtcblx0ICAgICAgICB0aGlzLm9zY2lsbGF0b3Iuc3RhcnQodGltZSk7XG5cdCAgICAgICAgLy9pZiB0aGVyZSBpcyBubyByZWxlYXNlIHBvcnRpb24sIHN0b3AgdGhlIG9zY2lsbGF0b3Jcblx0ICAgICAgICBpZiAodGhpcy5lbnZlbG9wZS5zdXN0YWluID09PSAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMub3NjaWxsYXRvci5zdG9wKHRpbWUgKyB0aGlzLmVudmVsb3BlLmF0dGFjayArIHRoaXMuZW52ZWxvcGUuZGVjYXkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgc3RhcnQgdGhlIHJlbGVhc2UgcG9ydGlvbiBvZiB0aGUgZW52ZWxvcGVcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIHRoZSB0aW1lIHRoZSByZWxlYXNlIHNob3VsZCBzdGFydFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5TeW50aH0gdGhpc1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5TeW50aC5wcm90b3R5cGUuX3RyaWdnZXJFbnZlbG9wZVJlbGVhc2UgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB0aGlzLmVudmVsb3BlLnRyaWdnZXJSZWxlYXNlKHRpbWUpO1xuXHQgICAgICAgIHRoaXMub3NjaWxsYXRvci5zdG9wKHRpbWUgKyB0aGlzLmVudmVsb3BlLnJlbGVhc2UpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5TeW50aH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5TeW50aC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLk1vbm9waG9uaWMucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdvc2NpbGxhdG9yJyxcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdkZXR1bmUnLFxuXHQgICAgICAgICAgICAnZW52ZWxvcGUnXG5cdCAgICAgICAgXSk7XG5cdCAgICAgICAgdGhpcy5vc2NpbGxhdG9yLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLm9zY2lsbGF0b3IgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZW52ZWxvcGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuZW52ZWxvcGUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmRldHVuZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuU3ludGg7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgQU1TeW50aCB1c2VzIHRoZSBvdXRwdXQgb2Ygb25lIFRvbmUuU3ludGggdG8gbW9kdWxhdGUgdGhlXG5cdFx0ICogICAgICAgICAgYW1wbGl0dWRlIG9mIGFub3RoZXIgVG9uZS5TeW50aC4gVGhlIGhhcm1vbmljaXR5ICh0aGUgcmF0aW8gYmV0d2VlblxuXHRcdCAqICAgICAgICAgIHRoZSB0d28gc2lnbmFscykgYWZmZWN0cyB0aGUgdGltYnJlIG9mIHRoZSBvdXRwdXQgc2lnbmFsIGdyZWF0bHkuXG5cdFx0ICogICAgICAgICAgUmVhZCBtb3JlIGFib3V0IEFtcGxpdHVkZSBNb2R1bGF0aW9uIFN5bnRoZXNpcyBvblxuXHRcdCAqICAgICAgICAgIFtTb3VuZE9uU291bmRdKGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE2MDQwNDEwMzY1My9odHRwOi8vd3d3LnNvdW5kb25zb3VuZC5jb206ODAvc29zL21hcjAwL2FydGljbGVzL3N5bnRoc2VjcmV0cy5odG0pLlxuXHRcdCAqICAgICAgICAgIDxpbWcgc3JjPVwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZHJhd2luZ3MvZC8xVFF1OEVkNGlGcjFZVExLcEIzVTFfaHVyLVV3QnJoNWdkQlhjOEJ4ZkdLdy9wdWI/dz0xMDA5Jmg9NDU3XCI+XG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLk1vbm9waG9uaWN9XG5cdFx0ICogIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgYXZhaWxhYmxlIGZvciB0aGUgc3ludGhcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWUgZGVmYXVsdHMgYmVsb3dcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgc3ludGggPSBuZXcgVG9uZS5BTVN5bnRoKCkudG9NYXN0ZXIoKTtcblx0XHQgKiBzeW50aC50cmlnZ2VyQXR0YWNrUmVsZWFzZShcIkM0XCIsIFwiNG5cIik7XG5cdFx0ICovXG5cdCAgICBUb25lLkFNU3ludGggPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHQgICAgICAgIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRBcmcob3B0aW9ucywgVG9uZS5BTVN5bnRoLmRlZmF1bHRzKTtcblx0ICAgICAgICBUb25lLk1vbm9waG9uaWMuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgY2FycmllciB2b2ljZS5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5TeW50aH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fY2FycmllciA9IG5ldyBUb25lLlN5bnRoKCk7XG5cdCAgICAgICAgdGhpcy5fY2Fycmllci52b2x1bWUudmFsdWUgPSAtMTA7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGNhcnJpZXIncyBvc2NpbGxhdG9yXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuT3NjaWxsYXRvcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMub3NjaWxsYXRvciA9IHRoaXMuX2NhcnJpZXIub3NjaWxsYXRvcjtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgY2FycmllcidzIGVudmVsb3BlXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuQW1wbGl0dWRlRW52ZWxvcGV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmVudmVsb3BlID0gdGhpcy5fY2Fycmllci5lbnZlbG9wZS5zZXQob3B0aW9ucy5lbnZlbG9wZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG1vZHVsYXRvciB2b2ljZS5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5TeW50aH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yID0gbmV3IFRvbmUuU3ludGgoKTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3Iudm9sdW1lLnZhbHVlID0gLTEwO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBtb2R1bGF0b3IncyBvc2NpbGxhdG9yIHdoaWNoIGlzIGFwcGxpZWRcblx0XHRcdCAqICB0byB0aGUgYW1wbGl0dWRlIG9mIHRoZSBvc2NpbGxhdG9yXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuT3NjaWxsYXRvcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMubW9kdWxhdGlvbiA9IHRoaXMuX21vZHVsYXRvci5vc2NpbGxhdG9yLnNldChvcHRpb25zLm1vZHVsYXRpb24pO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBtb2R1bGF0b3IncyBlbnZlbG9wZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkFtcGxpdHVkZUVudmVsb3BlfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5tb2R1bGF0aW9uRW52ZWxvcGUgPSB0aGlzLl9tb2R1bGF0b3IuZW52ZWxvcGUuc2V0KG9wdGlvbnMubW9kdWxhdGlvbkVudmVsb3BlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZnJlcXVlbmN5LlxuXHRcdFx0ICogIEB0eXBlIHtGcmVxdWVuY3l9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSBuZXcgVG9uZS5TaWduYWwoNDQwLCBUb25lLlR5cGUuRnJlcXVlbmN5KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZGV0dW5lIGluIGNlbnRzXG5cdFx0XHQgKiAgQHR5cGUge0NlbnRzfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gbmV3IFRvbmUuU2lnbmFsKG9wdGlvbnMuZGV0dW5lLCBUb25lLlR5cGUuQ2VudHMpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEhhcm1vbmljaXR5IGlzIHRoZSByYXRpbyBiZXR3ZWVuIHRoZSB0d28gdm9pY2VzLiBBIGhhcm1vbmljaXR5IG9mXG5cdFx0XHQgKiAgMSBpcyBubyBjaGFuZ2UuIEhhcm1vbmljaXR5ID0gMiBtZWFucyBhIGNoYW5nZSBvZiBhbiBvY3RhdmUuXG5cdFx0XHQgKiAgQHR5cGUge1Bvc2l0aXZlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqICBAZXhhbXBsZVxuXHRcdFx0ICogLy9waXRjaCB2b2ljZTEgYW4gb2N0YXZlIGJlbG93IHZvaWNlMFxuXHRcdFx0ICogc3ludGguaGFybW9uaWNpdHkudmFsdWUgPSAwLjU7XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmhhcm1vbmljaXR5ID0gbmV3IFRvbmUuTXVsdGlwbHkob3B0aW9ucy5oYXJtb25pY2l0eSk7XG5cdCAgICAgICAgdGhpcy5oYXJtb25pY2l0eS51bml0cyA9IFRvbmUuVHlwZS5Qb3NpdGl2ZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBjb252ZXJ0IHRoZSAtMSwxIG91dHB1dCB0byAwLDFcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5BdWRpb1RvR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdGlvblNjYWxlID0gbmV3IFRvbmUuQXVkaW9Ub0dhaW4oKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgbm9kZSB3aGVyZSB0aGUgbW9kdWxhdGlvbiBoYXBwZW5zXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdGlvbk5vZGUgPSBuZXcgVG9uZS5HYWluKCk7XG5cdCAgICAgICAgLy9jb250cm9sIHRoZSB0d28gdm9pY2VzIGZyZXF1ZW5jeVxuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LmNvbm5lY3QodGhpcy5fY2Fycmllci5mcmVxdWVuY3kpO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LmNoYWluKHRoaXMuaGFybW9uaWNpdHksIHRoaXMuX21vZHVsYXRvci5mcmVxdWVuY3kpO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lLmZhbih0aGlzLl9jYXJyaWVyLmRldHVuZSwgdGhpcy5fbW9kdWxhdG9yLmRldHVuZSk7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLmNoYWluKHRoaXMuX21vZHVsYXRpb25TY2FsZSwgdGhpcy5fbW9kdWxhdGlvbk5vZGUuZ2Fpbik7XG5cdCAgICAgICAgdGhpcy5fY2Fycmllci5jaGFpbih0aGlzLl9tb2R1bGF0aW9uTm9kZSwgdGhpcy5vdXRwdXQpO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KFtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdoYXJtb25pY2l0eScsXG5cdCAgICAgICAgICAgICdvc2NpbGxhdG9yJyxcblx0ICAgICAgICAgICAgJ2VudmVsb3BlJyxcblx0ICAgICAgICAgICAgJ21vZHVsYXRpb24nLFxuXHQgICAgICAgICAgICAnbW9kdWxhdGlvbkVudmVsb3BlJyxcblx0ICAgICAgICAgICAgJ2RldHVuZSdcblx0ICAgICAgICBdKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkFNU3ludGgsIFRvbmUuTW9ub3Bob25pYyk7XG5cdCAgICAvKipcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5BTVN5bnRoLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdoYXJtb25pY2l0eSc6IDMsXG5cdCAgICAgICAgJ2RldHVuZSc6IDAsXG5cdCAgICAgICAgJ29zY2lsbGF0b3InOiB7ICd0eXBlJzogJ3NpbmUnIH0sXG5cdCAgICAgICAgJ2VudmVsb3BlJzoge1xuXHQgICAgICAgICAgICAnYXR0YWNrJzogMC4wMSxcblx0ICAgICAgICAgICAgJ2RlY2F5JzogMC4wMSxcblx0ICAgICAgICAgICAgJ3N1c3RhaW4nOiAxLFxuXHQgICAgICAgICAgICAncmVsZWFzZSc6IDAuNVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgJ21vZHVsYXRpb24nOiB7ICd0eXBlJzogJ3NxdWFyZScgfSxcblx0ICAgICAgICAnbW9kdWxhdGlvbkVudmVsb3BlJzoge1xuXHQgICAgICAgICAgICAnYXR0YWNrJzogMC41LFxuXHQgICAgICAgICAgICAnZGVjYXknOiAwLFxuXHQgICAgICAgICAgICAnc3VzdGFpbic6IDEsXG5cdCAgICAgICAgICAgICdyZWxlYXNlJzogMC41XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICB0cmlnZ2VyIHRoZSBhdHRhY2sgcG9ydGlvbiBvZiB0aGUgbm90ZVxuXHRcdCAqXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IFt0aW1lPW5vd10gdGhlIHRpbWUgdGhlIG5vdGUgd2lsbCBvY2N1clxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlfSBbdmVsb2NpdHk9MV0gdGhlIHZlbG9jaXR5IG9mIHRoZSBub3RlXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkFNU3ludGh9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQU1TeW50aC5wcm90b3R5cGUuX3RyaWdnZXJFbnZlbG9wZUF0dGFjayA9IGZ1bmN0aW9uICh0aW1lLCB2ZWxvY2l0eSkge1xuXHQgICAgICAgIC8vdGhlIHBvcnQgZ2xpZGVcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgLy90aGUgZW52ZWxvcGVzXG5cdCAgICAgICAgdGhpcy5fY2Fycmllci5fdHJpZ2dlckVudmVsb3BlQXR0YWNrKHRpbWUsIHZlbG9jaXR5KTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IuX3RyaWdnZXJFbnZlbG9wZUF0dGFjayh0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgdHJpZ2dlciB0aGUgcmVsZWFzZSBwb3J0aW9uIG9mIHRoZSBub3RlXG5cdFx0ICpcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XSB0aGUgdGltZSB0aGUgbm90ZSB3aWxsIHJlbGVhc2Vcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKiAgQHJldHVybnMge1RvbmUuQU1TeW50aH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5BTVN5bnRoLnByb3RvdHlwZS5fdHJpZ2dlckVudmVsb3BlUmVsZWFzZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5fY2Fycmllci5fdHJpZ2dlckVudmVsb3BlUmVsZWFzZSh0aW1lKTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IuX3RyaWdnZXJFbnZlbG9wZVJlbGVhc2UodGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIGNsZWFuIHVwXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkFNU3ludGh9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuQU1TeW50aC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLk1vbm9waG9uaWMucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAnaGFybW9uaWNpdHknLFxuXHQgICAgICAgICAgICAnb3NjaWxsYXRvcicsXG5cdCAgICAgICAgICAgICdlbnZlbG9wZScsXG5cdCAgICAgICAgICAgICdtb2R1bGF0aW9uJyxcblx0ICAgICAgICAgICAgJ21vZHVsYXRpb25FbnZlbG9wZScsXG5cdCAgICAgICAgICAgICdkZXR1bmUnXG5cdCAgICAgICAgXSk7XG5cdCAgICAgICAgdGhpcy5fY2Fycmllci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fY2FycmllciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5kZXR1bmUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmhhcm1vbmljaXR5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmhhcm1vbmljaXR5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0aW9uU2NhbGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRpb25TY2FsZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdGlvbk5vZGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRpb25Ob2RlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLm9zY2lsbGF0b3IgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZW52ZWxvcGUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMubW9kdWxhdGlvbkVudmVsb3BlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLm1vZHVsYXRpb24gPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkFNU3ludGg7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgVG9uZS5Nb25vU3ludGggaXMgY29tcG9zZWQgb2Ygb25lIG9zY2lsbGF0b3IsIG9uZSBmaWx0ZXIsIGFuZCB0d28gZW52ZWxvcGVzLlxuXHRcdCAqICAgICAgICAgIFRoZSBhbXBsaXR1ZGUgb2YgdGhlIFRvbmUuT3NjaWxsYXRvciBhbmQgdGhlIGN1dG9mZiBmcmVxdWVuY3kgb2YgdGhlXG5cdFx0ICogICAgICAgICAgVG9uZS5GaWx0ZXIgYXJlIGNvbnRyb2xsZWQgYnkgVG9uZS5FbnZlbG9wZXMuXG5cdFx0ICogICAgICAgICAgPGltZyBzcmM9XCJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kcmF3aW5ncy9kLzFnYVkxREY5X0h6a29kcWY4SkkxQ2cyVlpmd1NFbHBGUWZJOTRJUXdhZDM4L3B1Yj93PTkyNCZoPTI0MFwiPlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5Nb25vcGhvbmljfVxuXHRcdCAqICBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIHRoZSBvcHRpb25zIGF2YWlsYWJsZSBmb3IgdGhlIHN5bnRoXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgIHNlZSBkZWZhdWx0cyBiZWxvd1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBzeW50aCA9IG5ldyBUb25lLk1vbm9TeW50aCh7XG5cdFx0ICogXHRcIm9zY2lsbGF0b3JcIiA6IHtcblx0XHQgKiBcdFx0XCJ0eXBlXCIgOiBcInNxdWFyZVwiXG5cdFx0ICogIH0sXG5cdFx0ICogIFwiZW52ZWxvcGVcIiA6IHtcblx0XHQgKiAgXHRcImF0dGFja1wiIDogMC4xXG5cdFx0ICogIH1cblx0XHQgKiB9KS50b01hc3RlcigpO1xuXHRcdCAqIHN5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKFwiQzRcIiwgXCI4blwiKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuTW9ub1N5bnRoID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgICAgICAvL2dldCB0aGUgZGVmYXVsdHNcblx0ICAgICAgICBvcHRpb25zID0gVG9uZS5kZWZhdWx0QXJnKG9wdGlvbnMsIFRvbmUuTW9ub1N5bnRoLmRlZmF1bHRzKTtcblx0ICAgICAgICBUb25lLk1vbm9waG9uaWMuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgb3NjaWxsYXRvci5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5PbW5pT3NjaWxsYXRvcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMub3NjaWxsYXRvciA9IG5ldyBUb25lLk9tbmlPc2NpbGxhdG9yKG9wdGlvbnMub3NjaWxsYXRvcik7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGZyZXF1ZW5jeSBjb250cm9sLlxuXHRcdFx0ICogIEB0eXBlIHtGcmVxdWVuY3l9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSB0aGlzLm9zY2lsbGF0b3IuZnJlcXVlbmN5O1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBkZXR1bmUgY29udHJvbC5cblx0XHRcdCAqICBAdHlwZSB7Q2VudHN9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5kZXR1bmUgPSB0aGlzLm9zY2lsbGF0b3IuZGV0dW5lO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBmaWx0ZXIuXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuRmlsdGVyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5maWx0ZXIgPSBuZXcgVG9uZS5GaWx0ZXIob3B0aW9ucy5maWx0ZXIpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBmaWx0ZXIgZW52ZWxvcGUuXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuRnJlcXVlbmN5RW52ZWxvcGV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZpbHRlckVudmVsb3BlID0gbmV3IFRvbmUuRnJlcXVlbmN5RW52ZWxvcGUob3B0aW9ucy5maWx0ZXJFbnZlbG9wZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGFtcGxpdHVkZSBlbnZlbG9wZS5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5BbXBsaXR1ZGVFbnZlbG9wZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZW52ZWxvcGUgPSBuZXcgVG9uZS5BbXBsaXR1ZGVFbnZlbG9wZShvcHRpb25zLmVudmVsb3BlKTtcblx0ICAgICAgICAvL2Nvbm5lY3QgdGhlIG9zY2lsbGF0b3JzIHRvIHRoZSBvdXRwdXRcblx0ICAgICAgICB0aGlzLm9zY2lsbGF0b3IuY2hhaW4odGhpcy5maWx0ZXIsIHRoaXMuZW52ZWxvcGUsIHRoaXMub3V0cHV0KTtcblx0ICAgICAgICAvL2Nvbm5lY3QgdGhlIGZpbHRlciBlbnZlbG9wZVxuXHQgICAgICAgIHRoaXMuZmlsdGVyRW52ZWxvcGUuY29ubmVjdCh0aGlzLmZpbHRlci5mcmVxdWVuY3kpO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KFtcblx0ICAgICAgICAgICAgJ29zY2lsbGF0b3InLFxuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2RldHVuZScsXG5cdCAgICAgICAgICAgICdmaWx0ZXInLFxuXHQgICAgICAgICAgICAnZmlsdGVyRW52ZWxvcGUnLFxuXHQgICAgICAgICAgICAnZW52ZWxvcGUnXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5Nb25vU3ludGgsIFRvbmUuTW9ub3Bob25pYyk7XG5cdCAgICAvKipcblx0XHQgKiAgQGNvbnN0XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuTW9ub1N5bnRoLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICdmcmVxdWVuY3knOiAnQzQnLFxuXHQgICAgICAgICdkZXR1bmUnOiAwLFxuXHQgICAgICAgICdvc2NpbGxhdG9yJzogeyAndHlwZSc6ICdzcXVhcmUnIH0sXG5cdCAgICAgICAgJ2ZpbHRlcic6IHtcblx0ICAgICAgICAgICAgJ1EnOiA2LFxuXHQgICAgICAgICAgICAndHlwZSc6ICdsb3dwYXNzJyxcblx0ICAgICAgICAgICAgJ3JvbGxvZmYnOiAtMjRcblx0ICAgICAgICB9LFxuXHQgICAgICAgICdlbnZlbG9wZSc6IHtcblx0ICAgICAgICAgICAgJ2F0dGFjayc6IDAuMDA1LFxuXHQgICAgICAgICAgICAnZGVjYXknOiAwLjEsXG5cdCAgICAgICAgICAgICdzdXN0YWluJzogMC45LFxuXHQgICAgICAgICAgICAncmVsZWFzZSc6IDFcblx0ICAgICAgICB9LFxuXHQgICAgICAgICdmaWx0ZXJFbnZlbG9wZSc6IHtcblx0ICAgICAgICAgICAgJ2F0dGFjayc6IDAuMDYsXG5cdCAgICAgICAgICAgICdkZWNheSc6IDAuMixcblx0ICAgICAgICAgICAgJ3N1c3RhaW4nOiAwLjUsXG5cdCAgICAgICAgICAgICdyZWxlYXNlJzogMixcblx0ICAgICAgICAgICAgJ2Jhc2VGcmVxdWVuY3knOiAyMDAsXG5cdCAgICAgICAgICAgICdvY3RhdmVzJzogNyxcblx0ICAgICAgICAgICAgJ2V4cG9uZW50JzogMlxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgc3RhcnQgdGhlIGF0dGFjayBwb3J0aW9uIG9mIHRoZSBlbnZlbG9wZVxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFt0aW1lPW5vd10gdGhlIHRpbWUgdGhlIGF0dGFjayBzaG91bGQgc3RhcnRcblx0XHQgKiAgQHBhcmFtIHtOb3JtYWxSYW5nZX0gW3ZlbG9jaXR5PTFdIHRoZSB2ZWxvY2l0eSBvZiB0aGUgbm90ZSAoMC0xKVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Nb25vU3ludGh9IHRoaXNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuTW9ub1N5bnRoLnByb3RvdHlwZS5fdHJpZ2dlckVudmVsb3BlQXR0YWNrID0gZnVuY3Rpb24gKHRpbWUsIHZlbG9jaXR5KSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIC8vdGhlIGVudmVsb3Blc1xuXHQgICAgICAgIHRoaXMuZW52ZWxvcGUudHJpZ2dlckF0dGFjayh0aW1lLCB2ZWxvY2l0eSk7XG5cdCAgICAgICAgdGhpcy5maWx0ZXJFbnZlbG9wZS50cmlnZ2VyQXR0YWNrKHRpbWUpO1xuXHQgICAgICAgIHRoaXMub3NjaWxsYXRvci5zdGFydCh0aW1lKTtcblx0ICAgICAgICBpZiAodGhpcy5lbnZlbG9wZS5zdXN0YWluID09PSAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMub3NjaWxsYXRvci5zdG9wKHRpbWUgKyB0aGlzLmVudmVsb3BlLmF0dGFjayArIHRoaXMuZW52ZWxvcGUuZGVjYXkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgc3RhcnQgdGhlIHJlbGVhc2UgcG9ydGlvbiBvZiB0aGUgZW52ZWxvcGVcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIHRoZSB0aW1lIHRoZSByZWxlYXNlIHNob3VsZCBzdGFydFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Nb25vU3ludGh9IHRoaXNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuTW9ub1N5bnRoLnByb3RvdHlwZS5fdHJpZ2dlckVudmVsb3BlUmVsZWFzZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5lbnZlbG9wZS50cmlnZ2VyUmVsZWFzZSh0aW1lKTtcblx0ICAgICAgICB0aGlzLmZpbHRlckVudmVsb3BlLnRyaWdnZXJSZWxlYXNlKHRpbWUpO1xuXHQgICAgICAgIHRoaXMub3NjaWxsYXRvci5zdG9wKHRpbWUgKyB0aGlzLmVudmVsb3BlLnJlbGVhc2UpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Nb25vU3ludGh9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTW9ub1N5bnRoLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuTW9ub3Bob25pYy5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3dyaXRhYmxlKFtcblx0ICAgICAgICAgICAgJ29zY2lsbGF0b3InLFxuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2RldHVuZScsXG5cdCAgICAgICAgICAgICdmaWx0ZXInLFxuXHQgICAgICAgICAgICAnZmlsdGVyRW52ZWxvcGUnLFxuXHQgICAgICAgICAgICAnZW52ZWxvcGUnXG5cdCAgICAgICAgXSk7XG5cdCAgICAgICAgdGhpcy5vc2NpbGxhdG9yLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLm9zY2lsbGF0b3IgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZW52ZWxvcGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuZW52ZWxvcGUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZmlsdGVyRW52ZWxvcGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuZmlsdGVyRW52ZWxvcGUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZmlsdGVyLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmZpbHRlciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5Nb25vU3ludGg7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgVG9uZS5EdW9TeW50aCBpcyBhIG1vbm9waG9uaWMgc3ludGggY29tcG9zZWQgb2YgdHdvXG5cdFx0ICogICAgICAgICAgTW9ub1N5bnRocyBydW4gaW4gcGFyYWxsZWwgd2l0aCBjb250cm9sIG92ZXIgdGhlXG5cdFx0ICogICAgICAgICAgZnJlcXVlbmN5IHJhdGlvIGJldHdlZW4gdGhlIHR3byB2b2ljZXMgYW5kIHZpYnJhdG8gZWZmZWN0LlxuXHRcdCAqICAgICAgICAgIDxpbWcgc3JjPVwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZHJhd2luZ3MvZC8xYkw0R1h2ZlJNTWxxUzdYeUJtOUNqTDlLSlBTVUtiY2RCTnBxT2xrRkx4ay9wdWI/dz0xMDEyJmg9NDQ4XCI+XG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLk1vbm9waG9uaWN9XG5cdFx0ICogIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgYXZhaWxhYmxlIGZvciB0aGUgc3ludGhcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VlIGRlZmF1bHRzIGJlbG93XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIGR1b1N5bnRoID0gbmV3IFRvbmUuRHVvU3ludGgoKS50b01hc3RlcigpO1xuXHRcdCAqIGR1b1N5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKFwiQzRcIiwgXCIyblwiKTtcblx0XHQgKi9cblx0ICAgIFRvbmUuRHVvU3ludGggPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHQgICAgICAgIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRBcmcob3B0aW9ucywgVG9uZS5EdW9TeW50aC5kZWZhdWx0cyk7XG5cdCAgICAgICAgVG9uZS5Nb25vcGhvbmljLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIGZpcnN0IHZvaWNlXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuTW9ub1N5bnRofVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy52b2ljZTAgPSBuZXcgVG9uZS5Nb25vU3ludGgob3B0aW9ucy52b2ljZTApO1xuXHQgICAgICAgIHRoaXMudm9pY2UwLnZvbHVtZS52YWx1ZSA9IC0xMDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgc2Vjb25kIHZvaWNlXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuTW9ub1N5bnRofVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy52b2ljZTEgPSBuZXcgVG9uZS5Nb25vU3ludGgob3B0aW9ucy52b2ljZTEpO1xuXHQgICAgICAgIHRoaXMudm9pY2UxLnZvbHVtZS52YWx1ZSA9IC0xMDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgdmlicmF0byBMRk8uXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuTEZPfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl92aWJyYXRvID0gbmV3IFRvbmUuTEZPKG9wdGlvbnMudmlicmF0b1JhdGUsIC01MCwgNTApO1xuXHQgICAgICAgIHRoaXMuX3ZpYnJhdG8uc3RhcnQoKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIHRoZSB2aWJyYXRvIGZyZXF1ZW5jeVxuXHRcdFx0ICogQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMudmlicmF0b1JhdGUgPSB0aGlzLl92aWJyYXRvLmZyZXF1ZW5jeTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgdmlicmF0byBnYWluXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuR2Fpbn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fdmlicmF0b0dhaW4gPSBuZXcgVG9uZS5HYWluKG9wdGlvbnMudmlicmF0b0Ftb3VudCwgVG9uZS5UeXBlLlBvc2l0aXZlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSBhbW91bnQgb2YgdmlicmF0b1xuXHRcdFx0ICogQHR5cGUge1Bvc2l0aXZlfVxuXHRcdFx0ICogQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy52aWJyYXRvQW1vdW50ID0gdGhpcy5fdmlicmF0b0dhaW4uZ2Fpbjtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgZnJlcXVlbmN5IGNvbnRyb2xcblx0XHRcdCAqICBAdHlwZSB7RnJlcXVlbmN5fVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gbmV3IFRvbmUuU2lnbmFsKDQ0MCwgVG9uZS5UeXBlLkZyZXF1ZW5jeSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgSGFybW9uaWNpdHkgaXMgdGhlIHJhdGlvIGJldHdlZW4gdGhlIHR3byB2b2ljZXMuIEEgaGFybW9uaWNpdHkgb2Zcblx0XHRcdCAqICAxIGlzIG5vIGNoYW5nZS4gSGFybW9uaWNpdHkgPSAyIG1lYW5zIGEgY2hhbmdlIG9mIGFuIG9jdGF2ZS5cblx0XHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHQgKiAvL3BpdGNoIHZvaWNlMSBhbiBvY3RhdmUgYmVsb3cgdm9pY2UwXG5cdFx0XHQgKiBkdW9TeW50aC5oYXJtb25pY2l0eS52YWx1ZSA9IDAuNTtcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuaGFybW9uaWNpdHkgPSBuZXcgVG9uZS5NdWx0aXBseShvcHRpb25zLmhhcm1vbmljaXR5KTtcblx0ICAgICAgICB0aGlzLmhhcm1vbmljaXR5LnVuaXRzID0gVG9uZS5UeXBlLlBvc2l0aXZlO1xuXHQgICAgICAgIC8vY29udHJvbCB0aGUgdHdvIHZvaWNlcyBmcmVxdWVuY3lcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeS5jb25uZWN0KHRoaXMudm9pY2UwLmZyZXF1ZW5jeSk7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kuY2hhaW4odGhpcy5oYXJtb25pY2l0eSwgdGhpcy52b2ljZTEuZnJlcXVlbmN5KTtcblx0ICAgICAgICB0aGlzLl92aWJyYXRvLmNvbm5lY3QodGhpcy5fdmlicmF0b0dhaW4pO1xuXHQgICAgICAgIHRoaXMuX3ZpYnJhdG9HYWluLmZhbih0aGlzLnZvaWNlMC5kZXR1bmUsIHRoaXMudm9pY2UxLmRldHVuZSk7XG5cdCAgICAgICAgdGhpcy52b2ljZTAuY29ubmVjdCh0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgdGhpcy52b2ljZTEuY29ubmVjdCh0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAndm9pY2UwJyxcblx0ICAgICAgICAgICAgJ3ZvaWNlMScsXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAndmlicmF0b0Ftb3VudCcsXG5cdCAgICAgICAgICAgICd2aWJyYXRvUmF0ZSdcblx0ICAgICAgICBdKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkR1b1N5bnRoLCBUb25lLk1vbm9waG9uaWMpO1xuXHQgICAgLyoqXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuRHVvU3ludGguZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ3ZpYnJhdG9BbW91bnQnOiAwLjUsXG5cdCAgICAgICAgJ3ZpYnJhdG9SYXRlJzogNSxcblx0ICAgICAgICAnaGFybW9uaWNpdHknOiAxLjUsXG5cdCAgICAgICAgJ3ZvaWNlMCc6IHtcblx0ICAgICAgICAgICAgJ3ZvbHVtZSc6IC0xMCxcblx0ICAgICAgICAgICAgJ3BvcnRhbWVudG8nOiAwLFxuXHQgICAgICAgICAgICAnb3NjaWxsYXRvcic6IHsgJ3R5cGUnOiAnc2luZScgfSxcblx0ICAgICAgICAgICAgJ2ZpbHRlckVudmVsb3BlJzoge1xuXHQgICAgICAgICAgICAgICAgJ2F0dGFjayc6IDAuMDEsXG5cdCAgICAgICAgICAgICAgICAnZGVjYXknOiAwLFxuXHQgICAgICAgICAgICAgICAgJ3N1c3RhaW4nOiAxLFxuXHQgICAgICAgICAgICAgICAgJ3JlbGVhc2UnOiAwLjVcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgJ2VudmVsb3BlJzoge1xuXHQgICAgICAgICAgICAgICAgJ2F0dGFjayc6IDAuMDEsXG5cdCAgICAgICAgICAgICAgICAnZGVjYXknOiAwLFxuXHQgICAgICAgICAgICAgICAgJ3N1c3RhaW4nOiAxLFxuXHQgICAgICAgICAgICAgICAgJ3JlbGVhc2UnOiAwLjVcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgJ3ZvaWNlMSc6IHtcblx0ICAgICAgICAgICAgJ3ZvbHVtZSc6IC0xMCxcblx0ICAgICAgICAgICAgJ3BvcnRhbWVudG8nOiAwLFxuXHQgICAgICAgICAgICAnb3NjaWxsYXRvcic6IHsgJ3R5cGUnOiAnc2luZScgfSxcblx0ICAgICAgICAgICAgJ2ZpbHRlckVudmVsb3BlJzoge1xuXHQgICAgICAgICAgICAgICAgJ2F0dGFjayc6IDAuMDEsXG5cdCAgICAgICAgICAgICAgICAnZGVjYXknOiAwLFxuXHQgICAgICAgICAgICAgICAgJ3N1c3RhaW4nOiAxLFxuXHQgICAgICAgICAgICAgICAgJ3JlbGVhc2UnOiAwLjVcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgJ2VudmVsb3BlJzoge1xuXHQgICAgICAgICAgICAgICAgJ2F0dGFjayc6IDAuMDEsXG5cdCAgICAgICAgICAgICAgICAnZGVjYXknOiAwLFxuXHQgICAgICAgICAgICAgICAgJ3N1c3RhaW4nOiAxLFxuXHQgICAgICAgICAgICAgICAgJ3JlbGVhc2UnOiAwLjVcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgc3RhcnQgdGhlIGF0dGFjayBwb3J0aW9uIG9mIHRoZSBlbnZlbG9wZXNcblx0XHQgKlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFt0aW1lPW5vd10gdGhlIHRpbWUgdGhlIGF0dGFjayBzaG91bGQgc3RhcnRcblx0XHQgKiAgQHBhcmFtIHtOb3JtYWxSYW5nZX0gW3ZlbG9jaXR5PTFdIHRoZSB2ZWxvY2l0eSBvZiB0aGUgbm90ZSAoMC0xKVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5EdW9TeW50aH0gdGhpc1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5EdW9TeW50aC5wcm90b3R5cGUuX3RyaWdnZXJFbnZlbG9wZUF0dGFjayA9IGZ1bmN0aW9uICh0aW1lLCB2ZWxvY2l0eSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB0aGlzLnZvaWNlMC5fdHJpZ2dlckVudmVsb3BlQXR0YWNrKHRpbWUsIHZlbG9jaXR5KTtcblx0ICAgICAgICB0aGlzLnZvaWNlMS5fdHJpZ2dlckVudmVsb3BlQXR0YWNrKHRpbWUsIHZlbG9jaXR5KTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgc3RhcnQgdGhlIHJlbGVhc2UgcG9ydGlvbiBvZiB0aGUgZW52ZWxvcGVzXG5cdFx0ICpcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIHRoZSB0aW1lIHRoZSByZWxlYXNlIHNob3VsZCBzdGFydFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5EdW9TeW50aH0gdGhpc1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5EdW9TeW50aC5wcm90b3R5cGUuX3RyaWdnZXJFbnZlbG9wZVJlbGVhc2UgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRoaXMudm9pY2UwLl90cmlnZ2VyRW52ZWxvcGVSZWxlYXNlKHRpbWUpO1xuXHQgICAgICAgIHRoaXMudm9pY2UxLl90cmlnZ2VyRW52ZWxvcGVSZWxlYXNlKHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBHZXQgdGhlIGxldmVsIG9mIHRoZSBvdXRwdXQgYXQgdGhlIGdpdmVuIHRpbWUuIE1lYXN1cmVzXG5cdFx0ICogIHRoZSBlbnZlbG9wZShzKSB2YWx1ZSBhdCB0aGUgdGltZS4gXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gdGltZSBUaGUgdGltZSB0byBxdWVyeSB0aGUgZW52ZWxvcGUgdmFsdWVcblx0XHQgKiAgQHJldHVybiB7Tm9ybWFsUmFuZ2V9IFRoZSBvdXRwdXQgbGV2ZWwgYmV0d2VlbiAwLTFcblx0XHQgKi9cblx0ICAgIFRvbmUuRHVvU3ludGgucHJvdG90eXBlLmdldExldmVsQXRUaW1lID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICByZXR1cm4gKHRoaXMudm9pY2UwLmdldExldmVsQXRUaW1lKHRpbWUpICsgdGhpcy52b2ljZTEuZ2V0TGV2ZWxBdFRpbWUodGltZSkpIC8gMjtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgY2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuRHVvU3ludGh9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuRHVvU3ludGgucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5Nb25vcGhvbmljLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoW1xuXHQgICAgICAgICAgICAndm9pY2UwJyxcblx0ICAgICAgICAgICAgJ3ZvaWNlMScsXG5cdCAgICAgICAgICAgICdmcmVxdWVuY3knLFxuXHQgICAgICAgICAgICAndmlicmF0b0Ftb3VudCcsXG5cdCAgICAgICAgICAgICd2aWJyYXRvUmF0ZSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLnZvaWNlMC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy52b2ljZTAgPSBudWxsO1xuXHQgICAgICAgIHRoaXMudm9pY2UxLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLnZvaWNlMSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl92aWJyYXRvR2Fpbi5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fdmlicmF0b0dhaW4gPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3ZpYnJhdG8gPSBudWxsO1xuXHQgICAgICAgIHRoaXMuaGFybW9uaWNpdHkuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuaGFybW9uaWNpdHkgPSBudWxsO1xuXHQgICAgICAgIHRoaXMudmlicmF0b0Ftb3VudC5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy52aWJyYXRvQW1vdW50ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnZpYnJhdG9SYXRlID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5EdW9TeW50aDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBGTVN5bnRoIGlzIGNvbXBvc2VkIG9mIHR3byBUb25lLlN5bnRocyB3aGVyZSBvbmUgVG9uZS5TeW50aCBtb2R1bGF0ZXNcblx0XHQgKiAgICAgICAgICB0aGUgZnJlcXVlbmN5IG9mIGEgc2Vjb25kIFRvbmUuU3ludGguIEEgbG90IG9mIHNwZWN0cmFsIGNvbnRlbnRcblx0XHQgKiAgICAgICAgICBjYW4gYmUgZXhwbG9yZWQgdXNpbmcgdGhlIG1vZHVsYXRpb25JbmRleCBwYXJhbWV0ZXIuIFJlYWQgbW9yZSBhYm91dFxuXHRcdCAqICAgICAgICAgIGZyZXF1ZW5jeSBtb2R1bGF0aW9uIHN5bnRoZXNpcyBvbiBTb3VuZCBPbiBTb3VuZDogW1BhcnQgMV0oaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTYwNDAzMTIzNzA0L2h0dHA6Ly93d3cuc291bmRvbnNvdW5kLmNvbS9zb3MvYXByMDAvYXJ0aWNsZXMvc3ludGhzZWNyZXRzLmh0bSksIFtQYXJ0IDJdKGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE2MDQwMzExNTgzNS9odHRwOi8vd3d3LnNvdW5kb25zb3VuZC5jb20vc29zL21heTAwL2FydGljbGVzL3N5bnRoLmh0bSkuXG5cdFx0ICogICAgICAgICAgPGltZyBzcmM9XCJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kcmF3aW5ncy9kLzFoMFBVRFpYUGdpNElreDZiVlQ2b25jcllQTGx1Rkt5N2xqNTNwdXhqLURNL3B1Yj93PTkwMiZoPTQ2MlwiPlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5Nb25vcGhvbmljfVxuXHRcdCAqICBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIHRoZSBvcHRpb25zIGF2YWlsYWJsZSBmb3IgdGhlIHN5bnRoXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgIHNlZSBkZWZhdWx0cyBiZWxvd1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBmbVN5bnRoID0gbmV3IFRvbmUuRk1TeW50aCgpLnRvTWFzdGVyKCk7XG5cdFx0ICogZm1TeW50aC50cmlnZ2VyQXR0YWNrUmVsZWFzZShcIkM1XCIsIFwiNG5cIik7XG5cdFx0ICovXG5cdCAgICBUb25lLkZNU3ludGggPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHQgICAgICAgIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRBcmcob3B0aW9ucywgVG9uZS5GTVN5bnRoLmRlZmF1bHRzKTtcblx0ICAgICAgICBUb25lLk1vbm9waG9uaWMuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgY2FycmllciB2b2ljZS5cblx0XHRcdCAqICBAdHlwZSB7VG9uZS5TeW50aH1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fY2FycmllciA9IG5ldyBUb25lLlN5bnRoKG9wdGlvbnMuY2Fycmllcik7XG5cdCAgICAgICAgdGhpcy5fY2Fycmllci52b2x1bWUudmFsdWUgPSAtMTA7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGNhcnJpZXIncyBvc2NpbGxhdG9yXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuT3NjaWxsYXRvcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMub3NjaWxsYXRvciA9IHRoaXMuX2NhcnJpZXIub3NjaWxsYXRvcjtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgY2FycmllcidzIGVudmVsb3BlXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuT3NjaWxsYXRvcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZW52ZWxvcGUgPSB0aGlzLl9jYXJyaWVyLmVudmVsb3BlLnNldChvcHRpb25zLmVudmVsb3BlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbW9kdWxhdG9yIHZvaWNlLlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLlN5bnRofVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IgPSBuZXcgVG9uZS5TeW50aChvcHRpb25zLm1vZHVsYXRvcik7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLnZvbHVtZS52YWx1ZSA9IC0xMDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbW9kdWxhdG9yJ3Mgb3NjaWxsYXRvciB3aGljaCBpcyBhcHBsaWVkXG5cdFx0XHQgKiAgdG8gdGhlIGFtcGxpdHVkZSBvZiB0aGUgb3NjaWxsYXRvclxuXHRcdFx0ICogIEB0eXBlIHtUb25lLk9zY2lsbGF0b3J9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm1vZHVsYXRpb24gPSB0aGlzLl9tb2R1bGF0b3Iub3NjaWxsYXRvci5zZXQob3B0aW9ucy5tb2R1bGF0aW9uKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbW9kdWxhdG9yJ3MgZW52ZWxvcGVcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5Pc2NpbGxhdG9yfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5tb2R1bGF0aW9uRW52ZWxvcGUgPSB0aGlzLl9tb2R1bGF0b3IuZW52ZWxvcGUuc2V0KG9wdGlvbnMubW9kdWxhdGlvbkVudmVsb3BlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZnJlcXVlbmN5IGNvbnRyb2wuXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG5ldyBUb25lLlNpZ25hbCg0NDAsIFRvbmUuVHlwZS5GcmVxdWVuY3kpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBkZXR1bmUgaW4gY2VudHNcblx0XHRcdCAqICBAdHlwZSB7Q2VudHN9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5kZXR1bmUgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5kZXR1bmUsIFRvbmUuVHlwZS5DZW50cyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgSGFybW9uaWNpdHkgaXMgdGhlIHJhdGlvIGJldHdlZW4gdGhlIHR3byB2b2ljZXMuIEEgaGFybW9uaWNpdHkgb2Zcblx0XHRcdCAqICAxIGlzIG5vIGNoYW5nZS4gSGFybW9uaWNpdHkgPSAyIG1lYW5zIGEgY2hhbmdlIG9mIGFuIG9jdGF2ZS5cblx0XHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHQgKiAvL3BpdGNoIHZvaWNlMSBhbiBvY3RhdmUgYmVsb3cgdm9pY2UwXG5cdFx0XHQgKiBzeW50aC5oYXJtb25pY2l0eS52YWx1ZSA9IDAuNTtcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuaGFybW9uaWNpdHkgPSBuZXcgVG9uZS5NdWx0aXBseShvcHRpb25zLmhhcm1vbmljaXR5KTtcblx0ICAgICAgICB0aGlzLmhhcm1vbmljaXR5LnVuaXRzID0gVG9uZS5UeXBlLlBvc2l0aXZlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBtb2R1bGF0aW9uIGluZGV4IHdoaWNoIGVzc2VudGlhbGx5IHRoZSBkZXB0aCBvciBhbW91bnQgb2YgdGhlIG1vZHVsYXRpb24uIEl0IGlzIHRoZVxuXHRcdFx0ICogIHJhdGlvIG9mIHRoZSBmcmVxdWVuY3kgb2YgdGhlIG1vZHVsYXRpbmcgc2lnbmFsIChtZikgdG8gdGhlIGFtcGxpdHVkZSBvZiB0aGVcblx0XHRcdCAqICBtb2R1bGF0aW5nIHNpZ25hbCAobWEpIC0tIGFzIGluIG1hL21mLlxuXHRcdFx0ICpcdEB0eXBlIHtQb3NpdGl2ZX1cblx0XHRcdCAqXHRAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm1vZHVsYXRpb25JbmRleCA9IG5ldyBUb25lLk11bHRpcGx5KG9wdGlvbnMubW9kdWxhdGlvbkluZGV4KTtcblx0ICAgICAgICB0aGlzLm1vZHVsYXRpb25JbmRleC51bml0cyA9IFRvbmUuVHlwZS5Qb3NpdGl2ZTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgbm9kZSB3aGVyZSB0aGUgbW9kdWxhdGlvbiBoYXBwZW5zXG5cdFx0XHQgKiAgQHR5cGUge0dhaW5Ob2RlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9tb2R1bGF0aW9uTm9kZSA9IG5ldyBUb25lLkdhaW4oMCk7XG5cdCAgICAgICAgLy9jb250cm9sIHRoZSB0d28gdm9pY2VzIGZyZXF1ZW5jeVxuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LmNvbm5lY3QodGhpcy5fY2Fycmllci5mcmVxdWVuY3kpO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LmNoYWluKHRoaXMuaGFybW9uaWNpdHksIHRoaXMuX21vZHVsYXRvci5mcmVxdWVuY3kpO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LmNoYWluKHRoaXMubW9kdWxhdGlvbkluZGV4LCB0aGlzLl9tb2R1bGF0aW9uTm9kZSk7XG5cdCAgICAgICAgdGhpcy5kZXR1bmUuZmFuKHRoaXMuX2NhcnJpZXIuZGV0dW5lLCB0aGlzLl9tb2R1bGF0b3IuZGV0dW5lKTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IuY29ubmVjdCh0aGlzLl9tb2R1bGF0aW9uTm9kZS5nYWluKTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0aW9uTm9kZS5jb25uZWN0KHRoaXMuX2NhcnJpZXIuZnJlcXVlbmN5KTtcblx0ICAgICAgICB0aGlzLl9jYXJyaWVyLmNvbm5lY3QodGhpcy5vdXRwdXQpO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KFtcblx0ICAgICAgICAgICAgJ2ZyZXF1ZW5jeScsXG5cdCAgICAgICAgICAgICdoYXJtb25pY2l0eScsXG5cdCAgICAgICAgICAgICdtb2R1bGF0aW9uSW5kZXgnLFxuXHQgICAgICAgICAgICAnb3NjaWxsYXRvcicsXG5cdCAgICAgICAgICAgICdlbnZlbG9wZScsXG5cdCAgICAgICAgICAgICdtb2R1bGF0aW9uJyxcblx0ICAgICAgICAgICAgJ21vZHVsYXRpb25FbnZlbG9wZScsXG5cdCAgICAgICAgICAgICdkZXR1bmUnXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5GTVN5bnRoLCBUb25lLk1vbm9waG9uaWMpO1xuXHQgICAgLyoqXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuRk1TeW50aC5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnaGFybW9uaWNpdHknOiAzLFxuXHQgICAgICAgICdtb2R1bGF0aW9uSW5kZXgnOiAxMCxcblx0ICAgICAgICAnZGV0dW5lJzogMCxcblx0ICAgICAgICAnb3NjaWxsYXRvcic6IHsgJ3R5cGUnOiAnc2luZScgfSxcblx0ICAgICAgICAnZW52ZWxvcGUnOiB7XG5cdCAgICAgICAgICAgICdhdHRhY2snOiAwLjAxLFxuXHQgICAgICAgICAgICAnZGVjYXknOiAwLjAxLFxuXHQgICAgICAgICAgICAnc3VzdGFpbic6IDEsXG5cdCAgICAgICAgICAgICdyZWxlYXNlJzogMC41XG5cdCAgICAgICAgfSxcblx0ICAgICAgICAnbW9kdWxhdGlvbic6IHsgJ3R5cGUnOiAnc3F1YXJlJyB9LFxuXHQgICAgICAgICdtb2R1bGF0aW9uRW52ZWxvcGUnOiB7XG5cdCAgICAgICAgICAgICdhdHRhY2snOiAwLjUsXG5cdCAgICAgICAgICAgICdkZWNheSc6IDAsXG5cdCAgICAgICAgICAgICdzdXN0YWluJzogMSxcblx0ICAgICAgICAgICAgJ3JlbGVhc2UnOiAwLjVcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogXHR0cmlnZ2VyIHRoZSBhdHRhY2sgcG9ydGlvbiBvZiB0aGUgbm90ZVxuXHRcdCAqXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IFt0aW1lPW5vd10gdGhlIHRpbWUgdGhlIG5vdGUgd2lsbCBvY2N1clxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gW3ZlbG9jaXR5PTFdIHRoZSB2ZWxvY2l0eSBvZiB0aGUgbm90ZVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5GTVN5bnRofSB0aGlzXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkZNU3ludGgucHJvdG90eXBlLl90cmlnZ2VyRW52ZWxvcGVBdHRhY2sgPSBmdW5jdGlvbiAodGltZSwgdmVsb2NpdHkpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgLy90aGUgZW52ZWxvcGVzXG5cdCAgICAgICAgdGhpcy5fY2Fycmllci5fdHJpZ2dlckVudmVsb3BlQXR0YWNrKHRpbWUsIHZlbG9jaXR5KTtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IuX3RyaWdnZXJFbnZlbG9wZUF0dGFjayh0aW1lKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgdHJpZ2dlciB0aGUgcmVsZWFzZSBwb3J0aW9uIG9mIHRoZSBub3RlXG5cdFx0ICpcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XSB0aGUgdGltZSB0aGUgbm90ZSB3aWxsIHJlbGVhc2Vcblx0XHQgKiAgQHJldHVybnMge1RvbmUuRk1TeW50aH0gdGhpc1xuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5GTVN5bnRoLnByb3RvdHlwZS5fdHJpZ2dlckVudmVsb3BlUmVsZWFzZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX2NhcnJpZXIuX3RyaWdnZXJFbnZlbG9wZVJlbGVhc2UodGltZSk7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdG9yLl90cmlnZ2VyRW52ZWxvcGVSZWxlYXNlKHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBjbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5GTVN5bnRofSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkZNU3ludGgucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5Nb25vcGhvbmljLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoW1xuXHQgICAgICAgICAgICAnZnJlcXVlbmN5Jyxcblx0ICAgICAgICAgICAgJ2hhcm1vbmljaXR5Jyxcblx0ICAgICAgICAgICAgJ21vZHVsYXRpb25JbmRleCcsXG5cdCAgICAgICAgICAgICdvc2NpbGxhdG9yJyxcblx0ICAgICAgICAgICAgJ2VudmVsb3BlJyxcblx0ICAgICAgICAgICAgJ21vZHVsYXRpb24nLFxuXHQgICAgICAgICAgICAnbW9kdWxhdGlvbkVudmVsb3BlJyxcblx0ICAgICAgICAgICAgJ2RldHVuZSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLl9jYXJyaWVyLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9jYXJyaWVyID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9tb2R1bGF0b3IuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRvciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmRldHVuZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5kZXR1bmUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMubW9kdWxhdGlvbkluZGV4LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLm1vZHVsYXRpb25JbmRleCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5oYXJtb25pY2l0eS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5oYXJtb25pY2l0eSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fbW9kdWxhdGlvbk5vZGUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX21vZHVsYXRpb25Ob2RlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLm9zY2lsbGF0b3IgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZW52ZWxvcGUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMubW9kdWxhdGlvbkVudmVsb3BlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLm1vZHVsYXRpb24gPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkZNU3ludGg7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgVG9uZS5NZW1icmFuZVN5bnRoIG1ha2VzIGtpY2sgYW5kIHRvbSBzb3VuZHMgdXNpbmcgYSBzaW5nbGUgb3NjaWxsYXRvclxuXHRcdCAqICAgICAgICAgIHdpdGggYW4gYW1wbGl0dWRlIGVudmVsb3BlIGFuZCBmcmVxdWVuY3kgcmFtcC4gQSBUb25lLk9tbmlPc2NpbGxhdG9yXG5cdFx0ICogICAgICAgICAgaXMgcm91dGVkIHRocm91Z2ggYSBUb25lLkFtcGxpdHVkZUVudmVsb3BlIHRvIHRoZSBvdXRwdXQuIFRoZSBkcnVtXG5cdFx0ICogICAgICAgICAgcXVhbGl0eSBvZiB0aGUgc291bmQgY29tZXMgZnJvbSB0aGUgZnJlcXVlbmN5IGVudmVsb3BlIGFwcGxpZWRcblx0XHQgKiAgICAgICAgICBkdXJpbmcgVG9uZS5NZW1icmFuZVN5bnRoLnRyaWdnZXJBdHRhY2sobm90ZSkuIFRoZSBmcmVxdWVuY3kgZW52ZWxvcGVcblx0XHQgKiAgICAgICAgICBzdGFydHMgYXQgPGNvZGU+bm90ZSAqIC5vY3RhdmVzPC9jb2RlPiBhbmQgcmFtcHMgdG8gPGNvZGU+bm90ZTwvY29kZT5cblx0XHQgKiAgICAgICAgICBvdmVyIHRoZSBkdXJhdGlvbiBvZiA8Y29kZT4ucGl0Y2hEZWNheTwvY29kZT4uXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkluc3RydW1lbnR9XG5cdFx0ICogIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgYXZhaWxhYmxlIGZvciB0aGUgc3ludGhcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VlIGRlZmF1bHRzIGJlbG93XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIHN5bnRoID0gbmV3IFRvbmUuTWVtYnJhbmVTeW50aCgpLnRvTWFzdGVyKCk7XG5cdFx0ICogc3ludGgudHJpZ2dlckF0dGFja1JlbGVhc2UoXCJDMlwiLCBcIjhuXCIpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NZW1icmFuZVN5bnRoID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgICAgICBvcHRpb25zID0gVG9uZS5kZWZhdWx0QXJnKG9wdGlvbnMsIFRvbmUuTWVtYnJhbmVTeW50aC5kZWZhdWx0cyk7XG5cdCAgICAgICAgVG9uZS5JbnN0cnVtZW50LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG9zY2lsbGF0b3IuXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuT21uaU9zY2lsbGF0b3J9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm9zY2lsbGF0b3IgPSBuZXcgVG9uZS5PbW5pT3NjaWxsYXRvcihvcHRpb25zLm9zY2lsbGF0b3IpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBhbXBsaXR1ZGUgZW52ZWxvcGUuXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuQW1wbGl0dWRlRW52ZWxvcGV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmVudmVsb3BlID0gbmV3IFRvbmUuQW1wbGl0dWRlRW52ZWxvcGUob3B0aW9ucy5lbnZlbG9wZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG51bWJlciBvZiBvY3RhdmVzIHRoZSBwaXRjaCBlbnZlbG9wZSByYW1wcy5cblx0XHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLm9jdGF2ZXMgPSBvcHRpb25zLm9jdGF2ZXM7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGFtb3VudCBvZiB0aW1lIHRoZSBmcmVxdWVuY3kgZW52ZWxvcGUgdGFrZXMuXG5cdFx0XHQgKiAgQHR5cGUge1RpbWV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLnBpdGNoRGVjYXkgPSBvcHRpb25zLnBpdGNoRGVjYXk7XG5cdCAgICAgICAgdGhpcy5vc2NpbGxhdG9yLmNoYWluKHRoaXMuZW52ZWxvcGUsIHRoaXMub3V0cHV0KTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seShbXG5cdCAgICAgICAgICAgICdvc2NpbGxhdG9yJyxcblx0ICAgICAgICAgICAgJ2VudmVsb3BlJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuTWVtYnJhbmVTeW50aCwgVG9uZS5JbnN0cnVtZW50KTtcblx0ICAgIC8qKlxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLk1lbWJyYW5lU3ludGguZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ3BpdGNoRGVjYXknOiAwLjA1LFxuXHQgICAgICAgICdvY3RhdmVzJzogMTAsXG5cdCAgICAgICAgJ29zY2lsbGF0b3InOiB7ICd0eXBlJzogJ3NpbmUnIH0sXG5cdCAgICAgICAgJ2VudmVsb3BlJzoge1xuXHQgICAgICAgICAgICAnYXR0YWNrJzogMC4wMDEsXG5cdCAgICAgICAgICAgICdkZWNheSc6IDAuNCxcblx0ICAgICAgICAgICAgJ3N1c3RhaW4nOiAwLjAxLFxuXHQgICAgICAgICAgICAncmVsZWFzZSc6IDEuNCxcblx0ICAgICAgICAgICAgJ2F0dGFja0N1cnZlJzogJ2V4cG9uZW50aWFsJ1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVHJpZ2dlciB0aGUgbm90ZSBhdCB0aGUgZ2l2ZW4gdGltZSB3aXRoIHRoZSBnaXZlbiB2ZWxvY2l0eS5cblx0XHQgKlxuXHRcdCAqICBAcGFyYW0gIHtGcmVxdWVuY3l9IG5vdGUgICAgIHRoZSBub3RlXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IFt0aW1lPW5vd10gICAgIHRoZSB0aW1lLCBpZiBub3QgZ2l2ZW4gaXMgbm93XG5cdFx0ICogIEBwYXJhbSAge251bWJlcn0gW3ZlbG9jaXR5PTFdIHZlbG9jaXR5IGRlZmF1bHRzIHRvIDFcblx0XHQgKiAgQHJldHVybnMge1RvbmUuTWVtYnJhbmVTeW50aH0gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqICBraWNrLnRyaWdnZXJBdHRhY2soNjApO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NZW1icmFuZVN5bnRoLnByb3RvdHlwZS50cmlnZ2VyQXR0YWNrID0gZnVuY3Rpb24gKG5vdGUsIHRpbWUsIHZlbG9jaXR5KSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIG5vdGUgPSB0aGlzLnRvRnJlcXVlbmN5KG5vdGUpO1xuXHQgICAgICAgIHZhciBtYXhOb3RlID0gbm90ZSAqIHRoaXMub2N0YXZlcztcblx0ICAgICAgICB0aGlzLm9zY2lsbGF0b3IuZnJlcXVlbmN5LnNldFZhbHVlQXRUaW1lKG1heE5vdGUsIHRpbWUpO1xuXHQgICAgICAgIHRoaXMub3NjaWxsYXRvci5mcmVxdWVuY3kuZXhwb25lbnRpYWxSYW1wVG9WYWx1ZUF0VGltZShub3RlLCB0aW1lICsgdGhpcy50b1NlY29uZHModGhpcy5waXRjaERlY2F5KSk7XG5cdCAgICAgICAgdGhpcy5lbnZlbG9wZS50cmlnZ2VyQXR0YWNrKHRpbWUsIHZlbG9jaXR5KTtcblx0ICAgICAgICB0aGlzLm9zY2lsbGF0b3Iuc3RhcnQodGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRyaWdnZXIgdGhlIHJlbGVhc2UgcG9ydGlvbiBvZiB0aGUgbm90ZS5cblx0XHQgKlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbdGltZT1ub3ddIHRoZSB0aW1lIHRoZSBub3RlIHdpbGwgcmVsZWFzZVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5NZW1icmFuZVN5bnRofSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk1lbWJyYW5lU3ludGgucHJvdG90eXBlLnRyaWdnZXJSZWxlYXNlID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy5lbnZlbG9wZS50cmlnZ2VyUmVsZWFzZSh0aW1lKTtcblx0ICAgICAgICB0aGlzLm9zY2lsbGF0b3Iuc3RvcCh0aW1lICsgdGhpcy5lbnZlbG9wZS5yZWxlYXNlKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLk1lbWJyYW5lU3ludGh9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTWVtYnJhbmVTeW50aC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkluc3RydW1lbnQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdvc2NpbGxhdG9yJyxcblx0ICAgICAgICAgICAgJ2VudmVsb3BlJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIHRoaXMub3NjaWxsYXRvci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5vc2NpbGxhdG9yID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmVudmVsb3BlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmVudmVsb3BlID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5NZW1icmFuZVN5bnRoO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICAvKipcblx0XHQgKiAgSW5oYXJtb25pYyByYXRpbyBvZiBmcmVxdWVuY2llcyBiYXNlZCBvbiB0aGUgUm9sYW5kIFRSLTgwOFxuXHRcdCAqICBUYWtlbiBmcm9tIGh0dHBzOi8vY2NybWEuc3RhbmZvcmQuZWR1L3BhcGVycy90ci04MDgtY3ltYmFsLXBoeXNpY2FsbHktaW5mb3JtZWQtY2lyY3VpdC1iZW5kYWJsZS1kaWdpdGFsLW1vZGVsXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKiAgQHR5cGUge0FycmF5fVxuXHRcdCAqL1xuXHQgICAgdmFyIGluaGFybVJhdGlvcyA9IFtcblx0ICAgICAgICAxLFxuXHQgICAgICAgIDEuNDgzLFxuXHQgICAgICAgIDEuOTMyLFxuXHQgICAgICAgIDIuNTQ2LFxuXHQgICAgICAgIDIuNjMsXG5cdCAgICAgICAgMy44OTdcblx0ICAgIF07XG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBBIGhpZ2hseSBpbmhhcm1vbmljIGFuZCBzcGVjdHJhbGx5IGNvbXBsZXggc291cmNlIHdpdGggYSBoaWdocGFzcyBmaWx0ZXJcblx0XHQgKiAgICAgICAgICBhbmQgYW1wbGl0dWRlIGVudmVsb3BlIHdoaWNoIGlzIGdvb2QgZm9yIG1ha2luZyBtZXRhbG9waG9uZSBzb3VuZHMuIEJhc2VkXG5cdFx0ICogICAgICAgICAgb24gQ3ltYmFsU3ludGggYnkgW0Bwb2x5cmh5dGhtYXRpY10oaHR0cHM6Ly9naXRodWIuY29tL3BvbHlyaHl0aG1hdGljKS5cblx0XHQgKiAgICAgICAgICBJbnNwaXJhdGlvbiBmcm9tIFtTb3VuZCBvbiBTb3VuZF0oaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTYwNjEwMTQzOTI0L2h0dHBzOi8vd3d3LnNvdW5kb25zb3VuZC5jb20vc29zL2p1bDAyL2FydGljbGVzL3N5bnRoc2VjcmV0czA3MDIuYXNwKS5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuSW5zdHJ1bWVudH1cblx0XHQgKiAgQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBhdmFpbGJsZSBmb3IgdGhlIHN5bnRoXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZSBkZWZhdWx0cyBiZWxvd1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NZXRhbFN5bnRoID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgICAgICBvcHRpb25zID0gVG9uZS5kZWZhdWx0QXJnKG9wdGlvbnMsIFRvbmUuTWV0YWxTeW50aC5kZWZhdWx0cyk7XG5cdCAgICAgICAgVG9uZS5JbnN0cnVtZW50LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGZyZXF1ZW5jeSBvZiB0aGUgY3ltYmFsXG5cdFx0XHQgKiAgQHR5cGUgIHtGcmVxdWVuY3l9XG5cdFx0XHQgKiAgQHNpZ25hbFxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5mcmVxdWVuY3kgPSBuZXcgVG9uZS5TaWduYWwob3B0aW9ucy5mcmVxdWVuY3ksIFRvbmUuVHlwZS5GcmVxdWVuY3kpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBhcnJheSBvZiBGTU9zY2lsbGF0b3JzXG5cdFx0XHQgKiAgQHR5cGUgIHtBcnJheX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fb3NjaWxsYXRvcnMgPSBbXTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZnJlcXVlbmN5IG11bHRpcGxpZXJzXG5cdFx0XHQgKiAgQHR5cGUge0FycmF5fVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9mcmVxTXVsdGlwbGllcnMgPSBbXTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW1wbGl0dWRlIGZvciB0aGUgYm9keVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkdhaW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2FtcGxpdHVlID0gbmV3IFRvbmUuR2FpbigwKS5jb25uZWN0KHRoaXMub3V0cHV0KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBoaWdocGFzcyB0aGUgb3V0cHV0XG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuRmlsdGVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9oaWdocGFzcyA9IG5ldyBUb25lLkZpbHRlcih7XG5cdCAgICAgICAgICAgICd0eXBlJzogJ2hpZ2hwYXNzJyxcblx0ICAgICAgICAgICAgJ1EnOiAtMy4wMTAyOTk5NTY2Mzk4MTI1XG5cdCAgICAgICAgfSkuY29ubmVjdCh0aGlzLl9hbXBsaXR1ZSk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG51bWJlciBvZiBvY3RhdmVzIHRoZSBoaWdocGFzc1xuXHRcdFx0ICogIGZpbHRlciBmcmVxdWVuY3kgcmFtcHNcblx0XHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9vY3RhdmVzID0gb3B0aW9ucy5vY3RhdmVzO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFNjYWxlIHRoZSBib2R5IGVudmVsb3BlXG5cdFx0XHQgKiAgZm9yIHRoZSBiYW5kcGFzc1xuXHRcdFx0ICogIEB0eXBlIHtUb25lLlNjYWxlfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9maWx0ZXJGcmVxU2NhbGVyID0gbmV3IFRvbmUuU2NhbGUob3B0aW9ucy5yZXNvbmFuY2UsIDcwMDApO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBlbnZlbG9wZSB3aGljaCBpcyBjb25uZWN0ZWQgYm90aCB0byB0aGVcblx0XHRcdCAqICBhbXBsaXR1ZGUgYW5kIGhpZ2hwYXNzIGZpbHRlcidzIGN1dG9mZiBmcmVxdWVuY3lcblx0XHRcdCAqICBAdHlwZSAge1RvbmUuRW52ZWxvcGV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmVudmVsb3BlID0gbmV3IFRvbmUuRW52ZWxvcGUoe1xuXHQgICAgICAgICAgICAnYXR0YWNrJzogb3B0aW9ucy5lbnZlbG9wZS5hdHRhY2ssXG5cdCAgICAgICAgICAgICdhdHRhY2tDdXJ2ZSc6ICdsaW5lYXInLFxuXHQgICAgICAgICAgICAnZGVjYXknOiBvcHRpb25zLmVudmVsb3BlLmRlY2F5LFxuXHQgICAgICAgICAgICAnc3VzdGFpbic6IDAsXG5cdCAgICAgICAgICAgICdyZWxlYXNlJzogb3B0aW9ucy5lbnZlbG9wZS5yZWxlYXNlXG5cdCAgICAgICAgfSkuY2hhaW4odGhpcy5fZmlsdGVyRnJlcVNjYWxlciwgdGhpcy5faGlnaHBhc3MuZnJlcXVlbmN5KTtcblx0ICAgICAgICB0aGlzLmVudmVsb3BlLmNvbm5lY3QodGhpcy5fYW1wbGl0dWUuZ2Fpbik7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmhhcm1SYXRpb3MubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIG9zYyA9IG5ldyBUb25lLkZNT3NjaWxsYXRvcih7XG5cdCAgICAgICAgICAgICAgICAndHlwZSc6ICdzcXVhcmUnLFxuXHQgICAgICAgICAgICAgICAgJ21vZHVsYXRpb25UeXBlJzogJ3NxdWFyZScsXG5cdCAgICAgICAgICAgICAgICAnaGFybW9uaWNpdHknOiBvcHRpb25zLmhhcm1vbmljaXR5LFxuXHQgICAgICAgICAgICAgICAgJ21vZHVsYXRpb25JbmRleCc6IG9wdGlvbnMubW9kdWxhdGlvbkluZGV4XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBvc2MuY29ubmVjdCh0aGlzLl9oaWdocGFzcyk7XG5cdCAgICAgICAgICAgIHRoaXMuX29zY2lsbGF0b3JzW2ldID0gb3NjO1xuXHQgICAgICAgICAgICB2YXIgbXVsdCA9IG5ldyBUb25lLk11bHRpcGx5KGluaGFybVJhdGlvc1tpXSk7XG5cdCAgICAgICAgICAgIHRoaXMuX2ZyZXFNdWx0aXBsaWVyc1tpXSA9IG11bHQ7XG5cdCAgICAgICAgICAgIHRoaXMuZnJlcXVlbmN5LmNoYWluKG11bHQsIG9zYy5mcmVxdWVuY3kpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvL3NldCB0aGUgb2N0YXZlc1xuXHQgICAgICAgIHRoaXMub2N0YXZlcyA9IG9wdGlvbnMub2N0YXZlcztcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLk1ldGFsU3ludGgsIFRvbmUuSW5zdHJ1bWVudCk7XG5cdCAgICAvKipcblx0XHQgKiAgZGVmYXVsdCB2YWx1ZXNcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAY29uc3Rcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuTWV0YWxTeW50aC5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnZnJlcXVlbmN5JzogMjAwLFxuXHQgICAgICAgICdlbnZlbG9wZSc6IHtcblx0ICAgICAgICAgICAgJ2F0dGFjayc6IDAuMDAxLFxuXHQgICAgICAgICAgICAnZGVjYXknOiAxLjQsXG5cdCAgICAgICAgICAgICdyZWxlYXNlJzogMC4yXG5cdCAgICAgICAgfSxcblx0ICAgICAgICAnaGFybW9uaWNpdHknOiA1LjEsXG5cdCAgICAgICAgJ21vZHVsYXRpb25JbmRleCc6IDMyLFxuXHQgICAgICAgICdyZXNvbmFuY2UnOiA0MDAwLFxuXHQgICAgICAgICdvY3RhdmVzJzogMS41XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRyaWdnZXIgdGhlIGF0dGFjay5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gIHRpbWUgICAgICBXaGVuIHRoZSBhdHRhY2sgc2hvdWxkIGJlIHRyaWdnZXJlZC5cblx0XHQgKiAgQHBhcmFtICB7Tm9ybWFsUmFuZ2V9ICBbdmVsb2NpdHk9MV0gIFRoZSB2ZWxvY2l0eSB0aGF0IHRoZSBlbnZlbG9wZSBzaG91bGQgYmUgdHJpZ2dlcmVkIGF0LlxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5NZXRhbFN5bnRofSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NZXRhbFN5bnRoLnByb3RvdHlwZS50cmlnZ2VyQXR0YWNrID0gZnVuY3Rpb24gKHRpbWUsIHZlbCkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB2ZWwgPSBUb25lLmRlZmF1bHRBcmcodmVsLCAxKTtcblx0ICAgICAgICB0aGlzLmVudmVsb3BlLnRyaWdnZXJBdHRhY2sodGltZSwgdmVsKTtcblx0ICAgICAgICB0aGlzLl9vc2NpbGxhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChvc2MpIHtcblx0ICAgICAgICAgICAgb3NjLnN0YXJ0KHRpbWUpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIC8vaWYgdGhlIHN1c3RhaW4gaXMgMCwgc3RvcCB0aGUgb3NjaWxsYXRvciBhcyB3ZWxsXG5cdCAgICAgICAgaWYgKHRoaXMuZW52ZWxvcGUuc3VzdGFpbiA9PT0gMCkge1xuXHQgICAgICAgICAgICB0aGlzLl9vc2NpbGxhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChvc2MpIHtcblx0ICAgICAgICAgICAgICAgIG9zYy5zdG9wKHRpbWUgKyB0aGlzLmVudmVsb3BlLmF0dGFjayArIHRoaXMuZW52ZWxvcGUuZGVjYXkpO1xuXHQgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVHJpZ2dlciB0aGUgcmVsZWFzZSBvZiB0aGUgZW52ZWxvcGUuXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9ICB0aW1lICAgICAgV2hlbiB0aGUgcmVsZWFzZSBzaG91bGQgYmUgdHJpZ2dlcmVkLlxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5NZXRhbFN5bnRofSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NZXRhbFN5bnRoLnByb3RvdHlwZS50cmlnZ2VyUmVsZWFzZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuZW52ZWxvcGUudHJpZ2dlclJlbGVhc2UodGltZSk7XG5cdCAgICAgICAgdGhpcy5fb3NjaWxsYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAob3NjKSB7XG5cdCAgICAgICAgICAgIG9zYy5zdG9wKHRpbWUgKyB0aGlzLmVudmVsb3BlLnJlbGVhc2UpO1xuXHQgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogU3luYyB0aGUgaW5zdHJ1bWVudCB0byB0aGUgVHJhbnNwb3J0LiBBbGwgc3Vic2VxdWVudCBjYWxscyBvZlxuXHRcdCAqIFt0cmlnZ2VyQXR0YWNrXSgjdHJpZ2dlcmF0dGFjaykgYW5kIFt0cmlnZ2VyUmVsZWFzZV0oI3RyaWdnZXJyZWxlYXNlKVxuXHRcdCAqIHdpbGwgYmUgc2NoZWR1bGVkIGFsb25nIHRoZSB0cmFuc3BvcnQuXG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiBzeW50aC5zeW5jKClcblx0XHQgKiAvL3NjaGVkdWxlIDMgbm90ZXMgd2hlbiB0aGUgdHJhbnNwb3J0IGZpcnN0IHN0YXJ0c1xuXHRcdCAqIHN5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKCc4bicsIDApXG5cdFx0ICogc3ludGgudHJpZ2dlckF0dGFja1JlbGVhc2UoJzhuJywgJzhuJylcblx0XHQgKiBzeW50aC50cmlnZ2VyQXR0YWNrUmVsZWFzZSgnOG4nLCAnNG4nKVxuXHRcdCAqIC8vc3RhcnQgdGhlIHRyYW5zcG9ydCB0byBoZWFyIHRoZSBub3Rlc1xuXHRcdCAqIFRyYW5zcG9ydC5zdGFydCgpXG5cdFx0ICogQHJldHVybnMge1RvbmUuSW5zdHJ1bWVudH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NZXRhbFN5bnRoLnByb3RvdHlwZS5zeW5jID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX3N5bmNNZXRob2QoJ3RyaWdnZXJBdHRhY2snLCAwKTtcblx0ICAgICAgICB0aGlzLl9zeW5jTWV0aG9kKCd0cmlnZ2VyUmVsZWFzZScsIDApO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUcmlnZ2VyIHRoZSBhdHRhY2sgYW5kIHJlbGVhc2Ugb2YgdGhlIGVudmVsb3BlIGFmdGVyIHRoZSBnaXZlblxuXHRcdCAqICBkdXJhdGlvbi5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gIGR1cmF0aW9uICBUaGUgZHVyYXRpb24gYmVmb3JlIHRyaWdnZXJpbmcgdGhlIHJlbGVhc2Vcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gIHRpbWUgICAgICBXaGVuIHRoZSBhdHRhY2sgc2hvdWxkIGJlIHRyaWdnZXJlZC5cblx0XHQgKiAgQHBhcmFtICB7Tm9ybWFsUmFuZ2V9ICBbdmVsb2NpdHk9MV0gIFRoZSB2ZWxvY2l0eSB0aGF0IHRoZSBlbnZlbG9wZSBzaG91bGQgYmUgdHJpZ2dlcmVkIGF0LlxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5NZXRhbFN5bnRofSAgdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5NZXRhbFN5bnRoLnByb3RvdHlwZS50cmlnZ2VyQXR0YWNrUmVsZWFzZSA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgdGltZSwgdmVsb2NpdHkpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgZHVyYXRpb24gPSB0aGlzLnRvU2Vjb25kcyhkdXJhdGlvbik7XG5cdCAgICAgICAgdGhpcy50cmlnZ2VyQXR0YWNrKHRpbWUsIHZlbG9jaXR5KTtcblx0ICAgICAgICB0aGlzLnRyaWdnZXJSZWxlYXNlKHRpbWUgKyBkdXJhdGlvbik7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBtb2R1bGF0aW9uSW5kZXggb2YgdGhlIG9zY2lsbGF0b3JzIHdoaWNoIG1ha2UgdXAgdGhlIHNvdXJjZS5cblx0XHQgKiAgc2VlIFRvbmUuRk1Pc2NpbGxhdG9yLm1vZHVsYXRpb25JbmRleFxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5NZXRhbFN5bnRoI1xuXHRcdCAqICBAdHlwZSB7UG9zaXRpdmV9XG5cdFx0ICogIEBuYW1lICBtb2R1bGF0aW9uSW5kZXhcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLk1ldGFsU3ludGgucHJvdG90eXBlLCAnbW9kdWxhdGlvbkluZGV4Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3NjaWxsYXRvcnNbMF0ubW9kdWxhdGlvbkluZGV4LnZhbHVlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fb3NjaWxsYXRvcnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX29zY2lsbGF0b3JzW2ldLm1vZHVsYXRpb25JbmRleC52YWx1ZSA9IHZhbDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBoYXJtb25pY2l0eSBvZiB0aGUgb3NjaWxsYXRvcnMgd2hpY2ggbWFrZSB1cCB0aGUgc291cmNlLlxuXHRcdCAqICBzZWUgVG9uZS5GTU9zY2lsbGF0b3IuaGFybW9uaWNpdHlcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuTWV0YWxTeW50aCNcblx0XHQgKiAgQHR5cGUge1Bvc2l0aXZlfVxuXHRcdCAqICBAbmFtZSAgaGFybW9uaWNpdHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLk1ldGFsU3ludGgucHJvdG90eXBlLCAnaGFybW9uaWNpdHknLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9vc2NpbGxhdG9yc1swXS5oYXJtb25pY2l0eS52YWx1ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX29zY2lsbGF0b3JzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9vc2NpbGxhdG9yc1tpXS5oYXJtb25pY2l0eS52YWx1ZSA9IHZhbDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBmcmVxdWVuY3kgb2YgdGhlIGhpZ2hwYXNzIGZpbHRlciBhdHRhY2hlZCB0byB0aGUgZW52ZWxvcGVcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuTWV0YWxTeW50aCNcblx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHQgKiAgQG5hbWUgIHJlc29uYW5jZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTWV0YWxTeW50aC5wcm90b3R5cGUsICdyZXNvbmFuY2UnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJGcmVxU2NhbGVyLm1pbjtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xuXHQgICAgICAgICAgICB0aGlzLl9maWx0ZXJGcmVxU2NhbGVyLm1pbiA9IHZhbDtcblx0ICAgICAgICAgICAgdGhpcy5vY3RhdmVzID0gdGhpcy5fb2N0YXZlcztcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBUaGUgbnVtYmVyIG9mIG9jdGF2ZXMgYWJvdmUgdGhlIFwicmVzb25hbmNlXCIgZnJlcXVlbmN5XG5cdFx0ICogIHRoYXQgdGhlIGZpbHRlciByYW1wcyBkdXJpbmcgdGhlIGF0dGFjay9kZWNheSBlbnZlbG9wZVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5NZXRhbFN5bnRoI1xuXHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqICBAbmFtZSAgb2N0YXZlc1xuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTWV0YWxTeW50aC5wcm90b3R5cGUsICdvY3RhdmVzJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fb2N0YXZlcztcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG9jdHMpIHtcblx0ICAgICAgICAgICAgdGhpcy5fb2N0YXZlcyA9IG9jdHM7XG5cdCAgICAgICAgICAgIHRoaXMuX2ZpbHRlckZyZXFTY2FsZXIubWF4ID0gdGhpcy5fZmlsdGVyRnJlcVNjYWxlci5taW4gKiBNYXRoLnBvdygyLCBvY3RzKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBDbGVhbiB1cFxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5NZXRhbFN5bnRofSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk1ldGFsU3ludGgucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5JbnN0cnVtZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9vc2NpbGxhdG9ycy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB0aGlzLl9vc2NpbGxhdG9yc1tpXS5kaXNwb3NlKCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2ZyZXFNdWx0aXBsaWVyc1tpXS5kaXNwb3NlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuX29zY2lsbGF0b3JzID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9mcmVxTXVsdGlwbGllcnMgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuZnJlcXVlbmN5LmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fZmlsdGVyRnJlcVNjYWxlci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZmlsdGVyRnJlcVNjYWxlciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fYW1wbGl0dWUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2FtcGxpdHVlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmVudmVsb3BlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmVudmVsb3BlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9oaWdocGFzcy5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5faGlnaHBhc3MgPSBudWxsO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLk1ldGFsU3ludGg7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyAgVG9uZS5Ob2lzZVN5bnRoIGlzIGNvbXBvc2VkIG9mIGEgbm9pc2UgZ2VuZXJhdG9yIChUb25lLk5vaXNlKSwgb25lIGZpbHRlciAoVG9uZS5GaWx0ZXIpLFxuXHRcdCAqICAgICAgICAgIGFuZCB0d28gZW52ZWxvcGVzIChUb25lLkVudmVsb3ApLiBPbmUgZW52ZWxvcGUgY29udHJvbHMgdGhlIGFtcGxpdHVkZVxuXHRcdCAqICAgICAgICAgIG9mIHRoZSBub2lzZSBhbmQgdGhlIG90aGVyIGlzIGNvbnRyb2xzIHRoZSBjdXRvZmYgZnJlcXVlbmN5IG9mIHRoZSBmaWx0ZXIuXG5cdFx0ICogICAgICAgICAgPGltZyBzcmM9XCJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kcmF3aW5ncy9kLzFycXp1WDlyQmxoVDUwTVJ2RDJUS21sOWJuWmhjWm16WEYxcmZfbzd2ZG5FL3B1Yj93PTkxOCZoPTI0MlwiPlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5JbnN0cnVtZW50fVxuXHRcdCAqICBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIHRoZSBvcHRpb25zIGF2YWlsYWJsZSBmb3IgdGhlIHN5bnRoXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgIHNlZSBkZWZhdWx0cyBiZWxvd1xuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogdmFyIG5vaXNlU3ludGggPSBuZXcgVG9uZS5Ob2lzZVN5bnRoKCkudG9NYXN0ZXIoKTtcblx0XHQgKiBub2lzZVN5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKFwiOG5cIik7XG5cdFx0ICovXG5cdCAgICBUb25lLk5vaXNlU3ludGggPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHQgICAgICAgIC8vZ2V0IHRoZSBkZWZhdWx0c1xuXHQgICAgICAgIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRBcmcob3B0aW9ucywgVG9uZS5Ob2lzZVN5bnRoLmRlZmF1bHRzKTtcblx0ICAgICAgICBUb25lLkluc3RydW1lbnQuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgbm9pc2Ugc291cmNlLlxuXHRcdFx0ICogIEB0eXBlIHtUb25lLk5vaXNlfVxuXHRcdFx0ICogIEBleGFtcGxlXG5cdFx0XHQgKiBub2lzZVN5bnRoLnNldChcIm5vaXNlLnR5cGVcIiwgXCJicm93blwiKTtcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMubm9pc2UgPSBuZXcgVG9uZS5Ob2lzZSgpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBhbXBsaXR1ZGUgZW52ZWxvcGUuXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuQW1wbGl0dWRlRW52ZWxvcGV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmVudmVsb3BlID0gbmV3IFRvbmUuQW1wbGl0dWRlRW52ZWxvcGUob3B0aW9ucy5lbnZlbG9wZSk7XG5cdCAgICAgICAgLy9jb25uZWN0IHRoZSBub2lzZSB0byB0aGUgb3V0cHV0XG5cdCAgICAgICAgdGhpcy5ub2lzZS5jaGFpbih0aGlzLmVudmVsb3BlLCB0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAnbm9pc2UnLFxuXHQgICAgICAgICAgICAnZW52ZWxvcGUnXG5cdCAgICAgICAgXSk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5Ob2lzZVN5bnRoLCBUb25lLkluc3RydW1lbnQpO1xuXHQgICAgLyoqXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLk5vaXNlU3ludGguZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ25vaXNlJzogeyAndHlwZSc6ICd3aGl0ZScgfSxcblx0ICAgICAgICAnZW52ZWxvcGUnOiB7XG5cdCAgICAgICAgICAgICdhdHRhY2snOiAwLjAwNSxcblx0ICAgICAgICAgICAgJ2RlY2F5JzogMC4xLFxuXHQgICAgICAgICAgICAnc3VzdGFpbic6IDBcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFN0YXJ0IHRoZSBhdHRhY2sgcG9ydGlvbiBvZiB0aGUgZW52ZWxvcGVzLiBVbmxpa2Ugb3RoZXJcblx0XHQgKiAgaW5zdHJ1bWVudHMsIFRvbmUuTm9pc2VTeW50aCBkb2Vzbid0IGhhdmUgYSBub3RlLlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFt0aW1lPW5vd10gdGhlIHRpbWUgdGhlIGF0dGFjayBzaG91bGQgc3RhcnRcblx0XHQgKiAgQHBhcmFtIHtudW1iZXJ9IFt2ZWxvY2l0eT0xXSB0aGUgdmVsb2NpdHkgb2YgdGhlIG5vdGUgKDAtMSlcblx0XHQgKiAgQHJldHVybnMge1RvbmUuTm9pc2VTeW50aH0gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIG5vaXNlU3ludGgudHJpZ2dlckF0dGFjaygpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Ob2lzZVN5bnRoLnByb3RvdHlwZS50cmlnZ2VyQXR0YWNrID0gZnVuY3Rpb24gKHRpbWUsIHZlbG9jaXR5KSB7XG5cdCAgICAgICAgLy90aGUgZW52ZWxvcGVzXG5cdCAgICAgICAgdGhpcy5lbnZlbG9wZS50cmlnZ2VyQXR0YWNrKHRpbWUsIHZlbG9jaXR5KTtcblx0ICAgICAgICAvL3N0YXJ0IHRoZSBub2lzZVxuXHQgICAgICAgIHRoaXMubm9pc2Uuc3RhcnQodGltZSk7XG5cdCAgICAgICAgaWYgKHRoaXMuZW52ZWxvcGUuc3VzdGFpbiA9PT0gMCkge1xuXHQgICAgICAgICAgICB0aGlzLm5vaXNlLnN0b3AodGltZSA9IHRoaXMuZW52ZWxvcGUuYXR0YWNrICsgdGhpcy5lbnZlbG9wZS5kZWNheSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdGFydCB0aGUgcmVsZWFzZSBwb3J0aW9uIG9mIHRoZSBlbnZlbG9wZXMuXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gW3RpbWU9bm93XSB0aGUgdGltZSB0aGUgcmVsZWFzZSBzaG91bGQgc3RhcnRcblx0XHQgKiAgQHJldHVybnMge1RvbmUuTm9pc2VTeW50aH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Ob2lzZVN5bnRoLnByb3RvdHlwZS50cmlnZ2VyUmVsZWFzZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGhpcy5lbnZlbG9wZS50cmlnZ2VyUmVsZWFzZSh0aW1lKTtcblx0ICAgICAgICB0aGlzLm5vaXNlLnN0b3AodGltZSArIHRoaXMuZW52ZWxvcGUucmVsZWFzZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogU3luYyB0aGUgaW5zdHJ1bWVudCB0byB0aGUgVHJhbnNwb3J0LiBBbGwgc3Vic2VxdWVudCBjYWxscyBvZlxuXHRcdCAqIFt0cmlnZ2VyQXR0YWNrXSgjdHJpZ2dlcmF0dGFjaykgYW5kIFt0cmlnZ2VyUmVsZWFzZV0oI3RyaWdnZXJyZWxlYXNlKVxuXHRcdCAqIHdpbGwgYmUgc2NoZWR1bGVkIGFsb25nIHRoZSB0cmFuc3BvcnQuXG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiBzeW50aC5zeW5jKClcblx0XHQgKiAvL3NjaGVkdWxlIDMgbm90ZXMgd2hlbiB0aGUgdHJhbnNwb3J0IGZpcnN0IHN0YXJ0c1xuXHRcdCAqIHN5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKCc4bicsIDApXG5cdFx0ICogc3ludGgudHJpZ2dlckF0dGFja1JlbGVhc2UoJzhuJywgJzhuJylcblx0XHQgKiBzeW50aC50cmlnZ2VyQXR0YWNrUmVsZWFzZSgnOG4nLCAnNG4nKVxuXHRcdCAqIC8vc3RhcnQgdGhlIHRyYW5zcG9ydCB0byBoZWFyIHRoZSBub3Rlc1xuXHRcdCAqIFRyYW5zcG9ydC5zdGFydCgpXG5cdFx0ICogQHJldHVybnMge1RvbmUuSW5zdHJ1bWVudH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Ob2lzZVN5bnRoLnByb3RvdHlwZS5zeW5jID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX3N5bmNNZXRob2QoJ3RyaWdnZXJBdHRhY2snLCAwKTtcblx0ICAgICAgICB0aGlzLl9zeW5jTWV0aG9kKCd0cmlnZ2VyUmVsZWFzZScsIDApO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUcmlnZ2VyIHRoZSBhdHRhY2sgYW5kIHRoZW4gdGhlIHJlbGVhc2UuXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IGR1cmF0aW9uIHRoZSBkdXJhdGlvbiBvZiB0aGUgbm90ZVxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbdGltZT1ub3ddICAgICB0aGUgdGltZSBvZiB0aGUgYXR0YWNrXG5cdFx0ICogIEBwYXJhbSAge251bWJlcn0gW3ZlbG9jaXR5PTFdIHRoZSB2ZWxvY2l0eVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Ob2lzZVN5bnRofSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLk5vaXNlU3ludGgucHJvdG90eXBlLnRyaWdnZXJBdHRhY2tSZWxlYXNlID0gZnVuY3Rpb24gKGR1cmF0aW9uLCB0aW1lLCB2ZWxvY2l0eSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICBkdXJhdGlvbiA9IHRoaXMudG9TZWNvbmRzKGR1cmF0aW9uKTtcblx0ICAgICAgICB0aGlzLnRyaWdnZXJBdHRhY2sodGltZSwgdmVsb2NpdHkpO1xuXHQgICAgICAgIHRoaXMudHJpZ2dlclJlbGVhc2UodGltZSArIGR1cmF0aW9uKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLk5vaXNlU3ludGh9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuTm9pc2VTeW50aC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkluc3RydW1lbnQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdub2lzZScsXG5cdCAgICAgICAgICAgICdlbnZlbG9wZSdcblx0ICAgICAgICBdKTtcblx0ICAgICAgICB0aGlzLm5vaXNlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLm5vaXNlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLmVudmVsb3BlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmVudmVsb3BlID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5Ob2lzZVN5bnRoO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgS2FycGx1cy1TdHJpbmcgc3RyaW5nIHN5bnRoZXNpcy4gT2Z0ZW4gb3V0IG9mIHR1bmUuXG5cdFx0ICogICAgICAgICBXaWxsIGNoYW5nZSB3aGVuIHRoZSBBdWRpb1dvcmtlck5vZGUgaXMgYXZhaWxhYmxlIGFjcm9zc1xuXHRcdCAqICAgICAgICAgYnJvd3NlcnMuXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkluc3RydW1lbnR9XG5cdFx0ICogIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gc2VlIHRoZSBkZWZhdWx0c1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBwbHVja3kgPSBuZXcgVG9uZS5QbHVja1N5bnRoKCkudG9NYXN0ZXIoKTtcblx0XHQgKiBwbHVja3kudHJpZ2dlckF0dGFjayhcIkM0XCIpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QbHVja1N5bnRoID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgICAgICBvcHRpb25zID0gVG9uZS5kZWZhdWx0QXJnKG9wdGlvbnMsIFRvbmUuUGx1Y2tTeW50aC5kZWZhdWx0cyk7XG5cdCAgICAgICAgVG9uZS5JbnN0cnVtZW50LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuTm9pc2V9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX25vaXNlID0gbmV3IFRvbmUuTm9pc2UoJ3BpbmsnKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgYW1vdW50IG9mIG5vaXNlIGF0IHRoZSBhdHRhY2suXG5cdFx0XHQgKiAgTm9taW5hbCByYW5nZSBvZiBbMC4xLCAyMF1cblx0XHRcdCAqICBAdHlwZSB7bnVtYmVyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5hdHRhY2tOb2lzZSA9IG9wdGlvbnMuYXR0YWNrTm9pc2U7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIExGQ0Zcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5Mb3dwYXNzQ29tYkZpbHRlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbGZjZiA9IG5ldyBUb25lLkxvd3Bhc3NDb21iRmlsdGVyKHtcblx0ICAgICAgICAgICAgJ3Jlc29uYW5jZSc6IG9wdGlvbnMucmVzb25hbmNlLFxuXHQgICAgICAgICAgICAnZGFtcGVuaW5nJzogb3B0aW9ucy5kYW1wZW5pbmdcblx0ICAgICAgICB9KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgcmVzb25hbmNlIGNvbnRyb2wuXG5cdFx0XHQgKiAgQHR5cGUge05vcm1hbFJhbmdlfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMucmVzb25hbmNlID0gdGhpcy5fbGZjZi5yZXNvbmFuY2U7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGRhbXBlbmluZyBjb250cm9sLiBpLmUuIHRoZSBsb3dwYXNzIGZpbHRlciBmcmVxdWVuY3kgb2YgdGhlIGNvbWIgZmlsdGVyXG5cdFx0XHQgKiAgQHR5cGUge0ZyZXF1ZW5jeX1cblx0XHRcdCAqICBAc2lnbmFsXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmRhbXBlbmluZyA9IHRoaXMuX2xmY2YuZGFtcGVuaW5nO1xuXHQgICAgICAgIC8vY29ubmVjdGlvbnNcblx0ICAgICAgICB0aGlzLl9ub2lzZS5jb25uZWN0KHRoaXMuX2xmY2YpO1xuXHQgICAgICAgIHRoaXMuX2xmY2YuY29ubmVjdCh0aGlzLm91dHB1dCk7XG5cdCAgICAgICAgdGhpcy5fcmVhZE9ubHkoW1xuXHQgICAgICAgICAgICAncmVzb25hbmNlJyxcblx0ICAgICAgICAgICAgJ2RhbXBlbmluZydcblx0ICAgICAgICBdKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlBsdWNrU3ludGgsIFRvbmUuSW5zdHJ1bWVudCk7XG5cdCAgICAvKipcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAY29uc3Rcblx0XHQgKiAgQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuUGx1Y2tTeW50aC5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnYXR0YWNrTm9pc2UnOiAxLFxuXHQgICAgICAgICdkYW1wZW5pbmcnOiA0MDAwLFxuXHQgICAgICAgICdyZXNvbmFuY2UnOiAwLjdcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVHJpZ2dlciB0aGUgbm90ZS5cblx0XHQgKiAgQHBhcmFtIHtGcmVxdWVuY3l9IG5vdGUgVGhlIG5vdGUgdG8gdHJpZ2dlci5cblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBbdGltZT1ub3ddIFdoZW4gdGhlIG5vdGUgc2hvdWxkIGJlIHRyaWdnZXJlZC5cblx0XHQgKiAgQHJldHVybnMge1RvbmUuUGx1Y2tTeW50aH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QbHVja1N5bnRoLnByb3RvdHlwZS50cmlnZ2VyQXR0YWNrID0gZnVuY3Rpb24gKG5vdGUsIHRpbWUpIHtcblx0ICAgICAgICBub3RlID0gdGhpcy50b0ZyZXF1ZW5jeShub3RlKTtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdmFyIGRlbGF5QW1vdW50ID0gMSAvIG5vdGU7XG5cdCAgICAgICAgdGhpcy5fbGZjZi5kZWxheVRpbWUuc2V0VmFsdWVBdFRpbWUoZGVsYXlBbW91bnQsIHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX25vaXNlLnN0YXJ0KHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX25vaXNlLnN0b3AodGltZSArIGRlbGF5QW1vdW50ICogdGhpcy5hdHRhY2tOb2lzZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIENsZWFuIHVwLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5QbHVja1N5bnRofSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBsdWNrU3ludGgucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5JbnN0cnVtZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fbm9pc2UuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2xmY2YuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX25vaXNlID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9sZmNmID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl93cml0YWJsZShbXG5cdCAgICAgICAgICAgICdyZXNvbmFuY2UnLFxuXHQgICAgICAgICAgICAnZGFtcGVuaW5nJ1xuXHQgICAgICAgIF0pO1xuXHQgICAgICAgIHRoaXMuZGFtcGVuaW5nID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnJlc29uYW5jZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuUGx1Y2tTeW50aDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBUb25lLlBvbHlTeW50aCBoYW5kbGVzIHZvaWNlIGNyZWF0aW9uIGFuZCBhbGxvY2F0aW9uIGZvciBhbnlcblx0XHQgKiAgICAgICAgICBpbnN0cnVtZW50cyBwYXNzZWQgaW4gYXMgdGhlIHNlY29uZCBwYXJhbXRlci4gUG9seVN5bnRoIGlzXG5cdFx0ICogICAgICAgICAgbm90IGEgc3ludGhlc2l6ZXIgYnkgaXRzZWxmLCBpdCBtZXJlbHkgbWFuYWdlcyB2b2ljZXMgb2Zcblx0XHQgKiAgICAgICAgICBvbmUgb2YgdGhlIG90aGVyIHR5cGVzIG9mIHN5bnRocywgYWxsb3dpbmcgYW55IG9mIHRoZVxuXHRcdCAqICAgICAgICAgIG1vbm9waG9uaWMgc3ludGhlc2l6ZXJzIHRvIGJlIHBvbHlwaG9uaWMuXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkluc3RydW1lbnR9XG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gW3BvbHlwaG9ueT00XSBUaGUgbnVtYmVyIG9mIHZvaWNlcyB0byBjcmVhdGVcblx0XHQgKiAgQHBhcmFtIHtmdW5jdGlvbn0gW3ZvaWNlPVRvbmUuU3ludGhdIFRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgdm9pY2VzXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXMgVG9uZS5TeW50aCBieSBkZWZhdWx0LlxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vYSBwb2x5c3ludGggY29tcG9zZWQgb2YgNiBWb2ljZXMgb2YgU3ludGhcblx0XHQgKiB2YXIgc3ludGggPSBuZXcgVG9uZS5Qb2x5U3ludGgoNiwgVG9uZS5TeW50aCkudG9NYXN0ZXIoKTtcblx0XHQgKiAvL3NldCB0aGUgYXR0cmlidXRlcyB1c2luZyB0aGUgc2V0IGludGVyZmFjZVxuXHRcdCAqIHN5bnRoLnNldChcImRldHVuZVwiLCAtMTIwMCk7XG5cdFx0ICogLy9wbGF5IGEgY2hvcmRcblx0XHQgKiBzeW50aC50cmlnZ2VyQXR0YWNrUmVsZWFzZShbXCJDNFwiLCBcIkU0XCIsIFwiQTRcIl0sIFwiNG5cIik7XG5cdFx0ICovXG5cdCAgICBUb25lLlBvbHlTeW50aCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICdwb2x5cGhvbnknLFxuXHQgICAgICAgICAgICAndm9pY2UnXG5cdCAgICAgICAgXSwgVG9uZS5Qb2x5U3ludGgpO1xuXHQgICAgICAgIFRvbmUuSW5zdHJ1bWVudC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRBcmcob3B0aW9ucywgVG9uZS5JbnN0cnVtZW50LmRlZmF1bHRzKTtcblx0ICAgICAgICAvL21heCBwb2x5cGhvbnlcblx0ICAgICAgICBvcHRpb25zLnBvbHlwaG9ueSA9IE1hdGgubWluKFRvbmUuUG9seVN5bnRoLk1BWF9QT0xZUEhPTlksIG9wdGlvbnMucG9seXBob255KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgYXJyYXkgb2Ygdm9pY2VzXG5cdFx0XHQgKiAgQHR5cGUge0FycmF5fVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy52b2ljZXMgPSBuZXcgQXJyYXkob3B0aW9ucy5wb2x5cGhvbnkpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBxdWV1ZSBvZiB2b2ljZXMgd2l0aCBkYXRhIGFib3V0IGxhc3QgdHJpZ2dlclxuXHRcdFx0ICogIGFuZCB0aGUgdHJpZ2dlcmVkIG5vdGVcblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtBcnJheX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3RyaWdnZXJzID0gbmV3IEFycmF5KG9wdGlvbnMucG9seXBob255KTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZGV0dW5lIGluIGNlbnRzXG5cdFx0XHQgKiAgQHR5cGUge0NlbnRzfVxuXHRcdFx0ICogIEBzaWduYWxcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gbmV3IFRvbmUuU2lnbmFsKG9wdGlvbnMuZGV0dW5lLCBUb25lLlR5cGUuQ2VudHMpO1xuXHQgICAgICAgIHRoaXMuX3JlYWRPbmx5KCdkZXR1bmUnKTtcblx0ICAgICAgICAvL2NyZWF0ZSB0aGUgdm9pY2VzXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLnBvbHlwaG9ueTsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciB2ID0gbmV3IG9wdGlvbnMudm9pY2UoYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pO1xuXHQgICAgICAgICAgICBpZiAoISh2IGluc3RhbmNlb2YgVG9uZS5Nb25vcGhvbmljKSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTeW50aCBjb25zdHJ1Y3RvciBtdXN0IGJlIGluc3RhbmNlIG9mIFRvbmUuTW9ub3Bob25pYycpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMudm9pY2VzW2ldID0gdjtcblx0ICAgICAgICAgICAgdi5jb25uZWN0KHRoaXMub3V0cHV0KTtcblx0ICAgICAgICAgICAgaWYgKHYuaGFzT3duUHJvcGVydHkoJ2RldHVuZScpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmRldHVuZS5jb25uZWN0KHYuZGV0dW5lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLl90cmlnZ2Vyc1tpXSA9IHtcblx0ICAgICAgICAgICAgICAgIHJlbGVhc2U6IC0xLFxuXHQgICAgICAgICAgICAgICAgbm90ZTogbnVsbCxcblx0ICAgICAgICAgICAgICAgIHZvaWNlOiB2XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuUG9seVN5bnRoLCBUb25lLkluc3RydW1lbnQpO1xuXHQgICAgLyoqXG5cdFx0ICogIHRoZSBkZWZhdWx0c1xuXHRcdCAqICBAY29uc3Rcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Qb2x5U3ludGguZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ3BvbHlwaG9ueSc6IDQsXG5cdCAgICAgICAgJ3ZvbHVtZSc6IDAsXG5cdCAgICAgICAgJ2RldHVuZSc6IDAsXG5cdCAgICAgICAgJ3ZvaWNlJzogVG9uZS5TeW50aFxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBUcmlnZ2VyIHRoZSBhdHRhY2sgcG9ydGlvbiBvZiB0aGUgbm90ZVxuXHRcdCAqICBAcGFyYW0gIHtGcmVxdWVuY3l8QXJyYXl9IG5vdGVzIFRoZSBub3RlcyB0byBwbGF5LiBBY2NlcHRzIGEgc2luZ2xlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRnJlcXVlbmN5IG9yIGFuIGFycmF5IG9mIGZyZXF1ZW5jaWVzLlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbdGltZT1ub3ddICBUaGUgc3RhcnQgdGltZSBvZiB0aGUgbm90ZS5cblx0XHQgKiAgQHBhcmFtIHtudW1iZXJ9IFt2ZWxvY2l0eT0xXSBUaGUgdmVsb2NpdHkgb2YgdGhlIG5vdGUuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlBvbHlTeW50aH0gdGhpc1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vdHJpZ2dlciBhIGNob3JkIGltbWVkaWF0ZWx5IHdpdGggYSB2ZWxvY2l0eSBvZiAwLjJcblx0XHQgKiBwb2x5LnRyaWdnZXJBdHRhY2soW1wiQWIzXCIsIFwiQzRcIiwgXCJGNVwiXSwgdW5kZWZpbmVkLCAwLjIpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Qb2x5U3ludGgucHJvdG90eXBlLnRyaWdnZXJBdHRhY2sgPSBmdW5jdGlvbiAobm90ZXMsIHRpbWUsIHZlbG9jaXR5KSB7XG5cdCAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG5vdGVzKSkge1xuXHQgICAgICAgICAgICBub3RlcyA9IFtub3Rlc107XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vdGVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciB2YWwgPSBub3Rlc1tpXTtcblx0ICAgICAgICAgICAgLy90cmlnZ2VyIHRoZSBvbGRlc3Qgdm9pY2Vcblx0ICAgICAgICAgICAgdmFyIG9sZGVzdCA9IHRoaXMuX3RyaWdnZXJzWzBdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHRoaXMuX3RyaWdnZXJzLmxlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHJpZ2dlcnNbal0ucmVsZWFzZSA8IG9sZGVzdC5yZWxlYXNlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgb2xkZXN0ID0gdGhpcy5fdHJpZ2dlcnNbal07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgb2xkZXN0LnJlbGVhc2UgPSBJbmZpbml0eTtcblx0ICAgICAgICAgICAgb2xkZXN0Lm5vdGUgPSBKU09OLnN0cmluZ2lmeSh2YWwpO1xuXHQgICAgICAgICAgICBvbGRlc3Qudm9pY2UudHJpZ2dlckF0dGFjayh2YWwsIHRpbWUsIHZlbG9jaXR5KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRyaWdnZXIgdGhlIGF0dGFjayBhbmQgcmVsZWFzZSBhZnRlciB0aGUgc3BlY2lmaWVkIGR1cmF0aW9uXG5cdFx0ICpcblx0XHQgKiAgQHBhcmFtICB7RnJlcXVlbmN5fEFycmF5fSBub3RlcyBUaGUgbm90ZXMgdG8gcGxheS4gQWNjZXB0cyBhIHNpbmdsZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZyZXF1ZW5jeSBvciBhbiBhcnJheSBvZiBmcmVxdWVuY2llcy5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gZHVyYXRpb24gdGhlIGR1cmF0aW9uIG9mIHRoZSBub3RlXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IFt0aW1lPW5vd10gICAgIGlmIG5vIHRpbWUgaXMgZ2l2ZW4sIGRlZmF1bHRzIHRvIG5vd1xuXHRcdCAqICBAcGFyYW0gIHtudW1iZXJ9IFt2ZWxvY2l0eT0xXSB0aGUgdmVsb2NpdHkgb2YgdGhlIGF0dGFjayAoMC0xKVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Qb2x5U3ludGh9IHRoaXNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL3RyaWdnZXIgYSBjaG9yZCBmb3IgYSBkdXJhdGlvbiBvZiBhIGhhbGYgbm90ZVxuXHRcdCAqIHBvbHkudHJpZ2dlckF0dGFja1JlbGVhc2UoW1wiRWIzXCIsIFwiRzRcIiwgXCJDNVwiXSwgXCIyblwiKTtcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2NhbiBwYXNzIGluIGFuIGFycmF5IG9mIGR1cmF0aW9ucyBhcyB3ZWxsXG5cdFx0ICogcG9seS50cmlnZ2VyQXR0YWNrUmVsZWFzZShbXCJFYjNcIiwgXCJHNFwiLCBcIkM1XCJdLCBbXCIyblwiLCBcIjRuXCIsIFwiNG5cIl0pO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Qb2x5U3ludGgucHJvdG90eXBlLnRyaWdnZXJBdHRhY2tSZWxlYXNlID0gZnVuY3Rpb24gKG5vdGVzLCBkdXJhdGlvbiwgdGltZSwgdmVsb2NpdHkpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgdGhpcy50cmlnZ2VyQXR0YWNrKG5vdGVzLCB0aW1lLCB2ZWxvY2l0eSk7XG5cdCAgICAgICAgaWYgKFRvbmUuaXNBcnJheShkdXJhdGlvbikgJiYgVG9uZS5pc0FycmF5KG5vdGVzKSkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vdGVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZCA9IGR1cmF0aW9uW01hdGgubWluKGksIGR1cmF0aW9uLmxlbmd0aCAtIDEpXTtcblx0ICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlclJlbGVhc2Uobm90ZXNbaV0sIHRpbWUgKyB0aGlzLnRvU2Vjb25kcyhkKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLnRyaWdnZXJSZWxlYXNlKG5vdGVzLCB0aW1lICsgdGhpcy50b1NlY29uZHMoZHVyYXRpb24pKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRyaWdnZXIgdGhlIHJlbGVhc2Ugb2YgdGhlIG5vdGUuIFVubGlrZSBtb25vcGhvbmljIGluc3RydW1lbnRzLFxuXHRcdCAqICBhIG5vdGUgKG9yIGFycmF5IG9mIG5vdGVzKSBuZWVkcyB0byBiZSBwYXNzZWQgaW4gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LlxuXHRcdCAqICBAcGFyYW0gIHtGcmVxdWVuY3l8QXJyYXl9IG5vdGVzIFRoZSBub3RlcyB0byBwbGF5LiBBY2NlcHRzIGEgc2luZ2xlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRnJlcXVlbmN5IG9yIGFuIGFycmF5IG9mIGZyZXF1ZW5jaWVzLlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbdGltZT1ub3ddICBXaGVuIHRoZSByZWxlYXNlIHdpbGwgYmUgdHJpZ2dlcmVkLlxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5Qb2x5U3ludGh9IHRoaXNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiBwb2x5LnRyaWdnZXJSZWxlYXNlKFtcIkFiM1wiLCBcIkM0XCIsIFwiRjVcIl0sIFwiKzJuXCIpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Qb2x5U3ludGgucHJvdG90eXBlLnRyaWdnZXJSZWxlYXNlID0gZnVuY3Rpb24gKG5vdGVzLCB0aW1lKSB7XG5cdCAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG5vdGVzKSkge1xuXHQgICAgICAgICAgICBub3RlcyA9IFtub3Rlc107XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vdGVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIC8vZ2V0IHRoZSB2b2ljZVxuXHQgICAgICAgICAgICB2YXIgc3RyaW5naWZpZWQgPSBKU09OLnN0cmluZ2lmeShub3Rlc1tpXSk7XG5cdCAgICAgICAgICAgIGZvciAodmFyIHYgPSAwOyB2IDwgdGhpcy5fdHJpZ2dlcnMubGVuZ3RoOyB2KyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBkZXNjID0gdGhpcy5fdHJpZ2dlcnNbdl07XG5cdCAgICAgICAgICAgICAgICBpZiAoZGVzYy5ub3RlID09PSBzdHJpbmdpZmllZCAmJiBkZXNjLnJlbGVhc2UgPiB0aW1lKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZGVzYy52b2ljZS50cmlnZ2VyUmVsZWFzZSh0aW1lKTtcblx0ICAgICAgICAgICAgICAgICAgICBkZXNjLnJlbGVhc2UgPSB0aW1lO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIFN5bmMgdGhlIGluc3RydW1lbnQgdG8gdGhlIFRyYW5zcG9ydC4gQWxsIHN1YnNlcXVlbnQgY2FsbHMgb2Zcblx0XHQgKiBbdHJpZ2dlckF0dGFja10oI3RyaWdnZXJhdHRhY2spIGFuZCBbdHJpZ2dlclJlbGVhc2VdKCN0cmlnZ2VycmVsZWFzZSlcblx0XHQgKiB3aWxsIGJlIHNjaGVkdWxlZCBhbG9uZyB0aGUgdHJhbnNwb3J0LlxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogc3ludGguc3luYygpXG5cdFx0ICogLy9zY2hlZHVsZSAzIG5vdGVzIHdoZW4gdGhlIHRyYW5zcG9ydCBmaXJzdCBzdGFydHNcblx0XHQgKiBzeW50aC50cmlnZ2VyQXR0YWNrUmVsZWFzZSgnOG4nLCAwKVxuXHRcdCAqIHN5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKCc4bicsICc4bicpXG5cdFx0ICogc3ludGgudHJpZ2dlckF0dGFja1JlbGVhc2UoJzhuJywgJzRuJylcblx0XHQgKiAvL3N0YXJ0IHRoZSB0cmFuc3BvcnQgdG8gaGVhciB0aGUgbm90ZXNcblx0XHQgKiBUcmFuc3BvcnQuc3RhcnQoKVxuXHRcdCAqIEByZXR1cm5zIHtUb25lLkluc3RydW1lbnR9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUG9seVN5bnRoLnByb3RvdHlwZS5zeW5jID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX3N5bmNNZXRob2QoJ3RyaWdnZXJBdHRhY2snLCAxKTtcblx0ICAgICAgICB0aGlzLl9zeW5jTWV0aG9kKCd0cmlnZ2VyUmVsZWFzZScsIDEpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTZXQgYSBtZW1iZXIvYXR0cmlidXRlIG9mIHRoZSB2b2ljZXMuXG5cdFx0ICogIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30gcGFyYW1zXG5cdFx0ICogIEBwYXJhbSB7bnVtYmVyPX0gdmFsdWVcblx0XHQgKiAgQHBhcmFtIHtUaW1lPX0gcmFtcFRpbWVcblx0XHQgKiAgQHJldHVybnMge1RvbmUuUG9seVN5bnRofSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogcG9seS5zZXQoe1xuXHRcdCAqIFx0XCJmaWx0ZXJcIiA6IHtcblx0XHQgKiBcdFx0XCJ0eXBlXCIgOiBcImhpZ2hwYXNzXCJcblx0XHQgKiBcdH0sXG5cdFx0ICogXHRcImVudmVsb3BlXCIgOiB7XG5cdFx0ICogXHRcdFwiYXR0YWNrXCIgOiAwLjI1XG5cdFx0ICogXHR9XG5cdFx0ICogfSk7XG5cdFx0ICovXG5cdCAgICBUb25lLlBvbHlTeW50aC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHBhcmFtcywgdmFsdWUsIHJhbXBUaW1lKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnZvaWNlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB0aGlzLnZvaWNlc1tpXS5zZXQocGFyYW1zLCB2YWx1ZSwgcmFtcFRpbWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgR2V0IHRoZSBzeW50aCdzIGF0dHJpYnV0ZXMuIEdpdmVuIG5vIGFyZ3VtZW50cyBnZXRcblx0XHQgKiAgd2lsbCByZXR1cm4gYWxsIGF2YWlsYWJsZSBvYmplY3QgcHJvcGVydGllcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZ1xuXHRcdCAqICB2YWx1ZXMuIFBhc3MgaW4gYSBzaW5nbGUgYXR0cmlidXRlIHRvIHJldHJpZXZlIG9yIGFuIGFycmF5XG5cdFx0ICogIG9mIGF0dHJpYnV0ZXMuIFRoZSBhdHRyaWJ1dGUgc3RyaW5ncyBjYW4gYWxzbyBpbmNsdWRlIGEgXCIuXCJcblx0XHQgKiAgdG8gYWNjZXNzIGRlZXBlciBwcm9wZXJ0aWVzLlxuXHRcdCAqICBAcGFyYW0ge0FycmF5PX0gcGFyYW1zIHRoZSBwYXJhbWV0ZXJzIHRvIGdldCwgb3RoZXJ3aXNlIHdpbGwgcmV0dXJuXG5cdFx0ICogIFx0XHRcdFx0XHQgICBhbGwgYXZhaWxhYmxlLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5Qb2x5U3ludGgucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy52b2ljZXNbMF0uZ2V0KHBhcmFtcyk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRyaWdnZXIgdGhlIHJlbGVhc2UgcG9ydGlvbiBvZiBhbGwgdGhlIGN1cnJlbnRseSBhY3RpdmUgdm9pY2VzLlxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IFt0aW1lPW5vd10gV2hlbiB0aGUgbm90ZXMgc2hvdWxkIGJlIHJlbGVhc2VkLlxuXHRcdCAqICBAcmV0dXJuIHtUb25lLlBvbHlTeW50aH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Qb2x5U3ludGgucHJvdG90eXBlLnJlbGVhc2VBbGwgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3RyaWdnZXJzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBkZXNjID0gdGhpcy5fdHJpZ2dlcnNbaV07XG5cdCAgICAgICAgICAgIGlmIChkZXNjLnJlbGVhc2UgPiB0aW1lKSB7XG5cdCAgICAgICAgICAgICAgICBkZXNjLnJlbGVhc2UgPSB0aW1lO1xuXHQgICAgICAgICAgICAgICAgZGVzYy52b2ljZS50cmlnZ2VyUmVsZWFzZSh0aW1lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xlYW4gdXAuXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlBvbHlTeW50aH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Qb2x5U3ludGgucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5JbnN0cnVtZW50LnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnZvaWNlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB0aGlzLnZvaWNlc1tpXS5kaXNwb3NlKCk7XG5cdCAgICAgICAgICAgIHRoaXMudm9pY2VzW2ldID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoJ2RldHVuZScpO1xuXHQgICAgICAgIHRoaXMuZGV0dW5lLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmRldHVuZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy52b2ljZXMgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX3RyaWdnZXJzID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVGhlIG1heGltdW0gbnVtYmVyIG9mIG5vdGVzIHRoYXQgY2FuIGJlIGFsbG9jYXRlZFxuXHRcdCAqICB0byBhIHBvbHlzeW50aC5cblx0XHQgKiAgQHR5cGUgIHtOdW1iZXJ9XG5cdFx0ICogIEBzdGF0aWNcblx0XHQgKi9cblx0ICAgIFRvbmUuUG9seVN5bnRoLk1BWF9QT0xZUEhPTlkgPSAyMDtcblx0ICAgIHJldHVybiBUb25lLlBvbHlTeW50aDtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgLyoqXG5cdFx0ICogQGNsYXNzIEF1dG9tYXRpY2FsbHkgaW50ZXJwb2xhdGVzIGJldHdlZW4gYSBzZXQgb2YgcGl0Y2hlZCBzYW1wbGVzLiBQYXNzIGluIGFuIG9iamVjdCB3aGljaCBtYXBzIHRoZSBub3RlJ3MgcGl0Y2ggb3IgbWlkaSB2YWx1ZSB0byB0aGUgdXJsLCB0aGVuIHlvdSBjYW4gdHJpZ2dlciB0aGUgYXR0YWNrIGFuZCByZWxlYXNlIG9mIHRoYXQgbm90ZSBsaWtlIG90aGVyIGluc3RydW1lbnRzLiBCeSBhdXRvbWF0aWNhbGx5IHJlcGl0Y2hpbmcgdGhlIHNhbXBsZXMsIGl0IGlzIHBvc3NpYmxlIHRvIHBsYXkgcGl0Y2hlcyB3aGljaCB3ZXJlIG5vdCBleHBsaWNpdGx5IGluY2x1ZGVkIHdoaWNoIGNhbiBzYXZlIGxvYWRpbmcgdGltZS5cblx0XHQgKiAgICAgICAgRm9yIHNhbXBsZSBvciBidWZmZXIgcGxheWJhY2sgd2hlcmUgcmVwaXRjaGluZyBpcyBub3QgbmVjZXNzYXJ5LCB1c2UgW1RvbmUuUGxheWVyXShodHRwczovL3RvbmVqcy5naXRodWIuaW8vZG9jcy9QbGF5ZXIpLlxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0fSBzYW1wbGVzIEFuIG9iamVjdCBvZiBzYW1wbGVzIG1hcHBpbmcgZWl0aGVyIE1pZGlcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICBOb3RlIE51bWJlcnMgb3IgU2NpZW50aWZpYyBQaXRjaCBOb3RhdGlvblxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSB1cmwgb2YgdGhhdCBzYW1wbGUuXG5cdFx0ICogQHBhcmFtIHtGdW5jdGlvbj19IG9ubG9hZCBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gYWxsIG9mIHRoZSBzYW1wbGVzIGFyZSBsb2FkZWQuXG5cdFx0ICogQHBhcmFtIHtTdHJpbmc9fSBiYXNlVXJsIFRoZSByb290IFVSTCBvZiBhbGwgb2YgdGhlIHNhbXBsZXMsIHdoaWNoIGlzIHByZXBlbmRlZCB0byBhbGwgdGhlIFVSTHMuXG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiB2YXIgc2FtcGxlciA9IG5ldyBUb25lLlNhbXBsZXIoe1xuXHRcdCAqIFx0XCJDM1wiIDogXCJwYXRoL3RvL0MzLm1wM1wiLFxuXHRcdCAqIFx0XCJEIzNcIiA6IFwicGF0aC90by9Ec2hhcnAzLm1wM1wiLFxuXHRcdCAqIFx0XCJGIzNcIiA6IFwicGF0aC90by9Gc2hhcnAzLm1wM1wiLFxuXHRcdCAqIFx0XCJBM1wiIDogXCJwYXRoL3RvL0EzLm1wM1wiLFxuXHRcdCAqIH0sIGZ1bmN0aW9uKCl7XG5cdFx0ICogXHQvL3NhbXBsZXIgd2lsbCByZXBpdGNoIHRoZSBjbG9zZXN0IHNhbXBsZVxuXHRcdCAqIFx0c2FtcGxlci50cmlnZ2VyQXR0YWNrKFwiRDNcIilcblx0XHQgKiB9KVxuXHRcdCAqIEBleHRlbmRzIHtUb25lLkluc3RydW1lbnR9XG5cdFx0ICovXG5cdCAgICBUb25lLlNhbXBsZXIgPSBmdW5jdGlvbiAodXJscykge1xuXHQgICAgICAgIC8vIHNoaWZ0IGFyZ3VtZW50cyBvdmVyIG9uZS4gVGhvc2UgYXJlIHRoZSByZW1haW5kZXIgb2YgdGhlIG9wdGlvbnNcblx0ICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdCAgICAgICAgYXJncy5zaGlmdCgpO1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmdzLCBbXG5cdCAgICAgICAgICAgICdvbmxvYWQnLFxuXHQgICAgICAgICAgICAnYmFzZVVybCdcblx0ICAgICAgICBdLCBUb25lLlNhbXBsZXIpO1xuXHQgICAgICAgIFRvbmUuSW5zdHJ1bWVudC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICAgIHZhciB1cmxNYXAgPSB7fTtcblx0ICAgICAgICBmb3IgKHZhciBub3RlIGluIHVybHMpIHtcblx0ICAgICAgICAgICAgaWYgKFRvbmUuaXNOb3RlKG5vdGUpKSB7XG5cdCAgICAgICAgICAgICAgICAvL2NvbnZlcnQgdGhlIG5vdGUgbmFtZSB0byBNSURJXG5cdCAgICAgICAgICAgICAgICB2YXIgbWlkID0gVG9uZS5GcmVxdWVuY3kobm90ZSkudG9NaWRpKCk7XG5cdCAgICAgICAgICAgICAgICB1cmxNYXBbbWlkXSA9IHVybHNbbm90ZV07XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKHBhcnNlRmxvYXQobm90ZSkpKSB7XG5cdCAgICAgICAgICAgICAgICAvL290aGVyd2lzZSBpZiBpdCdzIG51bWJlcnMgYXNzdW1lIGl0J3MgbWlkaVxuXHQgICAgICAgICAgICAgICAgdXJsTWFwW25vdGVdID0gdXJsc1tub3RlXTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVG9uZS5TYW1wbGVyOiB1cmwga2V5cyBtdXN0IGJlIHRoZSBub3RlXFwncyBwaXRjaCcpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIHN0b3JlZCBhbmQgbG9hZGVkIGJ1ZmZlcnNcblx0XHRcdCAqIEB0eXBlIHtUb25lLkJ1ZmZlcnN9XG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYnVmZmVycyA9IG5ldyBUb25lLkJ1ZmZlcnModXJsTWFwLCBvcHRpb25zLm9ubG9hZCwgb3B0aW9ucy5iYXNlVXJsKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSBvYmplY3Qgb2YgYWxsIGN1cnJlbnRseSBwbGF5aW5nIEJ1ZmZlclNvdXJjZXNcblx0XHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fYWN0aXZlU291cmNlcyA9IHt9O1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIGVudmVsb3BlIGFwcGxpZWQgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgc2FtcGxlLlxuXHRcdFx0ICogQHR5cGUge1RpbWV9XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmF0dGFjayA9IG9wdGlvbnMuYXR0YWNrO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIGVudmVsb3BlIGFwcGxpZWQgdG8gdGhlIGVuZCBvZiB0aGUgZW52ZWxvcGUuXG5cdFx0XHQgKiBAdHlwZSB7VGltZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMucmVsZWFzZSA9IG9wdGlvbnMucmVsZWFzZTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlNhbXBsZXIsIFRvbmUuSW5zdHJ1bWVudCk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgZGVmYXVsdHNcblx0XHQgKiBAY29uc3Rcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5TYW1wbGVyLmRlZmF1bHRzID0ge1xuXHQgICAgICAgIGF0dGFjazogMCxcblx0ICAgICAgICByZWxlYXNlOiAwLjEsXG5cdCAgICAgICAgb25sb2FkOiBUb25lLm5vT3AsXG5cdCAgICAgICAgYmFzZVVybDogJydcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIGluIHN0ZXBzIGJldHdlZW4gdGhlIGdpdmVuIG1pZGkgbm90ZSBhdCB0aGUgY2xvc2V0cyBzYW1wbGUuXG5cdFx0ICogQHBhcmFtICB7TWlkaX0gbWlkaVxuXHRcdCAqIEByZXR1cm4ge0ludGVydmFsfVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLlNhbXBsZXIucHJvdG90eXBlLl9maW5kQ2xvc2VzdCA9IGZ1bmN0aW9uIChtaWRpKSB7XG5cdCAgICAgICAgLy9zZWFyY2hlcyB3aXRoaW4gOCBvY3RhdmVzIG9mIHRoZSBnaXZlbiBtaWRpIG5vdGVcblx0ICAgICAgICB2YXIgTUFYX0lOVEVSVkFMID0gOTY7XG5cdCAgICAgICAgdmFyIGludGVydmFsID0gMDtcblx0ICAgICAgICB3aGlsZSAoaW50ZXJ2YWwgPCBNQVhfSU5URVJWQUwpIHtcblx0ICAgICAgICAgICAgLy8gY2hlY2sgYWJvdmUgYW5kIGJlbG93XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9idWZmZXJzLmhhcyhtaWRpICsgaW50ZXJ2YWwpKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gLWludGVydmFsO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2J1ZmZlcnMuaGFzKG1pZGkgLSBpbnRlcnZhbCkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnZhbDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpbnRlcnZhbCsrO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBAcGFyYW0gIHtGcmVxdWVuY3l9IG5vdGUgICAgIFRoZSBub3RlIHRvIHBsYXlcblx0XHQgKiBAcGFyYW0gIHtUaW1lPX0gdGltZSAgICAgV2hlbiB0byBwbGF5IHRoZSBub3RlXG5cdFx0ICogQHBhcmFtICB7Tm9ybWFsUmFuZ2U9fSB2ZWxvY2l0eSBUaGUgdmVsb2NpdHkgdG8gcGxheSB0aGUgc2FtcGxlIGJhY2suXG5cdFx0ICogQHJldHVybiB7VG9uZS5TYW1wbGVyfSAgICAgICAgICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlNhbXBsZXIucHJvdG90eXBlLnRyaWdnZXJBdHRhY2sgPSBmdW5jdGlvbiAobm90ZSwgdGltZSwgdmVsb2NpdHkpIHtcblx0ICAgICAgICB2YXIgbWlkaSA9IFRvbmUuRnJlcXVlbmN5KG5vdGUpLnRvTWlkaSgpO1xuXHQgICAgICAgIC8vIGZpbmQgdGhlIGNsb3Nlc3Qgbm90ZSBwaXRjaFxuXHQgICAgICAgIHZhciBkaWZmZXJlbmNlID0gdGhpcy5fZmluZENsb3Nlc3QobWlkaSk7XG5cdCAgICAgICAgaWYgKGRpZmZlcmVuY2UgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb3Nlc3ROb3RlID0gbWlkaSAtIGRpZmZlcmVuY2U7XG5cdCAgICAgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLl9idWZmZXJzLmdldChjbG9zZXN0Tm90ZSk7XG5cdCAgICAgICAgICAgIC8vIHBsYXkgdGhhdCBub3RlXG5cdCAgICAgICAgICAgIHZhciBzb3VyY2UgPSBuZXcgVG9uZS5CdWZmZXJTb3VyY2Uoe1xuXHQgICAgICAgICAgICAgICAgJ2J1ZmZlcic6IGJ1ZmZlcixcblx0ICAgICAgICAgICAgICAgICdwbGF5YmFja1JhdGUnOiBUb25lLmludGVydmFsVG9GcmVxdWVuY3lSYXRpbyhkaWZmZXJlbmNlKSxcblx0ICAgICAgICAgICAgICAgICdmYWRlSW4nOiB0aGlzLmF0dGFjayxcblx0ICAgICAgICAgICAgICAgICdmYWRlT3V0JzogdGhpcy5yZWxlYXNlLFxuXHQgICAgICAgICAgICAgICAgJ2N1cnZlJzogJ2V4cG9uZW50aWFsJ1xuXHQgICAgICAgICAgICB9KS5jb25uZWN0KHRoaXMub3V0cHV0KTtcblx0ICAgICAgICAgICAgc291cmNlLnN0YXJ0KHRpbWUsIDAsIGJ1ZmZlci5kdXJhdGlvbiwgdmVsb2NpdHkpO1xuXHQgICAgICAgICAgICAvLyBhZGQgaXQgdG8gdGhlIGFjdGl2ZSBzb3VyY2VzXG5cdCAgICAgICAgICAgIGlmICghVG9uZS5pc0FycmF5KHRoaXMuX2FjdGl2ZVNvdXJjZXNbbWlkaV0pKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVTb3VyY2VzW21pZGldID0gW107XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5fYWN0aXZlU291cmNlc1ttaWRpXS5wdXNoKHtcblx0ICAgICAgICAgICAgICAgIG5vdGU6IG1pZGksXG5cdCAgICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogQHBhcmFtICB7RnJlcXVlbmN5fSBub3RlICAgICBUaGUgbm90ZSB0byByZWxlYXNlLlxuXHRcdCAqIEBwYXJhbSAge1RpbWU9fSB0aW1lICAgICBcdFdoZW4gdG8gcmVsZWFzZSB0aGUgbm90ZS5cblx0XHQgKiBAcmV0dXJuIHtUb25lLlNhbXBsZXJ9XHR0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlNhbXBsZXIucHJvdG90eXBlLnRyaWdnZXJSZWxlYXNlID0gZnVuY3Rpb24gKG5vdGUsIHRpbWUpIHtcblx0ICAgICAgICB2YXIgbWlkaSA9IFRvbmUuRnJlcXVlbmN5KG5vdGUpLnRvTWlkaSgpO1xuXHQgICAgICAgIC8vIGZpbmQgdGhlIG5vdGVcblx0ICAgICAgICBpZiAodGhpcy5fYWN0aXZlU291cmNlc1ttaWRpXSAmJiB0aGlzLl9hY3RpdmVTb3VyY2VzW21pZGldLmxlbmd0aCkge1xuXHQgICAgICAgICAgICB2YXIgc291cmNlID0gdGhpcy5fYWN0aXZlU291cmNlc1ttaWRpXS5zaGlmdCgpLnNvdXJjZTtcblx0ICAgICAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgICAgICBzb3VyY2Uuc3RvcCh0aW1lICsgdGhpcy5yZWxlYXNlLCB0aGlzLnJlbGVhc2UpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBSZWxlYXNlIGFsbCBjdXJyZW50bHkgYWN0aXZlIG5vdGVzLlxuXHRcdCAqIEBwYXJhbSAge1RpbWU9fSB0aW1lICAgICBcdFdoZW4gdG8gcmVsZWFzZSB0aGUgbm90ZXMuXG5cdFx0ICogQHJldHVybiB7VG9uZS5TYW1wbGVyfVx0dGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5TYW1wbGVyLnByb3RvdHlwZS5yZWxlYXNlQWxsID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgZm9yICh2YXIgbm90ZSBpbiB0aGlzLl9hY3RpdmVTb3VyY2VzKSB7XG5cdCAgICAgICAgICAgIHZhciBzb3VyY2VzID0gdGhpcy5fYWN0aXZlU291cmNlc1tub3RlXTtcblx0ICAgICAgICAgICAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlcy5zaGlmdCgpLnNvdXJjZTtcblx0ICAgICAgICAgICAgICAgIHNvdXJjZS5zdG9wKHRpbWUgKyB0aGlzLnJlbGVhc2UsIHRoaXMucmVsZWFzZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogU3luYyB0aGUgaW5zdHJ1bWVudCB0byB0aGUgVHJhbnNwb3J0LiBBbGwgc3Vic2VxdWVudCBjYWxscyBvZlxuXHRcdCAqIFt0cmlnZ2VyQXR0YWNrXSgjdHJpZ2dlcmF0dGFjaykgYW5kIFt0cmlnZ2VyUmVsZWFzZV0oI3RyaWdnZXJyZWxlYXNlKVxuXHRcdCAqIHdpbGwgYmUgc2NoZWR1bGVkIGFsb25nIHRoZSB0cmFuc3BvcnQuXG5cdFx0ICogQGV4YW1wbGVcblx0XHQgKiBzeW50aC5zeW5jKClcblx0XHQgKiAvL3NjaGVkdWxlIDMgbm90ZXMgd2hlbiB0aGUgdHJhbnNwb3J0IGZpcnN0IHN0YXJ0c1xuXHRcdCAqIHN5bnRoLnRyaWdnZXJBdHRhY2tSZWxlYXNlKCc4bicsIDApXG5cdFx0ICogc3ludGgudHJpZ2dlckF0dGFja1JlbGVhc2UoJzhuJywgJzhuJylcblx0XHQgKiBzeW50aC50cmlnZ2VyQXR0YWNrUmVsZWFzZSgnOG4nLCAnNG4nKVxuXHRcdCAqIC8vc3RhcnQgdGhlIHRyYW5zcG9ydCB0byBoZWFyIHRoZSBub3Rlc1xuXHRcdCAqIFRyYW5zcG9ydC5zdGFydCgpXG5cdFx0ICogQHJldHVybnMge1RvbmUuSW5zdHJ1bWVudH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5TYW1wbGVyLnByb3RvdHlwZS5zeW5jID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuX3N5bmNNZXRob2QoJ3RyaWdnZXJBdHRhY2snLCAxKTtcblx0ICAgICAgICB0aGlzLl9zeW5jTWV0aG9kKCd0cmlnZ2VyUmVsZWFzZScsIDEpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIEludm9rZSB0aGUgYXR0YWNrIHBoYXNlLCB0aGVuIGFmdGVyIHRoZSBkdXJhdGlvbiwgaW52b2tlIHRoZSByZWxlYXNlLlxuXHRcdCAqIEBwYXJhbSAge0ZyZXF1ZW5jeX0gbm90ZSAgICAgVGhlIG5vdGUgdG8gcGxheVxuXHRcdCAqIEBwYXJhbSAge1RpbWV9IGR1cmF0aW9uIFRoZSB0aW1lIHRoZSBub3RlIHNob3VsZCBiZSBoZWxkXG5cdFx0ICogQHBhcmFtICB7VGltZT19IHRpbWUgICAgIFdoZW4gdG8gc3RhcnQgdGhlIGF0dGFja1xuXHRcdCAqIEBwYXJhbSAge05vcm1hbFJhbmdlfSBbdmVsb2NpdHk9MV0gVGhlIHZlbG9jaXR5IG9mIHRoZSBhdHRhY2tcblx0XHQgKiBAcmV0dXJuIHtUb25lLlNhbXBsZXJ9ICAgICAgICAgIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuU2FtcGxlci5wcm90b3R5cGUudHJpZ2dlckF0dGFja1JlbGVhc2UgPSBmdW5jdGlvbiAobm90ZSwgZHVyYXRpb24sIHRpbWUsIHZlbG9jaXR5KSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIGR1cmF0aW9uID0gdGhpcy50b1NlY29uZHMoZHVyYXRpb24pO1xuXHQgICAgICAgIHRoaXMudHJpZ2dlckF0dGFjayhub3RlLCB0aW1lLCB2ZWxvY2l0eSk7XG5cdCAgICAgICAgdGhpcy50cmlnZ2VyUmVsZWFzZShub3RlLCB0aW1lICsgZHVyYXRpb24pO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBBZGQgYSBub3RlIHRvIHRoZSBzYW1wbGVyLlxuXHRcdCAqICBAcGFyYW0gIHtOb3RlfE1pZGl9ICAgbm90ZSAgICAgIFRoZSBidWZmZXIncyBwaXRjaC5cblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfFRvbmUuQnVmZmVyfEF1ZGlvYnVmZmVyfSAgdXJsICBFaXRoZXIgdGhlIHVybCBvZiB0aGUgYnVmZXIsXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYSBidWZmZXIgd2hpY2ggd2lsbCBiZSBhZGRlZFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIGdpdmVuIG5hbWUuXG5cdFx0ICogIEBwYXJhbSAge0Z1bmN0aW9uPX0gIGNhbGxiYWNrICBUaGUgY2FsbGJhY2sgdG8gaW52b2tlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSB1cmwgaXMgbG9hZGVkLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5TYW1wbGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobm90ZSwgdXJsLCBjYWxsYmFjaykge1xuXHQgICAgICAgIGlmIChUb25lLmlzTm90ZShub3RlKSkge1xuXHQgICAgICAgICAgICAvL2NvbnZlcnQgdGhlIG5vdGUgbmFtZSB0byBNSURJXG5cdCAgICAgICAgICAgIHZhciBtaWQgPSBUb25lLkZyZXF1ZW5jeShub3RlKS50b01pZGkoKTtcblx0ICAgICAgICAgICAgdGhpcy5fYnVmZmVycy5hZGQobWlkLCB1cmwsIGNhbGxiYWNrKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKCFpc05hTihwYXJzZUZsb2F0KG5vdGUpKSkge1xuXHQgICAgICAgICAgICAvL290aGVyd2lzZSBpZiBpdCdzIG51bWJlcnMgYXNzdW1lIGl0J3MgbWlkaVxuXHQgICAgICAgICAgICB0aGlzLl9idWZmZXJzLmFkZChub3RlLCB1cmwsIGNhbGxiYWNrKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbmUuU2FtcGxlcjogbm90ZSBtdXN0IGJlIHRoZSBub3RlXFwncyBwaXRjaC4gSW5zdGVhZCBnb3QgJyArIG5vdGUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBJZiB0aGUgYnVmZmVycyBhcmUgbG9hZGVkIG9yIG5vdFxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlNhbXBsZXIjXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XG5cdFx0ICogQG5hbWUgbG9hZGVkXG5cdFx0ICogQHJlYWRPbmx5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5TYW1wbGVyLnByb3RvdHlwZSwgJ2xvYWRlZCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlcnMubG9hZGVkO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogQ2xlYW4gdXBcblx0XHQgKiBAcmV0dXJuIHtUb25lLlNhbXBsZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuU2FtcGxlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLkluc3RydW1lbnQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl9idWZmZXJzLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9idWZmZXJzID0gbnVsbDtcblx0ICAgICAgICBmb3IgKHZhciBtaWRpIGluIHRoaXMuX2FjdGl2ZVNvdXJjZXMpIHtcblx0ICAgICAgICAgICAgdGhpcy5fYWN0aXZlU291cmNlc1ttaWRpXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICAgICAgZXZlbnQuc291cmNlLmRpc3Bvc2UoKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuX2FjdGl2ZVNvdXJjZXMgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlNhbXBsZXI7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIGlmIChUb25lLnN1cHBvcnRlZCkge1xuXHQgICAgICAgIGlmICghT3NjaWxsYXRvck5vZGUucHJvdG90eXBlLnNldFBlcmlvZGljV2F2ZSkge1xuXHQgICAgICAgICAgICBPc2NpbGxhdG9yTm9kZS5wcm90b3R5cGUuc2V0UGVyaW9kaWNXYXZlID0gT3NjaWxsYXRvck5vZGUucHJvdG90eXBlLnNldFdhdmVUYWJsZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCFBdWRpb0NvbnRleHQucHJvdG90eXBlLmNyZWF0ZVBlcmlvZGljV2F2ZSkge1xuXHQgICAgICAgICAgICBBdWRpb0NvbnRleHQucHJvdG90eXBlLmNyZWF0ZVBlcmlvZGljV2F2ZSA9IEF1ZGlvQ29udGV4dC5wcm90b3R5cGUuY3JlYXRlV2F2ZVRhYmxlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzIE1hcHMgYSBOb3JtYWxSYW5nZSBbMCwgMV0gdG8gYW4gQXVkaW9SYW5nZSBbLTEsIDFdLiBcblx0XHQgKiAgICAgICAgIFNlZSBhbHNvIFRvbmUuQXVkaW9Ub0dhaW4uIFxuXHRcdCAqXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLlNpZ25hbEJhc2V9XG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIHZhciBnMmEgPSBuZXcgVG9uZS5HYWluVG9BdWRpbygpO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5HYWluVG9BdWRpbyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlNpZ25hbEJhc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBAdHlwZSB7V2F2ZVNoYXBlck5vZGV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX25vcm0gPSB0aGlzLmlucHV0ID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5XYXZlU2hhcGVyKGZ1bmN0aW9uICh4KSB7XG5cdCAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyh4KSAqIDIgLSAxO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuR2FpblRvQXVkaW8sIFRvbmUuU2lnbmFsQmFzZSk7XG5cdCAgICAvKipcblx0XHQgKiAgY2xlYW4gdXBcblx0XHQgKiAgQHJldHVybnMge1RvbmUuR2FpblRvQXVkaW99IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuR2FpblRvQXVkaW8ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fbm9ybS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fbm9ybSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuR2FpblRvQXVkaW87XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIFxuXHQgICAgLyoqXG5cdFx0ICogIEBjbGFzcyBOb3JtYWxpemUgdGFrZXMgYW4gaW5wdXQgbWluIGFuZCBtYXggYW5kIG1hcHMgaXQgbGluZWFybHkgdG8gTm9ybWFsUmFuZ2UgWzAsMV1cblx0XHQgKlxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5TaWduYWxCYXNlfVxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQHBhcmFtIHtudW1iZXJ9IGlucHV0TWluIHRoZSBtaW4gaW5wdXQgdmFsdWVcblx0XHQgKiAgQHBhcmFtIHtudW1iZXJ9IGlucHV0TWF4IHRoZSBtYXggaW5wdXQgdmFsdWVcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgbm9ybSA9IG5ldyBUb25lLk5vcm1hbGl6ZSgyLCA0KTtcblx0XHQgKiB2YXIgc2lnID0gbmV3IFRvbmUuU2lnbmFsKDMpLmNvbm5lY3Qobm9ybSk7XG5cdFx0ICogLy9vdXRwdXQgb2Ygbm9ybSBpcyAwLjUuIFxuXHRcdCAqL1xuXHQgICAgVG9uZS5Ob3JtYWxpemUgPSBmdW5jdGlvbiAoaW5wdXRNaW4sIGlucHV0TWF4KSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgdGhlIG1pbiBpbnB1dCB2YWx1ZVxuXHRcdFx0ICogIEB0eXBlIHtudW1iZXJ9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2lucHV0TWluID0gVG9uZS5kZWZhdWx0QXJnKGlucHV0TWluLCAwKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICB0aGUgbWF4IGlucHV0IHZhbHVlXG5cdFx0XHQgKiAgQHR5cGUge251bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5faW5wdXRNYXggPSBUb25lLmRlZmF1bHRBcmcoaW5wdXRNYXgsIDEpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHN1YnRyYWN0IHRoZSBtaW4gZnJvbSB0aGUgaW5wdXRcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5BZGR9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N1YiA9IHRoaXMuaW5wdXQgPSBuZXcgVG9uZS5BZGQoMCk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgZGl2aWRlIGJ5IHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGlucHV0IGFuZCBvdXRwdXRcblx0XHRcdCAqICBAdHlwZSB7VG9uZS5NdWx0aXBseX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZGl2ID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5NdWx0aXBseSgxKTtcblx0ICAgICAgICB0aGlzLl9zdWIuY29ubmVjdCh0aGlzLl9kaXYpO1xuXHQgICAgICAgIHRoaXMuX3NldFJhbmdlKCk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5Ob3JtYWxpemUsIFRvbmUuU2lnbmFsQmFzZSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgbWluaW11bSB2YWx1ZSB0aGUgaW5wdXQgc2lnbmFsIHdpbGwgcmVhY2guXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuTm9ybWFsaXplI1xuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQG5hbWUgbWluXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Ob3JtYWxpemUucHJvdG90eXBlLCAnbWluJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRNaW47XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChtaW4pIHtcblx0ICAgICAgICAgICAgdGhpcy5faW5wdXRNaW4gPSBtaW47XG5cdCAgICAgICAgICAgIHRoaXMuX3NldFJhbmdlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgbWF4aW11bSB2YWx1ZSB0aGUgaW5wdXQgc2lnbmFsIHdpbGwgcmVhY2guXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuTm9ybWFsaXplI1xuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQG5hbWUgbWF4XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Ob3JtYWxpemUucHJvdG90eXBlLCAnbWF4Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRNYXg7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChtYXgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faW5wdXRNYXggPSBtYXg7XG5cdCAgICAgICAgICAgIHRoaXMuX3NldFJhbmdlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgc2V0IHRoZSB2YWx1ZXNcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuTm9ybWFsaXplLnByb3RvdHlwZS5fc2V0UmFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5fc3ViLnZhbHVlID0gLXRoaXMuX2lucHV0TWluO1xuXHQgICAgICAgIHRoaXMuX2Rpdi52YWx1ZSA9IDEgLyAodGhpcy5faW5wdXRNYXggLSB0aGlzLl9pbnB1dE1pbik7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIGNsZWFuIHVwXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLk5vcm1hbGl6ZX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Ob3JtYWxpemUucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5TaWduYWxCYXNlLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fc3ViLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9zdWIgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2Rpdi5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZGl2ID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICByZXR1cm4gVG9uZS5Ob3JtYWxpemU7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIC8qKlxuXHRcdCAqIEBjbGFzcyBUb25lLlRyYW5zcG9ydFRpbWVsaW5lU2lnbmFsIGV4dGVuZHMgVG9uZS5TaWduYWwsIGJ1dCBhZGRzIHRoZSBhYmlsaXR5IHRvIHN5bmNocm9uaXplIHRoZSBzaWduYWwgdG8gdGhlIHNpZ25hbCB0byB0aGUgVG9uZS5UcmFuc3BvcnRcblx0XHQgKiBAZXh0ZW5kcyB7VG9uZS5TaWduYWx9XG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydFRpbWVsaW5lU2lnbmFsID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIFRvbmUuU2lnbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgcmVhbCBzaWduYWwgb3V0cHV0XG5cdFx0XHQgKiBAdHlwZSB7VG9uZS5TaWduYWx9XG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5vdXRwdXQgPSB0aGlzLl9vdXRwdXRTaWcgPSBuZXcgVG9uZS5TaWduYWwodGhpcy5faW5pdGlhbFZhbHVlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIEtlZXAgdHJhY2sgb2YgdGhlIGxhc3QgdmFsdWUuIChzbWFsbCBvcHRpbWl6YXRpb24pXG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICogQHR5cGUge051bWJlcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2xhc3RWYWwgPSB0aGlzLnZhbHVlO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIGV2ZW50IGlkIG9mIHRoZSB0aWNrIHVwZGF0ZSBsb29wXG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICogQHR5cGUge051bWJlcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N5bmNlZCA9IFRvbmUuVHJhbnNwb3J0LnNjaGVkdWxlUmVwZWF0KHRoaXMuX29uVGljay5iaW5kKHRoaXMpLCAnMWknKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIEEgYm91bmQgdmVyc2lvbiBvZiB0aGUgYW5jaG9yIHZhbHVlIG1ldGhvZHNcblx0XHRcdCAqIEB0eXBlIHtGdW5jdGlvbn1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9iaW5kQW5jaG9yVmFsdWUgPSB0aGlzLl9hbmNob3JWYWx1ZS5iaW5kKHRoaXMpO1xuXHQgICAgICAgIFRvbmUuVHJhbnNwb3J0Lm9uKCdzdGFydCBzdG9wIHBhdXNlJywgdGhpcy5fYmluZEFuY2hvclZhbHVlKTtcblx0ICAgICAgICB0aGlzLl9ldmVudHMubWVtb3J5ID0gSW5maW5pdHk7XG5cdCAgICB9O1xuXHQgICAgVG9uZS5leHRlbmQoVG9uZS5UcmFuc3BvcnRUaW1lbGluZVNpZ25hbCwgVG9uZS5TaWduYWwpO1xuXHQgICAgLyoqXG5cdFx0ICogQ2FsbGJhY2sgd2hpY2ggaXMgaW52b2tlZCBldmVyeSB0aWNrLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHBhcmFtICB7TnVtYmVyfSB0aW1lXG5cdFx0ICogQHJldHVybiB7VG9uZS5UcmFuc3BvcnRUaW1lbGluZVNpZ25hbH0gICAgICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydFRpbWVsaW5lU2lnbmFsLnByb3RvdHlwZS5fb25UaWNrID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB2YXIgdmFsID0gdGhpcy5nZXRWYWx1ZUF0VGltZShUb25lLlRyYW5zcG9ydC5zZWNvbmRzKTtcblx0ICAgICAgICBpZiAodGhpcy5fbGFzdFZhbCAhPT0gdmFsKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2xhc3RWYWwgPSB2YWw7XG5cdCAgICAgICAgICAgIC8vYXBwcm94aW1hdGUgcmFtcCBjdXJ2ZXMgd2l0aCBsaW5lYXIgcmFtcHNcblx0ICAgICAgICAgICAgdGhpcy5fb3V0cHV0U2lnLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKHZhbCwgdGltZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIEFuY2hvciB0aGUgdmFsdWUgYXQgdGhlIHN0YXJ0IGFuZCBzdG9wIG9mIHRoZSBUcmFuc3BvcnRcblx0XHQgKiBAcGFyYW0gIHtOdW1iZXJ9IHRpbWUgVGhlIHRpbWUgb2YgdGhlIGV2ZW50XG5cdFx0ICogQHJldHVybiB7VG9uZS5UcmFuc3BvcnRUaW1lbGluZVNpZ25hbH0gICAgICB0aGlzXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0VGltZWxpbmVTaWduYWwucHJvdG90eXBlLl9hbmNob3JWYWx1ZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdmFyIHZhbCA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoVG9uZS5UcmFuc3BvcnQuc2Vjb25kcyk7XG5cdCAgICAgICAgdGhpcy5fbGFzdFZhbCA9IHZhbDtcblx0ICAgICAgICB0aGlzLl9vdXRwdXRTaWcuY2FuY2VsU2NoZWR1bGVkVmFsdWVzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX291dHB1dFNpZy5zZXRWYWx1ZUF0VGltZSh2YWwsIHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBHZXQgdGhlIHNjaGVkdWxlZCB2YWx1ZSBhdCB0aGUgZ2l2ZW4gdGltZS4gVGhpcyB3aWxsXG5cdFx0ICogIHJldHVybiB0aGUgdW5jb252ZXJ0ZWQgKHJhdykgdmFsdWUuXG5cdFx0ICogIEBwYXJhbSAge1RyYW5zcG9ydFRpbWV9ICB0aW1lICBUaGUgdGltZSBpbiBzZWNvbmRzLlxuXHRcdCAqICBAcmV0dXJuICB7TnVtYmVyfSAgVGhlIHNjaGVkdWxlZCB2YWx1ZSBhdCB0aGUgZ2l2ZW4gdGltZS5cblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0VGltZWxpbmVTaWduYWwucHJvdG90eXBlLmdldFZhbHVlQXRUaW1lID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gVG9uZS5UcmFuc3BvcnRUaW1lKHRpbWUpO1xuXHQgICAgICAgIHJldHVybiBUb25lLlNpZ25hbC5wcm90b3R5cGUuZ2V0VmFsdWVBdFRpbWUuY2FsbCh0aGlzLCB0aW1lKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBTZXQgdGhlIG91dHB1dCBvZiB0aGUgc2lnbmFsIGF0IHRoZSBnaXZlbiB0aW1lXG5cdFx0ICogQHBhcmFtICB7TnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hhbmdlIHRvIGF0IHRoZSBnaXZlbiB0aW1lXG5cdFx0ICogQHBhcmFtICB7VHJhbnNwb3J0VGltZX0gdGltZSAgVGhlIHRpbWUgdG8gY2hhbmdlIHRoZSBzaWduYWxcblx0XHQgKiBAcmV0dXJuIHtUb25lLlRyYW5zcG9ydFRpbWVsaW5lU2lnbmFsfSAgICAgICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydFRpbWVsaW5lU2lnbmFsLnByb3RvdHlwZS5zZXRWYWx1ZUF0VGltZSA9IGZ1bmN0aW9uICh2YWx1ZSwgdGltZSkge1xuXHQgICAgICAgIHRpbWUgPSBUb25lLlRyYW5zcG9ydFRpbWUodGltZSk7XG5cdCAgICAgICAgVG9uZS5TaWduYWwucHJvdG90eXBlLnNldFZhbHVlQXRUaW1lLmNhbGwodGhpcywgdmFsdWUsIHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIExpbmVhciByYW1wIHRvIHRoZSBnaXZlbiB2YWx1ZSBmcm9tIHRoZSBwcmV2aW91cyBzY2hlZHVsZWQgcG9pbnQgdG8gdGhlIGdpdmVuIHZhbHVlXG5cdFx0ICogQHBhcmFtICB7TnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hhbmdlIHRvIGF0IHRoZSBnaXZlbiB0aW1lXG5cdFx0ICogQHBhcmFtICB7VHJhbnNwb3J0VGltZX0gdGltZSAgVGhlIHRpbWUgdG8gY2hhbmdlIHRoZSBzaWduYWxcblx0XHQgKiBAcmV0dXJuIHtUb25lLlRyYW5zcG9ydFRpbWVsaW5lU2lnbmFsfSAgICAgICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydFRpbWVsaW5lU2lnbmFsLnByb3RvdHlwZS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSA9IGZ1bmN0aW9uICh2YWx1ZSwgdGltZSkge1xuXHQgICAgICAgIHRpbWUgPSBUb25lLlRyYW5zcG9ydFRpbWUodGltZSk7XG5cdCAgICAgICAgVG9uZS5TaWduYWwucHJvdG90eXBlLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lLmNhbGwodGhpcywgdmFsdWUsIHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIEV4cG9uZW50aWFsIHJhbXAgdG8gdGhlIGdpdmVuIHZhbHVlIGZyb20gdGhlIHByZXZpb3VzIHNjaGVkdWxlZCBwb2ludCB0byB0aGUgZ2l2ZW4gdmFsdWVcblx0XHQgKiBAcGFyYW0gIHtOdW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGFuZ2UgdG8gYXQgdGhlIGdpdmVuIHRpbWVcblx0XHQgKiBAcGFyYW0gIHtUcmFuc3BvcnRUaW1lfSB0aW1lICBUaGUgdGltZSB0byBjaGFuZ2UgdGhlIHNpZ25hbFxuXHRcdCAqIEByZXR1cm4ge1RvbmUuVHJhbnNwb3J0VGltZWxpbmVTaWduYWx9ICAgICAgIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0VGltZWxpbmVTaWduYWwucHJvdG90eXBlLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUgPSBmdW5jdGlvbiAodmFsdWUsIHRpbWUpIHtcblx0ICAgICAgICB0aW1lID0gVG9uZS5UcmFuc3BvcnRUaW1lKHRpbWUpO1xuXHQgICAgICAgIFRvbmUuU2lnbmFsLnByb3RvdHlwZS5leHBvbmVudGlhbFJhbXBUb1ZhbHVlQXRUaW1lLmNhbGwodGhpcywgdmFsdWUsIHRpbWUpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBTdGFydCBleHBvbmVudGlhbGx5IGFwcHJvYWNoaW5nIHRoZSB0YXJnZXQgdmFsdWUgYXQgdGhlIGdpdmVuIHRpbWUgd2l0aFxuXHRcdCAqICBhIHJhdGUgaGF2aW5nIHRoZSBnaXZlbiB0aW1lIGNvbnN0YW50LlxuXHRcdCAqICBAcGFyYW0ge251bWJlcn0gdmFsdWVcblx0XHQgKiAgQHBhcmFtIHtUcmFuc3BvcnRUaW1lfSBzdGFydFRpbWVcblx0XHQgKiAgQHBhcmFtIHtudW1iZXJ9IHRpbWVDb25zdGFudFxuXHRcdCAqIEByZXR1cm4ge1RvbmUuVHJhbnNwb3J0VGltZWxpbmVTaWduYWx9ICAgICAgIHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuVHJhbnNwb3J0VGltZWxpbmVTaWduYWwucHJvdG90eXBlLnNldFRhcmdldEF0VGltZSA9IGZ1bmN0aW9uICh2YWx1ZSwgc3RhcnRUaW1lLCB0aW1lQ29uc3RhbnQpIHtcblx0ICAgICAgICBzdGFydFRpbWUgPSBUb25lLlRyYW5zcG9ydFRpbWUoc3RhcnRUaW1lKTtcblx0ICAgICAgICBUb25lLlNpZ25hbC5wcm90b3R5cGUuc2V0VGFyZ2V0QXRUaW1lLmNhbGwodGhpcywgdmFsdWUsIHN0YXJ0VGltZSwgdGltZUNvbnN0YW50KTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2FuY2VscyBhbGwgc2NoZWR1bGVkIHBhcmFtZXRlciBjaGFuZ2VzIHdpdGggdGltZXMgZ3JlYXRlciB0aGFuIG9yXG5cdFx0ICogIGVxdWFsIHRvIHN0YXJ0VGltZS5cblx0XHQgKiAgQHBhcmFtICB7VHJhbnNwb3J0VGltZX0gc3RhcnRUaW1lXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLlBhcmFtfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydFRpbWVsaW5lU2lnbmFsLnByb3RvdHlwZS5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMgPSBmdW5jdGlvbiAoc3RhcnRUaW1lKSB7XG5cdCAgICAgICAgc3RhcnRUaW1lID0gVG9uZS5UcmFuc3BvcnRUaW1lKHN0YXJ0VGltZSk7XG5cdCAgICAgICAgVG9uZS5TaWduYWwucHJvdG90eXBlLmNhbmNlbFNjaGVkdWxlZFZhbHVlcy5jYWxsKHRoaXMsIHN0YXJ0VGltZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFNldCBhbiBhcnJheSBvZiBhcmJpdHJhcnkgdmFsdWVzIHN0YXJ0aW5nIGF0IHRoZSBnaXZlbiB0aW1lIGZvciB0aGUgZ2l2ZW4gZHVyYXRpb24uXG5cdFx0ICogIEBwYXJhbSB7RmxvYXQzMkFycmF5fSB2YWx1ZXNcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBzdGFydFRpbWVcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBkdXJhdGlvblxuXHRcdCAqICBAcGFyYW0ge05vcm1hbFJhbmdlfSBbc2NhbGluZz0xXSBJZiB0aGUgdmFsdWVzIGluIHRoZSBjdXJ2ZSBzaG91bGQgYmUgc2NhbGVkIGJ5IHNvbWUgdmFsdWVcblx0XHQgKiAgQHJldHVybnMge1RvbmUuU2lnbmFsfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlRyYW5zcG9ydFRpbWVsaW5lU2lnbmFsLnByb3RvdHlwZS5zZXRWYWx1ZUN1cnZlQXRUaW1lID0gZnVuY3Rpb24gKHZhbHVlcywgc3RhcnRUaW1lLCBkdXJhdGlvbiwgc2NhbGluZykge1xuXHQgICAgICAgIHN0YXJ0VGltZSA9IFRvbmUuVHJhbnNwb3J0VGltZShzdGFydFRpbWUpO1xuXHQgICAgICAgIGR1cmF0aW9uID0gVG9uZS5UcmFuc3BvcnRUaW1lKGR1cmF0aW9uKTtcblx0ICAgICAgICBUb25lLlNpZ25hbC5wcm90b3R5cGUuc2V0VmFsdWVDdXJ2ZUF0VGltZS5jYWxsKHRoaXMsIHZhbHVlcywgc3RhcnRUaW1lLCBkdXJhdGlvbiwgc2NhbGluZyk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFRoaXMgaXMgc2ltaWxhciB0byBbY2FuY2VsU2NoZWR1bGVkVmFsdWVzXSgjY2FuY2VsU2NoZWR1bGVkVmFsdWVzKSBleGNlcHRcblx0XHQgKiAgaXQgaG9sZHMgdGhlIGF1dG9tYXRlZCB2YWx1ZSBhdCB0aW1lIHVudGlsIHRoZSBuZXh0IGF1dG9tYXRlZCBldmVudC5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gdGltZVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5UcmFuc3BvcnRUaW1lbGluZVNpZ25hbH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UcmFuc3BvcnRUaW1lbGluZVNpZ25hbC5wcm90b3R5cGUuY2FuY2VsQW5kSG9sZEF0VGltZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgcmV0dXJuIFRvbmUuU2lnbmFsLnByb3RvdHlwZS5jYW5jZWxBbmRIb2xkQXRUaW1lLmNhbGwodGhpcywgVG9uZS5UcmFuc3BvcnRUaW1lKHRpbWUpKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBEaXNwb3NlIGFuZCBkaXNjb25uZWN0XG5cdFx0ICogQHJldHVybiB7VG9uZS5UcmFuc3BvcnRUaW1lbGluZVNpZ25hbH0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5UcmFuc3BvcnRUaW1lbGluZVNpZ25hbC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlRyYW5zcG9ydC5jbGVhcih0aGlzLl9zeW5jZWQpO1xuXHQgICAgICAgIFRvbmUuVHJhbnNwb3J0Lm9mZignc3RhcnQgc3RvcCBwYXVzZScsIHRoaXMuX3N5bmNlZENhbGxiYWNrKTtcblx0ICAgICAgICB0aGlzLl9ldmVudHMuY2FuY2VsKDApO1xuXHQgICAgICAgIFRvbmUuU2lnbmFsLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fb3V0cHV0U2lnLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLl9vdXRwdXRTaWcgPSBudWxsO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlRyYW5zcG9ydFRpbWVsaW5lU2lnbmFsO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICAvKipcblx0XHQgKiBAY2xhc3MgVG9uZS5HcmFpblBsYXllciBpbXBsZW1lbnRzIFtncmFudWxhciBzeW50aGVzaXNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dyYW51bGFyX3N5bnRoZXNpcykuXG5cdFx0ICogICAgICAgIEdyYW51bGFyIFN5bnRoZXNpcyBlbmFibGVzIHlvdSB0byBhZGp1c3QgcGl0Y2ggYW5kIHBsYXliYWNrIHJhdGUgaW5kZXBlbmRlbnRseS4gVGhlIGdyYWluU2l6ZSBpcyB0aGVcblx0XHQgKiAgICAgICAgYW1vdW50IG9mIHRpbWUgZWFjaCBzbWFsbCBjaHVuayBvZiBhdWRpbyBpcyBwbGF5ZWQgZm9yIGFuZCB0aGUgb3ZlcmxhcCBpcyB0aGVcblx0XHQgKiAgICAgICAgYW1vdW50IG9mIGNyb3NzZmFkaW5nIHRyYW5zaXRpb24gdGltZSBiZXR3ZWVuIHN1Y2Nlc3NpdmUgZ3JhaW5zLlxuXHRcdCAqIEBleHRlbmRzIHtUb25lLlNvdXJjZX1cblx0XHQgKiBAcGFyYW0ge1N0cmluZ3xUb25lLkJ1ZmZlcn0gdXJsXHRUaGUgdXJsIHRvIGxvYWQsIG9yIHRoZSBUb25lLkJ1ZmZlciB0byBwbGF5LlxuXHRcdCAqIEBwYXJhbSB7RnVuY3Rpb249fSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGFmdGVyIHRoZSB1cmwgaXMgbG9hZGVkLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5HcmFpblBsYXllciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICd1cmwnLFxuXHQgICAgICAgICAgICAnb25sb2FkJ1xuXHQgICAgICAgIF0sIFRvbmUuR3JhaW5QbGF5ZXIpO1xuXHQgICAgICAgIFRvbmUuU291cmNlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGF1ZGlvIGJ1ZmZlciBiZWxvbmdpbmcgdG8gdGhlIHBsYXllci5cblx0XHRcdCAqICBAdHlwZSAge1RvbmUuQnVmZmVyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgVG9uZS5CdWZmZXIob3B0aW9ucy51cmwsIG9wdGlvbnMub25sb2FkKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBDcmVhdGUgYSByZXBlYXRpbmcgdGljayB0byBzY2hlZHVsZVxuXHRcdFx0ICogIHRoZSBncmFpbnMuXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLkNsb2NrfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9jbG9jayA9IG5ldyBUb25lLkNsb2NrKHRoaXMuX3RpY2suYmluZCh0aGlzKSwgb3B0aW9ucy5ncmFpblNpemUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEB0eXBlICB7TnVtYmVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sb29wU3RhcnQgPSAwO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEB0eXBlICB7TnVtYmVyfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sb29wRW5kID0gMDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIEFsbCBvZiB0aGUgY3VycmVudGx5IHBsYXlpbmcgQnVmZmVyU291cmNlc1xuXHRcdFx0ICogQHR5cGUge0FycmF5fVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2FjdGl2ZVNvdXJjZXMgPSBbXTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBAdHlwZSAge051bWJlcn1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcGxheWJhY2tSYXRlID0gb3B0aW9ucy5wbGF5YmFja1JhdGU7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQHR5cGUgIHtOdW1iZXJ9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2dyYWluU2l6ZSA9IG9wdGlvbnMuZ3JhaW5TaXplO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKiAgQHR5cGUge051bWJlcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX292ZXJsYXAgPSBvcHRpb25zLm92ZXJsYXA7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQWRqdXN0IHRoZSBwaXRjaCBpbmRlcGVuZGVudGx5IG9mIHRoZSBwbGF5YmFja1JhdGUuXG5cdFx0XHQgKiAgQHR5cGUgIHtDZW50c31cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZGV0dW5lID0gb3B0aW9ucy5kZXR1bmU7XG5cdCAgICAgICAgLy9zZXR1cFxuXHQgICAgICAgIHRoaXMub3ZlcmxhcCA9IG9wdGlvbnMub3ZlcmxhcDtcblx0ICAgICAgICB0aGlzLmxvb3AgPSBvcHRpb25zLmxvb3A7XG5cdCAgICAgICAgdGhpcy5wbGF5YmFja1JhdGUgPSBvcHRpb25zLnBsYXliYWNrUmF0ZTtcblx0ICAgICAgICB0aGlzLmdyYWluU2l6ZSA9IG9wdGlvbnMuZ3JhaW5TaXplO1xuXHQgICAgICAgIHRoaXMubG9vcFN0YXJ0ID0gb3B0aW9ucy5sb29wU3RhcnQ7XG5cdCAgICAgICAgdGhpcy5sb29wRW5kID0gb3B0aW9ucy5sb29wRW5kO1xuXHQgICAgICAgIHRoaXMucmV2ZXJzZSA9IG9wdGlvbnMucmV2ZXJzZTtcblx0ICAgICAgICB0aGlzLl9jbG9jay5vbignc3RvcCcsIHRoaXMuX29uc3RvcC5iaW5kKHRoaXMpKTtcblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLkdyYWluUGxheWVyLCBUb25lLlNvdXJjZSk7XG5cdCAgICAvKipcblx0XHQgKiAgdGhlIGRlZmF1bHQgcGFyYW1ldGVyc1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5HcmFpblBsYXllci5kZWZhdWx0cyA9IHtcblx0ICAgICAgICAnb25sb2FkJzogVG9uZS5ub09wLFxuXHQgICAgICAgICdvdmVybGFwJzogMC4xLFxuXHQgICAgICAgICdncmFpblNpemUnOiAwLjIsXG5cdCAgICAgICAgJ3BsYXliYWNrUmF0ZSc6IDEsXG5cdCAgICAgICAgJ2RldHVuZSc6IDAsXG5cdCAgICAgICAgJ2xvb3AnOiBmYWxzZSxcblx0ICAgICAgICAnbG9vcFN0YXJ0JzogMCxcblx0ICAgICAgICAnbG9vcEVuZCc6IDAsXG5cdCAgICAgICAgJ3JldmVyc2UnOiBmYWxzZVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBQbGF5IHRoZSBidWZmZXIgYXQgdGhlIGdpdmVuIHN0YXJ0VGltZS4gT3B0aW9uYWxseSBhZGQgYW4gb2Zmc2V0XG5cdFx0ICogIGFuZC9vciBkdXJhdGlvbiB3aGljaCB3aWxsIHBsYXkgdGhlIGJ1ZmZlciBmcm9tIGEgcG9zaXRpb25cblx0XHQgKiAgd2l0aGluIHRoZSBidWZmZXIgZm9yIHRoZSBnaXZlbiBkdXJhdGlvbi5cblx0XHQgKlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbc3RhcnRUaW1lPW5vd10gV2hlbiB0aGUgcGxheWVyIHNob3VsZCBzdGFydC5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW29mZnNldD0wXSBUaGUgb2Zmc2V0IGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc2FtcGxlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBzdGFydCBhdC5cblx0XHQgKiAgQHBhcmFtICB7VGltZT19IGR1cmF0aW9uIEhvdyBsb25nIHRoZSBzYW1wbGUgc2hvdWxkIHBsYXkuIElmIG5vIGR1cmF0aW9uXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIGdpdmVuLCBpdCB3aWxsIGRlZmF1bHQgdG8gdGhlIGZ1bGwgbGVuZ3RoXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzYW1wbGUgKG1pbnVzIGFueSBvZmZzZXQpXG5cdFx0ICogIEByZXR1cm5zIHtUb25lLkdyYWluUGxheWVyfSB0aGlzXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLkdyYWluUGxheWVyI1xuXHRcdCAqICBAbWV0aG9kIHN0YXJ0XG5cdFx0ICogIEBuYW1lIHN0YXJ0XG5cdFx0ICovXG5cdCAgICAvKipcblx0XHQgKiAgSW50ZXJuYWwgc3RhcnQgbWV0aG9kXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gdGltZVxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IG9mZnNldFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5HcmFpblBsYXllci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKHRpbWUsIG9mZnNldCwgZHVyYXRpb24pIHtcblx0ICAgICAgICBvZmZzZXQgPSBUb25lLmRlZmF1bHRBcmcob2Zmc2V0LCAwKTtcblx0ICAgICAgICBvZmZzZXQgPSB0aGlzLnRvU2Vjb25kcyhvZmZzZXQpO1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB0aGlzLl9vZmZzZXQgPSBvZmZzZXQ7XG5cdCAgICAgICAgdGhpcy5fY2xvY2suc3RhcnQodGltZSk7XG5cdCAgICAgICAgaWYgKGR1cmF0aW9uKSB7XG5cdCAgICAgICAgICAgIHRoaXMuc3RvcCh0aW1lICsgdGhpcy50b1NlY29uZHMoZHVyYXRpb24pKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIEludGVybmFsIHN0YXJ0IG1ldGhvZFxuXHRcdCAqICBAcGFyYW0ge1RpbWV9IHRpbWVcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuR3JhaW5QbGF5ZXIucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICB0aGlzLl9jbG9jay5zdG9wKHRpbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIEludm9rZWQgd2hlbiB0aGUgY2xvY2sgaXMgc3RvcHBlZFxuXHRcdCAqIEBwYXJhbSAge051bWJlcn0gdGltZVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkdyYWluUGxheWVyLnByb3RvdHlwZS5fb25zdG9wID0gZnVuY3Rpb24gKHRpbWUpIHtcblx0ICAgICAgICAvL3N0b3AgdGhlIHBsYXllcnNcblx0ICAgICAgICB0aGlzLl9hY3RpdmVTb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuXHQgICAgICAgICAgICBzb3VyY2Uuc3RvcCh0aW1lLCAwKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgSW52b2tlZCBvbiBlYWNoIGNsb2NrIHRpY2suIHNjaGVkdWxlZCBhIG5ld1xuXHRcdCAqICBncmFpbiBhdCB0aGlzIHRpbWUuXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9ICB0aW1lXG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLkdyYWluUGxheWVyLnByb3RvdHlwZS5fdGljayA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdmFyIGZhZGVJbiA9IHRoaXMuX29mZnNldCA8IHRoaXMuX292ZXJsYXAgPyAwIDogdGhpcy5fb3ZlcmxhcDtcblx0ICAgICAgICB2YXIgc291cmNlID0gbmV3IFRvbmUuQnVmZmVyU291cmNlKHtcblx0ICAgICAgICAgICAgJ2J1ZmZlcic6IHRoaXMuYnVmZmVyLFxuXHQgICAgICAgICAgICAnZmFkZUluJzogZmFkZUluLFxuXHQgICAgICAgICAgICAnZmFkZU91dCc6IHRoaXMuX292ZXJsYXAsXG5cdCAgICAgICAgICAgICdsb29wJzogdGhpcy5sb29wLFxuXHQgICAgICAgICAgICAnbG9vcFN0YXJ0JzogdGhpcy5fbG9vcFN0YXJ0LFxuXHQgICAgICAgICAgICAnbG9vcEVuZCc6IHRoaXMuX2xvb3BFbmQsXG5cdCAgICAgICAgICAgICdwbGF5YmFja1JhdGUnOiBUb25lLmludGVydmFsVG9GcmVxdWVuY3lSYXRpbyh0aGlzLmRldHVuZSAvIDEwMClcblx0ICAgICAgICB9KS5jb25uZWN0KHRoaXMub3V0cHV0KTtcblx0ICAgICAgICBzb3VyY2Uuc3RhcnQodGltZSwgdGhpcy5fb2Zmc2V0KTtcblx0ICAgICAgICB0aGlzLl9vZmZzZXQgKz0gdGhpcy5ncmFpblNpemU7XG5cdCAgICAgICAgc291cmNlLnN0b3AodGltZSArIHRoaXMuZ3JhaW5TaXplKTtcblx0ICAgICAgICAvL2FkZCBpdCB0byB0aGUgYWN0aXZlIHNvdXJjZXNcblx0ICAgICAgICB0aGlzLl9hY3RpdmVTb3VyY2VzLnB1c2goc291cmNlKTtcblx0ICAgICAgICAvL3JlbW92ZSBpdCB3aGVuIGl0J3MgZG9uZVxuXHQgICAgICAgIHNvdXJjZS5vbmVuZGVkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9hY3RpdmVTb3VyY2VzLmluZGV4T2Yoc291cmNlKTtcblx0ICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlU291cmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBKdW1wIHRvIGEgc3BlY2lmaWMgdGltZSBhbmQgcGxheSBpdC5cblx0XHQgKiAgQHBhcmFtICB7VGltZX0gIG9mZnNldCAgVGhlIG9mZnNldCB0byBqdW1wIHRvLlxuXHRcdCAqICBAcGFyYW0ge1RpbWU9fSB0aW1lIFdoZW4gdG8gbWFrZSB0aGUganVtcC5cblx0XHQgKiAgQHJldHVybiAge1RvbmUuR3JhaW5QbGF5ZXJ9ICB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLkdyYWluUGxheWVyLnByb3RvdHlwZS5zZWVrID0gZnVuY3Rpb24gKG9mZnNldCwgdGltZSkge1xuXHQgICAgICAgIHRoaXMuX29mZnNldCA9IHRoaXMudG9TZWNvbmRzKG9mZnNldCk7XG5cdCAgICAgICAgdGhpcy5fdGljayh0aGlzLnRvU2Vjb25kcyh0aW1lKSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHBsYXliYWNrIHJhdGUgb2YgdGhlIHNhbXBsZVxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkdyYWluUGxheWVyI1xuXHRcdCAqIEB0eXBlIHtQb3NpdGl2ZX1cblx0XHQgKiBAbmFtZSBwbGF5YmFja1JhdGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkdyYWluUGxheWVyLnByb3RvdHlwZSwgJ3BsYXliYWNrUmF0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BsYXliYWNrUmF0ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHJhdGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fcGxheWJhY2tSYXRlID0gcmF0ZTtcblx0ICAgICAgICAgICAgdGhpcy5ncmFpblNpemUgPSB0aGlzLl9ncmFpblNpemU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgbG9vcCBzdGFydCB0aW1lLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkdyYWluUGxheWVyI1xuXHRcdCAqIEB0eXBlIHtUaW1lfVxuXHRcdCAqIEBuYW1lIGxvb3BTdGFydFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuR3JhaW5QbGF5ZXIucHJvdG90eXBlLCAnbG9vcFN0YXJ0Jywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9vcFN0YXJ0O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9sb29wU3RhcnQgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBsb29wIGVuZCB0aW1lLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkdyYWluUGxheWVyI1xuXHRcdCAqIEB0eXBlIHtUaW1lfVxuXHRcdCAqIEBuYW1lIGxvb3BFbmRcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLkdyYWluUGxheWVyLnByb3RvdHlwZSwgJ2xvb3BFbmQnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb29wRW5kO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9sb29wRW5kID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgZGlyZWN0aW9uIHRoZSBidWZmZXIgc2hvdWxkIHBsYXkgaW5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5HcmFpblBsYXllciNcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAbmFtZSByZXZlcnNlXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5HcmFpblBsYXllci5wcm90b3R5cGUsICdyZXZlcnNlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIucmV2ZXJzZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHJldikge1xuXHQgICAgICAgICAgICB0aGlzLmJ1ZmZlci5yZXZlcnNlID0gcmV2O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHNpemUgb2YgZWFjaCBjaHVuayBvZiBhdWRpbyB0aGF0IHRoZVxuXHRcdCAqIGJ1ZmZlciBpcyBjaG9wcGVkIGludG8gYW5kIHBsYXllZCBiYWNrIGF0LlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLkdyYWluUGxheWVyI1xuXHRcdCAqIEB0eXBlIHtUaW1lfVxuXHRcdCAqIEBuYW1lIGdyYWluU2l6ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuR3JhaW5QbGF5ZXIucHJvdG90eXBlLCAnZ3JhaW5TaXplJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3JhaW5TaXplO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoc2l6ZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9ncmFpblNpemUgPSB0aGlzLnRvU2Vjb25kcyhzaXplKTtcblx0ICAgICAgICAgICAgdGhpcy5fY2xvY2suZnJlcXVlbmN5LnZhbHVlID0gdGhpcy5fcGxheWJhY2tSYXRlIC8gdGhpcy5fZ3JhaW5TaXplO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhpcyBpcyB0aGUgZHVyYXRpb24gb2YgdGhlIGNyb3NzLWZhZGUgYmV0d2VlblxuXHRcdCAqIHN1Y2Vzc2l2ZSBncmFpbnMuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuR3JhaW5QbGF5ZXIjXG5cdFx0ICogQHR5cGUge1RpbWV9XG5cdFx0ICogQG5hbWUgb3ZlcmxhcFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuR3JhaW5QbGF5ZXIucHJvdG90eXBlLCAnb3ZlcmxhcCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX292ZXJsYXA7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX292ZXJsYXAgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIENsZWFuIHVwXG5cdFx0ICogQHJldHVybiB7VG9uZS5HcmFpblBsYXllcn0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5HcmFpblBsYXllci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb25lLlNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuYnVmZmVyLmRpc3Bvc2UoKTtcblx0ICAgICAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fY2xvY2suZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX2Nsb2NrID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9hY3RpdmVTb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuXHQgICAgICAgICAgICBzb3VyY2UuZGlzcG9zZSgpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHRoaXMuX2FjdGl2ZVNvdXJjZXMgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLkdyYWluUGxheWVyO1xuXHR9KTtcblx0TW9kdWxlKGZ1bmN0aW9uIChUb25lKSB7XG5cdCAgICBcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgIFRvbmUuUGxheWVyIGlzIGFuIGF1ZGlvIGZpbGUgcGxheWVyIHdpdGggc3RhcnQsIGxvb3AsIGFuZCBzdG9wIGZ1bmN0aW9ucy5cblx0XHQgKlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuU291cmNlfVxuXHRcdCAqICBAcGFyYW0ge3N0cmluZ3xBdWRpb0J1ZmZlcn0gdXJsIEVpdGhlciB0aGUgQXVkaW9CdWZmZXIgb3IgdGhlIHVybCBmcm9tXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggdG8gbG9hZCB0aGUgQXVkaW9CdWZmZXJcblx0XHQgKiAgQHBhcmFtIHtGdW5jdGlvbj19IG9ubG9hZCBUaGUgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlIGJ1ZmZlciBpcyBsb2FkZWQuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVjb21tZW5kZWQgdG8gdXNlIFRvbmUuQnVmZmVyLm9uKCdsb2FkJykgaW5zdGVhZC5cblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiB2YXIgcGxheWVyID0gbmV3IFRvbmUuUGxheWVyKFwiLi9wYXRoL3RvL3NhbXBsZS5tcDNcIikudG9NYXN0ZXIoKTtcblx0XHQgKiAvL3BsYXkgYXMgc29vbiBhcyB0aGUgYnVmZmVyIGlzIGxvYWRlZFxuXHRcdCAqIHBsYXllci5hdXRvc3RhcnQgPSB0cnVlO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5QbGF5ZXIgPSBmdW5jdGlvbiAodXJsKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnM7XG5cdCAgICAgICAgaWYgKHVybCBpbnN0YW5jZW9mIFRvbmUuQnVmZmVyICYmIHVybC5sb2FkZWQpIHtcblx0ICAgICAgICAgICAgdXJsID0gdXJsLmdldCgpO1xuXHQgICAgICAgICAgICBvcHRpb25zID0gVG9uZS5QbGF5ZXIuZGVmYXVsdHM7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgb3B0aW9ucyA9IFRvbmUuZGVmYXVsdHMoYXJndW1lbnRzLCBbXG5cdCAgICAgICAgICAgICAgICAndXJsJyxcblx0ICAgICAgICAgICAgICAgICdvbmxvYWQnXG5cdCAgICAgICAgICAgIF0sIFRvbmUuUGxheWVyKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgVG9uZS5Tb3VyY2UuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBJZiB0aGUgZmlsZSBzaG91bGQgcGxheSBhcyBzb29uXG5cdFx0XHQgKiAgYXMgdGhlIGJ1ZmZlciBpcyBsb2FkZWQuXG5cdFx0XHQgKiAgQHR5cGUge0Jvb2xlYW59XG5cdFx0XHQgKiAgQGV4YW1wbGVcblx0XHRcdCAqIC8vd2lsbCBwbGF5IGFzIHNvb24gYXMgaXQncyBsb2FkZWRcblx0XHRcdCAqIHZhciBwbGF5ZXIgPSBuZXcgVG9uZS5QbGF5ZXIoe1xuXHRcdFx0ICogXHRcInVybFwiIDogXCIuL3BhdGgvdG8vc2FtcGxlLm1wM1wiLFxuXHRcdFx0ICogXHRcImF1dG9zdGFydFwiIDogdHJ1ZSxcblx0XHRcdCAqIH0pLnRvTWFzdGVyKCk7XG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLmF1dG9zdGFydCA9IG9wdGlvbnMuYXV0b3N0YXJ0O1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBidWZmZXJcblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICogIEB0eXBlIHtUb25lLkJ1ZmZlcn1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBUb25lLkJ1ZmZlcih7XG5cdCAgICAgICAgICAgICd1cmwnOiBvcHRpb25zLnVybCxcblx0ICAgICAgICAgICAgJ29ubG9hZCc6IHRoaXMuX29ubG9hZC5iaW5kKHRoaXMsIG9wdGlvbnMub25sb2FkKSxcblx0ICAgICAgICAgICAgJ3JldmVyc2UnOiBvcHRpb25zLnJldmVyc2Vcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBpZiAodXJsIGluc3RhbmNlb2YgQXVkaW9CdWZmZXIpIHtcblx0ICAgICAgICAgICAgdGhpcy5fYnVmZmVyLnNldCh1cmwpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvKipcblx0XHRcdCAqICBpZiB0aGUgYnVmZmVyIHNob3VsZCBsb29wIG9uY2UgaXQncyBvdmVyXG5cdFx0XHQgKiAgQHR5cGUge0Jvb2xlYW59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2xvb3AgPSBvcHRpb25zLmxvb3A7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgaWYgJ2xvb3AnIGlzIHRydWUsIHRoZSBsb29wIHdpbGwgc3RhcnQgYXQgdGhpcyBwb3NpdGlvblxuXHRcdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sb29wU3RhcnQgPSBvcHRpb25zLmxvb3BTdGFydDtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBpZiAnbG9vcCcgaXMgdHJ1ZSwgdGhlIGxvb3Agd2lsbCBlbmQgYXQgdGhpcyBwb3NpdGlvblxuXHRcdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdFx0ICogIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sb29wRW5kID0gb3B0aW9ucy5sb29wRW5kO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIHRoZSBwbGF5YmFjayByYXRlXG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqICBAdHlwZSB7TnVtYmVyfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fcGxheWJhY2tSYXRlID0gb3B0aW9ucy5wbGF5YmFja1JhdGU7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgQWxsIG9mIHRoZSBhY3RpdmUgYnVmZmVyIHNvdXJjZSBub2Rlc1xuXHRcdFx0ICogIEB0eXBlIHtBcnJheTxUb25lLkJ1ZmZlclNvdXJjZT59XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2FjdGl2ZVNvdXJjZXMgPSBbXTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZWxhcHNlZCB0aW1lIGNvdW50ZXIuXG5cdFx0XHQgKiAgQHR5cGUge1RvbmUuVGlja1NvdXJjZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fZWxhcHNlZFRpbWUgPSBuZXcgVG9uZS5UaWNrU291cmNlKG9wdGlvbnMucGxheWJhY2tSYXRlKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgZmFkZUluIHRpbWUgb2YgdGhlIGFtcGxpdHVkZSBlbnZlbG9wZS5cblx0XHRcdCAqICBAdHlwZSB7VGltZX1cblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuZmFkZUluID0gb3B0aW9ucy5mYWRlSW47XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIGZhZGVPdXQgdGltZSBvZiB0aGUgYW1wbGl0dWRlIGVudmVsb3BlLlxuXHRcdFx0ICogIEB0eXBlIHtUaW1lfVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5mYWRlT3V0ID0gb3B0aW9ucy5mYWRlT3V0O1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuUGxheWVyLCBUb25lLlNvdXJjZSk7XG5cdCAgICAvKipcblx0XHQgKiAgdGhlIGRlZmF1bHQgcGFyYW1ldGVyc1xuXHRcdCAqICBAc3RhdGljXG5cdFx0ICogIEBjb25zdFxuXHRcdCAqICBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QbGF5ZXIuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ29ubG9hZCc6IFRvbmUubm9PcCxcblx0ICAgICAgICAncGxheWJhY2tSYXRlJzogMSxcblx0ICAgICAgICAnbG9vcCc6IGZhbHNlLFxuXHQgICAgICAgICdhdXRvc3RhcnQnOiBmYWxzZSxcblx0ICAgICAgICAnbG9vcFN0YXJ0JzogMCxcblx0ICAgICAgICAnbG9vcEVuZCc6IDAsXG5cdCAgICAgICAgJ3JldHJpZ2dlcic6IGZhbHNlLFxuXHQgICAgICAgICdyZXZlcnNlJzogZmFsc2UsXG5cdCAgICAgICAgJ2ZhZGVJbic6IDAsXG5cdCAgICAgICAgJ2ZhZGVPdXQnOiAwXG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIExvYWQgdGhlIGF1ZGlvIGZpbGUgYXMgYW4gYXVkaW8gYnVmZmVyLlxuXHRcdCAqICBEZWNvZGVzIHRoZSBhdWRpbyBhc3luY2hyb25vdXNseSBhbmQgaW52b2tlc1xuXHRcdCAqICB0aGUgY2FsbGJhY2sgb25jZSB0aGUgYXVkaW8gYnVmZmVyIGxvYWRzLlxuXHRcdCAqICBOb3RlOiB0aGlzIGRvZXMgbm90IG5lZWQgdG8gYmUgY2FsbGVkIGlmIGEgdXJsXG5cdFx0ICogIHdhcyBwYXNzZWQgaW4gdG8gdGhlIGNvbnN0cnVjdG9yLiBPbmx5IHVzZSB0aGlzXG5cdFx0ICogIGlmIHlvdSB3YW50IHRvIG1hbnVhbGx5IGxvYWQgYSBuZXcgdXJsLlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHVybCBvZiB0aGUgYnVmZmVyIHRvIGxvYWQuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICBGaWxldHlwZSBzdXBwb3J0IGRlcGVuZHMgb24gdGhlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICBicm93c2VyLlxuXHRcdCAqICBAcGFyYW0gIHtGdW5jdGlvbj19IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBpbnZva2Ugb25jZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzYW1wbGUgaXMgbG9hZGVkLlxuXHRcdCAqICBAcmV0dXJucyB7UHJvbWlzZX1cblx0XHQgKi9cblx0ICAgIFRvbmUuUGxheWVyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKHVybCwgY2FsbGJhY2spIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fYnVmZmVyLmxvYWQodXJsLCB0aGlzLl9vbmxvYWQuYmluZCh0aGlzLCBjYWxsYmFjaykpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIEludGVybmFsIGNhbGxiYWNrIHdoZW4gdGhlIGJ1ZmZlciBpcyBsb2FkZWQuXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuUGxheWVyLnByb3RvdHlwZS5fb25sb2FkID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgY2FsbGJhY2sgPSBUb25lLmRlZmF1bHRBcmcoY2FsbGJhY2ssIFRvbmUubm9PcCk7XG5cdCAgICAgICAgY2FsbGJhY2sodGhpcyk7XG5cdCAgICAgICAgaWYgKHRoaXMuYXV0b3N0YXJ0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogSW50ZXJuYWwgY2FsbGJhY2sgd2hlbiB0aGUgYnVmZmVyIGlzIGRvbmUgcGxheWluZy5cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QbGF5ZXIucHJvdG90eXBlLl9vblNvdXJjZUVuZCA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9hY3RpdmVTb3VyY2VzLmluZGV4T2Yoc291cmNlKTtcblx0ICAgICAgICB0aGlzLl9hY3RpdmVTb3VyY2VzLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFBsYXkgdGhlIGJ1ZmZlciBhdCB0aGUgZ2l2ZW4gc3RhcnRUaW1lLiBPcHRpb25hbGx5IGFkZCBhbiBvZmZzZXRcblx0XHQgKiAgYW5kL29yIGR1cmF0aW9uIHdoaWNoIHdpbGwgcGxheSB0aGUgYnVmZmVyIGZyb20gYSBwb3NpdGlvblxuXHRcdCAqICB3aXRoaW4gdGhlIGJ1ZmZlciBmb3IgdGhlIGdpdmVuIGR1cmF0aW9uLlxuXHRcdCAqXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IFtzdGFydFRpbWU9bm93XSBXaGVuIHRoZSBwbGF5ZXIgc2hvdWxkIHN0YXJ0LlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbb2Zmc2V0PTBdIFRoZSBvZmZzZXQgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzYW1wbGVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHN0YXJ0IGF0LlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lPX0gZHVyYXRpb24gSG93IGxvbmcgdGhlIHNhbXBsZSBzaG91bGQgcGxheS4gSWYgbm8gZHVyYXRpb25cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgZ2l2ZW4sIGl0IHdpbGwgZGVmYXVsdCB0byB0aGUgZnVsbCBsZW5ndGhcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHNhbXBsZSAobWludXMgYW55IG9mZnNldClcblx0XHQgKiAgQHJldHVybnMge1RvbmUuUGxheWVyfSB0aGlzXG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLlBsYXllciNcblx0XHQgKiAgQG1ldGhvZCBzdGFydFxuXHRcdCAqICBAbmFtZSBzdGFydFxuXHRcdCAqL1xuXHQgICAgLyoqXG5cdFx0ICogIEludGVybmFsIHN0YXJ0IG1ldGhvZFxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QbGF5ZXIucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChzdGFydFRpbWUsIG9mZnNldCwgZHVyYXRpb24pIHtcblx0ICAgICAgICAvL2lmIGl0J3MgYSBsb29wIHRoZSBkZWZhdWx0IG9mZnNldCBpcyB0aGUgbG9vcHN0YXJ0IHBvaW50XG5cdCAgICAgICAgaWYgKHRoaXMuX2xvb3ApIHtcblx0ICAgICAgICAgICAgb2Zmc2V0ID0gVG9uZS5kZWZhdWx0QXJnKG9mZnNldCwgdGhpcy5fbG9vcFN0YXJ0KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAvL290aGVyd2lzZSB0aGUgZGVmYXVsdCBvZmZzZXQgaXMgMFxuXHQgICAgICAgICAgICBvZmZzZXQgPSBUb25lLmRlZmF1bHRBcmcob2Zmc2V0LCAwKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9jb21wdXRlIHRoZSB2YWx1ZXMgaW4gc2Vjb25kc1xuXHQgICAgICAgIG9mZnNldCA9IHRoaXMudG9TZWNvbmRzKG9mZnNldCk7XG5cdCAgICAgICAgdmFyIGNvbXB1dGVkRHVyYXRpb24gPSBUb25lLmRlZmF1bHRBcmcoZHVyYXRpb24sIE1hdGgubWF4KHRoaXMuX2J1ZmZlci5kdXJhdGlvbiAtIG9mZnNldCwgMCkpO1xuXHQgICAgICAgIGNvbXB1dGVkRHVyYXRpb24gPSB0aGlzLnRvU2Vjb25kcyhjb21wdXRlZER1cmF0aW9uKTtcblx0ICAgICAgICBzdGFydFRpbWUgPSB0aGlzLnRvU2Vjb25kcyhzdGFydFRpbWUpO1xuXHQgICAgICAgIC8vc3RhcnQgdGhlIGVsYXBzZWQgdGltZSBjb3VudGVyXG5cdCAgICAgICAgdGhpcy5fZWxhcHNlZFRpbWUuc3RhcnQoc3RhcnRUaW1lLCBvZmZzZXQpO1xuXHQgICAgICAgIC8vbWFrZSB0aGUgc291cmNlXG5cdCAgICAgICAgdmFyIHNvdXJjZSA9IG5ldyBUb25lLkJ1ZmZlclNvdXJjZSh7XG5cdCAgICAgICAgICAgICdidWZmZXInOiB0aGlzLl9idWZmZXIsXG5cdCAgICAgICAgICAgICdsb29wJzogdGhpcy5fbG9vcCxcblx0ICAgICAgICAgICAgJ2xvb3BTdGFydCc6IHRoaXMuX2xvb3BTdGFydCxcblx0ICAgICAgICAgICAgJ2xvb3BFbmQnOiB0aGlzLl9sb29wRW5kLFxuXHQgICAgICAgICAgICAnb25lbmRlZCc6IHRoaXMuX29uU291cmNlRW5kLmJpbmQodGhpcyksXG5cdCAgICAgICAgICAgICdwbGF5YmFja1JhdGUnOiB0aGlzLl9wbGF5YmFja1JhdGUsXG5cdCAgICAgICAgICAgICdmYWRlSW4nOiB0aGlzLmZhZGVJbixcblx0ICAgICAgICAgICAgJ2ZhZGVPdXQnOiB0aGlzLmZhZGVPdXRcblx0ICAgICAgICB9KS5jb25uZWN0KHRoaXMub3V0cHV0KTtcblx0ICAgICAgICAvL3NldCB0aGUgbG9vcGluZyBwcm9wZXJ0aWVzXG5cdCAgICAgICAgaWYgKCF0aGlzLl9sb29wICYmICF0aGlzLl9zeW5jZWQpIHtcblx0ICAgICAgICAgICAgLy9pZiBpdCdzIG5vdCBsb29waW5nLCBzZXQgdGhlIHN0YXRlIGNoYW5nZSBhdCB0aGUgZW5kIG9mIHRoZSBzYW1wbGVcblx0ICAgICAgICAgICAgdGhpcy5fc3RhdGUuc2V0U3RhdGVBdFRpbWUoVG9uZS5TdGF0ZS5TdG9wcGVkLCBzdGFydFRpbWUgKyBjb21wdXRlZER1cmF0aW9uIC8gdGhpcy5fcGxheWJhY2tSYXRlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy9hZGQgaXQgdG8gdGhlIGFycmF5IG9mIGFjdGl2ZSBzb3VyY2VzXG5cdCAgICAgICAgdGhpcy5fYWN0aXZlU291cmNlcy5wdXNoKHNvdXJjZSk7XG5cdCAgICAgICAgLy9zdGFydCBpdFxuXHQgICAgICAgIGlmICh0aGlzLl9sb29wICYmIFRvbmUuaXNVbmRlZihkdXJhdGlvbikpIHtcblx0ICAgICAgICAgICAgc291cmNlLnN0YXJ0KHN0YXJ0VGltZSwgb2Zmc2V0KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBzb3VyY2Uuc3RhcnQoc3RhcnRUaW1lLCBvZmZzZXQsIGNvbXB1dGVkRHVyYXRpb24pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU3RvcCBwbGF5YmFjay5cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKiAgQHBhcmFtICB7VGltZX0gW3RpbWU9bm93XVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5QbGF5ZXJ9IHRoaXNcblx0XHQgKi9cblx0ICAgIFRvbmUuUGxheWVyLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICh0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHQgICAgICAgIHRoaXMuX2VsYXBzZWRUaW1lLnN0b3AodGltZSk7XG5cdCAgICAgICAgdGhpcy5fYWN0aXZlU291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0ICAgICAgICAgICAgc291cmNlLnN0b3AodGltZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogU3RvcCBhbmQgdGhlbiByZXN0YXJ0IHRoZSBwbGF5ZXIgZnJvbSB0aGUgYmVnaW5uaW5nIChvciBvZmZzZXQpXG5cdFx0ICogIEBwYXJhbSAge1RpbWV9IFtzdGFydFRpbWU9bm93XSBXaGVuIHRoZSBwbGF5ZXIgc2hvdWxkIHN0YXJ0LlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lfSBbb2Zmc2V0PTBdIFRoZSBvZmZzZXQgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzYW1wbGVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHN0YXJ0IGF0LlxuXHRcdCAqICBAcGFyYW0gIHtUaW1lPX0gZHVyYXRpb24gSG93IGxvbmcgdGhlIHNhbXBsZSBzaG91bGQgcGxheS4gSWYgbm8gZHVyYXRpb25cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgZ2l2ZW4sIGl0IHdpbGwgZGVmYXVsdCB0byB0aGUgZnVsbCBsZW5ndGhcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHNhbXBsZSAobWludXMgYW55IG9mZnNldClcblx0XHQgKiAgQHJldHVybnMge1RvbmUuUGxheWVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBsYXllci5wcm90b3R5cGUucmVzdGFydCA9IGZ1bmN0aW9uICh0aW1lLCBvZmZzZXQsIGR1cmF0aW9uKSB7XG5cdCAgICAgICAgdGhpcy5fc3RvcCh0aW1lKTtcblx0ICAgICAgICB0aGlzLl9zdGFydCh0aW1lLCBvZmZzZXQsIGR1cmF0aW9uKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU2VlayB0byBhIHNwZWNpZmljIHRpbWUgaW4gdGhlIHBsYXllcidzIGJ1ZmZlci4gSWYgdGhlXG5cdFx0ICogIHNvdXJjZSBpcyBubyBsb25nZXIgcGxheWluZyBhdCB0aGF0IHRpbWUsIGl0IHdpbGwgc3RvcC5cblx0XHQgKiAgSWYgeW91IHNlZWsgdG8gYSB0aW1lIHRoYXRcblx0XHQgKiAgQHBhcmFtIHtUaW1lfSBvZmZzZXQgVGhlIHRpbWUgdG8gc2VlayB0by5cblx0XHQgKiAgQHBhcmFtIHtUaW1lPX0gdGltZSBUaGUgdGltZSBmb3IgdGhlIHNlZWsgZXZlbnQgdG8gb2NjdXIuXG5cdFx0ICogIEByZXR1cm4ge1RvbmUuUGxheWVyfSB0aGlzXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogc291cmNlLnN0YXJ0KDAuMik7XG5cdFx0ICogc291cmNlLnN0b3AoMC40KTtcblx0XHQgKi9cblx0ICAgIFRvbmUuUGxheWVyLnByb3RvdHlwZS5zZWVrID0gZnVuY3Rpb24gKG9mZnNldCwgdGltZSkge1xuXHQgICAgICAgIHRpbWUgPSB0aGlzLnRvU2Vjb25kcyh0aW1lKTtcblx0ICAgICAgICBpZiAodGhpcy5fc3RhdGUuZ2V0VmFsdWVBdFRpbWUodGltZSkgPT09IFRvbmUuU3RhdGUuU3RhcnRlZCkge1xuXHQgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLnRvU2Vjb25kcyhvZmZzZXQpO1xuXHQgICAgICAgICAgICAvLyBpZiBpdCdzIGN1cnJlbnRseSBwbGF5aW5nLCBzdG9wIGl0XG5cdCAgICAgICAgICAgIHRoaXMuX3N0b3AodGltZSk7XG5cdCAgICAgICAgICAgIC8vcmVzdGFydCBpdCBhdCB0aGUgZ2l2ZW4gdGltZVxuXHQgICAgICAgICAgICB0aGlzLl9zdGFydCh0aW1lLCBvZmZzZXQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgU2V0IHRoZSBsb29wIHN0YXJ0IGFuZCBlbmQuIFdpbGwgb25seSBsb29wIGlmIGxvb3AgaXNcblx0XHQgKiAgc2V0IHRvIHRydWUuXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gbG9vcFN0YXJ0IFRoZSBsb29wIGVuZCB0aW1lXG5cdFx0ICogIEBwYXJhbSB7VGltZX0gbG9vcEVuZCBUaGUgbG9vcCBlbmQgdGltZVxuXHRcdCAqICBAcmV0dXJucyB7VG9uZS5QbGF5ZXJ9IHRoaXNcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiAvL2xvb3AgMC4xIHNlY29uZHMgb2YgdGhlIGZpbGUuXG5cdFx0ICogcGxheWVyLnNldExvb3BQb2ludHMoMC4yLCAwLjMpO1xuXHRcdCAqIHBsYXllci5sb29wID0gdHJ1ZTtcblx0XHQgKi9cblx0ICAgIFRvbmUuUGxheWVyLnByb3RvdHlwZS5zZXRMb29wUG9pbnRzID0gZnVuY3Rpb24gKGxvb3BTdGFydCwgbG9vcEVuZCkge1xuXHQgICAgICAgIHRoaXMubG9vcFN0YXJ0ID0gbG9vcFN0YXJ0O1xuXHQgICAgICAgIHRoaXMubG9vcEVuZCA9IGxvb3BFbmQ7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogSWYgbG9vcCBpcyB0cnVlLCB0aGUgbG9vcCB3aWxsIHN0YXJ0IGF0IHRoaXMgcG9zaXRpb24uXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuUGxheWVyI1xuXHRcdCAqIEB0eXBlIHtUaW1lfVxuXHRcdCAqIEBuYW1lIGxvb3BTdGFydFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGxheWVyLnByb3RvdHlwZSwgJ2xvb3BTdGFydCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvb3BTdGFydDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGxvb3BTdGFydCkge1xuXHQgICAgICAgICAgICB0aGlzLl9sb29wU3RhcnQgPSBsb29wU3RhcnQ7XG5cdCAgICAgICAgICAgIC8vZ2V0IHRoZSBjdXJyZW50IHNvdXJjZVxuXHQgICAgICAgICAgICB0aGlzLl9hY3RpdmVTb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuXHQgICAgICAgICAgICAgICAgc291cmNlLmxvb3BTdGFydCA9IGxvb3BTdGFydDtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBJZiBsb29wIGlzIHRydWUsIHRoZSBsb29wIHdpbGwgZW5kIGF0IHRoaXMgcG9zaXRpb24uXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuUGxheWVyI1xuXHRcdCAqIEB0eXBlIHtUaW1lfVxuXHRcdCAqIEBuYW1lIGxvb3BFbmRcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBsYXllci5wcm90b3R5cGUsICdsb29wRW5kJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9vcEVuZDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKGxvb3BFbmQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbG9vcEVuZCA9IGxvb3BFbmQ7XG5cdCAgICAgICAgICAgIC8vZ2V0IHRoZSBjdXJyZW50IHNvdXJjZVxuXHQgICAgICAgICAgICB0aGlzLl9hY3RpdmVTb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuXHQgICAgICAgICAgICAgICAgc291cmNlLmxvb3BFbmQgPSBsb29wRW5kO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBhdWRpbyBidWZmZXIgYmVsb25naW5nIHRvIHRoZSBwbGF5ZXIuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuUGxheWVyI1xuXHRcdCAqIEB0eXBlIHtUb25lLkJ1ZmZlcn1cblx0XHQgKiBAbmFtZSBidWZmZXJcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBsYXllci5wcm90b3R5cGUsICdidWZmZXInLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXI7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChidWZmZXIpIHtcblx0ICAgICAgICAgICAgdGhpcy5fYnVmZmVyLnNldChidWZmZXIpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogSWYgdGhlIGJ1ZmZlciBzaG91bGQgbG9vcCBvbmNlIGl0J3Mgb3Zlci5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5QbGF5ZXIjXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XG5cdFx0ICogQG5hbWUgbG9vcFxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGxheWVyLnByb3RvdHlwZSwgJ2xvb3AnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb29wO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAobG9vcCkge1xuXHQgICAgICAgICAgICAvL2lmIG5vIGNoYW5nZSwgZG8gbm90aGluZ1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fbG9vcCA9PT0gbG9vcCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuX2xvb3AgPSBsb29wO1xuXHQgICAgICAgICAgICB2YXIgbm93ID0gdGhpcy5ub3coKTtcblx0ICAgICAgICAgICAgaWYgKCFsb29wKSB7XG5cdCAgICAgICAgICAgICAgICAvL3N0b3AgdGhlIHBsYXliYWNrIG9uIHRoZSBuZXh0IGN5Y2xlXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9zdG9wQXROZXh0SXRlcmF0aW9uKG5vdyk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvL3JlbW92ZSB0aGUgbmV4dCBzdG9wRXZlbnRcblx0ICAgICAgICAgICAgICAgIHZhciBzdG9wRXZlbnQgPSB0aGlzLl9zdGF0ZS5nZXROZXh0U3RhdGUoVG9uZS5TdGF0ZS5TdG9wcGVkLCBub3cpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHN0b3BFdmVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5sb29wID0gbG9vcDtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS5jYW5jZWwoc3RvcEV2ZW50LnRpbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsYXBzZWRUaW1lLmNhbmNlbChzdG9wRXZlbnQudGltZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBTY2hlZHVsZXMgYSBzdG9wIGV2ZW50IGF0IHRoZSBuZXh0IGZ1bGwgaXRlcmF0aW9uLiBVc2VkXG5cdFx0ICogIGZvciBzY2hlZHVsaW5nIHN0b3Agd2hlbiB0aGUgbG9vcCBzdGF0ZSBvciBwbGF5YmFja1JhdGUgY2hhbmdlc1xuXHRcdCAqICBAcGFyYW0gIHtOdW1iZXJ9ICBub3cgIFRoZSBjdXJyZW50IHRpbWVcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuUGxheWVyLnByb3RvdHlwZS5fc3RvcEF0TmV4dEl0ZXJhdGlvbiA9IGZ1bmN0aW9uIChub3cpIHtcblx0ICAgICAgICBpZiAodGhpcy5fc3RhdGUuZ2V0VmFsdWVBdFRpbWUobm93KSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkKSB7XG5cdCAgICAgICAgICAgIHZhciBuZXh0U3RvcCA9IHRoaXMuX3N0YXRlLmdldE5leHRTdGF0ZShUb25lLlN0YXRlLlN0b3BwZWQsIG5vdyk7XG5cdCAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX2VsYXBzZWRUaW1lLmdldFRpY2tzQXRUaW1lKG5vdyk7XG5cdCAgICAgICAgICAgIHZhciBpdGVyYXRpb25zID0gTWF0aC5tYXgoTWF0aC5jZWlsKHBvc2l0aW9uIC8gdGhpcy5idWZmZXIuZHVyYXRpb24pLCAxKTtcblx0ICAgICAgICAgICAgdmFyIHN0b3BUaW1lID0gdGhpcy5fZWxhcHNlZFRpbWUuZ2V0VGltZU9mVGljayhpdGVyYXRpb25zICogdGhpcy5idWZmZXIuZHVyYXRpb24sIG5leHRTdG9wID8gbmV4dFN0b3AudGltZSAtIHRoaXMuc2FtcGxlVGltZSA6IEluZmluaXR5KTtcblx0ICAgICAgICAgICAgdGhpcy5zdG9wKHN0b3BUaW1lKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHBsYXliYWNrIHNwZWVkLiAxIGlzIG5vcm1hbCBzcGVlZC4gVGhpcyBpcyBub3QgYSBzaWduYWwgYmVjYXVzZVxuXHRcdCAqIFNhZmFyaSBhbmQgaU9TIGN1cnJlbnRseSBkb24ndCBzdXBwb3J0IHBsYXliYWNrUmF0ZSBhcyBhIHNpZ25hbC5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5QbGF5ZXIjXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAbmFtZSBwbGF5YmFja1JhdGVcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBsYXllci5wcm90b3R5cGUsICdwbGF5YmFja1JhdGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9wbGF5YmFja1JhdGU7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChyYXRlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3BsYXliYWNrUmF0ZSA9IHJhdGU7XG5cdCAgICAgICAgICAgIHZhciBub3cgPSB0aGlzLm5vdygpO1xuXHQgICAgICAgICAgICB0aGlzLl9lbGFwc2VkVGltZS5mcmVxdWVuY3kuc2V0VmFsdWVBdFRpbWUocmF0ZSwgbm93KTtcblx0ICAgICAgICAgICAgLy9pZiBpdCdzIG5vdCBsb29waW5nXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5fbG9vcCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fc3RvcEF0TmV4dEl0ZXJhdGlvbihub3cpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIC8vc2V0IGFsbCB0aGUgc291cmNlc1xuXHQgICAgICAgICAgICB0aGlzLl9hY3RpdmVTb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuXHQgICAgICAgICAgICAgICAgc291cmNlLnBsYXliYWNrUmF0ZS5zZXRWYWx1ZUF0VGltZShyYXRlLCBub3cpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uIG9mIHRoZSBidWZmZXIuIFxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlBsYXllciNcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBuYW1lIHBvc2l0aW9uXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QbGF5ZXIucHJvdG90eXBlLCAncG9zaXRpb24nLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBub3cgPSB0aGlzLm5vdygpO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUuZ2V0VmFsdWVBdFRpbWUobm93KSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkICYmIHRoaXMubG9hZGVkKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmJ1ZmZlci5kdXJhdGlvbjtcblx0ICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX2VsYXBzZWRUaW1lLmdldFRpY2tzQXRUaW1lKG5vdyk7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcG9zaXRpb24gJSBkdXJhdGlvbjtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAwO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBUaGUgZGlyZWN0aW9uIHRoZSBidWZmZXIgc2hvdWxkIHBsYXkgaW5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5QbGF5ZXIjXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XG5cdFx0ICogQG5hbWUgcmV2ZXJzZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGxheWVyLnByb3RvdHlwZSwgJ3JldmVyc2UnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIucmV2ZXJzZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKHJldikge1xuXHQgICAgICAgICAgICB0aGlzLl9idWZmZXIucmV2ZXJzZSA9IHJldjtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIElmIGFsbCB0aGUgYnVmZmVyIGlzIGxvYWRlZFxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlBsYXllciNcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiBAbmFtZSBsb2FkZWRcblx0XHQgKiBAcmVhZE9ubHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBsYXllci5wcm90b3R5cGUsICdsb2FkZWQnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXIubG9hZGVkO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogIERpc3Bvc2UgYW5kIGRpc2Nvbm5lY3QuXG5cdFx0ICogIEByZXR1cm4ge1RvbmUuUGxheWVyfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBsYXllci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvL2Rpc2Nvbm5lY3QgYWxsIG9mIHRoZSBwbGF5ZXJzXG5cdCAgICAgICAgdGhpcy5fYWN0aXZlU291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0ICAgICAgICAgICAgc291cmNlLmRpc3Bvc2UoKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0aGlzLl9hY3RpdmVTb3VyY2VzID0gbnVsbDtcblx0ICAgICAgICBUb25lLlNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX2J1ZmZlci5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fYnVmZmVyID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9lbGFwc2VkVGltZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fZWxhcHNlZFRpbWUgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBUb25lLlBsYXllcjtcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBUb25lLlBsYXllcnMgY29tYmluZXMgbXVsdGlwbGUgW1RvbmUuUGxheWVyXShQbGF5ZXIpIG9iamVjdHMuXG5cdFx0ICpcblx0XHQgKiAgQGNvbnN0cnVjdG9yXG5cdFx0ICogIEBleHRlbmRzIHtUb25lLkF1ZGlvTm9kZX1cblx0XHQgKiAgQHBhcmFtIHtPYmplY3R9IHVybHMgQW4gb2JqZWN0IG1hcHBpbmcgYSBuYW1lIHRvIGEgdXJsLlxuXHRcdCAqICBAcGFyYW0ge2Z1bmN0aW9uPX0gb25sb2FkIFRoZSBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiBhbGwgYnVmZmVycyBhcmUgbG9hZGVkLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5QbGF5ZXJzID0gZnVuY3Rpb24gKHVybHMpIHtcblx0ICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdCAgICAgICAgYXJncy5zaGlmdCgpO1xuXHQgICAgICAgIHZhciBvcHRpb25zID0gVG9uZS5kZWZhdWx0cyhhcmdzLCBbJ29ubG9hZCddLCBUb25lLlBsYXllcnMpO1xuXHQgICAgICAgIFRvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqICBUaGUgb3V0cHV0IHZvbHVtZSBub2RlXG5cdFx0XHQgKiAgQHR5cGUgIHtUb25lLlZvbHVtZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fdm9sdW1lID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5Wb2x1bWUob3B0aW9ucy52b2x1bWUpO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogVGhlIHZvbHVtZSBvZiB0aGUgb3V0cHV0IGluIGRlY2liZWxzLlxuXHRcdFx0ICogQHR5cGUge0RlY2liZWxzfVxuXHRcdFx0ICogQHNpZ25hbFxuXHRcdFx0ICogQGV4YW1wbGVcblx0XHRcdCAqIHNvdXJjZS52b2x1bWUudmFsdWUgPSAtNjtcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMudm9sdW1lID0gdGhpcy5fdm9sdW1lLnZvbHVtZTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seSgndm9sdW1lJyk7XG5cdCAgICAgICAgLy9tYWtlIHRoZSBvdXRwdXQgZXhwbGljaXRseSBzdGVyZW9cblx0ICAgICAgICB0aGlzLl92b2x1bWUub3V0cHV0Lm91dHB1dC5jaGFubmVsQ291bnQgPSAyO1xuXHQgICAgICAgIHRoaXMuX3ZvbHVtZS5vdXRwdXQub3V0cHV0LmNoYW5uZWxDb3VudE1vZGUgPSAnZXhwbGljaXQnO1xuXHQgICAgICAgIC8vbXV0ZSBpbml0aWFsbHlcblx0ICAgICAgICB0aGlzLm11dGUgPSBvcHRpb25zLm11dGU7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgY29udGFpbmVyIG9mIGFsbCBvZiB0aGUgcGxheWVyc1xuXHRcdFx0ICogQHR5cGUge09iamVjdH1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9wbGF5ZXJzID0ge307XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiBUaGUgbG9hZGluZyBjb3VudFxuXHRcdFx0ICogQHR5cGUge051bWJlcn1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9sb2FkaW5nQ291bnQgPSAwO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogcHJpdmF0ZSBob2xkZXIgb2YgdGhlIGZhZGVJbiB0aW1lXG5cdFx0XHQgKiBAdHlwZSB7VGltZX1cblx0XHRcdCAqIEBwcml2YXRlXG5cdFx0XHQgKi9cblx0ICAgICAgICB0aGlzLl9mYWRlSW4gPSBvcHRpb25zLmZhZGVJbjtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIHByaXZhdGUgaG9sZGVyIG9mIHRoZSBmYWRlT3V0IHRpbWVcblx0XHRcdCAqIEB0eXBlIHtUaW1lfVxuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2ZhZGVPdXQgPSBvcHRpb25zLmZhZGVPdXQ7XG5cdCAgICAgICAgLy9hZGQgYWxsIG9mIHRoZSBwbGF5ZXJzXG5cdCAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB1cmxzKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdDb3VudCsrO1xuXHQgICAgICAgICAgICB0aGlzLmFkZChuYW1lLCB1cmxzW25hbWVdLCB0aGlzLl9idWZmZXJMb2FkZWQuYmluZCh0aGlzLCBvcHRpb25zLm9ubG9hZCkpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBUb25lLmV4dGVuZChUb25lLlBsYXllcnMsIFRvbmUuQXVkaW9Ob2RlKTtcblx0ICAgIC8qKlxuXHRcdCAqIFRoZSBkZWZhdWx0IHZhbHVlc1xuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdCAgICBUb25lLlBsYXllcnMuZGVmYXVsdHMgPSB7XG5cdCAgICAgICAgJ3ZvbHVtZSc6IDAsXG5cdCAgICAgICAgJ211dGUnOiBmYWxzZSxcblx0ICAgICAgICAnb25sb2FkJzogVG9uZS5ub09wLFxuXHQgICAgICAgICdmYWRlSW4nOiAwLFxuXHQgICAgICAgICdmYWRlT3V0JzogMFxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBBIGJ1ZmZlciB3YXMgbG9hZGVkLiBkZWNyZW1lbnQgdGhlIGNvdW50ZXIuXG5cdFx0ICogIEBwYXJhbSAge0Z1bmN0aW9ufSAgY2FsbGJhY2tcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuUGxheWVycy5wcm90b3R5cGUuX2J1ZmZlckxvYWRlZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHQgICAgICAgIHRoaXMuX2xvYWRpbmdDb3VudC0tO1xuXHQgICAgICAgIGlmICh0aGlzLl9sb2FkaW5nQ291bnQgPT09IDAgJiYgY2FsbGJhY2spIHtcblx0ICAgICAgICAgICAgY2FsbGJhY2sodGhpcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqIE11dGUgdGhlIG91dHB1dC5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5Tb3VyY2UjXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQG5hbWUgbXV0ZVxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogLy9tdXRlIHRoZSBvdXRwdXRcblx0XHQgKiBzb3VyY2UubXV0ZSA9IHRydWU7XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QbGF5ZXJzLnByb3RvdHlwZSwgJ211dGUnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl92b2x1bWUubXV0ZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gKG11dGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fdm9sdW1lLm11dGUgPSBtdXRlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGZhZGVJbiB0aW1lIG9mIHRoZSBhbXBsaXR1ZGUgZW52ZWxvcGUuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuU291cmNlI1xuXHRcdCAqIEB0eXBlIHtUaW1lfVxuXHRcdCAqIEBuYW1lIGZhZGVJblxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuUGxheWVycy5wcm90b3R5cGUsICdmYWRlSW4nLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9mYWRlSW47XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIChmYWRlSW4pIHtcblx0ICAgICAgICAgICAgdGhpcy5fZmFkZUluID0gZmFkZUluO1xuXHQgICAgICAgICAgICB0aGlzLl9mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcblx0ICAgICAgICAgICAgICAgIHBsYXllci5mYWRlSW4gPSBmYWRlSW47XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIGZhZGVPdXQgdGltZSBvZiB0aGUgYW1wbGl0dWRlIGVudmVsb3BlLlxuXHRcdCAqIEBtZW1iZXJPZiBUb25lLlNvdXJjZSNcblx0XHQgKiBAdHlwZSB7VGltZX1cblx0XHQgKiBAbmFtZSBmYWRlT3V0XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QbGF5ZXJzLnByb3RvdHlwZSwgJ2ZhZGVPdXQnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9mYWRlT3V0O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAoZmFkZU91dCkge1xuXHQgICAgICAgICAgICB0aGlzLl9mYWRlT3V0ID0gZmFkZU91dDtcblx0ICAgICAgICAgICAgdGhpcy5fZm9yRWFjaChmdW5jdGlvbiAocGxheWVyKSB7XG5cdCAgICAgICAgICAgICAgICBwbGF5ZXIuZmFkZU91dCA9IGZhZGVPdXQ7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogVGhlIHN0YXRlIG9mIHRoZSBwbGF5ZXJzIG9iamVjdC4gUmV0dXJucyBcInN0YXJ0ZWRcIiBpZiBhbnkgb2YgdGhlIHBsYXllcnMgYXJlIHBsYXlpbmcuXG5cdFx0ICogQG1lbWJlck9mIFRvbmUuUGxheWVycyNcblx0XHQgKiBAdHlwZSB7U3RyaW5nfVxuXHRcdCAqIEBuYW1lIHN0YXRlXG5cdFx0ICogQHJlYWRPbmx5XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5QbGF5ZXJzLnByb3RvdHlwZSwgJ3N0YXRlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgcGxheWluZyA9IGZhbHNlO1xuXHQgICAgICAgICAgICB0aGlzLl9mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcblx0ICAgICAgICAgICAgICAgIHBsYXlpbmcgPSBwbGF5aW5nIHx8IHBsYXllci5zdGF0ZSA9PT0gVG9uZS5TdGF0ZS5TdGFydGVkO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgcmV0dXJuIHBsYXlpbmcgPyBUb25lLlN0YXRlLlN0YXJ0ZWQgOiBUb25lLlN0YXRlLlN0b3BwZWQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiAgVHJ1ZSBpZiB0aGUgYnVmZmVycyBvYmplY3QgaGFzIGEgYnVmZmVyIGJ5IHRoYXQgbmFtZS5cblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfE51bWJlcn0gIG5hbWUgIFRoZSBrZXkgb3IgaW5kZXggb2YgdGhlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIuXG5cdFx0ICogIEByZXR1cm4gIHtCb29sZWFufVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QbGF5ZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAobmFtZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9wbGF5ZXJzLmhhc093blByb3BlcnR5KG5hbWUpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBHZXQgYSBwbGF5ZXIgYnkgbmFtZS5cblx0XHQgKiAgQHBhcmFtICB7U3RyaW5nfSAgbmFtZSAgVGhlIHBsYXllcnMgbmFtZSBhcyBkZWZpbmVkIGluXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb25zdHJ1Y3RvciBvYmplY3Qgb3IgYGFkZGAgbWV0aG9kLlxuXHRcdCAqICBAcmV0dXJuICB7VG9uZS5QbGF5ZXJ9XG5cdFx0ICovXG5cdCAgICBUb25lLlBsYXllcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuaGFzKG5hbWUpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9wbGF5ZXJzW25hbWVdO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVG9uZS5QbGF5ZXJzOiBubyBwbGF5ZXIgbmFtZWQgJyArIG5hbWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiBJdGVyYXRlIG92ZXIgYWxsIG9mIHRoZSBwbGF5ZXJzXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXG5cdFx0ICogQHJldHVybiB7VG9uZS5QbGF5ZXJzfSAgICAgICAgICAgIHRoaXNcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5QbGF5ZXJzLnByb3RvdHlwZS5fZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHQgICAgICAgIGZvciAodmFyIHBsYXllck5hbWUgaW4gdGhpcy5fcGxheWVycykge1xuXHQgICAgICAgICAgICBjYWxsYmFjayh0aGlzLl9wbGF5ZXJzW3BsYXllck5hbWVdLCBwbGF5ZXJOYW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogSWYgYWxsIHRoZSBidWZmZXJzIGFyZSBsb2FkZWQgb3Igbm90XG5cdFx0ICogQG1lbWJlck9mIFRvbmUuUGxheWVycyNcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiBAbmFtZSBsb2FkZWRcblx0XHQgKiBAcmVhZE9ubHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlBsYXllcnMucHJvdG90eXBlLCAnbG9hZGVkJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgaXNMb2FkZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICB0aGlzLl9mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcblx0ICAgICAgICAgICAgICAgIGlzTG9hZGVkID0gaXNMb2FkZWQgJiYgcGxheWVyLmxvYWRlZDtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHJldHVybiBpc0xvYWRlZDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqICBBZGQgYSBwbGF5ZXIgYnkgbmFtZSBhbmQgdXJsIHRvIHRoZSBQbGF5ZXJzXG5cdFx0ICogIEBwYXJhbSAge1N0cmluZ30gICAgbmFtZSAgICAgIEEgdW5pcXVlIG5hbWUgdG8gZ2l2ZSB0aGUgcGxheWVyXG5cdFx0ICogIEBwYXJhbSAge1N0cmluZ3xUb25lLkJ1ZmZlcnxBdWRpb2J1ZmZlcn0gIHVybCAgRWl0aGVyIHRoZSB1cmwgb2YgdGhlIGJ1ZmVyLFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGEgYnVmZmVyIHdoaWNoIHdpbGwgYmUgYWRkZWRcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuXHRcdCAqICBAcGFyYW0gIHtGdW5jdGlvbj19ICBjYWxsYmFjayAgVGhlIGNhbGxiYWNrIHRvIGludm9rZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgdXJsIGlzIGxvYWRlZC5cblx0XHQgKi9cblx0ICAgIFRvbmUuUGxheWVycy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG5hbWUsIHVybCwgY2FsbGJhY2spIHtcblx0ICAgICAgICB0aGlzLl9wbGF5ZXJzW25hbWVdID0gbmV3IFRvbmUuUGxheWVyKHVybCwgY2FsbGJhY2spLmNvbm5lY3QodGhpcy5vdXRwdXQpO1xuXHQgICAgICAgIHRoaXMuX3BsYXllcnNbbmFtZV0uZmFkZUluID0gdGhpcy5fZmFkZUluO1xuXHQgICAgICAgIHRoaXMuX3BsYXllcnNbbmFtZV0uZmFkZU91dCA9IHRoaXMuX2ZhZGVPdXQ7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogU3RvcCBhbGwgb2YgdGhlIHBsYXllcnMgYXQgdGhlIGdpdmVuIHRpbWVcblx0XHQgKiBAcGFyYW0ge1RpbWV9IHRpbWUgVGhlIHRpbWUgdG8gc3RvcCBhbGwgb2YgdGhlIHBsYXllcnMuXG5cdFx0ICogQHJldHVybiB7VG9uZS5QbGF5ZXJzfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBsYXllcnMucHJvdG90eXBlLnN0b3BBbGwgPSBmdW5jdGlvbiAodGltZSkge1xuXHQgICAgICAgIHRoaXMuX2ZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xuXHQgICAgICAgICAgICBwbGF5ZXIuc3RvcCh0aW1lKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgRGlzcG9zZSBhbmQgZGlzY29ubmVjdC5cblx0XHQgKiAgQHJldHVybiB7VG9uZS5QbGF5ZXJzfSB0aGlzXG5cdFx0ICovXG5cdCAgICBUb25lLlBsYXllcnMucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLl92b2x1bWUuZGlzcG9zZSgpO1xuXHQgICAgICAgIHRoaXMuX3ZvbHVtZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoJ3ZvbHVtZScpO1xuXHQgICAgICAgIHRoaXMudm9sdW1lID0gbnVsbDtcblx0ICAgICAgICB0aGlzLm91dHB1dCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fZm9yRWFjaChmdW5jdGlvbiAocGxheWVyKSB7XG5cdCAgICAgICAgICAgIHBsYXllci5kaXNwb3NlKCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5fcGxheWVycyA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuUGxheWVycztcblx0fSk7XG5cdE1vZHVsZShmdW5jdGlvbiAoVG9uZSkge1xuXHQgICAgXG5cdCAgICAvKipcblx0XHQgKiAgQGNsYXNzICBUb25lLlVzZXJNZWRpYSB1c2VzIE1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgdG8gb3BlbiB1cFxuXHRcdCAqICAgICAgICAgIGFuZCBleHRlcm5hbCBtaWNyb3Bob25lIG9yIGF1ZGlvIGlucHV0LiBDaGVja1xuXHRcdCAqICAgICAgICAgIFtNZWRpYURldmljZXMgQVBJIFN1cHBvcnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9NZWRpYURldmljZXMvZ2V0VXNlck1lZGlhKVxuXHRcdCAqICAgICAgICAgIHRvIHNlZSB3aGljaCBicm93c2VycyBhcmUgc3VwcG9ydGVkLiBBY2Nlc3MgdG8gYW4gZXh0ZXJuYWwgaW5wdXRcblx0XHQgKiAgICAgICAgICBpcyBsaW1pdGVkIHRvIHNlY3VyZSAoSFRUUFMpIGNvbm5lY3Rpb25zLlxuXHRcdCAqXG5cdFx0ICogIEBjb25zdHJ1Y3RvclxuXHRcdCAqICBAZXh0ZW5kcyB7VG9uZS5BdWRpb05vZGV9XG5cdFx0ICogIEBwYXJhbSB7RGVjaWJlbHM9fSB2b2x1bWUgVGhlIGxldmVsIG9mIHRoZSBpbnB1dFxuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIC8vbGlzdCB0aGUgaW5wdXRzIGFuZCBvcGVuIHRoZSB0aGlyZCBvbmVcblx0XHQgKiB2YXIgbW90dSA9IG5ldyBUb25lLlVzZXJNZWRpYSgpO1xuXHRcdCAqXG5cdFx0ICogLy9vcGVuaW5nIHRoZSBpbnB1dCBhc2tzIHRoZSB1c2VyIHRvIGFjdGl2YXRlIHRoZWlyIG1pY1xuXHRcdCAqIG1vdHUub3BlbigpLnRoZW4oZnVuY3Rpb24oKXtcblx0XHQgKiBcdC8vcHJvbWlzZSByZXNvbHZlcyB3aGVuIGlucHV0IGlzIGF2YWlsYWJsZVxuXHRcdCAqIH0pO1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Vc2VyTWVkaWEgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBUb25lLmRlZmF1bHRzKGFyZ3VtZW50cywgWyd2b2x1bWUnXSwgVG9uZS5Vc2VyTWVkaWEpO1xuXHQgICAgICAgIFRvbmUuQXVkaW9Ob2RlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIE1lZGlhU3RyZWFtTm9kZVxuXHRcdFx0ICogIEB0eXBlIHtNZWRpYVN0cmVhbUF1ZGlvU291cmNlTm9kZX1cblx0XHRcdCAqICBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdCAgICAgICAgdGhpcy5fbWVkaWFTdHJlYW0gPSBudWxsO1xuXHQgICAgICAgIC8qKlxuXHRcdFx0ICogIFRoZSBtZWRpYSBzdHJlYW0gY3JlYXRlZCBieSBnZXRVc2VyTWVkaWEuXG5cdFx0XHQgKiAgQHR5cGUge0xvY2FsTWVkaWFTdHJlYW19XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3N0cmVhbSA9IG51bGw7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG9wZW4gZGV2aWNlXG5cdFx0XHQgKiAgQHR5cGUgIHtNZWRpYURldmljZUluZm99XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX2RldmljZSA9IG51bGw7XG5cdCAgICAgICAgLyoqXG5cdFx0XHQgKiAgVGhlIG91dHB1dCB2b2x1bWUgbm9kZVxuXHRcdFx0ICogIEB0eXBlICB7VG9uZS5Wb2x1bWV9XG5cdFx0XHQgKiAgQHByaXZhdGVcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMuX3ZvbHVtZSA9IHRoaXMub3V0cHV0ID0gbmV3IFRvbmUuVm9sdW1lKG9wdGlvbnMudm9sdW1lKTtcblx0ICAgICAgICAvKipcblx0XHRcdCAqIFRoZSB2b2x1bWUgb2YgdGhlIG91dHB1dCBpbiBkZWNpYmVscy5cblx0XHRcdCAqIEB0eXBlIHtEZWNpYmVsc31cblx0XHRcdCAqIEBzaWduYWxcblx0XHRcdCAqIEBleGFtcGxlXG5cdFx0XHQgKiBpbnB1dC52b2x1bWUudmFsdWUgPSAtNjtcblx0XHRcdCAqL1xuXHQgICAgICAgIHRoaXMudm9sdW1lID0gdGhpcy5fdm9sdW1lLnZvbHVtZTtcblx0ICAgICAgICB0aGlzLl9yZWFkT25seSgndm9sdW1lJyk7XG5cdCAgICAgICAgdGhpcy5tdXRlID0gb3B0aW9ucy5tdXRlO1xuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuVXNlck1lZGlhLCBUb25lLkF1ZGlvTm9kZSk7XG5cdCAgICAvKipcblx0XHQgKiB0aGUgZGVmYXVsdCBwYXJhbWV0ZXJzXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0ICAgIFRvbmUuVXNlck1lZGlhLmRlZmF1bHRzID0ge1xuXHQgICAgICAgICd2b2x1bWUnOiAwLFxuXHQgICAgICAgICdtdXRlJzogZmFsc2Vcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgT3BlbiB0aGUgbWVkaWEgc3RyZWFtLiBJZiBhIHN0cmluZyBpcyBwYXNzZWQgaW4sIGl0IGlzIGFzc3VtZWRcblx0XHQgKiAgdG8gYmUgdGhlIGxhYmVsIG9yIGlkIG9mIHRoZSBzdHJlYW0sIGlmIGEgbnVtYmVyIGlzIHBhc3NlZCBpbixcblx0XHQgKiAgaXQgaXMgdGhlIGlucHV0IG51bWJlciBvZiB0aGUgc3RyZWFtLlxuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmd8TnVtYmVyfSBbbGFiZWxPcklkPVwiZGVmYXVsdFwiXSBUaGUgbGFiZWwgb3IgaWQgb2YgdGhlIGF1ZGlvIGlucHV0IG1lZGlhIGRldmljZS5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdpdGggbm8gYXJndW1lbnQsIHRoZSBkZWZhdWx0IHN0cmVhbSBpcyBvcGVuZWQuXG5cdFx0ICogIEByZXR1cm4ge1Byb21pc2V9IFRoZSBwcm9taXNlIGlzIHJlc29sdmVkIHdoZW4gdGhlIHN0cmVhbSBpcyBvcGVuLlxuXHRcdCAqL1xuXHQgICAgVG9uZS5Vc2VyTWVkaWEucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAobGFiZWxPcklkKSB7XG5cdCAgICAgICAgcmV0dXJuIFRvbmUuVXNlck1lZGlhLmVudW1lcmF0ZURldmljZXMoKS50aGVuKGZ1bmN0aW9uIChkZXZpY2VzKSB7XG5cdCAgICAgICAgICAgIHZhciBkZXZpY2U7XG5cdCAgICAgICAgICAgIGlmIChUb25lLmlzTnVtYmVyKGxhYmVsT3JJZCkpIHtcblx0ICAgICAgICAgICAgICAgIGRldmljZSA9IGRldmljZXNbbGFiZWxPcklkXTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGRldmljZSA9IGRldmljZXMuZmluZChmdW5jdGlvbiAoZGV2aWNlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRldmljZS5sYWJlbCA9PT0gbGFiZWxPcklkIHx8IGRldmljZS5kZXZpY2VJZCA9PT0gbGFiZWxPcklkO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAvL2RpZG4ndCBmaW5kIGEgbWF0Y2hpbmcgZGV2aWNlXG5cdCAgICAgICAgICAgICAgICBpZiAoIWRldmljZSAmJiBkZXZpY2VzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICBkZXZpY2UgPSBkZXZpY2VzWzBdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZGV2aWNlICYmIFRvbmUuaXNEZWZpbmVkKGxhYmVsT3JJZCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbmUuVXNlck1lZGlhOiBubyBtYXRjaGluZyBkZXZpY2U6ICcgKyBsYWJlbE9ySWQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuX2RldmljZSA9IGRldmljZTtcblx0ICAgICAgICAgICAgLy9kbyBnZXRVc2VyTWVkaWFcblx0ICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnRzID0ge1xuXHQgICAgICAgICAgICAgICAgYXVkaW86IHtcblx0ICAgICAgICAgICAgICAgICAgICAnZWNob0NhbmNlbGxhdGlvbic6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgICAgICdzYW1wbGVSYXRlJzogdGhpcy5jb250ZXh0LnNhbXBsZVJhdGVcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgaWYgKGRldmljZSkge1xuXHQgICAgICAgICAgICAgICAgY29uc3RyYWludHMuYXVkaW8uZGV2aWNlSWQgPSBkZXZpY2UuZGV2aWNlSWQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKGZ1bmN0aW9uIChzdHJlYW0pIHtcblx0ICAgICAgICAgICAgICAgIC8vc3RhcnQgYSBuZXcgc291cmNlIG9ubHkgaWYgdGhlIHByZXZpb3VzIG9uZSBpcyBjbG9zZWRcblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy5fc3RyZWFtKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyZWFtID0gc3RyZWFtO1xuXHQgICAgICAgICAgICAgICAgICAgIC8vV3JhcCBhIE1lZGlhU3RyZWFtU291cmNlTm9kZSBhcm91bmQgdGhlIGxpdmUgaW5wdXQgc3RyZWFtLlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhU3RyZWFtID0gdGhpcy5jb250ZXh0LmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKHN0cmVhbSk7XG5cdCAgICAgICAgICAgICAgICAgICAgLy9Db25uZWN0IHRoZSBNZWRpYVN0cmVhbVNvdXJjZU5vZGUgdG8gYSBnYXRlIGdhaW4gbm9kZVxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhU3RyZWFtLmNvbm5lY3QodGhpcy5vdXRwdXQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cdCAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgQ2xvc2UgdGhlIG1lZGlhIHN0cmVhbVxuXHRcdCAqICBAcmV0dXJuIHtUb25lLlVzZXJNZWRpYX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Vc2VyTWVkaWEucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLl9zdHJlYW0pIHtcblx0ICAgICAgICAgICAgdGhpcy5fc3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcblx0ICAgICAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHRoaXMuX3N0cmVhbSA9IG51bGw7XG5cdCAgICAgICAgICAgIC8vcmVtb3ZlIHRoZSBvbGQgbWVkaWEgc3RyZWFtXG5cdCAgICAgICAgICAgIHRoaXMuX21lZGlhU3RyZWFtLmRpc2Nvbm5lY3QoKTtcblx0ICAgICAgICAgICAgdGhpcy5fbWVkaWFTdHJlYW0gPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9kZXZpY2UgPSBudWxsO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB3aXRoIHRoZSBsaXN0IG9mIGF1ZGlvIGlucHV0IGRldmljZXMgYXZhaWxhYmxlLlxuXHRcdCAqICBAcmV0dXJuIHtQcm9taXNlfSBUaGUgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIHdpdGggdGhlIGRldmljZXNcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAZXhhbXBsZVxuXHRcdCAqIFRvbmUuVXNlck1lZGlhLmVudW1lcmF0ZURldmljZXMoKS50aGVuKGZ1bmN0aW9uKGRldmljZXMpe1xuXHRcdCAqIFx0Y29uc29sZS5sb2coZGV2aWNlcylcblx0XHQgKiB9KVxuXHRcdCAqL1xuXHQgICAgVG9uZS5Vc2VyTWVkaWEuZW51bWVyYXRlRGV2aWNlcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCkudGhlbihmdW5jdGlvbiAoZGV2aWNlcykge1xuXHQgICAgICAgICAgICByZXR1cm4gZGV2aWNlcy5maWx0ZXIoZnVuY3Rpb24gKGRldmljZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGRldmljZS5raW5kID09PSAnYXVkaW9pbnB1dCc7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm5zIHRoZSBwbGF5YmFjayBzdGF0ZSBvZiB0aGUgc291cmNlLCBcInN0YXJ0ZWRcIiB3aGVuIHRoZSBtaWNyb3Bob25lIGlzIG9wZW5cblx0XHQgKiAgYW5kIFwic3RvcHBlZFwiIHdoZW4gdGhlIG1pYyBpcyBjbG9zZWQuXG5cdFx0ICogIEB0eXBlIHtUb25lLlN0YXRlfVxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuVXNlck1lZGlhI1xuXHRcdCAqICBAbmFtZSBzdGF0ZVxuXHRcdCAqL1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuVXNlck1lZGlhLnByb3RvdHlwZSwgJ3N0YXRlJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RyZWFtICYmIHRoaXMuX3N0cmVhbS5hY3RpdmUgPyBUb25lLlN0YXRlLlN0YXJ0ZWQgOiBUb25lLlN0YXRlLlN0b3BwZWQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBcdFJldHVybnMgYW4gaWRlbnRpZmllciBmb3IgdGhlIHJlcHJlc2VudGVkIGRldmljZSB0aGF0IGlzXG5cdFx0ICogXHRwZXJzaXN0ZWQgYWNyb3NzIHNlc3Npb25zLiBJdCBpcyB1bi1ndWVzc2FibGUgYnkgb3RoZXIgYXBwbGljYXRpb25zIGFuZFxuXHRcdCAqIFx0dW5pcXVlIHRvIHRoZSBvcmlnaW4gb2YgdGhlIGNhbGxpbmcgYXBwbGljYXRpb24uIEl0IGlzIHJlc2V0IHdoZW4gdGhlXG5cdFx0ICogXHR1c2VyIGNsZWFycyBjb29raWVzIChmb3IgUHJpdmF0ZSBCcm93c2luZywgYSBkaWZmZXJlbnQgaWRlbnRpZmllciBpc1xuXHRcdCAqIFx0dXNlZCB0aGF0IGlzIG5vdCBwZXJzaXN0ZWQgYWNyb3NzIHNlc3Npb25zKS4gUmV0dXJucyB1bmRlZmluZWQgd2hlbiB0aGVcblx0XHQgKiBcdGRldmljZSBpcyBub3Qgb3Blbi5cblx0XHQgKiAgQHR5cGUge1N0cmluZ31cblx0XHQgKiAgQHJlYWRPbmx5XG5cdFx0ICogIEBtZW1iZXJPZiBUb25lLlVzZXJNZWRpYSNcblx0XHQgKiAgQG5hbWUgZGV2aWNlSWRcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlVzZXJNZWRpYS5wcm90b3R5cGUsICdkZXZpY2VJZCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX2RldmljZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RldmljZS5kZXZpY2VJZDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgLyoqXG5cdFx0ICogXHRSZXR1cm5zIGEgZ3JvdXAgaWRlbnRpZmllci4gVHdvIGRldmljZXMgaGF2ZSB0aGVcblx0XHQgKiBcdHNhbWUgZ3JvdXAgaWRlbnRpZmllciBpZiB0aGV5IGJlbG9uZyB0byB0aGUgc2FtZSBwaHlzaWNhbCBkZXZpY2UuXG5cdFx0ICogXHRSZXR1cm5zIHVuZGVmaW5lZCB3aGVuIHRoZSBkZXZpY2UgaXMgbm90IG9wZW4uXG5cdFx0ICogIEB0eXBlIHtTdHJpbmd9XG5cdFx0ICogIEByZWFkT25seVxuXHRcdCAqICBAbWVtYmVyT2YgVG9uZS5Vc2VyTWVkaWEjXG5cdFx0ICogIEBuYW1lIGdyb3VwSWRcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlVzZXJNZWRpYS5wcm90b3R5cGUsICdncm91cElkJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5fZGV2aWNlKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGV2aWNlLmdyb3VwSWQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIFx0UmV0dXJucyBhIGxhYmVsIGRlc2NyaWJpbmcgdGhpcyBkZXZpY2UgKGZvciBleGFtcGxlIFwiQnVpbHQtaW4gTWljcm9waG9uZVwiKS5cblx0XHQgKiBcdFJldHVybnMgdW5kZWZpbmVkIHdoZW4gdGhlIGRldmljZSBpcyBub3Qgb3BlbiBvciBsYWJlbCBpcyBub3QgYXZhaWxhYmxlXG5cdFx0ICogXHRiZWNhdXNlIG9mIHBlcm1pc3Npb25zLlxuXHRcdCAqICBAdHlwZSB7U3RyaW5nfVxuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuVXNlck1lZGlhI1xuXHRcdCAqICBAbmFtZSBncm91cElkXG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Vc2VyTWVkaWEucHJvdG90eXBlLCAnbGFiZWwnLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9kZXZpY2UpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZXZpY2UubGFiZWw7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIC8qKlxuXHRcdCAqIE11dGUgdGhlIG91dHB1dC5cblx0XHQgKiBAbWVtYmVyT2YgVG9uZS5Vc2VyTWVkaWEjXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQG5hbWUgbXV0ZVxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogLy9tdXRlIHRoZSBvdXRwdXRcblx0XHQgKiB1c2VyTWVkaWEubXV0ZSA9IHRydWU7XG5cdFx0ICovXG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5Vc2VyTWVkaWEucHJvdG90eXBlLCAnbXV0ZScsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZvbHVtZS5tdXRlO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiAobXV0ZSkge1xuXHQgICAgICAgICAgICB0aGlzLl92b2x1bWUubXV0ZSA9IG11dGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICAvKipcblx0XHQgKiBDbGVhbiB1cC5cblx0XHQgKiBAcmV0dXJuIHtUb25lLlVzZXJNZWRpYX0gdGhpc1xuXHRcdCAqL1xuXHQgICAgVG9uZS5Vc2VyTWVkaWEucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgVG9uZS5BdWRpb05vZGUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0ICAgICAgICB0aGlzLmNsb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fd3JpdGFibGUoJ3ZvbHVtZScpO1xuXHQgICAgICAgIHRoaXMuX3ZvbHVtZS5kaXNwb3NlKCk7XG5cdCAgICAgICAgdGhpcy5fdm9sdW1lID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnZvbHVtZSA9IG51bGw7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIElmIGdldFVzZXJNZWRpYSBpcyBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuXG5cdFx0ICogIEB0eXBlICB7Qm9vbGVhbn1cblx0XHQgKiAgQG1lbWJlck9mIFRvbmUuVXNlck1lZGlhI1xuXHRcdCAqICBAbmFtZSBzdXBwb3J0ZWRcblx0XHQgKiAgQHN0YXRpY1xuXHRcdCAqICBAcmVhZE9ubHlcblx0XHQgKi9cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlVzZXJNZWRpYSwgJ3N1cHBvcnRlZCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFRvbmUuaXNEZWZpbmVkKG5hdmlnYXRvci5tZWRpYURldmljZXMpICYmIFRvbmUuaXNGdW5jdGlvbihuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gVG9uZS5Vc2VyTWVkaWE7XG5cdH0pO1xuXHRNb2R1bGUoZnVuY3Rpb24gKFRvbmUpIHtcblx0ICAgIC8qKlxuXHRcdCAqICBAY2xhc3MgVG9uZS5NaWRpIGlzIGEgcHJpbWl0aXZlIHR5cGUgZm9yIGVuY29kaW5nIFRpbWUgdmFsdWVzLlxuXHRcdCAqICAgICAgICAgVG9uZS5NaWRpIGNhbiBiZSBjb25zdHJ1Y3RlZCB3aXRoIG9yIHdpdGhvdXQgdGhlIGBuZXdgIGtleXdvcmQuIFRvbmUuTWlkaSBjYW4gYmUgcGFzc2VkXG5cdFx0ICogICAgICAgICBpbnRvIHRoZSBwYXJhbWV0ZXIgb2YgYW55IG1ldGhvZCB3aGljaCB0YWtlcyB0aW1lIGFzIGFuIGFyZ3VtZW50LlxuXHRcdCAqICBAY29uc3RydWN0b3Jcblx0XHQgKiAgQGV4dGVuZHMge1RvbmUuRnJlcXVlbmN5fVxuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmd8TnVtYmVyfSAgdmFsICAgIFRoZSB0aW1lIHZhbHVlLlxuXHRcdCAqICBAcGFyYW0gIHtTdHJpbmc9fSAgdW5pdHMgIFRoZSB1bml0cyBvZiB0aGUgdmFsdWUuXG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogdmFyIHQgPSBUb25lLk1pZGkoXCI0blwiKTsvL2EgcXVhcnRlciBub3RlXG5cdFx0ICovXG5cdCAgICBUb25lLk1pZGkgPSBmdW5jdGlvbiAodmFsLCB1bml0cykge1xuXHQgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgVG9uZS5NaWRpKSB7XG5cdCAgICAgICAgICAgIFRvbmUuRnJlcXVlbmN5LmNhbGwodGhpcywgdmFsLCB1bml0cyk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBUb25lLk1pZGkodmFsLCB1bml0cyk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFRvbmUuZXh0ZW5kKFRvbmUuTWlkaSwgVG9uZS5GcmVxdWVuY3kpO1xuXHQgICAgLyoqXG5cdFx0ICogIFRoZSBkZWZhdWx0IHVuaXRzIGlmIG5vbmUgYXJlIGdpdmVuLlxuXHRcdCAqICBAdHlwZSB7U3RyaW5nfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5NaWRpLnByb3RvdHlwZS5fZGVmYXVsdFVuaXRzID0gJ21pZGknO1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybnMgdGhlIHZhbHVlIG9mIGEgZnJlcXVlbmN5IGluIHRoZSBjdXJyZW50IHVuaXRzXG5cdFx0ICogIEBwYXJhbSB7RnJlcXVlbmN5fSBmcmVxXG5cdFx0ICogIEByZXR1cm4gIHtOdW1iZXJ9XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLk1pZGkucHJvdG90eXBlLl9mcmVxdWVuY3lUb1VuaXRzID0gZnVuY3Rpb24gKGZyZXEpIHtcblx0ICAgICAgICByZXR1cm4gVG9uZS5GcmVxdWVuY3kuZnRvbShUb25lLkZyZXF1ZW5jeS5wcm90b3R5cGUuX2ZyZXF1ZW5jeVRvVW5pdHMuY2FsbCh0aGlzLCBmcmVxKSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybnMgdGhlIHZhbHVlIG9mIGEgdGljayBpbiB0aGUgY3VycmVudCB0aW1lIHVuaXRzXG5cdFx0ICogIEBwYXJhbSB7VGlja3N9IHRpY2tzXG5cdFx0ICogIEByZXR1cm4gIHtOdW1iZXJ9XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdCAgICBUb25lLk1pZGkucHJvdG90eXBlLl90aWNrc1RvVW5pdHMgPSBmdW5jdGlvbiAodGlja3MpIHtcblx0ICAgICAgICByZXR1cm4gVG9uZS5GcmVxdWVuY3kuZnRvbShUb25lLkZyZXF1ZW5jeS5wcm90b3R5cGUuX3RpY2tzVG9Vbml0cy5jYWxsKHRoaXMsIHRpY2tzKSk7XG5cdCAgICB9O1xuXHQgICAgLyoqXG5cdFx0ICogIFJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGJlYXRzIGluIHRoZSBjdXJyZW50IHVuaXRzXG5cdFx0ICogIEBwYXJhbSB7TnVtYmVyfSBiZWF0c1xuXHRcdCAqICBAcmV0dXJuICB7TnVtYmVyfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHQgICAgVG9uZS5NaWRpLnByb3RvdHlwZS5fYmVhdHNUb1VuaXRzID0gZnVuY3Rpb24gKGJlYXRzKSB7XG5cdCAgICAgICAgcmV0dXJuIFRvbmUuRnJlcXVlbmN5LmZ0b20oVG9uZS5GcmVxdWVuY3kucHJvdG90eXBlLl9iZWF0c1RvVW5pdHMuY2FsbCh0aGlzLCBiZWF0cykpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIHNlY29uZCBpbiB0aGUgY3VycmVudCB1bml0c1xuXHRcdCAqICBAcGFyYW0ge1NlY29uZHN9IHNlY29uZHNcblx0XHQgKiAgQHJldHVybiAge051bWJlcn1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0ICAgIFRvbmUuTWlkaS5wcm90b3R5cGUuX3NlY29uZHNUb1VuaXRzID0gZnVuY3Rpb24gKHNlY29uZHMpIHtcblx0ICAgICAgICByZXR1cm4gVG9uZS5GcmVxdWVuY3kuZnRvbShUb25lLkZyZXF1ZW5jeS5wcm90b3R5cGUuX3NlY29uZHNUb1VuaXRzLmNhbGwodGhpcywgc2Vjb25kcykpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmcmVxdWVuY3kgYXMgYSBNSURJIG5vdGVcblx0XHQgKiAgQHJldHVybiAge01JREl9XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogVG9uZS5NaWRpKDYwKS50b01pZGkoKTsgLy82MFxuXHRcdCAqL1xuXHQgICAgVG9uZS5NaWRpLnByb3RvdHlwZS50b01pZGkgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpO1xuXHQgICAgfTtcblx0ICAgIC8qKlxuXHRcdCAqICBSZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmcmVxdWVuY3kgYXMgYSBNSURJIG5vdGVcblx0XHQgKiAgQHJldHVybiAge01JREl9XG5cdFx0ICogIEBleGFtcGxlXG5cdFx0ICogVG9uZS5NaWRpKDYwKS50b01pZGkoKTsgLy82MFxuXHRcdCAqL1xuXHQgICAgVG9uZS5NaWRpLnByb3RvdHlwZS50b0ZyZXF1ZW5jeSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gVG9uZS5GcmVxdWVuY3kubXRvZih0aGlzLnRvTWlkaSgpKTtcblx0ICAgIH07XG5cdCAgICAvKipcblx0XHQgKiAgVHJhbnNwb3NlcyB0aGUgZnJlcXVlbmN5IGJ5IHRoZSBnaXZlbiBudW1iZXIgb2Ygc2VtaXRvbmVzLlxuXHRcdCAqICBAcGFyYW0gIHtJbnRlcnZhbH0gIGludGVydmFsXG5cdFx0ICogIEByZXR1cm4gIHtUb25lLkZyZXF1ZW5jeX0gQSBuZXcgdHJhbnNwb3NlZCBmcmVxdWVuY3lcblx0XHQgKiAgQGV4YW1wbGVcblx0XHQgKiBUb25lLkZyZXF1ZW5jeShcIkE0XCIpLnRyYW5zcG9zZSgzKTsgLy9cIkM1XCJcblx0XHQgKi9cblx0ICAgIFRvbmUuTWlkaS5wcm90b3R5cGUudHJhbnNwb3NlID0gZnVuY3Rpb24gKGludGVydmFsKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMudG9NaWRpKCkgKyBpbnRlcnZhbCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRvbmUuTWlkaTtcblx0fSk7XG5cdFxuXHRyZXR1cm4gVG9uZTtcbn0pKTsiLCIvLyAgICAgVW5kZXJzY29yZS5qcyAxLjkuMVxuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxOCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIChgc2VsZmApIGluIHRoZSBicm93c2VyLCBgZ2xvYmFsYFxuICAvLyBvbiB0aGUgc2VydmVyLCBvciBgdGhpc2AgaW4gc29tZSB2aXJ0dWFsIG1hY2hpbmVzLiBXZSB1c2UgYHNlbGZgXG4gIC8vIGluc3RlYWQgb2YgYHdpbmRvd2AgZm9yIGBXZWJXb3JrZXJgIHN1cHBvcnQuXG4gIHZhciByb290ID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZi5zZWxmID09PSBzZWxmICYmIHNlbGYgfHxcbiAgICAgICAgICAgIHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsLmdsb2JhbCA9PT0gZ2xvYmFsICYmIGdsb2JhbCB8fFxuICAgICAgICAgICAgdGhpcyB8fFxuICAgICAgICAgICAge307XG5cbiAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBfYCB2YXJpYWJsZS5cbiAgdmFyIHByZXZpb3VzVW5kZXJzY29yZSA9IHJvb3QuXztcblxuICAvLyBTYXZlIGJ5dGVzIGluIHRoZSBtaW5pZmllZCAoYnV0IG5vdCBnemlwcGVkKSB2ZXJzaW9uOlxuICB2YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSwgT2JqUHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgU3ltYm9sUHJvdG8gPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyA/IFN5bWJvbC5wcm90b3R5cGUgOiBudWxsO1xuXG4gIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxuICB2YXIgcHVzaCA9IEFycmF5UHJvdG8ucHVzaCxcbiAgICAgIHNsaWNlID0gQXJyYXlQcm90by5zbGljZSxcbiAgICAgIHRvU3RyaW5nID0gT2JqUHJvdG8udG9TdHJpbmcsXG4gICAgICBoYXNPd25Qcm9wZXJ0eSA9IE9ialByb3RvLmhhc093blByb3BlcnR5O1xuXG4gIC8vIEFsbCAqKkVDTUFTY3JpcHQgNSoqIG5hdGl2ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbnMgdGhhdCB3ZSBob3BlIHRvIHVzZVxuICAvLyBhcmUgZGVjbGFyZWQgaGVyZS5cbiAgdmFyIG5hdGl2ZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5LFxuICAgICAgbmF0aXZlS2V5cyA9IE9iamVjdC5rZXlzLFxuICAgICAgbmF0aXZlQ3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuICAvLyBOYWtlZCBmdW5jdGlvbiByZWZlcmVuY2UgZm9yIHN1cnJvZ2F0ZS1wcm90b3R5cGUtc3dhcHBpbmcuXG4gIHZhciBDdG9yID0gZnVuY3Rpb24oKXt9O1xuXG4gIC8vIENyZWF0ZSBhIHNhZmUgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgdXNlIGJlbG93LlxuICB2YXIgXyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBfKSByZXR1cm4gb2JqO1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBfKSkgcmV0dXJuIG5ldyBfKG9iaik7XG4gICAgdGhpcy5fd3JhcHBlZCA9IG9iajtcbiAgfTtcblxuICAvLyBFeHBvcnQgdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciAqKk5vZGUuanMqKiwgd2l0aFxuICAvLyBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3IgdGhlaXIgb2xkIG1vZHVsZSBBUEkuIElmIHdlJ3JlIGluXG4gIC8vIHRoZSBicm93c2VyLCBhZGQgYF9gIGFzIGEgZ2xvYmFsIG9iamVjdC5cbiAgLy8gKGBub2RlVHlwZWAgaXMgY2hlY2tlZCB0byBlbnN1cmUgdGhhdCBgbW9kdWxlYFxuICAvLyBhbmQgYGV4cG9ydHNgIGFyZSBub3QgSFRNTCBlbGVtZW50cy4pXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiAhZXhwb3J0cy5ub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF87XG4gICAgfVxuICAgIGV4cG9ydHMuXyA9IF87XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fID0gXztcbiAgfVxuXG4gIC8vIEN1cnJlbnQgdmVyc2lvbi5cbiAgXy5WRVJTSU9OID0gJzEuOS4xJztcblxuICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gZWZmaWNpZW50IChmb3IgY3VycmVudCBlbmdpbmVzKSB2ZXJzaW9uXG4gIC8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlXG4gIC8vIGZ1bmN0aW9ucy5cbiAgdmFyIG9wdGltaXplQ2IgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jO1xuICAgIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkge1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgLy8gVGhlIDItYXJndW1lbnQgY2FzZSBpcyBvbWl0dGVkIGJlY2F1c2Ugd2XigJlyZSBub3QgdXNpbmcgaXQuXG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgYnVpbHRpbkl0ZXJhdGVlO1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGNhbGxiYWNrcyB0aGF0IGNhbiBiZSBhcHBsaWVkIHRvIGVhY2hcbiAgLy8gZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24sIHJldHVybmluZyB0aGUgZGVzaXJlZCByZXN1bHQg4oCUIGVpdGhlciBgaWRlbnRpdHlgLFxuICAvLyBhbiBhcmJpdHJhcnkgY2FsbGJhY2ssIGEgcHJvcGVydHkgbWF0Y2hlciwgb3IgYSBwcm9wZXJ0eSBhY2Nlc3Nvci5cbiAgdmFyIGNiID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KSB7XG4gICAgaWYgKF8uaXRlcmF0ZWUgIT09IGJ1aWx0aW5JdGVyYXRlZSkgcmV0dXJuIF8uaXRlcmF0ZWUodmFsdWUsIGNvbnRleHQpO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gXy5pZGVudGl0eTtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuIG9wdGltaXplQ2IodmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KTtcbiAgICBpZiAoXy5pc09iamVjdCh2YWx1ZSkgJiYgIV8uaXNBcnJheSh2YWx1ZSkpIHJldHVybiBfLm1hdGNoZXIodmFsdWUpO1xuICAgIHJldHVybiBfLnByb3BlcnR5KHZhbHVlKTtcbiAgfTtcblxuICAvLyBFeHRlcm5hbCB3cmFwcGVyIGZvciBvdXIgY2FsbGJhY2sgZ2VuZXJhdG9yLiBVc2VycyBtYXkgY3VzdG9taXplXG4gIC8vIGBfLml0ZXJhdGVlYCBpZiB0aGV5IHdhbnQgYWRkaXRpb25hbCBwcmVkaWNhdGUvaXRlcmF0ZWUgc2hvcnRoYW5kIHN0eWxlcy5cbiAgLy8gVGhpcyBhYnN0cmFjdGlvbiBoaWRlcyB0aGUgaW50ZXJuYWwtb25seSBhcmdDb3VudCBhcmd1bWVudC5cbiAgXy5pdGVyYXRlZSA9IGJ1aWx0aW5JdGVyYXRlZSA9IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNiKHZhbHVlLCBjb250ZXh0LCBJbmZpbml0eSk7XG4gIH07XG5cbiAgLy8gU29tZSBmdW5jdGlvbnMgdGFrZSBhIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHMsIG9yIGEgZmV3IGV4cGVjdGVkXG4gIC8vIGFyZ3VtZW50cyBhdCB0aGUgYmVnaW5uaW5nIGFuZCB0aGVuIGEgdmFyaWFibGUgbnVtYmVyIG9mIHZhbHVlcyB0byBvcGVyYXRlXG4gIC8vIG9uLiBUaGlzIGhlbHBlciBhY2N1bXVsYXRlcyBhbGwgcmVtYWluaW5nIGFyZ3VtZW50cyBwYXN0IHRoZSBmdW5jdGlvbuKAmXNcbiAgLy8gYXJndW1lbnQgbGVuZ3RoIChvciBhbiBleHBsaWNpdCBgc3RhcnRJbmRleGApLCBpbnRvIGFuIGFycmF5IHRoYXQgYmVjb21lc1xuICAvLyB0aGUgbGFzdCBhcmd1bWVudC4gU2ltaWxhciB0byBFUzbigJlzIFwicmVzdCBwYXJhbWV0ZXJcIi5cbiAgdmFyIHJlc3RBcmd1bWVudHMgPSBmdW5jdGlvbihmdW5jLCBzdGFydEluZGV4KSB7XG4gICAgc3RhcnRJbmRleCA9IHN0YXJ0SW5kZXggPT0gbnVsbCA/IGZ1bmMubGVuZ3RoIC0gMSA6ICtzdGFydEluZGV4O1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChhcmd1bWVudHMubGVuZ3RoIC0gc3RhcnRJbmRleCwgMCksXG4gICAgICAgICAgcmVzdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgZm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3RbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4ICsgc3RhcnRJbmRleF07XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIHJlc3QpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpcywgYXJndW1lbnRzWzBdLCByZXN0KTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCByZXN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkoc3RhcnRJbmRleCArIDEpO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgc3RhcnRJbmRleDsgaW5kZXgrKykge1xuICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICBhcmdzW3N0YXJ0SW5kZXhdID0gcmVzdDtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gYW5vdGhlci5cbiAgdmFyIGJhc2VDcmVhdGUgPSBmdW5jdGlvbihwcm90b3R5cGUpIHtcbiAgICBpZiAoIV8uaXNPYmplY3QocHJvdG90eXBlKSkgcmV0dXJuIHt9O1xuICAgIGlmIChuYXRpdmVDcmVhdGUpIHJldHVybiBuYXRpdmVDcmVhdGUocHJvdG90eXBlKTtcbiAgICBDdG9yLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEN0b3I7XG4gICAgQ3Rvci5wcm90b3R5cGUgPSBudWxsO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIHNoYWxsb3dQcm9wZXJ0eSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhcyA9IGZ1bmN0aW9uKG9iaiwgcGF0aCkge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcGF0aCk7XG4gIH1cblxuICB2YXIgZGVlcEdldCA9IGZ1bmN0aW9uKG9iaiwgcGF0aCkge1xuICAgIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB2b2lkIDA7XG4gICAgICBvYmogPSBvYmpbcGF0aFtpXV07XG4gICAgfVxuICAgIHJldHVybiBsZW5ndGggPyBvYmogOiB2b2lkIDA7XG4gIH07XG5cbiAgLy8gSGVscGVyIGZvciBjb2xsZWN0aW9uIG1ldGhvZHMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBjb2xsZWN0aW9uXG4gIC8vIHNob3VsZCBiZSBpdGVyYXRlZCBhcyBhbiBhcnJheSBvciBhcyBhbiBvYmplY3QuXG4gIC8vIFJlbGF0ZWQ6IGh0dHA6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvbGVuZ3RoXG4gIC8vIEF2b2lkcyBhIHZlcnkgbmFzdHkgaU9TIDggSklUIGJ1ZyBvbiBBUk0tNjQuICMyMDk0XG4gIHZhciBNQVhfQVJSQVlfSU5ERVggPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuICB2YXIgZ2V0TGVuZ3RoID0gc2hhbGxvd1Byb3BlcnR5KCdsZW5ndGgnKTtcbiAgdmFyIGlzQXJyYXlMaWtlID0gZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoY29sbGVjdGlvbik7XG4gICAgcmV0dXJuIHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgJiYgbGVuZ3RoID49IDAgJiYgbGVuZ3RoIDw9IE1BWF9BUlJBWV9JTkRFWDtcbiAgfTtcblxuICAvLyBDb2xsZWN0aW9uIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFRoZSBjb3JuZXJzdG9uZSwgYW4gYGVhY2hgIGltcGxlbWVudGF0aW9uLCBha2EgYGZvckVhY2hgLlxuICAvLyBIYW5kbGVzIHJhdyBvYmplY3RzIGluIGFkZGl0aW9uIHRvIGFycmF5LWxpa2VzLiBUcmVhdHMgYWxsXG4gIC8vIHNwYXJzZSBhcnJheS1saWtlcyBhcyBpZiB0aGV5IHdlcmUgZGVuc2UuXG4gIF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBpLCBsZW5ndGg7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdGVlKG9ialtrZXlzW2ldXSwga2V5c1tpXSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdGVlIHRvIGVhY2ggZWxlbWVudC5cbiAgXy5tYXAgPSBfLmNvbGxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdHMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICByZXN1bHRzW2luZGV4XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgcmVkdWNpbmcgZnVuY3Rpb24gaXRlcmF0aW5nIGxlZnQgb3IgcmlnaHQuXG4gIHZhciBjcmVhdGVSZWR1Y2UgPSBmdW5jdGlvbihkaXIpIHtcbiAgICAvLyBXcmFwIGNvZGUgdGhhdCByZWFzc2lnbnMgYXJndW1lbnQgdmFyaWFibGVzIGluIGEgc2VwYXJhdGUgZnVuY3Rpb24gdGhhblxuICAgIC8vIHRoZSBvbmUgdGhhdCBhY2Nlc3NlcyBgYXJndW1lbnRzLmxlbmd0aGAgdG8gYXZvaWQgYSBwZXJmIGhpdC4gKCMxOTkxKVxuICAgIHZhciByZWR1Y2VyID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgaW5pdGlhbCkge1xuICAgICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICAgIGlmICghaW5pdGlhbCkge1xuICAgICAgICBtZW1vID0gb2JqW2tleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4XTtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuICAgICAgfVxuICAgICAgZm9yICg7IGluZGV4ID49IDAgJiYgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IGRpcikge1xuICAgICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBtZW1vLCBjb250ZXh0KSB7XG4gICAgICB2YXIgaW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMztcbiAgICAgIHJldHVybiByZWR1Y2VyKG9iaiwgb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCksIG1lbW8sIGluaXRpYWwpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLFxuICAvLyBvciBgZm9sZGxgLlxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGNyZWF0ZVJlZHVjZSgxKTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBjcmVhdGVSZWR1Y2UoLTEpO1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBrZXlGaW5kZXIgPSBpc0FycmF5TGlrZShvYmopID8gXy5maW5kSW5kZXggOiBfLmZpbmRLZXk7XG4gICAgdmFyIGtleSA9IGtleUZpbmRlcihvYmosIHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgaWYgKGtleSAhPT0gdm9pZCAwICYmIGtleSAhPT0gLTEpIHJldHVybiBvYmpba2V5XTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLlxuICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cbiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIF8ubmVnYXRlKGNiKHByZWRpY2F0ZSkpLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYWxsYC5cbiAgXy5ldmVyeSA9IF8uYWxsID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAoIXByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYGFueWAuXG4gIF8uc29tZSA9IF8uYW55ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5IG9yIG9iamVjdCBjb250YWlucyBhIGdpdmVuIGl0ZW0gKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZXNgIGFuZCBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGVzID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCBpdGVtLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgIGlmICh0eXBlb2YgZnJvbUluZGV4ICE9ICdudW1iZXInIHx8IGd1YXJkKSBmcm9tSW5kZXggPSAwO1xuICAgIHJldHVybiBfLmluZGV4T2Yob2JqLCBpdGVtLCBmcm9tSW5kZXgpID49IDA7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihvYmosIHBhdGgsIGFyZ3MpIHtcbiAgICB2YXIgY29udGV4dFBhdGgsIGZ1bmM7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihwYXRoKSkge1xuICAgICAgZnVuYyA9IHBhdGg7XG4gICAgfSBlbHNlIGlmIChfLmlzQXJyYXkocGF0aCkpIHtcbiAgICAgIGNvbnRleHRQYXRoID0gcGF0aC5zbGljZSgwLCAtMSk7XG4gICAgICBwYXRoID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICB2YXIgbWV0aG9kID0gZnVuYztcbiAgICAgIGlmICghbWV0aG9kKSB7XG4gICAgICAgIGlmIChjb250ZXh0UGF0aCAmJiBjb250ZXh0UGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICBjb250ZXh0ID0gZGVlcEdldChjb250ZXh0LCBjb250ZXh0UGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgbWV0aG9kID0gY29udGV4dFtwYXRoXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXRob2QgPT0gbnVsbCA/IG1ldGhvZCA6IG1ldGhvZC5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgbWFwYDogZmV0Y2hpbmcgYSBwcm9wZXJ0eS5cbiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgXy5wcm9wZXJ0eShrZXkpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzXG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ud2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdFxuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmZpbmRXaGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maW5kKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCB8fCB0eXBlb2YgaXRlcmF0ZWUgPT0gJ251bWJlcicgJiYgdHlwZW9mIG9ialswXSAhPSAnb2JqZWN0JyAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSA+IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odiwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2LCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gLUluZmluaXR5ICYmIHJlc3VsdCA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdjtcbiAgICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtaW5pbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1pbiA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IEluZmluaXR5LFxuICAgICAgICB2YWx1ZSwgY29tcHV0ZWQ7XG4gICAgaWYgKGl0ZXJhdGVlID09IG51bGwgfHwgdHlwZW9mIGl0ZXJhdGVlID09ICdudW1iZXInICYmIHR5cGVvZiBvYmpbMF0gIT0gJ29iamVjdCcgJiYgb2JqICE9IG51bGwpIHtcbiAgICAgIG9iaiA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZSA9IG9ialtpXTtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdmFsdWUgPCByZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHYsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodiwgaW5kZXgsIGxpc3QpO1xuICAgICAgICBpZiAoY29tcHV0ZWQgPCBsYXN0Q29tcHV0ZWQgfHwgY29tcHV0ZWQgPT09IEluZmluaXR5ICYmIHJlc3VsdCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2O1xuICAgICAgICAgIGxhc3RDb21wdXRlZCA9IGNvbXB1dGVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBTaHVmZmxlIGEgY29sbGVjdGlvbi5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8uc2FtcGxlKG9iaiwgSW5maW5pdHkpO1xuICB9O1xuXG4gIC8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYSBjb2xsZWN0aW9uIHVzaW5nIHRoZSBtb2Rlcm4gdmVyc2lvbiBvZiB0aGVcbiAgLy8gW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlcuKAk1lhdGVzX3NodWZmbGUpLlxuICAvLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LlxuICAvLyBUaGUgaW50ZXJuYWwgYGd1YXJkYCBhcmd1bWVudCBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBtYXBgLlxuICBfLnNhbXBsZSA9IGZ1bmN0aW9uKG9iaiwgbiwgZ3VhcmQpIHtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7XG4gICAgICBpZiAoIWlzQXJyYXlMaWtlKG9iaikpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgICByZXR1cm4gb2JqW18ucmFuZG9tKG9iai5sZW5ndGggLSAxKV07XG4gICAgfVxuICAgIHZhciBzYW1wbGUgPSBpc0FycmF5TGlrZShvYmopID8gXy5jbG9uZShvYmopIDogXy52YWx1ZXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKHNhbXBsZSk7XG4gICAgbiA9IE1hdGgubWF4KE1hdGgubWluKG4sIGxlbmd0aCksIDApO1xuICAgIHZhciBsYXN0ID0gbGVuZ3RoIC0gMTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbjsgaW5kZXgrKykge1xuICAgICAgdmFyIHJhbmQgPSBfLnJhbmRvbShpbmRleCwgbGFzdCk7XG4gICAgICB2YXIgdGVtcCA9IHNhbXBsZVtpbmRleF07XG4gICAgICBzYW1wbGVbaW5kZXhdID0gc2FtcGxlW3JhbmRdO1xuICAgICAgc2FtcGxlW3JhbmRdID0gdGVtcDtcbiAgICB9XG4gICAgcmV0dXJuIHNhbXBsZS5zbGljZSgwLCBuKTtcbiAgfTtcblxuICAvLyBTb3J0IHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24gcHJvZHVjZWQgYnkgYW4gaXRlcmF0ZWUuXG4gIF8uc29ydEJ5ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIF8ucGx1Y2soXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBsaXN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGluZGV4OiBpbmRleCsrLFxuICAgICAgICBjcml0ZXJpYTogaXRlcmF0ZWUodmFsdWUsIGtleSwgbGlzdClcbiAgICAgIH07XG4gICAgfSkuc29ydChmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhO1xuICAgICAgdmFyIGIgPSByaWdodC5jcml0ZXJpYTtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIGlmIChhID4gYiB8fCBhID09PSB2b2lkIDApIHJldHVybiAxO1xuICAgICAgICBpZiAoYSA8IGIgfHwgYiA9PT0gdm9pZCAwKSByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGVmdC5pbmRleCAtIHJpZ2h0LmluZGV4O1xuICAgIH0pLCAndmFsdWUnKTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZvciBhZ2dyZWdhdGUgXCJncm91cCBieVwiIG9wZXJhdGlvbnMuXG4gIHZhciBncm91cCA9IGZ1bmN0aW9uKGJlaGF2aW9yLCBwYXJ0aXRpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHBhcnRpdGlvbiA/IFtbXSwgW11dIDoge307XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIga2V5ID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBvYmopO1xuICAgICAgICBiZWhhdmlvcihyZXN1bHQsIHZhbHVlLCBrZXkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gR3JvdXBzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24uIFBhc3MgZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZVxuICAvLyB0byBncm91cCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNyaXRlcmlvbi5cbiAgXy5ncm91cEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgaWYgKGhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldLnB1c2godmFsdWUpOyBlbHNlIHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcbiAgfSk7XG5cbiAgLy8gSW5kZXhlcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLCBzaW1pbGFyIHRvIGBncm91cEJ5YCwgYnV0IGZvclxuICAvLyB3aGVuIHlvdSBrbm93IHRoYXQgeW91ciBpbmRleCB2YWx1ZXMgd2lsbCBiZSB1bmlxdWUuXG4gIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH0pO1xuXG4gIC8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuICAvLyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlIHRvIGNvdW50IGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgLy8gY3JpdGVyaW9uLlxuICBfLmNvdW50QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0rKzsgZWxzZSByZXN1bHRba2V5XSA9IDE7XG4gIH0pO1xuXG4gIHZhciByZVN0clN5bWJvbCA9IC9bXlxcdWQ4MDAtXFx1ZGZmZl18W1xcdWQ4MDAtXFx1ZGJmZl1bXFx1ZGMwMC1cXHVkZmZmXXxbXFx1ZDgwMC1cXHVkZmZmXS9nO1xuICAvLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLlxuICBfLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIFtdO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcbiAgICBpZiAoXy5pc1N0cmluZyhvYmopKSB7XG4gICAgICAvLyBLZWVwIHN1cnJvZ2F0ZSBwYWlyIGNoYXJhY3RlcnMgdG9nZXRoZXJcbiAgICAgIHJldHVybiBvYmoubWF0Y2gocmVTdHJTeW1ib2wpO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkgcmV0dXJuIF8ubWFwKG9iaiwgXy5pZGVudGl0eSk7XG4gICAgcmV0dXJuIF8udmFsdWVzKG9iaik7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gb2JqZWN0LlxuICBfLnNpemUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiAwO1xuICAgIHJldHVybiBpc0FycmF5TGlrZShvYmopID8gb2JqLmxlbmd0aCA6IF8ua2V5cyhvYmopLmxlbmd0aDtcbiAgfTtcblxuICAvLyBTcGxpdCBhIGNvbGxlY3Rpb24gaW50byB0d28gYXJyYXlzOiBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIHNhdGlzZnkgdGhlIGdpdmVuXG4gIC8vIHByZWRpY2F0ZSwgYW5kIG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgZG8gbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZS5cbiAgXy5wYXJ0aXRpb24gPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBwYXNzKSB7XG4gICAgcmVzdWx0W3Bhc3MgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gIH0sIHRydWUpO1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPCAxKSByZXR1cm4gbiA9PSBudWxsID8gdm9pZCAwIDogW107XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkgcmV0dXJuIGFycmF5WzBdO1xuICAgIHJldHVybiBfLmluaXRpYWwoYXJyYXksIGFycmF5Lmxlbmd0aCAtIG4pO1xuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGxhc3QgZW50cnkgb2YgdGhlIGFycmF5LiBFc3BlY2lhbGx5IHVzZWZ1bCBvblxuICAvLyB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiBhbGwgdGhlIHZhbHVlcyBpblxuICAvLyB0aGUgYXJyYXksIGV4Y2x1ZGluZyB0aGUgbGFzdCBOLlxuICBfLmluaXRpYWwgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgMCwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gKG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKSkpO1xuICB9O1xuXG4gIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBsYXN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS5cbiAgXy5sYXN0ID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoIDwgMSkgcmV0dXJuIG4gPT0gbnVsbCA/IHZvaWQgMCA6IFtdO1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gXy5yZXN0KGFycmF5LCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSBuKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLlxuICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVyblxuICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuXG4gIF8ucmVzdCA9IF8udGFpbCA9IF8uZHJvcCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbik7XG4gIH07XG5cbiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgQm9vbGVhbik7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLlxuICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0LCBzaGFsbG93LCBzdHJpY3QsIG91dHB1dCkge1xuICAgIG91dHB1dCA9IG91dHB1dCB8fCBbXTtcbiAgICB2YXIgaWR4ID0gb3V0cHV0Lmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGlucHV0KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiYgKF8uaXNBcnJheSh2YWx1ZSkgfHwgXy5pc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIC8vIEZsYXR0ZW4gY3VycmVudCBsZXZlbCBvZiBhcnJheSBvciBhcmd1bWVudHMgb2JqZWN0LlxuICAgICAgICBpZiAoc2hhbGxvdykge1xuICAgICAgICAgIHZhciBqID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChqIDwgbGVuKSBvdXRwdXRbaWR4KytdID0gdmFsdWVbaisrXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBzdHJpY3QsIG91dHB1dCk7XG4gICAgICAgICAgaWR4ID0gb3V0cHV0Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghc3RyaWN0KSB7XG4gICAgICAgIG91dHB1dFtpZHgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICAvLyBGbGF0dGVuIG91dCBhbiBhcnJheSwgZWl0aGVyIHJlY3Vyc2l2ZWx5IChieSBkZWZhdWx0KSwgb3IganVzdCBvbmUgbGV2ZWwuXG4gIF8uZmxhdHRlbiA9IGZ1bmN0aW9uKGFycmF5LCBzaGFsbG93KSB7XG4gICAgcmV0dXJuIGZsYXR0ZW4oYXJyYXksIHNoYWxsb3csIGZhbHNlKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoZSBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCB2YWx1ZShzKS5cbiAgXy53aXRob3V0ID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcnJheSwgb3RoZXJBcnJheXMpIHtcbiAgICByZXR1cm4gXy5kaWZmZXJlbmNlKGFycmF5LCBvdGhlckFycmF5cyk7XG4gIH0pO1xuXG4gIC8vIFByb2R1Y2UgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIHRoZSBhcnJheS4gSWYgdGhlIGFycmF5IGhhcyBhbHJlYWR5XG4gIC8vIGJlZW4gc29ydGVkLCB5b3UgaGF2ZSB0aGUgb3B0aW9uIG9mIHVzaW5nIGEgZmFzdGVyIGFsZ29yaXRobS5cbiAgLy8gVGhlIGZhc3RlciBhbGdvcml0aG0gd2lsbCBub3Qgd29yayB3aXRoIGFuIGl0ZXJhdGVlIGlmIHRoZSBpdGVyYXRlZVxuICAvLyBpcyBub3QgYSBvbmUtdG8tb25lIGZ1bmN0aW9uLCBzbyBwcm92aWRpbmcgYW4gaXRlcmF0ZWUgd2lsbCBkaXNhYmxlXG4gIC8vIHRoZSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLlxuICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpZiAoIV8uaXNCb29sZWFuKGlzU29ydGVkKSkge1xuICAgICAgY29udGV4dCA9IGl0ZXJhdGVlO1xuICAgICAgaXRlcmF0ZWUgPSBpc1NvcnRlZDtcbiAgICAgIGlzU29ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpdGVyYXRlZSAhPSBudWxsKSBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIHNlZW4gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpXSxcbiAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUsIGksIGFycmF5KSA6IHZhbHVlO1xuICAgICAgaWYgKGlzU29ydGVkICYmICFpdGVyYXRlZSkge1xuICAgICAgICBpZiAoIWkgfHwgc2VlbiAhPT0gY29tcHV0ZWQpIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgfSBlbHNlIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoc2VlbiwgY29tcHV0ZWQpKSB7XG4gICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIV8uY29udGFpbnMocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZlxuICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy5cbiAgXy51bmlvbiA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgcmV0dXJuIF8udW5pcShmbGF0dGVuKGFycmF5cywgdHJ1ZSwgdHJ1ZSkpO1xuICB9KTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgZXZlcnkgaXRlbSBzaGFyZWQgYmV0d2VlbiBhbGwgdGhlXG4gIC8vIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8uaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gYXJyYXlbaV07XG4gICAgICBpZiAoXy5jb250YWlucyhyZXN1bHQsIGl0ZW0pKSBjb250aW51ZTtcbiAgICAgIHZhciBqO1xuICAgICAgZm9yIChqID0gMTsgaiA8IGFyZ3NMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoYXJndW1lbnRzW2pdLCBpdGVtKSkgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaiA9PT0gYXJnc0xlbmd0aCkgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGFycmF5LCByZXN0KSB7XG4gICAgcmVzdCA9IGZsYXR0ZW4ocmVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICByZXR1cm4gIV8uY29udGFpbnMocmVzdCwgdmFsdWUpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBDb21wbGVtZW50IG9mIF8uemlwLiBVbnppcCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyBhbmQgZ3JvdXBzXG4gIC8vIGVhY2ggYXJyYXkncyBlbGVtZW50cyBvbiBzaGFyZWQgaW5kaWNlcy5cbiAgXy51bnppcCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ICYmIF8ubWF4KGFycmF5LCBnZXRMZW5ndGgpLmxlbmd0aCB8fCAwO1xuICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IF8ucGx1Y2soYXJyYXksIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBaaXAgdG9nZXRoZXIgbXVsdGlwbGUgbGlzdHMgaW50byBhIHNpbmdsZSBhcnJheSAtLSBlbGVtZW50cyB0aGF0IHNoYXJlXG4gIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLlxuICBfLnppcCA9IHJlc3RBcmd1bWVudHMoXy51bnppcCk7XG5cbiAgLy8gQ29udmVydHMgbGlzdHMgaW50byBvYmplY3RzLiBQYXNzIGVpdGhlciBhIHNpbmdsZSBhcnJheSBvZiBgW2tleSwgdmFsdWVdYFxuICAvLyBwYWlycywgb3IgdHdvIHBhcmFsbGVsIGFycmF5cyBvZiB0aGUgc2FtZSBsZW5ndGggLS0gb25lIG9mIGtleXMsIGFuZCBvbmUgb2ZcbiAgLy8gdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzLiBQYXNzaW5nIGJ5IHBhaXJzIGlzIHRoZSByZXZlcnNlIG9mIF8ucGFpcnMuXG4gIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgobGlzdCk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRvciBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGZpbmRJbmRleCBhbmQgZmluZExhc3RJbmRleCBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlciA9IGZ1bmN0aW9uKGRpcikge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgICB2YXIgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBpbmRleCBvbiBhbiBhcnJheS1saWtlIHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3QuXG4gIF8uZmluZEluZGV4ID0gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoMSk7XG4gIF8uZmluZExhc3RJbmRleCA9IGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyKC0xKTtcblxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4gIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgdmFyIHZhbHVlID0gaXRlcmF0ZWUob2JqKTtcbiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W21pZF0pIDwgdmFsdWUpIGxvdyA9IG1pZCArIDE7IGVsc2UgaGlnaCA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbiAgfTtcblxuICAvLyBHZW5lcmF0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBpbmRleE9mIGFuZCBsYXN0SW5kZXhPZiBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVJbmRleEZpbmRlciA9IGZ1bmN0aW9uKGRpciwgcHJlZGljYXRlRmluZCwgc29ydGVkSW5kZXgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlkeCkge1xuICAgICAgdmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpO1xuICAgICAgaWYgKHR5cGVvZiBpZHggPT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKGRpciA+IDApIHtcbiAgICAgICAgICBpID0gaWR4ID49IDAgPyBpZHggOiBNYXRoLm1heChpZHggKyBsZW5ndGgsIGkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxlbmd0aCA9IGlkeCA+PSAwID8gTWF0aC5taW4oaWR4ICsgMSwgbGVuZ3RoKSA6IGlkeCArIGxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc29ydGVkSW5kZXggJiYgaWR4ICYmIGxlbmd0aCkge1xuICAgICAgICBpZHggPSBzb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpZHhdID09PSBpdGVtID8gaWR4IDogLTE7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbSAhPT0gaXRlbSkge1xuICAgICAgICBpZHggPSBwcmVkaWNhdGVGaW5kKHNsaWNlLmNhbGwoYXJyYXksIGksIGxlbmd0aCksIF8uaXNOYU4pO1xuICAgICAgICByZXR1cm4gaWR4ID49IDAgPyBpZHggKyBpIDogLTE7XG4gICAgICB9XG4gICAgICBmb3IgKGlkeCA9IGRpciA+IDAgPyBpIDogbGVuZ3RoIC0gMTsgaWR4ID49IDAgJiYgaWR4IDwgbGVuZ3RoOyBpZHggKz0gZGlyKSB7XG4gICAgICAgIGlmIChhcnJheVtpZHhdID09PSBpdGVtKSByZXR1cm4gaWR4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhbiBpdGVtIGluIGFuIGFycmF5LFxuICAvLyBvciAtMSBpZiB0aGUgaXRlbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5LlxuICAvLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcbiAgLy8gZm9yICoqaXNTb3J0ZWQqKiB0byB1c2UgYmluYXJ5IHNlYXJjaC5cbiAgXy5pbmRleE9mID0gY3JlYXRlSW5kZXhGaW5kZXIoMSwgXy5maW5kSW5kZXgsIF8uc29ydGVkSW5kZXgpO1xuICBfLmxhc3RJbmRleE9mID0gY3JlYXRlSW5kZXhGaW5kZXIoLTEsIF8uZmluZExhc3RJbmRleCk7XG5cbiAgLy8gR2VuZXJhdGUgYW4gaW50ZWdlciBBcnJheSBjb250YWluaW5nIGFuIGFyaXRobWV0aWMgcHJvZ3Jlc3Npb24uIEEgcG9ydCBvZlxuICAvLyB0aGUgbmF0aXZlIFB5dGhvbiBgcmFuZ2UoKWAgZnVuY3Rpb24uIFNlZVxuICAvLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLlxuICBfLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBpZiAoc3RvcCA9PSBudWxsKSB7XG4gICAgICBzdG9wID0gc3RhcnQgfHwgMDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgaWYgKCFzdGVwKSB7XG4gICAgICBzdGVwID0gc3RvcCA8IHN0YXJ0ID8gLTEgOiAxO1xuICAgIH1cblxuICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XG4gICAgdmFyIHJhbmdlID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyssIHN0YXJ0ICs9IHN0ZXApIHtcbiAgICAgIHJhbmdlW2lkeF0gPSBzdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgLy8gQ2h1bmsgYSBzaW5nbGUgYXJyYXkgaW50byBtdWx0aXBsZSBhcnJheXMsIGVhY2ggY29udGFpbmluZyBgY291bnRgIG9yIGZld2VyXG4gIC8vIGl0ZW1zLlxuICBfLmNodW5rID0gZnVuY3Rpb24oYXJyYXksIGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwgfHwgY291bnQgPCAxKSByZXR1cm4gW107XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHQucHVzaChzbGljZS5jYWxsKGFycmF5LCBpLCBpICs9IGNvdW50KSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gZXhlY3V0ZSBhIGZ1bmN0aW9uIGFzIGEgY29uc3RydWN0b3JcbiAgLy8gb3IgYSBub3JtYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICB2YXIgZXhlY3V0ZUJvdW5kID0gZnVuY3Rpb24oc291cmNlRnVuYywgYm91bmRGdW5jLCBjb250ZXh0LCBjYWxsaW5nQ29udGV4dCwgYXJncykge1xuICAgIGlmICghKGNhbGxpbmdDb250ZXh0IGluc3RhbmNlb2YgYm91bmRGdW5jKSkgcmV0dXJuIHNvdXJjZUZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgdmFyIHNlbGYgPSBiYXNlQ3JlYXRlKHNvdXJjZUZ1bmMucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gc291cmNlRnVuYy5hcHBseShzZWxmLCBhcmdzKTtcbiAgICBpZiAoXy5pc09iamVjdChyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIGZ1bmN0aW9uIGJvdW5kIHRvIGEgZ2l2ZW4gb2JqZWN0IChhc3NpZ25pbmcgYHRoaXNgLCBhbmQgYXJndW1lbnRzLFxuICAvLyBvcHRpb25hbGx5KS4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYEZ1bmN0aW9uLmJpbmRgIGlmXG4gIC8vIGF2YWlsYWJsZS5cbiAgXy5iaW5kID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdzKSB7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JpbmQgbXVzdCBiZSBjYWxsZWQgb24gYSBmdW5jdGlvbicpO1xuICAgIHZhciBib3VuZCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oY2FsbEFyZ3MpIHtcbiAgICAgIHJldHVybiBleGVjdXRlQm91bmQoZnVuYywgYm91bmQsIGNvbnRleHQsIHRoaXMsIGFyZ3MuY29uY2F0KGNhbGxBcmdzKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJvdW5kO1xuICB9KTtcblxuICAvLyBQYXJ0aWFsbHkgYXBwbHkgYSBmdW5jdGlvbiBieSBjcmVhdGluZyBhIHZlcnNpb24gdGhhdCBoYXMgaGFkIHNvbWUgb2YgaXRzXG4gIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LiBfIGFjdHNcbiAgLy8gYXMgYSBwbGFjZWhvbGRlciBieSBkZWZhdWx0LCBhbGxvd2luZyBhbnkgY29tYmluYXRpb24gb2YgYXJndW1lbnRzIHRvIGJlXG4gIC8vIHByZS1maWxsZWQuIFNldCBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCBmb3IgYSBjdXN0b20gcGxhY2Vob2xkZXIgYXJndW1lbnQuXG4gIF8ucGFydGlhbCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgYm91bmRBcmdzKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0gXy5wYXJ0aWFsLnBsYWNlaG9sZGVyO1xuICAgIHZhciBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gMCwgbGVuZ3RoID0gYm91bmRBcmdzLmxlbmd0aDtcbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJnc1tpXSA9IGJvdW5kQXJnc1tpXSA9PT0gcGxhY2Vob2xkZXIgPyBhcmd1bWVudHNbcG9zaXRpb24rK10gOiBib3VuZEFyZ3NbaV07XG4gICAgICB9XG4gICAgICB3aGlsZSAocG9zaXRpb24gPCBhcmd1bWVudHMubGVuZ3RoKSBhcmdzLnB1c2goYXJndW1lbnRzW3Bvc2l0aW9uKytdKTtcbiAgICAgIHJldHVybiBleGVjdXRlQm91bmQoZnVuYywgYm91bmQsIHRoaXMsIHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gICAgcmV0dXJuIGJvdW5kO1xuICB9KTtcblxuICBfLnBhcnRpYWwucGxhY2Vob2xkZXIgPSBfO1xuXG4gIC8vIEJpbmQgYSBudW1iZXIgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gUmVtYWluaW5nIGFyZ3VtZW50c1xuICAvLyBhcmUgdGhlIG1ldGhvZCBuYW1lcyB0byBiZSBib3VuZC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGFsbCBjYWxsYmFja3NcbiAgLy8gZGVmaW5lZCBvbiBhbiBvYmplY3QgYmVsb25nIHRvIGl0LlxuICBfLmJpbmRBbGwgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICAgIGtleXMgPSBmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSk7XG4gICAgdmFyIGluZGV4ID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKGluZGV4IDwgMSkgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWxsIG11c3QgYmUgcGFzc2VkIGZ1bmN0aW9uIG5hbWVzJyk7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIG9ialtrZXldID0gXy5iaW5kKG9ialtrZXldLCBvYmopO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gTWVtb2l6ZSBhbiBleHBlbnNpdmUgZnVuY3Rpb24gYnkgc3RvcmluZyBpdHMgcmVzdWx0cy5cbiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7XG4gICAgdmFyIG1lbW9pemUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBjYWNoZSA9IG1lbW9pemUuY2FjaGU7XG4gICAgICB2YXIgYWRkcmVzcyA9ICcnICsgKGhhc2hlciA/IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDoga2V5KTtcbiAgICAgIGlmICghaGFzKGNhY2hlLCBhZGRyZXNzKSkgY2FjaGVbYWRkcmVzc10gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gY2FjaGVbYWRkcmVzc107XG4gICAgfTtcbiAgICBtZW1vaXplLmNhY2hlID0ge307XG4gICAgcmV0dXJuIG1lbW9pemU7XG4gIH07XG5cbiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxsc1xuICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG4gIF8uZGVsYXkgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0sIHdhaXQpO1xuICB9KTtcblxuICAvLyBEZWZlcnMgYSBmdW5jdGlvbiwgc2NoZWR1bGluZyBpdCB0byBydW4gYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXNcbiAgLy8gY2xlYXJlZC5cbiAgXy5kZWZlciA9IF8ucGFydGlhbChfLmRlbGF5LCBfLCAxKTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2VcbiAgLy8gZHVyaW5nIGEgZ2l2ZW4gd2luZG93IG9mIHRpbWUuIE5vcm1hbGx5LCB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHdpbGwgcnVuXG4gIC8vIGFzIG11Y2ggYXMgaXQgY2FuLCB3aXRob3V0IGV2ZXIgZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbjtcbiAgLy8gYnV0IGlmIHlvdSdkIGxpa2UgdG8gZGlzYWJsZSB0aGUgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2UsIHBhc3NcbiAgLy8gYHtsZWFkaW5nOiBmYWxzZX1gLiBUbyBkaXNhYmxlIGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSwgZGl0dG8uXG4gIF8udGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgdmFyIHRpbWVvdXQsIGNvbnRleHQsIGFyZ3MsIHJlc3VsdDtcbiAgICB2YXIgcHJldmlvdXMgPSAwO1xuICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogXy5ub3coKTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG5cbiAgICB2YXIgdGhyb3R0bGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm93ID0gXy5ub3coKTtcbiAgICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7XG4gICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91cyA9IG5vdztcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdGhyb3R0bGVkLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgcHJldmlvdXMgPSAwO1xuICAgICAgdGltZW91dCA9IGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRocm90dGxlZDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gIC8vIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3JcbiAgLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4gIC8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICB2YXIgdGltZW91dCwgcmVzdWx0O1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oY29udGV4dCwgYXJncykge1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICBpZiAoYXJncykgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgdmFyIGRlYm91bmNlZCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJncykge1xuICAgICAgaWYgKHRpbWVvdXQpIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgICAgdmFyIGNhbGxOb3cgPSAhdGltZW91dDtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgICBpZiAoY2FsbE5vdykgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWVvdXQgPSBfLmRlbGF5KGxhdGVyLCB3YWl0LCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIGRlYm91bmNlZC5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gZGVib3VuY2VkO1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLFxuICAvLyBhbGxvd2luZyB5b3UgdG8gYWRqdXN0IGFyZ3VtZW50cywgcnVuIGNvZGUgYmVmb3JlIGFuZCBhZnRlciwgYW5kXG4gIC8vIGNvbmRpdGlvbmFsbHkgZXhlY3V0ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gIF8ud3JhcCA9IGZ1bmN0aW9uKGZ1bmMsIHdyYXBwZXIpIHtcbiAgICByZXR1cm4gXy5wYXJ0aWFsKHdyYXBwZXIsIGZ1bmMpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIHBhc3NlZC1pbiBwcmVkaWNhdGUuXG4gIF8ubmVnYXRlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoXG4gIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuXG4gIF8uY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdGFydCA9IGFyZ3MubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IHN0YXJ0O1xuICAgICAgdmFyIHJlc3VsdCA9IGFyZ3Nbc3RhcnRdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB3aGlsZSAoaS0tKSByZXN1bHQgPSBhcmdzW2ldLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgb24gYW5kIGFmdGVyIHRoZSBOdGggY2FsbC5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgdXAgdG8gKGJ1dCBub3QgaW5jbHVkaW5nKSB0aGUgTnRoIGNhbGwuXG4gIF8uYmVmb3JlID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICB2YXIgbWVtbztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA+IDApIHtcbiAgICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lcyA8PSAxKSBmdW5jID0gbnVsbDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93XG4gIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uXG4gIF8ub25jZSA9IF8ucGFydGlhbChfLmJlZm9yZSwgMik7XG5cbiAgXy5yZXN0QXJndW1lbnRzID0gcmVzdEFyZ3VtZW50cztcblxuICAvLyBPYmplY3QgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBLZXlzIGluIElFIDwgOSB0aGF0IHdvbid0IGJlIGl0ZXJhdGVkIGJ5IGBmb3Iga2V5IGluIC4uLmAgYW5kIHRodXMgbWlzc2VkLlxuICB2YXIgaGFzRW51bUJ1ZyA9ICF7dG9TdHJpbmc6IG51bGx9LnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpO1xuICB2YXIgbm9uRW51bWVyYWJsZVByb3BzID0gWyd2YWx1ZU9mJywgJ2lzUHJvdG90eXBlT2YnLCAndG9TdHJpbmcnLFxuICAgICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICdoYXNPd25Qcm9wZXJ0eScsICd0b0xvY2FsZVN0cmluZyddO1xuXG4gIHZhciBjb2xsZWN0Tm9uRW51bVByb3BzID0gZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgdmFyIG5vbkVudW1JZHggPSBub25FbnVtZXJhYmxlUHJvcHMubGVuZ3RoO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IG9iai5jb25zdHJ1Y3RvcjtcbiAgICB2YXIgcHJvdG8gPSBfLmlzRnVuY3Rpb24oY29uc3RydWN0b3IpICYmIGNvbnN0cnVjdG9yLnByb3RvdHlwZSB8fCBPYmpQcm90bztcblxuICAgIC8vIENvbnN0cnVjdG9yIGlzIGEgc3BlY2lhbCBjYXNlLlxuICAgIHZhciBwcm9wID0gJ2NvbnN0cnVjdG9yJztcbiAgICBpZiAoaGFzKG9iaiwgcHJvcCkgJiYgIV8uY29udGFpbnMoa2V5cywgcHJvcCkpIGtleXMucHVzaChwcm9wKTtcblxuICAgIHdoaWxlIChub25FbnVtSWR4LS0pIHtcbiAgICAgIHByb3AgPSBub25FbnVtZXJhYmxlUHJvcHNbbm9uRW51bUlkeF07XG4gICAgICBpZiAocHJvcCBpbiBvYmogJiYgb2JqW3Byb3BdICE9PSBwcm90b1twcm9wXSAmJiAhXy5jb250YWlucyhrZXlzLCBwcm9wKSkge1xuICAgICAgICBrZXlzLnB1c2gocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYC5cbiAgXy5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChoYXMob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTtcbiAgICAvLyBBaGVtLCBJRSA8IDkuXG4gICAgaWYgKGhhc0VudW1CdWcpIGNvbGxlY3ROb25FbnVtUHJvcHMob2JqLCBrZXlzKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcblxuICAvLyBSZXRyaWV2ZSBhbGwgdGhlIHByb3BlcnR5IG5hbWVzIG9mIGFuIG9iamVjdC5cbiAgXy5hbGxLZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICAgIC8vIEFoZW0sIElFIDwgOS5cbiAgICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIHRoZSB2YWx1ZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgXy52YWx1ZXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgdmFsdWVzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXNbaV0gPSBvYmpba2V5c1tpXV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0ZWUgdG8gZWFjaCBlbGVtZW50IG9mIHRoZSBvYmplY3QuXG4gIC8vIEluIGNvbnRyYXN0IHRvIF8ubWFwIGl0IHJldHVybnMgYW4gb2JqZWN0LlxuICBfLm1hcE9iamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgICAgcmVzdWx0cyA9IHt9O1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5c1tpbmRleF07XG4gICAgICByZXN1bHRzW2N1cnJlbnRLZXldID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cbiAgLy8gVGhlIG9wcG9zaXRlIG9mIF8ub2JqZWN0LlxuICBfLnBhaXJzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIHBhaXJzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBwYWlyc1tpXSA9IFtrZXlzW2ldLCBvYmpba2V5c1tpXV1dO1xuICAgIH1cbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuICBfLmludmVydCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbb2JqW2tleXNbaV1dXSA9IGtleXNbaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgc29ydGVkIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uIG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0LlxuICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYC5cbiAgXy5mdW5jdGlvbnMgPSBfLm1ldGhvZHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgbmFtZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKG9ialtrZXldKSkgbmFtZXMucHVzaChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZXMuc29ydCgpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhc3NpZ25lciBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVBc3NpZ25lciA9IGZ1bmN0aW9uKGtleXNGdW5jLCBkZWZhdWx0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKGRlZmF1bHRzKSBvYmogPSBPYmplY3Qob2JqKTtcbiAgICAgIGlmIChsZW5ndGggPCAyIHx8IG9iaiA9PSBudWxsKSByZXR1cm4gb2JqO1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2luZGV4XSxcbiAgICAgICAgICAgIGtleXMgPSBrZXlzRnVuYyhzb3VyY2UpLFxuICAgICAgICAgICAgbCA9IGtleXMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmICghZGVmYXVsdHMgfHwgb2JqW2tleV0gPT09IHZvaWQgMCkgb2JqW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEV4dGVuZCBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgcHJvcGVydGllcyBpbiBwYXNzZWQtaW4gb2JqZWN0KHMpLlxuICBfLmV4dGVuZCA9IGNyZWF0ZUFzc2lnbmVyKF8uYWxsS2V5cyk7XG5cbiAgLy8gQXNzaWducyBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgb3duIHByb3BlcnRpZXMgaW4gdGhlIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIC8vIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduKVxuICBfLmV4dGVuZE93biA9IF8uYXNzaWduID0gY3JlYXRlQXNzaWduZXIoXy5rZXlzKTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBrZXkgb24gYW4gb2JqZWN0IHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3QuXG4gIF8uZmluZEtleSA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopLCBrZXk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtrZXldLCBrZXksIG9iaikpIHJldHVybiBrZXk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEludGVybmFsIHBpY2sgaGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBgb2JqYCBoYXMga2V5IGBrZXlgLlxuICB2YXIga2V5SW5PYmogPSBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHtcbiAgICByZXR1cm4ga2V5IGluIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgb25seSBjb250YWluaW5nIHRoZSB3aGl0ZWxpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLnBpY2sgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICAgIHZhciByZXN1bHQgPSB7fSwgaXRlcmF0ZWUgPSBrZXlzWzBdO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgICAgaWYgKGtleXMubGVuZ3RoID4gMSkgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBrZXlzWzFdKTtcbiAgICAgIGtleXMgPSBfLmFsbEtleXMob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUgPSBrZXlJbk9iajtcbiAgICAgIGtleXMgPSBmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSk7XG4gICAgICBvYmogPSBPYmplY3Qob2JqKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICBpZiAoaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqKSkgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IHdpdGhvdXQgdGhlIGJsYWNrbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ub21pdCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgdmFyIGl0ZXJhdGVlID0ga2V5c1swXSwgY29udGV4dDtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgICAgaXRlcmF0ZWUgPSBfLm5lZ2F0ZShpdGVyYXRlZSk7XG4gICAgICBpZiAoa2V5cy5sZW5ndGggPiAxKSBjb250ZXh0ID0ga2V5c1sxXTtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5cyA9IF8ubWFwKGZsYXR0ZW4oa2V5cywgZmFsc2UsIGZhbHNlKSwgU3RyaW5nKTtcbiAgICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICByZXR1cm4gIV8uY29udGFpbnMoa2V5cywga2V5KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBfLnBpY2sob2JqLCBpdGVyYXRlZSwgY29udGV4dCk7XG4gIH0pO1xuXG4gIC8vIEZpbGwgaW4gYSBnaXZlbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMuXG4gIF8uZGVmYXVsdHMgPSBjcmVhdGVBc3NpZ25lcihfLmFsbEtleXMsIHRydWUpO1xuXG4gIC8vIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgZ2l2ZW4gcHJvdG90eXBlIG9iamVjdC5cbiAgLy8gSWYgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGFyZSBwcm92aWRlZCB0aGVuIHRoZXkgd2lsbCBiZSBhZGRlZCB0byB0aGVcbiAgLy8gY3JlYXRlZCBvYmplY3QuXG4gIF8uY3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlLCBwcm9wcykge1xuICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgaWYgKHByb3BzKSBfLmV4dGVuZE93bihyZXN1bHQsIHByb3BzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIChzaGFsbG93LWNsb25lZCkgZHVwbGljYXRlIG9mIGFuIG9iamVjdC5cbiAgXy5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICAgIHJldHVybiBfLmlzQXJyYXkob2JqKSA/IG9iai5zbGljZSgpIDogXy5leHRlbmQoe30sIG9iaik7XG4gIH07XG5cbiAgLy8gSW52b2tlcyBpbnRlcmNlcHRvciB3aXRoIHRoZSBvYmosIGFuZCB0aGVuIHJldHVybnMgb2JqLlxuICAvLyBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiwgaW5cbiAgLy8gb3JkZXIgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIGludGVybWVkaWF0ZSByZXN1bHRzIHdpdGhpbiB0aGUgY2hhaW4uXG4gIF8udGFwID0gZnVuY3Rpb24ob2JqLCBpbnRlcmNlcHRvcikge1xuICAgIGludGVyY2VwdG9yKG9iaik7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZiBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5pc01hdGNoID0gZnVuY3Rpb24ob2JqZWN0LCBhdHRycykge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKGF0dHJzKSwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gIWxlbmd0aDtcbiAgICB2YXIgb2JqID0gT2JqZWN0KG9iamVjdCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoYXR0cnNba2V5XSAhPT0gb2JqW2tleV0gfHwgIShrZXkgaW4gb2JqKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuXG4gIC8vIEludGVybmFsIHJlY3Vyc2l2ZSBjb21wYXJpc29uIGZ1bmN0aW9uIGZvciBgaXNFcXVhbGAuXG4gIHZhciBlcSwgZGVlcEVxO1xuICBlcSA9IGZ1bmN0aW9uKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLlxuICAgIC8vIFNlZSB0aGUgW0hhcm1vbnkgYGVnYWxgIHByb3Bvc2FsXShodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OmVnYWwpLlxuICAgIGlmIChhID09PSBiKSByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGI7XG4gICAgLy8gYG51bGxgIG9yIGB1bmRlZmluZWRgIG9ubHkgZXF1YWwgdG8gaXRzZWxmIChzdHJpY3QgY29tcGFyaXNvbikuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgIGlmIChhICE9PSBhKSByZXR1cm4gYiAhPT0gYjtcbiAgICAvLyBFeGhhdXN0IHByaW1pdGl2ZSBjaGVja3NcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBhO1xuICAgIGlmICh0eXBlICE9PSAnZnVuY3Rpb24nICYmIHR5cGUgIT09ICdvYmplY3QnICYmIHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGRlZXBFcShhLCBiLCBhU3RhY2ssIGJTdGFjayk7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgZGVlcEVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBVbndyYXAgYW55IHdyYXBwZWQgb2JqZWN0cy5cbiAgICBpZiAoYSBpbnN0YW5jZW9mIF8pIGEgPSBhLl93cmFwcGVkO1xuICAgIGlmIChiIGluc3RhbmNlb2YgXykgYiA9IGIuX3dyYXBwZWQ7XG4gICAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy5cbiAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTtcbiAgICBpZiAoY2xhc3NOYW1lICE9PSB0b1N0cmluZy5jYWxsKGIpKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgIC8vIFN0cmluZ3MsIG51bWJlcnMsIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGRhdGVzLCBhbmQgYm9vbGVhbnMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxuICAgICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgIC8vIFJlZ0V4cHMgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncyBmb3IgY29tcGFyaXNvbiAoTm90ZTogJycgKyAvYS9pID09PSAnL2EvaScpXG4gICAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgICAvLyBQcmltaXRpdmVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdCB3cmFwcGVycyBhcmUgZXF1aXZhbGVudDsgdGh1cywgYFwiNVwiYCBpc1xuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKFwiNVwiKWAuXG4gICAgICAgIHJldHVybiAnJyArIGEgPT09ICcnICsgYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgICAgIC8vIE9iamVjdChOYU4pIGlzIGVxdWl2YWxlbnQgdG8gTmFOLlxuICAgICAgICBpZiAoK2EgIT09ICthKSByZXR1cm4gK2IgIT09ICtiO1xuICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiO1xuICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpclxuICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXG4gICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgICAgcmV0dXJuICthID09PSArYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgU3ltYm9sXSc6XG4gICAgICAgIHJldHVybiBTeW1ib2xQcm90by52YWx1ZU9mLmNhbGwoYSkgPT09IFN5bWJvbFByb3RvLnZhbHVlT2YuY2FsbChiKTtcbiAgICB9XG5cbiAgICB2YXIgYXJlQXJyYXlzID0gY2xhc3NOYW1lID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIGlmICghYXJlQXJyYXlzKSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzIG9yIGBBcnJheWBzXG4gICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgYUN0b3IgaW5zdGFuY2VvZiBhQ3RvciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uaXNGdW5jdGlvbihiQ3RvcikgJiYgYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKCdjb25zdHJ1Y3RvcicgaW4gYSAmJiAnY29uc3RydWN0b3InIGluIGIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuXG4gICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cbiAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW107XG4gICAgYlN0YWNrID0gYlN0YWNrIHx8IFtdO1xuICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG5cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICBpZiAoYXJlQXJyYXlzKSB7XG4gICAgICAvLyBDb21wYXJlIGFycmF5IGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeS5cbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKCFlcShhW2xlbmd0aF0sIGJbbGVuZ3RoXSwgYVN0YWNrLCBiU3RhY2spKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgdmFyIGtleXMgPSBfLmtleXMoYSksIGtleTtcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgaWYgKF8ua2V5cyhiKS5sZW5ndGggIT09IGxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxuICAgICAgICBrZXkgPSBrZXlzW2xlbmd0aF07XG4gICAgICAgIGlmICghKGhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBhU3RhY2ssIGJTdGFjaykpKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJlbW92ZSB0aGUgZmlyc3Qgb2JqZWN0IGZyb20gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wb3AoKTtcbiAgICBiU3RhY2sucG9wKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gUGVyZm9ybSBhIGRlZXAgY29tcGFyaXNvbiB0byBjaGVjayBpZiB0d28gb2JqZWN0cyBhcmUgZXF1YWwuXG4gIF8uaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gZXEoYSwgYik7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiBhcnJheSwgc3RyaW5nLCBvciBvYmplY3QgZW1wdHk/XG4gIC8vIEFuIFwiZW1wdHlcIiBvYmplY3QgaGFzIG5vIGVudW1lcmFibGUgb3duLXByb3BlcnRpZXMuXG4gIF8uaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikgJiYgKF8uaXNBcnJheShvYmopIHx8IF8uaXNTdHJpbmcob2JqKSB8fCBfLmlzQXJndW1lbnRzKG9iaikpKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDtcbiAgICByZXR1cm4gXy5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBET00gZWxlbWVudD9cbiAgXy5pc0VsZW1lbnQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gISEob2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMSk7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhbiBhcnJheT9cbiAgLy8gRGVsZWdhdGVzIHRvIEVDTUE1J3MgbmF0aXZlIEFycmF5LmlzQXJyYXlcbiAgXy5pc0FycmF5ID0gbmF0aXZlSXNBcnJheSB8fCBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgYW4gb2JqZWN0P1xuICBfLmlzT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2Ygb2JqO1xuICAgIHJldHVybiB0eXBlID09PSAnZnVuY3Rpb24nIHx8IHR5cGUgPT09ICdvYmplY3QnICYmICEhb2JqO1xuICB9O1xuXG4gIC8vIEFkZCBzb21lIGlzVHlwZSBtZXRob2RzOiBpc0FyZ3VtZW50cywgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0RhdGUsIGlzUmVnRXhwLCBpc0Vycm9yLCBpc01hcCwgaXNXZWFrTWFwLCBpc1NldCwgaXNXZWFrU2V0LlxuICBfLmVhY2goWydBcmd1bWVudHMnLCAnRnVuY3Rpb24nLCAnU3RyaW5nJywgJ051bWJlcicsICdEYXRlJywgJ1JlZ0V4cCcsICdFcnJvcicsICdTeW1ib2wnLCAnTWFwJywgJ1dlYWtNYXAnLCAnU2V0JywgJ1dlYWtTZXQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCAnICsgbmFtZSArICddJztcbiAgICB9O1xuICB9KTtcblxuICAvLyBEZWZpbmUgYSBmYWxsYmFjayB2ZXJzaW9uIG9mIHRoZSBtZXRob2QgaW4gYnJvd3NlcnMgKGFoZW0sIElFIDwgOSksIHdoZXJlXG4gIC8vIHRoZXJlIGlzbid0IGFueSBpbnNwZWN0YWJsZSBcIkFyZ3VtZW50c1wiIHR5cGUuXG4gIGlmICghXy5pc0FyZ3VtZW50cyhhcmd1bWVudHMpKSB7XG4gICAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIGhhcyhvYmosICdjYWxsZWUnKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLiBXb3JrIGFyb3VuZCBzb21lIHR5cGVvZiBidWdzIGluIG9sZCB2OCxcbiAgLy8gSUUgMTEgKCMxNjIxKSwgU2FmYXJpIDggKCMxOTI5KSwgYW5kIFBoYW50b21KUyAoIzIyMzYpLlxuICB2YXIgbm9kZWxpc3QgPSByb290LmRvY3VtZW50ICYmIHJvb3QuZG9jdW1lbnQuY2hpbGROb2RlcztcbiAgaWYgKHR5cGVvZiAvLi8gIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgSW50OEFycmF5ICE9ICdvYmplY3QnICYmIHR5cGVvZiBub2RlbGlzdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgXy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nIHx8IGZhbHNlO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG4gIF8uaXNGaW5pdGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gIV8uaXNTeW1ib2wob2JqKSAmJiBpc0Zpbml0ZShvYmopICYmICFpc05hTihwYXJzZUZsb2F0KG9iaikpO1xuICB9O1xuXG4gIC8vIElzIHRoZSBnaXZlbiB2YWx1ZSBgTmFOYD9cbiAgXy5pc05hTiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfLmlzTnVtYmVyKG9iaikgJiYgaXNOYU4ob2JqKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgYm9vbGVhbj9cbiAgXy5pc0Jvb2xlYW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UgfHwgdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsP1xuICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IG51bGw7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/XG4gIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7XG4gIH07XG5cbiAgLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseVxuICAvLyBvbiBpdHNlbGYgKGluIG90aGVyIHdvcmRzLCBub3Qgb24gYSBwcm90b3R5cGUpLlxuICBfLmhhcyA9IGZ1bmN0aW9uKG9iaiwgcGF0aCkge1xuICAgIGlmICghXy5pc0FycmF5KHBhdGgpKSB7XG4gICAgICByZXR1cm4gaGFzKG9iaiwgcGF0aCk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcGF0aFtpXTtcbiAgICAgIGlmIChvYmogPT0gbnVsbCB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqID0gb2JqW2tleV07XG4gICAgfVxuICAgIHJldHVybiAhIWxlbmd0aDtcbiAgfTtcblxuICAvLyBVdGlsaXR5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHNcbiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdGVlcy5cbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8vIFByZWRpY2F0ZS1nZW5lcmF0aW5nIGZ1bmN0aW9ucy4gT2Z0ZW4gdXNlZnVsIG91dHNpZGUgb2YgVW5kZXJzY29yZS5cbiAgXy5jb25zdGFudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gIH07XG5cbiAgXy5ub29wID0gZnVuY3Rpb24oKXt9O1xuXG4gIC8vIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIHBhc3NlZCBhbiBvYmplY3QsIHdpbGwgdHJhdmVyc2UgdGhhdCBvYmplY3TigJlzXG4gIC8vIHByb3BlcnRpZXMgZG93biB0aGUgZ2l2ZW4gYHBhdGhgLCBzcGVjaWZpZWQgYXMgYW4gYXJyYXkgb2Yga2V5cyBvciBpbmRleGVzLlxuICBfLnByb3BlcnR5ID0gZnVuY3Rpb24ocGF0aCkge1xuICAgIGlmICghXy5pc0FycmF5KHBhdGgpKSB7XG4gICAgICByZXR1cm4gc2hhbGxvd1Byb3BlcnR5KHBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gZGVlcEdldChvYmosIHBhdGgpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gR2VuZXJhdGVzIGEgZnVuY3Rpb24gZm9yIGEgZ2l2ZW4gb2JqZWN0IHRoYXQgcmV0dXJucyBhIGdpdmVuIHByb3BlcnR5LlxuICBfLnByb3BlcnR5T2YgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpe307XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gIV8uaXNBcnJheShwYXRoKSA/IG9ialtwYXRoXSA6IGRlZXBHZXQob2JqLCBwYXRoKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBwcmVkaWNhdGUgZm9yIGNoZWNraW5nIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZlxuICAvLyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5tYXRjaGVyID0gXy5tYXRjaGVzID0gZnVuY3Rpb24oYXR0cnMpIHtcbiAgICBhdHRycyA9IF8uZXh0ZW5kT3duKHt9LCBhdHRycyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIF8uaXNNYXRjaChvYmosIGF0dHJzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJ1biBhIGZ1bmN0aW9uICoqbioqIHRpbWVzLlxuICBfLnRpbWVzID0gZnVuY3Rpb24obiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgYWNjdW0gPSBBcnJheShNYXRoLm1heCgwLCBuKSk7XG4gICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgYWNjdW1baV0gPSBpdGVyYXRlZShpKTtcbiAgICByZXR1cm4gYWNjdW07XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBtaW4gYW5kIG1heCAoaW5jbHVzaXZlKS5cbiAgXy5yYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgIGlmIChtYXggPT0gbnVsbCkge1xuICAgICAgbWF4ID0gbWluO1xuICAgICAgbWluID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIG1pbiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG4gIH07XG5cbiAgLy8gQSAocG9zc2libHkgZmFzdGVyKSB3YXkgdG8gZ2V0IHRoZSBjdXJyZW50IHRpbWVzdGFtcCBhcyBhbiBpbnRlZ2VyLlxuICBfLm5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfTtcblxuICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZXNjYXBlTWFwID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjeDI3OycsXG4gICAgJ2AnOiAnJiN4NjA7J1xuICB9O1xuICB2YXIgdW5lc2NhcGVNYXAgPSBfLmludmVydChlc2NhcGVNYXApO1xuXG4gIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi5cbiAgdmFyIGNyZWF0ZUVzY2FwZXIgPSBmdW5jdGlvbihtYXApIHtcbiAgICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWFwW21hdGNoXTtcbiAgICB9O1xuICAgIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZC5cbiAgICB2YXIgc291cmNlID0gJyg/OicgKyBfLmtleXMobWFwKS5qb2luKCd8JykgKyAnKSc7XG4gICAgdmFyIHRlc3RSZWdleHAgPSBSZWdFeHAoc291cmNlKTtcbiAgICB2YXIgcmVwbGFjZVJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UsICdnJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gc3RyaW5nID09IG51bGwgPyAnJyA6ICcnICsgc3RyaW5nO1xuICAgICAgcmV0dXJuIHRlc3RSZWdleHAudGVzdChzdHJpbmcpID8gc3RyaW5nLnJlcGxhY2UocmVwbGFjZVJlZ2V4cCwgZXNjYXBlcikgOiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgXy5lc2NhcGUgPSBjcmVhdGVFc2NhcGVyKGVzY2FwZU1hcCk7XG4gIF8udW5lc2NhcGUgPSBjcmVhdGVFc2NhcGVyKHVuZXNjYXBlTWFwKTtcblxuICAvLyBUcmF2ZXJzZXMgdGhlIGNoaWxkcmVuIG9mIGBvYmpgIGFsb25nIGBwYXRoYC4gSWYgYSBjaGlsZCBpcyBhIGZ1bmN0aW9uLCBpdFxuICAvLyBpcyBpbnZva2VkIHdpdGggaXRzIHBhcmVudCBhcyBjb250ZXh0LiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZmluYWxcbiAgLy8gY2hpbGQsIG9yIGBmYWxsYmFja2AgaWYgYW55IGNoaWxkIGlzIHVuZGVmaW5lZC5cbiAgXy5yZXN1bHQgPSBmdW5jdGlvbihvYmosIHBhdGgsIGZhbGxiYWNrKSB7XG4gICAgaWYgKCFfLmlzQXJyYXkocGF0aCkpIHBhdGggPSBbcGF0aF07XG4gICAgdmFyIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKGZhbGxiYWNrKSA/IGZhbGxiYWNrLmNhbGwob2JqKSA6IGZhbGxiYWNrO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcHJvcCA9IG9iaiA9PSBudWxsID8gdm9pZCAwIDogb2JqW3BhdGhbaV1dO1xuICAgICAgaWYgKHByb3AgPT09IHZvaWQgMCkge1xuICAgICAgICBwcm9wID0gZmFsbGJhY2s7XG4gICAgICAgIGkgPSBsZW5ndGg7IC8vIEVuc3VyZSB3ZSBkb24ndCBjb250aW51ZSBpdGVyYXRpbmcuXG4gICAgICB9XG4gICAgICBvYmogPSBfLmlzRnVuY3Rpb24ocHJvcCkgPyBwcm9wLmNhbGwob2JqKSA6IHByb3A7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS5cbiAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cbiAgdmFyIGlkQ291bnRlciA9IDA7XG4gIF8udW5pcXVlSWQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xuICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkO1xuICB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZVxuICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICBldmFsdWF0ZTogLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICBpbnRlcnBvbGF0ZTogLzwlPShbXFxzXFxTXSs/KSU+L2csXG4gICAgZXNjYXBlOiAvPCUtKFtcXHNcXFNdKz8pJT4vZ1xuICB9O1xuXG4gIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW5cbiAgLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xuICAvLyBndWFyYW50ZWVkIG5vdCB0byBtYXRjaC5cbiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87XG5cbiAgLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGFcbiAgLy8gc3RyaW5nIGxpdGVyYWwuXG4gIHZhciBlc2NhcGVzID0ge1xuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ3UyMDI5J1xuICB9O1xuXG4gIHZhciBlc2NhcGVSZWdFeHAgPSAvXFxcXHwnfFxccnxcXG58XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgdmFyIGVzY2FwZUNoYXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiAnXFxcXCcgKyBlc2NhcGVzW21hdGNoXTtcbiAgfTtcblxuICAvLyBKYXZhU2NyaXB0IG1pY3JvLXRlbXBsYXRpbmcsIHNpbWlsYXIgdG8gSm9obiBSZXNpZydzIGltcGxlbWVudGF0aW9uLlxuICAvLyBVbmRlcnNjb3JlIHRlbXBsYXRpbmcgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzIHdoaXRlc3BhY2UsXG4gIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLlxuICAvLyBOQjogYG9sZFNldHRpbmdzYCBvbmx5IGV4aXN0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBzZXR0aW5ncywgb2xkU2V0dGluZ3MpIHtcbiAgICBpZiAoIXNldHRpbmdzICYmIG9sZFNldHRpbmdzKSBzZXR0aW5ncyA9IG9sZFNldHRpbmdzO1xuICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG5cbiAgICAvLyBDb21iaW5lIGRlbGltaXRlcnMgaW50byBvbmUgcmVndWxhciBleHByZXNzaW9uIHZpYSBhbHRlcm5hdGlvbi5cbiAgICB2YXIgbWF0Y2hlciA9IFJlZ0V4cChbXG4gICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuZXZhbHVhdGUgfHwgbm9NYXRjaCkuc291cmNlXG4gICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpO1xuXG4gICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCBlc2NhcGluZyBzdHJpbmcgbGl0ZXJhbHMgYXBwcm9wcmlhdGVseS5cbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICAgIHRleHQucmVwbGFjZShtYXRjaGVyLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlLCBpbnRlcnBvbGF0ZSwgZXZhbHVhdGUsIG9mZnNldCkge1xuICAgICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShlc2NhcGVSZWdFeHAsIGVzY2FwZUNoYXIpO1xuICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBlc2NhcGUgKyBcIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xcbidcIjtcbiAgICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBpbnRlcnBvbGF0ZSArIFwiKSk9PW51bGw/Jyc6X190KStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGV2YWx1YXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZSArIFwiXFxuX19wKz0nXCI7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkb2JlIFZNcyBuZWVkIHRoZSBtYXRjaCByZXR1cm5lZCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IG9mZnNldC5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbiAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS5cbiAgICBpZiAoIXNldHRpbmdzLnZhcmlhYmxlKSBzb3VyY2UgPSAnd2l0aChvYmp8fHt9KXtcXG4nICsgc291cmNlICsgJ31cXG4nO1xuXG4gICAgc291cmNlID0gXCJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sXCIgK1xuICAgICAgXCJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xcblwiICtcbiAgICAgIHNvdXJjZSArICdyZXR1cm4gX19wO1xcbic7XG5cbiAgICB2YXIgcmVuZGVyO1xuICAgIHRyeSB7XG4gICAgICByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgdmFyIHRlbXBsYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pO1xuICAgIH07XG5cbiAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBzb3VyY2UgYXMgYSBjb252ZW5pZW5jZSBmb3IgcHJlY29tcGlsYXRpb24uXG4gICAgdmFyIGFyZ3VtZW50ID0gc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaic7XG4gICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyBhcmd1bWVudCArICcpe1xcbicgKyBzb3VyY2UgKyAnfSc7XG5cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH07XG5cbiAgLy8gQWRkIGEgXCJjaGFpblwiIGZ1bmN0aW9uLiBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBfKG9iaik7XG4gICAgaW5zdGFuY2UuX2NoYWluID0gdHJ1ZTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG5cbiAgLy8gT09QXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdFxuICAvLyBjYW4gYmUgdXNlZCBPTy1zdHlsZS4gVGhpcyB3cmFwcGVyIGhvbGRzIGFsdGVyZWQgdmVyc2lvbnMgb2YgYWxsIHRoZVxuICAvLyB1bmRlcnNjb3JlIGZ1bmN0aW9ucy4gV3JhcHBlZCBvYmplY3RzIG1heSBiZSBjaGFpbmVkLlxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgdmFyIGNoYWluUmVzdWx0ID0gZnVuY3Rpb24oaW5zdGFuY2UsIG9iaikge1xuICAgIHJldHVybiBpbnN0YW5jZS5fY2hhaW4gPyBfKG9iaikuY2hhaW4oKSA6IG9iajtcbiAgfTtcblxuICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubWl4aW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICBfLmVhY2goXy5mdW5jdGlvbnMob2JqKSwgZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBfW25hbWVdID0gb2JqW25hbWVdO1xuICAgICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbdGhpcy5fd3JhcHBlZF07XG4gICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIGZ1bmMuYXBwbHkoXywgYXJncykpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gXztcbiAgfTtcblxuICAvLyBBZGQgYWxsIG9mIHRoZSBVbmRlcnNjb3JlIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlciBvYmplY3QuXG4gIF8ubWl4aW4oXyk7XG5cbiAgLy8gQWRkIGFsbCBtdXRhdG9yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbiAgXy5lYWNoKFsncG9wJywgJ3B1c2gnLCAncmV2ZXJzZScsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9iaiA9IHRoaXMuX3dyYXBwZWQ7XG4gICAgICBtZXRob2QuYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKChuYW1lID09PSAnc2hpZnQnIHx8IG5hbWUgPT09ICdzcGxpY2UnKSAmJiBvYmoubGVuZ3RoID09PSAwKSBkZWxldGUgb2JqWzBdO1xuICAgICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIG1ldGhvZC5hcHBseSh0aGlzLl93cmFwcGVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBFeHRyYWN0cyB0aGUgcmVzdWx0IGZyb20gYSB3cmFwcGVkIGFuZCBjaGFpbmVkIG9iamVjdC5cbiAgXy5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JhcHBlZDtcbiAgfTtcblxuICAvLyBQcm92aWRlIHVud3JhcHBpbmcgcHJveHkgZm9yIHNvbWUgbWV0aG9kcyB1c2VkIGluIGVuZ2luZSBvcGVyYXRpb25zXG4gIC8vIHN1Y2ggYXMgYXJpdGhtZXRpYyBhbmQgSlNPTiBzdHJpbmdpZmljYXRpb24uXG4gIF8ucHJvdG90eXBlLnZhbHVlT2YgPSBfLnByb3RvdHlwZS50b0pTT04gPSBfLnByb3RvdHlwZS52YWx1ZTtcblxuICBfLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5fd3JhcHBlZCk7XG4gIH07XG5cbiAgLy8gQU1EIHJlZ2lzdHJhdGlvbiBoYXBwZW5zIGF0IHRoZSBlbmQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBBTUQgbG9hZGVyc1xuICAvLyB0aGF0IG1heSBub3QgZW5mb3JjZSBuZXh0LXR1cm4gc2VtYW50aWNzIG9uIG1vZHVsZXMuIEV2ZW4gdGhvdWdoIGdlbmVyYWxcbiAgLy8gcHJhY3RpY2UgZm9yIEFNRCByZWdpc3RyYXRpb24gaXMgdG8gYmUgYW5vbnltb3VzLCB1bmRlcnNjb3JlIHJlZ2lzdGVyc1xuICAvLyBhcyBhIG5hbWVkIG1vZHVsZSBiZWNhdXNlLCBsaWtlIGpRdWVyeSwgaXQgaXMgYSBiYXNlIGxpYnJhcnkgdGhhdCBpc1xuICAvLyBwb3B1bGFyIGVub3VnaCB0byBiZSBidW5kbGVkIGluIGEgdGhpcmQgcGFydHkgbGliLCBidXQgbm90IGJlIHBhcnQgb2ZcbiAgLy8gYW4gQU1EIGxvYWQgcmVxdWVzdC4gVGhvc2UgY2FzZXMgY291bGQgZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBhblxuICAvLyBhbm9ueW1vdXMgZGVmaW5lKCkgaXMgY2FsbGVkIG91dHNpZGUgb2YgYSBsb2FkZXIgcmVxdWVzdC5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKCd1bmRlcnNjb3JlJywgW10sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbn0oKSk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiIsImltcG9ydCBUb25lIGZyb20gXCJUb25lXCI7XG5cbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuXG52YXIgZGVmYXVsdF9raXQgPSByZXF1aXJlKCcuLi9zdGF0aWMvYXNzZXRzL2tpdHMvZGVmYXVsdF9raXQuanNvbicpO1xudmFyIGhpcF9ob3Bfa2l0ID0gcmVxdWlyZSgnLi4vc3RhdGljL2Fzc2V0cy9raXRzL2hpcF9ob3Bfa2l0Lmpzb24nKTtcblxuTmV4dXMuY29udGV4dCA9IFRvbmUuY29udGV4dDtcblxudmFyIGtleXMgPSBuZXcgVG9uZS5QbGF5ZXJzKFxuXHR0b191cmxfbWFwKGRlZmF1bHRfa2l0LnNhbXBsZXMpLFxuXHR7XG5cdFx0XCJvbmxvYWRcIjogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBUT0RPOiBBY3RpdmF0ZSBVSSF3XG5cdFx0fSxcblx0XHRcInZvbHVtZVwiOiAtMTBcblx0fVxuKS50b01hc3RlcigpO1xuXG52YXIgc2VxdWVuY2VyID0gbmV3IE5leHVzLlNlcXVlbmNlcignI3NlcXVlbmNlcicsIHtcblx0J3NpemUnOiBbNDAwLCAxMDBdLFxuXHQnbW9kZSc6ICd0b2dnbGUnLFxuXHQncm93cyc6IDQsXG5cdCdjb2x1bW5zJzogMTZcbn0pO1xuXG52YXIgY2xlYXJfcGF0dGVybl9idG4gPSBuZXcgTmV4dXMuQnV0dG9uKCcjY2xlYXItcGF0dGVybicsIHtcblx0J3NpemUnOiBbMjAsIDIwXSxcblx0J21vZGUnOiAnYWZ0ZXJ0b3VjaCcsXG5cdCdzdGF0ZSc6IGZhbHNlXG59KTtcblxudmFyIHJhbmRvbV9wYXR0ZXJuX2J0biA9IG5ldyBOZXh1cy5CdXR0b24oJyNyYW5kb20tcGF0dGVybicsIHtcblx0J3NpemUnOiBbMjAsIDIwXSxcblx0J21vZGUnOiAnYWZ0ZXJ0b3VjaCcsXG5cdCdzdGF0ZSc6IGZhbHNlXG59KTtcblxudmFyIGhpcF9ob3BfcGF0dGVybl9idG4gPSBuZXcgTmV4dXMuVGV4dEJ1dHRvbihcIiNoaXAtaG9wLXBhdHRlcm5cIiwge1xuXHQnc2l6ZSc6IFsxNTAsIDUwXSxcblx0J3N0YXRlJzogZmFsc2UsXG5cdCd0ZXh0JzogJ0hpcEhvcCEnXG59KTtcblxuY2xlYXJfcGF0dGVybl9idG4ub24oJ2NoYW5nZScsIGZ1bmN0aW9uKHYpIHtcblx0c2VxdWVuY2VyLm1hdHJpeC5wb3B1bGF0ZS5hbGwoMCk7XG59KTtcblxucmFuZG9tX3BhdHRlcm5fYnRuLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbih2KSB7XG5cdHNlcXVlbmNlci5tYXRyaXgucG9wdWxhdGUuYWxsKCBbMC4yLCAwLjUsIDAuMiwgMC44XSApO1xufSlcblxuaGlwX2hvcF9wYXR0ZXJuX2J0bi5vbignY2hhbmdlJywgZnVuY3Rpb24odikge1xuXHQvLyBUT0RPOiBMb2FkIGhpcCBob3AgcGF0dGVybiFcblx0a2V5cy5kaXNwb3NlKCk7XG59KTtcblxuc2VxdWVuY2VyLm9uKCdzdGVwJywgZnVuY3Rpb24odikge1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgdi5sZW5ndGg7IGkrKykge1xuXHRcdGlmKHZbaV0gPT0gMSkge1xuXHRcdFx0Ly8gY2VsbCBpcyBhbGl2ZSFcblx0XHRcdGtleXMuZ2V0KGkpLnN0YXJ0KCk7XG5cdFx0fVxuXHR9XG59KTtcblxuc2VxdWVuY2VyLnN0YXJ0KCk7XG5Ub25lLlRyYW5zcG9ydC5zdGFydCgpO1xuXG5mdW5jdGlvbiB0b191cmxfbWFwKGFycmF5KSB7XG5cdGxldCBpZHggPSAwO1xuXHRsZXQgbWFwID0gW11cblxuXHR3aGlsZShpZHggPCBhcnJheS5sZW5ndGgpIHtcblx0XHRtYXBbaWR4XSA9IGFycmF5W2lkeF07XG5cdFx0aWR4Kys7XG5cdH1cblxuXHRyZXR1cm4gbWFwO1xufVxuXG4iXSwic291cmNlUm9vdCI6IiJ9